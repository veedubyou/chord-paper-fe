{"version":3,"sources":["assets/img/symphony.png","components/TextInput.tsx","common/Whitespace.ts","components/ChordSymbol.tsx","components/Block.tsx","common/ChordModel/Collection.ts","common/LyricTokenizer.ts","common/ChordModel/ChordBlock.ts","components/ChordEditLine.tsx","components/Line.tsx","common/ChordModel/ChordLinePatcher.ts","common/ChordModel/ChordLine.ts","components/NewLine.tsx","components/ChordPaperBody.tsx","components/EditableTypography.tsx","components/Header.tsx","common/ChordModel/ChordSong.ts","components/ChordPaperMenu.tsx","components/ChordPaper.tsx","NeverGonnaGiveYouUp.ts","components/SideMenu.tsx","components/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TextInput","props","useState","children","value","setValue","inputRef","React","createRef","theme","useTheme","finish","newValue","onFinish","TextField","autoFocus","variant","inputProps","undefined","typography","style","padding","fontSize","opacity","background","grey","width","browserInputProps","onBlur","onChange","event","target","onKeyDown","key","specialBackspace","metaKey","ctrlKey","selectionAtBeginning","current","selectionStart","selectionEnd","onSpecialBackspace","onPaste","payload","clipboardData","getData","linesOfText","split","length","onPasteOverflow","preventDefault","pasteContent","beforeSelectionStr","afterSelectionStr","slice","newPasteLines","composeMultilinePaste","fullWidth","data-testid","isWhitespace","s","test","inflateIfEmpty","ChordTypography","withStyles","root","whiteSpace","color","palette","secondary","main","cursor","fontFamily","Typography","ChordSymbol","display","chord","endsWith","formattedChord","MusicNoteRoundedIcon","UnstyledMusicNoteRoundedIcon","Tooltip","tooltip","fade","light","margin","UnstyledTooltip","WordTarget","primary","SpaceTarget","backgroundColor","Block","editing","setEditing","lyricTokens","chordBlock","chordRow","clickHandler","tokenIndex","onBlockSplit","stopPropagation","lyricBlocks","map","lyricToken","index","lyric","lyricBlock","typographyProps","chordButton","Button","onClick","title","placement","disableFocusListener","interactive","Box","newChord","onChordChange","Grid","container","direction","component","item","stringifyIgnoreID","obj","JSON","stringify","Collection","elements","this","id","findIndex","elem","Error","idable","indexOfBefore","indexOf","newElem","splice","tokenize","lineOfLyrics","matches","match","ChordBlockValidator","iots","type","ChordBlock","shortid","generate","splitIndex","tokens","prevBlockLyricTokens","thisBlockLyricTokens","prevBlock","join","validatedFields","jsonStr","result","parseJSON","isLeft","jsonObj","right","validationResult","decode","left","iconColorStyle","red","BackspaceIcon","UnstyledBackspaceIcon","contained","dark","UnstyledButton","HighlightableBox","ChordEditLine","chordBlocks","chordLine","chordChangeHandler","setChord","onChangeLine","blockSplitHandler","splitBlock","blocks","onRemove","onEdit","Line","removed","setRemoved","startEdit","finishEdit","newLyrics","replaceLyrics","addHandler","onAddLine","removeHandler","onRemoveLine","setTimeout","pasteOverflowHandler","overflowContent","specialBackspaceHandler","onMergeWithPreviousLine","nonEditableLine","onAdd","lyrics","position","bottom","editLyricsInput","yeetDirection","Slide","in","timeout","borderBottom","borderColor","differ","dmp","DiffMatchPatch","diffTimeout","matchThreshold","ChordLineIterator","currBlockIndex","currCharIndex","blockBuffer","prependLyrics","currentBlock","charAt","skipChar","currentChar","nextChar","insertChar","atBlockBoundary","prevBlockIndex","deleteChar","i","normalizeBlocks","replaceChordLineLyrics","diffs","diff_main","diff_cleanupSemanticLossless","iterator","diff","diffOperation","diffChar","DiffOperation","DIFF_EQUAL","skip","DIFF_INSERT","insert","DIFF_DELETE","delete","newBlocks","block","push","removeOrphanedBlocksWithNoChords","lastIndex","addSpacesToOrphanedBlocks","ChordLineValidator","ChordLine","newPrevBlock","clone","fromValidatedFields","HighlightableGrid","Divider","UnstyledDivider","AddCircleOutlineIcon","UnstyledAddCircleOutlineIcon","NewLine","justify","minHeight","spacing","Paper","UnstyledPaper","ChordPaperBody","addLineToTop","newLine","song","addBeginning","notifySongChanged","addLine","addAfter","removeLine","remove","changeLine","pasteOverflowFromLine","newChordLines","newLyricLine","fromLyrics","mergeWithPreviousLine","mergeLineWithPrevious","onSongChanged","elevation","xs","lines","chordLines","flatMap","line","firstNewLine","PlaceholderTypography","EditableTypography","onValueChange","editableLine","placeholder","Header","leftHeader","newHeardFrom","asHeardFrom","midHeader","align","newTitle","rightHeader","newComposer","composedBy","newPerformer","performedBy","paddingTop","paddingLeft","paddingRight","SongMetadataValidator","ChordSongValidator","metadata","ChordSong","prevLine","lastBlockIndex","currLine","newPerformedBy","newComposedBy","newAsHeardFrom","chordLineValidatedFields","lyricLines","lyricLine","SpeedDial","UnstyledSpeedDial","ChordPaperMenu","open","setOpen","enqueueSnackbar","useSnackbar","pickFileHandler","fileList","files","file","fileReader","FileReader","onload","ev","ArrayBuffer","results","deserialize","onLoad","readAsText","loadAction","a","inputElem","document","createElement","addEventListener","click","icon","SpeedDialIcon","onOpen","onClose","ariaLabel","SpeedDialAction","tooltipTitle","blob","Blob","serialize","objectURL","URL","createObjectURL","anchor","download","href","revokeObjectURL","onNewSong","RootPaper","minWidth","ChordPaper","initialSong","setSong","songChangeHandler","updatedSong","loadedSong","chords","NeverGonnaGiveYouUp","assembleLine","arr","tokenSize","subArr","chunk","lyricChunk","Math","floor","random","TitleName","ListItem","UnstyledListItem","SideMenu","linkStyle","textDecoration","Drawer","List","to","button","ListItemText","primaryTypographyProps","About","AppLayout","backgroundImage","WoodBackground","App","createMuiTheme","contrastText","fontWeightRegular","routeSwitches","exact","path","ThemeProvider","basename","process","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4145bfb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/symphony.fcb1692c.png\";","import {\n    Theme,\n    useTheme,\n    InputBaseComponentProps,\n    TypographyVariant,\n    TextField,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { CSSProperties } from \"@material-ui/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\ninterface TextInputProps {\n    children: string;\n    onFinish?: (newValue: string) => void;\n    onSpecialBackspace?: () => void;\n    onPasteOverflow?: (overflowContent: string[]) => void;\n    width?: string;\n    variant?: TypographyVariant;\n}\n\nconst TextInput: React.FC<TextInputProps> = (\n    props: TextInputProps\n): JSX.Element => {\n    const [value, setValue] = useState<string>(props.children);\n    const inputRef: React.RefObject<HTMLInputElement> = React.createRef();\n    const theme: Theme = useTheme();\n\n    const updateValue = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => {\n        setValue(event.target.value);\n    };\n\n    const keyDownHandler = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"Enter\") {\n            finish(value);\n            return;\n        }\n\n        const specialBackspace: boolean =\n            event.key === \"Backspace\" && (event.metaKey || event.ctrlKey);\n        const selectionAtBeginning: boolean =\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0;\n\n        if (\n            specialBackspace &&\n            selectionAtBeginning &&\n            props.onSpecialBackspace\n        ) {\n            props.onSpecialBackspace();\n        }\n    };\n\n    const finish = (newValue: string) => {\n        if (props.onFinish) {\n            props.onFinish(newValue);\n        }\n    };\n\n    const blurHandler = () => {\n        finish(value);\n    };\n\n    const composeMultilinePaste = (\n        pasteContent: string[]\n    ): [string, string[]] => {\n        let beforeSelectionStr: string;\n        let afterSelectionStr: string;\n        if (\n            inputRef.current === null ||\n            inputRef.current.selectionStart === null ||\n            inputRef.current.selectionEnd === null\n        ) {\n            beforeSelectionStr = value;\n            afterSelectionStr = \"\";\n        } else {\n            beforeSelectionStr = value.slice(\n                0,\n                inputRef.current.selectionStart\n            );\n            afterSelectionStr = value.slice(inputRef.current.selectionEnd);\n        }\n\n        const newValue = beforeSelectionStr + pasteContent[0];\n\n        const newPasteLines = pasteContent.slice(1);\n        const lastIndex = newPasteLines.length - 1;\n        newPasteLines[lastIndex] += afterSelectionStr;\n\n        return [newValue, newPasteLines];\n    };\n\n    const pasteHandler = (event: React.ClipboardEvent<HTMLDivElement>) => {\n        const payload = event.clipboardData.getData(\"text/plain\");\n\n        if (payload === \"\") {\n            return;\n        }\n\n        const linesOfText: string[] = payload.split(\"\\n\");\n\n        if (linesOfText.length > 1 && props.onPasteOverflow !== undefined) {\n            event.preventDefault();\n\n            const [newValue, newPasteLines] = composeMultilinePaste(\n                linesOfText\n            );\n\n            setValue(newValue);\n            finish(newValue);\n            props.onPasteOverflow(newPasteLines);\n        }\n    };\n\n    const browserInputProps = () => {\n        let variant: CSSProperties | undefined = undefined;\n        if (props.variant !== undefined) {\n            variant = theme?.typography?.[props.variant];\n        }\n\n        const padding: string | number | undefined =\n            variant?.padding !== undefined ? variant.padding : 0;\n        const fontSize: string | number | undefined = variant?.fontSize;\n\n        const inputProps: InputBaseComponentProps = {\n            style: {\n                padding: padding,\n                fontSize: fontSize,\n                opacity: 1,\n                background: grey[100],\n            },\n        };\n\n        if (props.width !== undefined && inputProps.style) {\n            inputProps.style.width = props.width;\n        }\n\n        return inputProps;\n    };\n\n    return (\n        <TextField\n            autoFocus\n            variant=\"filled\"\n            inputProps={{\n                \"data-testid\": \"InnerInput\",\n                ...browserInputProps(),\n            }}\n            inputRef={inputRef}\n            value={value}\n            onBlur={blurHandler}\n            onChange={updateValue}\n            onKeyDown={keyDownHandler}\n            onPaste={pasteHandler}\n            fullWidth\n            data-testid=\"EditableLine\"\n        />\n    );\n};\n\nexport default TextInput;\n","export const isWhitespace = (s: string): boolean => {\n    return /^\\s+$/.test(s);\n};\n\nexport const inflatingWhitespace = (): string => {\n    return \"\\u00A0\";\n};\n\nexport const inflateIfEmpty = (value: string) => {\n    if (isWhitespace(value)) {\n        return inflatingWhitespace();\n    }\n\n    return value;\n};\n","import React from \"react\";\nimport { Typography, Theme } from \"@material-ui/core\";\nimport { inflateIfEmpty } from \"../common/Whitespace\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst ChordTypography = withStyles((theme: Theme) => ({\n    root: {\n        whiteSpace: \"pre\",\n        \"&:hover\": {\n            color: theme.palette.secondary.main,\n        },\n        cursor: \"pointer\",\n        fontFamily: \"PoriChord\",\n    },\n}))(Typography);\n\ninterface ChordSymbolProps {\n    children: string;\n}\n\nconst ChordSymbol: React.FC<ChordSymbolProps> = (\n    props: ChordSymbolProps\n): JSX.Element => {\n    const formattedChord = (): string => {\n        let chord = props.children;\n        if (chord.endsWith(\" \")) {\n            return chord;\n        }\n\n        chord = chord + \" \";\n\n        return inflateIfEmpty(chord);\n    };\n\n    return (\n        <ChordTypography variant=\"h5\" display=\"inline\" data-testid=\"Chord\">\n            {formattedChord()}\n        </ChordTypography>\n    );\n};\n\nexport default ChordSymbol;\n","import {\n    Typography,\n    withStyles,\n    Theme,\n    Grid,\n    Box,\n    Tooltip as UnstyledTooltip,\n    Button,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\n\nimport { DataTestID } from \"../common/DataTestID\";\nimport { isWhitespace, inflatingWhitespace } from \"../common/Whitespace\";\nimport ChordSymbol from \"./ChordSymbol\";\nimport { IDable } from \"../common/ChordModel/Collection\";\nimport TextInput from \"./TextInput\";\nimport { ChordBlock } from \"../common/ChordModel/ChordBlock\";\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\nimport UnstyledMusicNoteRoundedIcon from \"@material-ui/icons/MusicNoteRounded\";\n\ninterface BlockProps extends DataTestID {\n    chordBlock: ChordBlock;\n    onChordChange?: (id: IDable<\"ChordBlock\">, newChord: string) => void;\n    onBlockSplit?: (id: IDable<\"ChordBlock\">, splitIndex: number) => void;\n}\n\nconst MusicNoteRoundedIcon = withStyles({\n    root: {\n        color: \"white\",\n    },\n})(UnstyledMusicNoteRoundedIcon);\n\nconst Tooltip = withStyles((theme: Theme) => ({\n    tooltip: {\n        padding: 0,\n        background: fade(theme.palette.secondary.light, 0.9),\n        margin: 0,\n    },\n}))(UnstyledTooltip);\n\nconst WordTarget = withStyles((theme: Theme) => ({\n    root: {\n        \"&:hover\": {\n            color: theme.palette.primary.main,\n        },\n        cursor: \"pointer\",\n    },\n}))(Typography);\n\nconst SpaceTarget = withStyles((theme: Theme) => ({\n    root: {\n        whiteSpace: \"pre\",\n        \"&:hover\": {\n            backgroundColor: theme.palette.primary.light,\n        },\n        cursor: \"pointer\",\n    },\n}))(Typography);\n\nconst Block: React.FC<BlockProps> = (props: BlockProps): JSX.Element => {\n    const [editing, setEditing] = useState(false);\n\n    let lyricTokens: string[] = props.chordBlock.lyricTokens;\n\n    if (lyricTokens.length === 0) {\n        lyricTokens = [inflatingWhitespace()];\n    }\n\n    const clickHandler: (\n        tokenIndex: number\n    ) => (event: React.MouseEvent<HTMLButtonElement>) => void = (\n        tokenIndex: number\n    ) => {\n        return (event: React.MouseEvent<HTMLButtonElement>) => {\n            // block splitting happens after the first token\n            // as first token is already aligned with the current chord\n            if (tokenIndex !== 0 && props.onBlockSplit) {\n                props.onBlockSplit(props.chordBlock, tokenIndex);\n            }\n\n            setEditing(true);\n            event.stopPropagation();\n        };\n    };\n\n    const lyricBlock = (lyric: string, index: number): React.ReactElement => {\n        const typographyProps = {\n            variant: \"h5\" as \"h5\",\n            display: \"inline\" as \"inline\",\n            \"data-testid\": `Token-${index}`,\n        };\n\n        const chordButton = (\n            <Button onClick={clickHandler(index)} data-testid=\"ChordEditButton\">\n                <MusicNoteRoundedIcon />\n            </Button>\n        );\n\n        let lyricBlock: React.ReactElement;\n        if (isWhitespace(lyric)) {\n            lyricBlock = (\n                <SpaceTarget {...typographyProps}>{lyric}</SpaceTarget>\n            );\n        } else {\n            lyricBlock = <WordTarget {...typographyProps}>{lyric}</WordTarget>;\n        }\n\n        return (\n            <Tooltip\n                key={index}\n                title={chordButton}\n                placement=\"top-start\"\n                disableFocusListener={true}\n                interactive\n            >\n                {lyricBlock}\n            </Tooltip>\n        );\n    };\n\n    const lyricBlocks = lyricTokens.map((lyricToken: string, index: number) =>\n        lyricBlock(lyricToken, index)\n    );\n\n    const endEdit = (newChord: string) => {\n        if (props.onChordChange) {\n            props.onChordChange(props.chordBlock, newChord);\n        }\n\n        setEditing(false);\n    };\n\n    let chordRow: React.ReactElement;\n    if (!editing) {\n        chordRow = (\n            <Box onClick={clickHandler(0)}>\n                <ChordSymbol>{props.chordBlock.chord}</ChordSymbol>\n            </Box>\n        );\n    } else {\n        chordRow = (\n            <Box data-testid=\"ChordEdit\">\n                <TextInput width=\"5em\" variant=\"h5\" onFinish={endEdit}>\n                    {props.chordBlock.chord}\n                </TextInput>\n            </Box>\n        );\n    }\n\n    return (\n        <Box display=\"inline-block\">\n            <Grid\n                container\n                direction=\"column\"\n                component=\"span\"\n                data-testid={props[\"data-testid\"]}\n            >\n                <Grid item>{chordRow}</Grid>\n                <Grid item data-testid=\"Lyric\">\n                    <>{lyricBlocks}</>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default Block;\n","// use the name of the class the ID is describing for T\n// e.g. IDable<\"Person\">\nexport interface IDable<T extends string> {\n    id: string;\n    type: T;\n}\n\nexport const stringifyIgnoreID = (obj: unknown): string => {\n    return JSON.stringify(obj, (key: string, value: string) => {\n        if (key === \"id\") {\n            return undefined;\n        }\n\n        return value;\n    });\n};\n\nexport abstract class Collection<T extends IDable<U>, U extends string> {\n    elements: T[];\n\n    constructor(elements?: T[]) {\n        if (elements !== undefined) {\n            this.elements = elements; //TODO: consider whether this needs to be a shallow copy\n        } else {\n            this.elements = [];\n        }\n    }\n\n    protected indexOf(id: string): number {\n        const index = this.elements.findIndex((elem: T) => elem.id === id);\n\n        if (index < 0) {\n            throw new Error(\"Can't find element inside collection\");\n        }\n\n        return index;\n    }\n\n    abstract clone(): Collection<T, U>;\n\n    // adds a element after the specified id\n    addAfter(idable: IDable<U>, ...newElem: T[]): void {\n        const indexOfBefore = this.indexOf(idable.id);\n        this.elements.splice(indexOfBefore + 1, 0, ...newElem);\n    }\n\n    addBeginning(...newElem: T[]): void {\n        this.elements.splice(0, 0, ...newElem);\n    }\n\n    remove(idable: IDable<U>): T {\n        const index = this.indexOf(idable.id);\n        const removed = this.elements.splice(index, 1);\n        return removed[0];\n    }\n}\n","export const tokenize = (lineOfLyrics: string): string[] => {\n    const matches = lineOfLyrics.match(/((\\w|')+|[^\\w'])/g);\n    if (matches === null) {\n        return [];\n    }\n\n    return matches;\n};\n","import { IDable, stringifyIgnoreID } from \"./Collection\";\nimport shortid from \"shortid\";\nimport { tokenize } from \"../LyricTokenizer\";\nimport * as iots from \"io-ts\";\nimport { Either, right, left, isLeft, parseJSON } from \"fp-ts/lib/Either\";\n\ninterface ChordBlockConstructorParams {\n    chord: string;\n    lyric: string;\n}\n\nexport const ChordBlockValidator = iots.type({\n    chord: iots.string,\n    lyric: iots.string,\n    type: iots.literal(\"ChordBlock\"),\n});\n\nexport type ChordBlockValidatedFields = iots.TypeOf<typeof ChordBlockValidator>;\n\nexport class ChordBlock implements IDable<\"ChordBlock\"> {\n    id: string;\n    chord: string;\n    lyric: string;\n    type: \"ChordBlock\";\n\n    constructor({ chord, lyric }: ChordBlockConstructorParams) {\n        this.id = shortid.generate();\n        this.chord = chord;\n        this.lyric = lyric;\n        this.type = \"ChordBlock\";\n    }\n\n    serialize(): string {\n        return stringifyIgnoreID(this);\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordBlockValidatedFields\n    ): ChordBlock {\n        return new ChordBlock({\n            chord: validatedFields.chord,\n            lyric: validatedFields.lyric,\n        });\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordBlock> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordBlockValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Block object\"));\n        }\n\n        return right(\n            new ChordBlock({\n                chord: validationResult.right.chord,\n                lyric: validationResult.right.lyric,\n            })\n        );\n    }\n\n    get lyricTokens(): string[] {\n        return tokenize(this.lyric);\n    }\n\n    // splits a block, and returns the block before\n    // e.g.\n    // {id:\"A\", chord: \"B7\", lyric:\"my dear we're\"}\n    // splitBlock(4) =>\n    // {id:\"B\", chord: \"B7\", lyric:\"my dear \"}\n    // {id:\"A\", chord: \"\", \"we're\"}\n    split(splitIndex: number): ChordBlock {\n        if (splitIndex === 0) {\n            throw new Error(\"Split index can't be zero\");\n        }\n\n        const tokens = this.lyricTokens;\n        const prevBlockLyricTokens: string[] = tokens.slice(0, splitIndex);\n        const thisBlockLyricTokens: string[] = tokens.slice(splitIndex);\n\n        const prevBlock: ChordBlock = new ChordBlock({\n            chord: this.chord,\n            lyric: prevBlockLyricTokens.join(\"\"),\n        });\n\n        this.chord = \"\";\n        this.lyric = thisBlockLyricTokens.join(\"\");\n\n        return prevBlock;\n    }\n}\n","import {\n    Box,\n    withStyles,\n    Theme,\n    Button as UnstyledButton,\n    Tooltip as UnstyledTooltip,\n} from \"@material-ui/core\";\nimport React from \"react\";\n\nimport grey from \"@material-ui/core/colors/grey\";\nimport red from \"@material-ui/core/colors/red\";\n\nimport Block from \"./Block\";\n\nimport UnstyledBackspaceIcon from \"@material-ui/icons/Backspace\";\nimport { IDable } from \"../common/ChordModel/Collection\";\nimport { ChordBlock } from \"../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../common/ChordModel/ChordLine\";\n\nconst iconColorStyle = {\n    root: {\n        color: red[300],\n    },\n};\n\nconst BackspaceIcon = withStyles(iconColorStyle)(UnstyledBackspaceIcon);\n\nconst Button = withStyles((theme: Theme) => ({\n    contained: {\n        backgroundColor: \"transparent\",\n        \"&:hover\": {\n            backgroundColor: theme.palette.primary.dark,\n        },\n    },\n}))(UnstyledButton);\n\nconst Tooltip = withStyles({\n    tooltip: {\n        padding: 0,\n        background: \"transparent\",\n        margin: 0,\n    },\n})(UnstyledTooltip);\n\nconst HighlightableBox = withStyles((theme: Theme) => ({\n    root: {\n        \"&:hover\": {\n            backgroundColor: grey[100],\n        },\n    },\n}))(Box);\n\ninterface ChordEditLineProps {\n    chordLine: ChordLine;\n    onEdit?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    onAdd?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    onRemove?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    onChangeLine?: (id: IDable<\"ChordLine\">) => void;\n}\n\nconst ChordEditLine: React.FC<ChordEditLineProps> = (\n    props: ChordEditLineProps\n): JSX.Element => {\n    let chordBlocks: ChordBlock[] = props.chordLine.chordBlocks;\n    if (chordBlocks.length === 0) {\n        chordBlocks = [\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"\",\n            }),\n        ];\n    }\n\n    const hoverMenu = (): React.ReactElement => {\n        return (\n            <Button onClick={props.onRemove} data-testid={\"RemoveButton\"}>\n                <BackspaceIcon />\n            </Button>\n        );\n    };\n\n    const chordChangeHandler = (id: IDable<\"ChordBlock\">, newChord: string) => {\n        props.chordLine.setChord(id, newChord);\n\n        if (props.onChangeLine) {\n            props.onChangeLine(props.chordLine);\n        }\n    };\n\n    const blockSplitHandler = (\n        id: IDable<\"ChordBlock\">,\n        splitIndex: number\n    ) => {\n        props.chordLine.splitBlock(id, splitIndex);\n\n        if (props.onChangeLine) {\n            props.onChangeLine(props.chordLine);\n        }\n    };\n\n    const blocks: React.ReactElement[] = chordBlocks.map(\n        (chordBlock: ChordBlock, index: number) => (\n            <Block\n                key={chordBlock.id}\n                chordBlock={chordBlock}\n                onChordChange={chordChangeHandler}\n                onBlockSplit={blockSplitHandler}\n                data-testid={`Block-${index}`}\n            ></Block>\n        )\n    );\n\n    return (\n        <Tooltip placement=\"right\" title={hoverMenu()} interactive>\n            <HighlightableBox\n                data-testid={\"NoneditableLine\"}\n                onClick={props.onEdit}\n            >\n                {blocks}\n            </HighlightableBox>\n        </Tooltip>\n    );\n};\n\nexport default ChordEditLine;\n","import { Box, Slide } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport TextInput from \"./TextInput\";\n\nimport { DataTestID } from \"../common/DataTestID\";\nimport { ChordLine } from \"../common/ChordModel/ChordLine\";\nimport { IDable } from \"../common/ChordModel/Collection\";\nimport ChordEditLine from \"./ChordEditLine\";\n\ninterface LineProps extends DataTestID {\n    chordLine: ChordLine;\n    onChangeLine?: (id: IDable<\"ChordLine\">) => void;\n    onAddLine?: (id: IDable<\"ChordLine\">) => void;\n    onRemoveLine?: (id: IDable<\"ChordLine\">) => void;\n    onPasteOverflow?: (\n        id: IDable<\"ChordLine\">,\n        overflowPasteContent: string[]\n    ) => void;\n    onMergeWithPreviousLine?: (id: IDable<\"ChordLine\">) => boolean;\n}\n\nconst Line: React.FC<LineProps> = (props: LineProps): JSX.Element => {\n    const [editing, setEditing] = useState(false);\n    const [removed, setRemoved] = useState(false);\n\n    const startEdit = () => {\n        setEditing(true);\n    };\n\n    const finishEdit = (newLyrics: string) => {\n        setEditing(false);\n\n        props.chordLine.replaceLyrics(newLyrics);\n\n        if (props.onChangeLine) {\n            props.onChangeLine(props.chordLine);\n        }\n    };\n\n    const addHandler = () => {\n        if (props.onAddLine) {\n            props.onAddLine(props.chordLine);\n        }\n    };\n\n    const removalTime = 250;\n\n    const removeHandler = () => {\n        if (removed) {\n            return;\n        }\n\n        setRemoved(true);\n\n        if (props.onRemoveLine) {\n            setTimeout(() => {\n                if (props.onRemoveLine) {\n                    props.onRemoveLine(props.chordLine);\n                }\n            }, removalTime);\n        }\n    };\n\n    const pasteOverflowHandler = (overflowContent: string[]) => {\n        if (props.onPasteOverflow) {\n            props.onPasteOverflow(props.chordLine, overflowContent);\n            setEditing(false);\n        }\n    };\n\n    const specialBackspaceHandler = () => {\n        if (props.onMergeWithPreviousLine) {\n            const handledAndStopEditing = props.onMergeWithPreviousLine(\n                props.chordLine\n            );\n            if (handledAndStopEditing) {\n                setEditing(false);\n            }\n        }\n    };\n\n    const nonEditableLine = (): React.ReactElement => {\n        return (\n            <ChordEditLine\n                chordLine={props.chordLine}\n                onChangeLine={props.onChangeLine}\n                onAdd={addHandler}\n                onRemove={removeHandler}\n                onEdit={startEdit}\n            />\n        );\n    };\n\n    const editLyricsInput = (): React.ReactElement => {\n        const lyrics = props.chordLine.lyrics;\n\n        return (\n            <Box position=\"absolute\" left=\"0\" bottom=\"2px\" width=\"100%\">\n                <TextInput\n                    variant=\"h5\"\n                    onFinish={finishEdit}\n                    onPasteOverflow={pasteOverflowHandler}\n                    onSpecialBackspace={specialBackspaceHandler}\n                >\n                    {lyrics}\n                </TextInput>\n            </Box>\n        );\n    };\n\n    let elem: React.ReactElement;\n    if (editing) {\n        // using a css trick to overlay the lyrics edit input over\n        // the noneditable lyrics line so chords are still showing\n        elem = (\n            <>\n                {nonEditableLine()}\n                {editLyricsInput()}\n            </>\n        );\n    } else {\n        elem = nonEditableLine();\n    }\n\n    const yeetDirection = removed ? \"up\" : \"down\";\n\n    return (\n        <Slide direction={yeetDirection} in={!removed} timeout={removalTime}>\n            <Box\n                borderBottom={1}\n                borderColor=\"grey.50\"\n                width=\"100%\"\n                position=\"relative\"\n                data-testid={props[\"data-testid\"]}\n            >\n                {elem}\n            </Box>\n        </Slide>\n    );\n};\n\nexport default Line;\n","import { ChordLine } from \"./ChordLine\";\nimport { ChordBlock } from \"./ChordBlock\";\nimport { DiffMatchPatch, DiffOperation } from \"diff-match-patch-typescript\";\n\nconst differ: DiffMatchPatch = (() => {\n    const dmp = new DiffMatchPatch();\n    dmp.diffTimeout = 0;\n    dmp.matchThreshold = 0;\n    return dmp;\n})();\n\nclass ChordLineIterator {\n    private chordLine: ChordLine;\n    private currBlockIndex: number;\n    private currCharIndex: number;\n    private blockBuffer: string[];\n    private prependLyrics: string;\n\n    constructor(chordLine: ChordLine) {\n        this.chordLine = chordLine;\n\n        this.currBlockIndex = 0;\n        this.currCharIndex = 0;\n\n        this.blockBuffer = chordLine.elements.map(() => \"\");\n        this.prependLyrics = \"\";\n    }\n\n    private atBlockBoundary(): boolean {\n        return this.currCharIndex === 0;\n    }\n\n    private currentBlock(): ChordBlock {\n        return this.chordLine.elements[this.currBlockIndex];\n    }\n\n    private currentChar(): string {\n        return this.currentBlock().lyric.charAt(this.currCharIndex);\n    }\n\n    private nextChar(): void {\n        this.currCharIndex += 1;\n\n        if (this.currCharIndex >= this.currentBlock().lyric.length) {\n            this.currBlockIndex += 1;\n            this.currCharIndex = 0;\n        }\n    }\n\n    skip(skipChar: string): void {\n        if (this.currentChar() !== skipChar) {\n            throw new Error(\"Mismatched characters when skipping\");\n        }\n\n        this.blockBuffer[this.currBlockIndex] += skipChar;\n\n        this.nextChar();\n    }\n\n    insert(insertChar: string): void {\n        if (!this.atBlockBoundary()) {\n            this.blockBuffer[this.currBlockIndex] += insertChar;\n        } else {\n            // bias towards inserting  at the end of the previous block if between two blocks\n            // since chords are aligned to the beginning of the block, we don't want to shift the lyrics\n            // inside a block unnecessarily\n            const prevBlockIndex = this.currBlockIndex - 1;\n            if (prevBlockIndex >= 0) {\n                this.blockBuffer[prevBlockIndex] += insertChar;\n            } else {\n                this.prependLyrics += insertChar;\n            }\n        }\n    }\n\n    delete(deleteChar: string): void {\n        if (this.currentChar() !== deleteChar) {\n            throw new Error(\"Mismatched characters when deleting\");\n        }\n\n        this.nextChar();\n    }\n\n    finish(): void {\n        for (let i = 0; i < this.chordLine.elements.length; i++) {\n            this.chordLine.elements[i].lyric = this.blockBuffer[i];\n        }\n\n        if (this.prependLyrics !== \"\") {\n            this.chordLine.elements.splice(\n                0,\n                0,\n                new ChordBlock({ chord: \"\", lyric: this.prependLyrics })\n            );\n        }\n\n        this.chordLine.normalizeBlocks();\n    }\n}\n\nconst removeOrphanedBlocksWithNoChords = (chordLine: ChordLine): void => {\n    const newBlocks: ChordBlock[] = [];\n\n    for (const block of chordLine.elements) {\n        if (block.lyric !== \"\" || block.chord !== \"\") {\n            newBlocks.push(block);\n        }\n    }\n\n    chordLine.elements = newBlocks;\n};\n\nconst addSpacesToOrphanedBlocks = (chordLine: ChordLine): void => {\n    const blocks: ChordBlock[] = chordLine.elements;\n    for (let i = 0; i < blocks.length; i++) {\n        const block = blocks[i];\n        if (block.lyric !== \"\") {\n            continue;\n        }\n\n        const prevBlockHasSpaceToSteal =\n            i > 0 &&\n            blocks[i - 1].lyric.length > 1 &&\n            blocks[i - 1].lyric.endsWith(\" \");\n\n        if (prevBlockHasSpaceToSteal) {\n            // \"steal\" a space from the previous block\n            // e.g. if * represents a space\n            // G        A\n            // We're*no*strangers\n            // replaced with\n            // We're*no*\n            // instead of adding two spaces consecutively, like\n            // G        A\n            // We're*no**\n            // we'll just relegate one of the unused spaces for the orphaned block, like\n            // G       A\n            // We're*no*\n\n            // if there's no space to steal, just add one so that it's backed by a character\n            const prevBlock = blocks[i - 1];\n            const lastIndex = prevBlock.lyric.length - 1;\n            prevBlock.lyric = prevBlock.lyric.slice(0, lastIndex);\n        }\n\n        block.lyric = \" \";\n    }\n};\n\nexport const replaceChordLineLyrics = (\n    chordLine: ChordLine,\n    newLyrics: string\n): void => {\n    const diffs = differ.diff_main(chordLine.lyrics, newLyrics);\n    differ.diff_cleanupSemanticLossless(diffs);\n\n    const iterator = new ChordLineIterator(chordLine);\n\n    for (const diff of diffs) {\n        const diffOperation = diff[0];\n        for (const diffChar of diff[1]) {\n            switch (diffOperation) {\n                case DiffOperation.DIFF_EQUAL: {\n                    iterator.skip(diffChar);\n                    break;\n                }\n                case DiffOperation.DIFF_INSERT: {\n                    iterator.insert(diffChar);\n                    break;\n                }\n                case DiffOperation.DIFF_DELETE: {\n                    iterator.delete(diffChar);\n                    break;\n                }\n            }\n        }\n    }\n\n    iterator.finish();\n\n    removeOrphanedBlocksWithNoChords(chordLine);\n    addSpacesToOrphanedBlocks(chordLine);\n};\n","import { Collection, IDable, stringifyIgnoreID } from \"./Collection\";\nimport shortid from \"shortid\";\nimport * as iots from \"io-ts\";\nimport { Either, right, left, isLeft, parseJSON } from \"fp-ts/lib/Either\";\nimport { replaceChordLineLyrics } from \"./ChordLinePatcher\";\nimport {\n    ChordBlockValidator,\n    ChordBlockValidatedFields,\n    ChordBlock,\n} from \"./ChordBlock\";\n\nexport const ChordLineValidator = iots.type({\n    elements: iots.array(ChordBlockValidator),\n    type: iots.literal(\"ChordLine\"),\n});\n\nexport type ChordLineValidatedFields = iots.TypeOf<typeof ChordLineValidator>;\n\nexport class ChordLine extends Collection<ChordBlock, \"ChordBlock\">\n    implements IDable<\"ChordLine\"> {\n    id: string;\n    type: \"ChordLine\";\n\n    constructor(elements?: ChordBlock[]) {\n        if (elements === undefined) {\n            elements = [new ChordBlock({ chord: \"\", lyric: \"\" })];\n        }\n\n        super(elements);\n\n        this.id = shortid.generate();\n        this.type = \"ChordLine\";\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordLineValidatedFields\n    ): ChordLine {\n        const chordBlockElems: ChordBlock[] = validatedFields.elements.map(\n            (value: ChordBlockValidatedFields) => {\n                return ChordBlock.fromValidatedFields(value);\n            }\n        );\n\n        return new ChordLine(chordBlockElems);\n    }\n\n    serialize(): string {\n        return stringifyIgnoreID(this);\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordLine> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordLineValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Line object\"));\n        }\n\n        return right(this.fromValidatedFields(validationResult.right));\n    }\n\n    static fromLyrics(lyrics: string): ChordLine {\n        const block = new ChordBlock({\n            chord: \"\",\n            lyric: lyrics,\n        });\n\n        return new ChordLine([block]);\n    }\n\n    get chordBlocks(): ChordBlock[] {\n        return this.elements;\n    }\n\n    get lyrics(): string {\n        const lyricTokens = this.chordBlocks.map(\n            (chordBlock: ChordBlock) => chordBlock.lyric\n        );\n\n        return lyricTokens.join(\"\");\n    }\n\n    replaceLyrics(newLyrics: string): void {\n        if (newLyrics === this.lyrics) {\n            return;\n        }\n\n        replaceChordLineLyrics(this, newLyrics);\n    }\n\n    setChord(idable: IDable<\"ChordBlock\">, newChord: string): void {\n        const index = this.indexOf(idable.id);\n        this.elements[index].chord = newChord;\n        this.normalizeBlocks();\n    }\n\n    splitBlock(idable: IDable<\"ChordBlock\">, splitIndex: number): void {\n        const index = this.indexOf(idable.id);\n        const block = this.elements[index];\n        const newPrevBlock = block.split(splitIndex);\n        this.elements.splice(index, 0, newPrevBlock);\n    }\n\n    // passes through every block to ensure that blocks without chords exist (except for the first)\n    normalizeBlocks(): void {\n        const newBlocks: ChordBlock[] = [];\n\n        for (let i = 0; i < this.elements.length; i++) {\n            const block = this.elements[i];\n\n            if (block.chord === \"\" && newBlocks.length > 0) {\n                const lastIndex = newBlocks.length - 1;\n                newBlocks[lastIndex].lyric += block.lyric;\n            } else {\n                newBlocks.push(block);\n            }\n        }\n\n        // avoid rejiggering the data if it's a no-op\n        if (newBlocks.length !== this.elements.length) {\n            this.elements = newBlocks;\n        }\n    }\n\n    clone(): ChordLine {\n        const clone = new ChordLine(this.elements);\n        clone.id = this.id;\n        return clone;\n    }\n}\n","import React from \"react\";\nimport {\n    Theme,\n    Grid,\n    Tooltip as UnstyledTooltip,\n    Divider as UnstyledDivider,\n    Button,\n} from \"@material-ui/core\";\nimport { useTheme, withStyles } from \"@material-ui/styles\";\nimport UnstyledAddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport { DataTestID } from \"../common/DataTestID\";\n\nconst HighlightableGrid = withStyles({\n    root: {\n        \"&:hover .MuiDivider-root\": {\n            backgroundColor: \"rgba(0, 0, 0, 0.25)\",\n        },\n    },\n})(Grid);\n\nconst Tooltip = withStyles({\n    tooltip: {\n        padding: 0,\n        background: \"transparent\",\n        margin: 0,\n    },\n})(UnstyledTooltip);\n\nconst Divider = withStyles({\n    root: {\n        width: \"100%\",\n        backgroundColor: \"transparent\",\n    },\n})(UnstyledDivider);\n\nconst AddCircleOutlineIcon = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.primary.main,\n    },\n}))(UnstyledAddCircleOutlineIcon);\n\ninterface NewLineProps extends DataTestID {\n    onAdd?: () => void;\n}\n\nconst NewLine: React.FC<NewLineProps> = (props: NewLineProps): JSX.Element => {\n    const theme: Theme = useTheme();\n\n    const hoverMenu = (): React.ReactElement => {\n        return (\n            <Button data-testid={\"AddButton\"} onClick={props.onAdd}>\n                <AddCircleOutlineIcon />\n            </Button>\n        );\n    };\n\n    return (\n        <Tooltip title={hoverMenu()} interactive placement=\"right\">\n            <HighlightableGrid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                onClick={props.onAdd}\n                data-testid={props[\"data-testid\"]}\n                style={{\n                    minHeight: theme.spacing(3),\n                }}\n            >\n                <Divider />\n            </HighlightableGrid>\n        </Tooltip>\n    );\n};\n\nexport default NewLine;\n","import React from \"react\";\nimport { Paper as UnstyledPaper, withStyles, Grid } from \"@material-ui/core\";\nimport Line from \"./Line\";\nimport { IDable } from \"../common/ChordModel/Collection\";\nimport { ChordSong } from \"../common/ChordModel/ChordSong\";\nimport { ChordLine } from \"../common/ChordModel/ChordLine\";\nimport NewLine from \"./NewLine\";\n\nconst Paper = withStyles({\n    root: {\n        width: \"auto\",\n    },\n})(UnstyledPaper);\n\ninterface ChordPaperBodyProps {\n    song: ChordSong;\n    onSongChanged?: (updatedSong: ChordSong) => void;\n}\n\nconst ChordPaperBody: React.FC<ChordPaperBodyProps> = (\n    props: ChordPaperBodyProps\n): React.ReactElement => {\n    const addLineToTop = () => {\n        const newLine: ChordLine = new ChordLine();\n        props.song.addBeginning(newLine);\n        notifySongChanged();\n    };\n\n    const addLine = (id: IDable<\"ChordLine\">) => {\n        const newLine: ChordLine = new ChordLine();\n        props.song.addAfter(id, newLine);\n        notifySongChanged();\n    };\n\n    const removeLine = (id: IDable<\"ChordLine\">) => {\n        props.song.remove(id);\n        notifySongChanged();\n    };\n\n    const changeLine = (id: IDable<\"ChordLine\">) => {\n        notifySongChanged();\n    };\n\n    const pasteOverflowFromLine = (\n        id: IDable<\"ChordLine\">,\n        overflowContent: string[]\n    ) => {\n        const newChordLines = overflowContent.map((newLyricLine: string) =>\n            ChordLine.fromLyrics(newLyricLine)\n        );\n        props.song.addAfter(id, ...newChordLines);\n        notifySongChanged();\n    };\n\n    const mergeWithPreviousLine = (id: IDable<\"ChordLine\">): boolean => {\n        const didMerge = props.song.mergeLineWithPrevious(id);\n\n        if (didMerge) {\n            notifySongChanged();\n            return true;\n        }\n\n        return false;\n    };\n\n    const notifySongChanged = () => {\n        if (props.onSongChanged) {\n            props.onSongChanged(props.song);\n        }\n    };\n\n    const lines = () => {\n        const lines = props.song.chordLines.flatMap(\n            (line: ChordLine, index: number) => {\n                const addLineBelow = () => {\n                    addLine(line);\n                };\n\n                return [\n                    <Line\n                        key={line.id}\n                        chordLine={line}\n                        onAddLine={addLine}\n                        onRemoveLine={removeLine}\n                        onChangeLine={changeLine}\n                        onPasteOverflow={pasteOverflowFromLine}\n                        onMergeWithPreviousLine={mergeWithPreviousLine}\n                        data-testid={`Line-${index}`}\n                    />,\n                    <NewLine\n                        key={\"NewLine-\" + line.id}\n                        onAdd={addLineBelow}\n                        data-testid={`NewLine-${index}`}\n                    />,\n                ];\n            }\n        );\n\n        const firstNewLine = (\n            <NewLine\n                key={\"NewLine-Top\"}\n                onAdd={addLineToTop}\n                data-testid={\"NewLine-Top\"}\n            />\n        );\n        lines.splice(0, 0, firstNewLine);\n\n        return lines;\n    };\n\n    return (\n        <Paper elevation={0}>\n            <Grid container>\n                <Grid item xs={1}></Grid>\n                <Grid item xs={10}>\n                    {lines()}\n                </Grid>\n                <Grid item xs={1}></Grid>\n            </Grid>\n        </Paper>\n    );\n};\n\nexport default ChordPaperBody;\n","import { Box, Typography, TypographyProps } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport TextInput from \"./TextInput\";\n\nimport { DataTestID } from \"../common/DataTestID\";\nimport { inflateIfEmpty } from \"../common/Whitespace\";\nimport { withStyles } from \"@material-ui/styles\";\n\nimport grey from \"@material-ui/core/colors/grey\";\n\ninterface EditableTypographyProps extends DataTestID, TypographyProps {\n    children: string;\n    onValueChange?: (newValue: string) => void;\n    placeholder?: string;\n}\n\nconst PlaceholderTypography = withStyles({\n    root: {\n        color: grey[400],\n    },\n})(Typography);\n\nconst EditableTypography: React.FC<EditableTypographyProps> = (\n    props: EditableTypographyProps\n): JSX.Element => {\n    const [editing, setEditing] = useState(false);\n\n    const startEdit = () => {\n        setEditing(true);\n    };\n\n    const finishEdit = (newValue: string) => {\n        setEditing(false);\n        if (props.onValueChange) {\n            props.onValueChange(newValue);\n        }\n    };\n\n    const nonEditableLine = (): React.ReactElement => {\n        const {\n            children,\n            placeholder,\n            onValueChange,\n            ...typographyProps\n        } = props;\n\n        if (props.children === \"\" && props.placeholder !== undefined) {\n            return (\n                <PlaceholderTypography {...typographyProps} onClick={startEdit}>\n                    {props.placeholder}\n                </PlaceholderTypography>\n            );\n        }\n\n        return (\n            <Typography {...typographyProps} onClick={startEdit}>\n                {inflateIfEmpty(props.children)}\n            </Typography>\n        );\n    };\n\n    const editableLine = (): React.ReactElement => {\n        if (props.variant === \"inherit\" || props.variant === \"srOnly\") {\n            throw new Error(\"can't have these variant types\");\n        }\n\n        return (\n            <TextInput\n                variant={props.variant}\n                onFinish={finishEdit}\n                data-testid={\"EditableLine\"}\n            >\n                {props.children}\n            </TextInput>\n        );\n    };\n\n    const elem: React.ReactElement = editing\n        ? editableLine()\n        : nonEditableLine();\n\n    return <Box>{elem}</Box>;\n};\n\nexport default EditableTypography;\n","import React from \"react\";\nimport { Typography, Theme, Grid, Box } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport EditableTypography from \"./EditableTypography\";\nimport { ChordSong } from \"../common/ChordModel/ChordSong\";\n\ninterface HeaderProps {\n    song: ChordSong;\n    onSongChanged?: (updatedSong: ChordSong) => void;\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps): JSX.Element => {\n    const theme: Theme = useTheme();\n\n    const notifySongChanged = (): void => {\n        if (props.onSongChanged) {\n            props.onSongChanged(props.song);\n        }\n    };\n\n    const updateTitleHandler = (newTitle: string) => {\n        props.song.title = newTitle;\n        notifySongChanged();\n    };\n\n    const updateComposeHandler = (newComposer: string) => {\n        props.song.composedBy = newComposer;\n        notifySongChanged();\n    };\n\n    const updatePerformerHandler = (newPerformer: string) => {\n        props.song.performedBy = newPerformer;\n        notifySongChanged();\n    };\n\n    const updateHeardFrom = (newHeardFrom: string) => {\n        props.song.asHeardFrom = newHeardFrom;\n        notifySongChanged();\n    };\n\n    const leftHeader = (\n        <Grid item container xs={3} direction=\"column\">\n            <Grid item>\n                <Typography display=\"inline\" variant=\"caption\">\n                    As heard from:{\" \"}\n                </Typography>\n                <EditableTypography\n                    variant=\"caption\"\n                    placeholder=\"https://www.youtube.com/watch?v=dM9zwZCOmjM\"\n                    onValueChange={updateHeardFrom}\n                    data-testid=\"AsHeardAt\"\n                >\n                    {props.song.asHeardFrom}\n                </EditableTypography>\n            </Grid>\n        </Grid>\n    );\n\n    const midHeader = (\n        <Grid item xs={6}>\n            <EditableTypography\n                variant=\"h4\"\n                align=\"center\"\n                data-testid=\"SongTitle\"\n                placeholder=\"Song Title\"\n                onValueChange={updateTitleHandler}\n            >\n                {props.song.title}\n            </EditableTypography>\n        </Grid>\n    );\n\n    const rightHeader = (\n        <Grid item container xs={3} direction=\"column\">\n            <Grid item>\n                <Typography display=\"inline\" variant=\"subtitle2\">\n                    Composed by:{\" \"}\n                </Typography>\n\n                <EditableTypography\n                    variant=\"subtitle2\"\n                    placeholder=\"Stock Waterman\"\n                    onValueChange={updateComposeHandler}\n                    data-testid=\"ComposedBy\"\n                >\n                    {props.song.composedBy}\n                </EditableTypography>\n            </Grid>\n            <Grid item>\n                <Typography display=\"inline\" variant=\"subtitle2\">\n                    Performed by:{\" \"}\n                </Typography>\n\n                <EditableTypography\n                    variant=\"subtitle2\"\n                    placeholder=\"Rick Astley\"\n                    onValueChange={updatePerformerHandler}\n                    data-testid=\"PerformedBy\"\n                >\n                    {props.song.performedBy}\n                </EditableTypography>\n            </Grid>\n        </Grid>\n    );\n\n    return (\n        <Box\n            paddingTop={theme.spacing(1)}\n            paddingLeft={theme.spacing(0.5)}\n            paddingRight={theme.spacing(0.5)}\n            data-testid=\"Header\"\n        >\n            <Grid container>\n                {leftHeader}\n                {midHeader}\n                {rightHeader}\n            </Grid>\n        </Box>\n    );\n};\n\nexport default Header;\n","import * as iots from \"io-ts\";\nimport { Collection, stringifyIgnoreID, IDable } from \"./Collection\";\nimport { Either, right, left, isLeft, parseJSON } from \"fp-ts/lib/Either\";\nimport {\n    ChordLineValidator,\n    ChordLineValidatedFields,\n    ChordLine,\n} from \"./ChordLine\";\n\nconst SongMetadataValidator = iots.type({\n    title: iots.string,\n    composedBy: iots.string,\n    performedBy: iots.string,\n    asHeardFrom: iots.string,\n});\n\ntype SongMetadata = iots.TypeOf<typeof SongMetadataValidator>;\n\nconst ChordSongValidator = iots.type({\n    elements: iots.array(ChordLineValidator),\n    metadata: SongMetadataValidator,\n});\ntype ChordSongValidatedFields = iots.TypeOf<typeof ChordSongValidator>;\n\nexport class ChordSong extends Collection<ChordLine, \"ChordLine\"> {\n    metadata: SongMetadata;\n\n    constructor(elements?: ChordLine[], metadata?: SongMetadata) {\n        if (elements === undefined) {\n            elements = [new ChordLine()];\n        }\n\n        super(elements);\n\n        if (metadata !== undefined) {\n            this.metadata = metadata;\n        } else {\n            this.metadata = {\n                title: \"\",\n                composedBy: \"\",\n                performedBy: \"\",\n                asHeardFrom: \"\",\n            };\n        }\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordSongValidatedFields\n    ): ChordSong {\n        const chordLines: ChordLine[] = validatedFields.elements.map(\n            (chordLineValidatedFields: ChordLineValidatedFields) => {\n                return ChordLine.fromValidatedFields(chordLineValidatedFields);\n            }\n        );\n        return new ChordSong(chordLines, validatedFields.metadata);\n    }\n\n    serialize(): string {\n        return stringifyIgnoreID(this);\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordSong> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordSongValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Song object\"));\n        }\n\n        return right(this.fromValidatedFields(validationResult.right));\n    }\n\n    static fromLyricsLines(lyricLines: string[]): ChordSong {\n        const chordLines: ChordLine[] = lyricLines.map((lyricLine: string) =>\n            ChordLine.fromLyrics(lyricLine)\n        );\n        return new ChordSong(chordLines);\n    }\n\n    get chordLines(): ChordLine[] {\n        return this.elements;\n    }\n\n    get title(): string {\n        return this.metadata.title;\n    }\n\n    set title(newTitle: string) {\n        this.metadata.title = newTitle;\n    }\n\n    get performedBy(): string {\n        return this.metadata.performedBy;\n    }\n\n    set performedBy(newPerformedBy: string) {\n        this.metadata.performedBy = newPerformedBy;\n    }\n\n    get composedBy(): string {\n        return this.metadata.composedBy;\n    }\n\n    set composedBy(newComposedBy: string) {\n        this.metadata.composedBy = newComposedBy;\n    }\n\n    get asHeardFrom(): string {\n        return this.metadata.asHeardFrom;\n    }\n\n    set asHeardFrom(newAsHeardFrom: string) {\n        this.metadata.asHeardFrom = newAsHeardFrom;\n    }\n\n    clone(): ChordSong {\n        return new ChordSong(this.elements, this.metadata);\n    }\n\n    mergeLineWithPrevious(idable: IDable<\"ChordLine\">): boolean {\n        const index = this.indexOf(idable.id);\n        // no previous line to merge with, just bail\n        if (index === 0) {\n            return false;\n        }\n\n        // the user experience usually would like a space between lines when they're merged\n        // e.g.\n        // Never Gonna\n        // Give You Up\n        // =>\n        // Never GonnaGive You Up is awkward\n        const prevLine = this.chordLines[index - 1];\n        const lastBlockIndex = prevLine.chordBlocks.length - 1;\n        prevLine.chordBlocks[lastBlockIndex].lyric += \" \";\n\n        const currLine = this.chordLines[index];\n        prevLine.chordBlocks.push(...currLine.chordBlocks);\n\n        this.chordLines.splice(index, 1);\n\n        return true;\n    }\n}\n","import {\n    SpeedDial as UnstyledSpeedDial,\n    SpeedDialAction,\n    SpeedDialIcon,\n} from \"@material-ui/lab\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { Theme } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport NoteAddIcon from \"@material-ui/icons/NoteAdd\";\nimport React, { useState } from \"react\";\nimport { ChordSong } from \"../common/ChordModel/ChordSong\";\nimport { isLeft } from \"fp-ts/lib/Either\";\nimport { useSnackbar } from \"notistack\";\n\ninterface ChordPaperMenuProps {\n    song: ChordSong;\n    onLoad?: (loadedSong: ChordSong) => void;\n    onNewSong?: () => void;\n}\n\nconst SpeedDial = withStyles((theme: Theme) => ({\n    root: {\n        position: \"fixed\",\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n}))(UnstyledSpeedDial);\n\nconst ChordPaperMenu: React.FC<ChordPaperMenuProps> = (\n    props: ChordPaperMenuProps\n): JSX.Element => {\n    const [open, setOpen] = useState(false);\n    const { enqueueSnackbar } = useSnackbar();\n\n    const openMenu = () => {\n        setOpen(true);\n    };\n\n    const closeMenu = () => {\n        setOpen(false);\n    };\n\n    const saveAction = () => {\n        const blob = new Blob([props.song.serialize()], {\n            type: \"application/json\",\n        });\n        const objectURL = URL.createObjectURL(blob);\n\n        const anchor = document.createElement(\"a\");\n\n        anchor.download = \"chord_paper_song.json\";\n        if (props.song.title !== \"\") {\n            anchor.download = props.song.title + \".json\";\n        }\n        anchor.href = objectURL;\n        anchor.click();\n\n        URL.revokeObjectURL(objectURL);\n    };\n\n    function pickFileHandler(this: HTMLInputElement) {\n        const fileList = this.files;\n        if (fileList === null) {\n            return;\n        }\n\n        if (fileList.length > 1) {\n            enqueueSnackbar(\"Multiple files selected, only one file expected\", {\n                variant: \"error\",\n            });\n            return;\n        }\n\n        const file = fileList.item(0);\n        if (file === null) {\n            enqueueSnackbar(\"Could not retrieve file from file dialog\", {\n                variant: \"error\",\n            });\n            return;\n        }\n\n        const fileReader = new FileReader();\n        fileReader.onload = (ev: ProgressEvent<FileReader>) => {\n            if (\n                ev.target === null ||\n                ev.target.result === null ||\n                ev.target.result instanceof ArrayBuffer\n            ) {\n                return;\n            }\n\n            const results = ChordSong.deserialize(ev.target.result);\n            if (isLeft(results)) {\n                enqueueSnackbar(\n                    \"Can't load file, Song file failed validation\",\n                    {\n                        variant: \"error\",\n                    }\n                );\n                return;\n            }\n\n            if (props.onLoad) {\n                props.onLoad(results.right);\n            }\n        };\n\n        fileReader.readAsText(file);\n    }\n\n    const loadAction = async () => {\n        const inputElem: HTMLInputElement = document.createElement(\"input\");\n        inputElem.type = \"file\";\n        inputElem.addEventListener(\"change\", pickFileHandler);\n\n        inputElem.click();\n    };\n\n    return (\n        <SpeedDial\n            icon={<SpeedDialIcon />}\n            open={open}\n            onOpen={openMenu}\n            onClose={closeMenu}\n            ariaLabel=\"SpeedDial\"\n        >\n            <SpeedDialAction\n                icon={<SaveIcon />}\n                tooltipTitle=\"Save\"\n                onClick={saveAction}\n            />\n            <SpeedDialAction\n                icon={<FolderOpenIcon />}\n                tooltipTitle=\"Load\"\n                onClick={loadAction}\n            />\n            <SpeedDialAction\n                icon={<NoteAddIcon />}\n                tooltipTitle=\"New Song\"\n                onClick={props.onNewSong}\n            />\n        </SpeedDial>\n    );\n};\n\nexport default ChordPaperMenu;\n","import React, { useState } from \"react\";\nimport { Paper, Theme, withStyles } from \"@material-ui/core\";\nimport ChordPaperBody from \"./ChordPaperBody\";\nimport Header from \"./Header\";\nimport ChordPaperMenu from \"./ChordPaperMenu\";\nimport { ChordSong } from \"../common/ChordModel/ChordSong\";\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(5),\n        minHeight: theme.spacing(92),\n        minWidth: theme.spacing(92),\n    },\n}))(Paper);\n\ninterface ChordPaperProps {\n    initialSong: ChordSong;\n}\n\nconst ChordPaper: React.FC<ChordPaperProps> = (\n    props: ChordPaperProps\n): JSX.Element => {\n    const [song, setSong] = useState<ChordSong>(props.initialSong);\n\n    const songChangeHandler = (updatedSong: ChordSong) => {\n        setSong(updatedSong.clone());\n    };\n\n    const loadHandler = (loadedSong: ChordSong) => {\n        setSong(loadedSong.clone());\n    };\n\n    const newSongHandler = () => {\n        setSong(new ChordSong());\n    };\n\n    return (\n        <RootPaper elevation={3} data-testid=\"ChordPaper\">\n            <Header\n                data-testid={\"Header\"}\n                song={song}\n                onSongChanged={songChangeHandler}\n            />\n            <ChordPaperBody song={song} onSongChanged={songChangeHandler} />\n            <ChordPaperMenu\n                song={song}\n                onLoad={loadHandler}\n                onNewSong={newSongHandler}\n            />\n        </RootPaper>\n    );\n};\n\nexport default ChordPaper;\n","import { tokenize } from \"./common/LyricTokenizer\";\nimport { ChordSong } from \"./common/ChordModel/ChordSong\";\nimport { ChordLine } from \"./common/ChordModel/ChordLine\";\nimport { ChordBlock } from \"./common/ChordModel/ChordBlock\";\n\nconst lyrics = [\n    \"We're no strangers to love\",\n    \"You know the rules and so do I\",\n    \"A full commitment's what I'm thinking of\",\n    \"You wouldn't get this from any other guy\",\n    \"I just wanna tell you how I'm feeling\",\n    \"Gotta make you understand\",\n    \"Never gonna give you up\",\n    \"Never gonna let you down\",\n    \"Never gonna run around and desert you\",\n    \"Never gonna make you cry\",\n    \"Never gonna say goodbye\",\n    \"Never gonna tell a lie and hurt you\",\n];\n\nconst chords = [\"A\", \"Bb7\", \"Cm\", \"D/C#\", \"Em7\", \"Fmaj7\", \"G^\"];\n\nconst randomChord = (): string => {\n    return chords[Math.floor(Math.random() * chords.length)];\n};\n\nconst chunk = (arr: string, tokenSize: number): string[] => {\n    const tokens = tokenize(arr);\n    const results: string[] = [];\n\n    for (let i = 0; i < tokens.length; i += tokenSize) {\n        const subArr = tokens.slice(i, i + tokenSize);\n        results.push(subArr.join(\"\"));\n    }\n\n    return results;\n};\n\nexport const NeverGonnaGiveYouUp = (): ChordSong => {\n    const chordLines: ChordLine[] = lyrics.map((lyricLine: string) =>\n        assembleLine(lyricLine)\n    );\n\n    return new ChordSong(chordLines);\n};\n\nconst assembleLine = (lyrics: string): ChordLine => {\n    const lyricChunks = chunk(lyrics, 4);\n\n    const chordBlocks: ChordBlock[] = lyricChunks.map((lyricChunk: string) => {\n        return new ChordBlock({\n            chord: randomChord(),\n            lyric: lyricChunk,\n        });\n    });\n\n    return new ChordLine(chordBlocks);\n};\n","import React from \"react\";\nimport {\n    Drawer,\n    Divider,\n    List,\n    ListItem as UnstyledListItem,\n    ListItemText,\n    Typography,\n    Theme,\n} from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\nimport PetsIcon from \"@material-ui/icons/Pets\";\nimport { withStyles } from \"@material-ui/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nconst TitleName = withStyles((theme: Theme) => ({\n    root: {\n        padding: theme.spacing(3),\n        color: grey[600],\n    },\n}))(Typography);\n\nconst ListItem = withStyles((theme: Theme) => ({\n    root: {\n        paddingLeft: theme.spacing(3),\n    },\n}))(UnstyledListItem);\n\nconst SideMenu = () => {\n    const typographyProps = {\n        variant: \"h6\" as \"h6\",\n    };\n\n    const linkStyle = {\n        textDecoration: \"none\",\n        color: \"inherit\",\n    };\n\n    return (\n        <Drawer variant=\"permanent\" anchor=\"left\">\n            <TitleName variant=\"h5\">Chord Paper</TitleName>\n            <Divider />\n            <List>\n                <Link to=\"/\" style={linkStyle} data-testid=\"Menu-HomeButton\">\n                    <ListItem key=\"Music\" button>\n                        <MusicNoteIcon />\n                        <ListItemText\n                            primary=\"Music\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n\n                <Link\n                    to=\"/about\"\n                    style={linkStyle}\n                    data-testid=\"Menu-AboutButton\"\n                >\n                    <ListItem key=\"About\" button>\n                        <PetsIcon />\n                        <ListItemText\n                            primary=\"About\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n            </List>\n        </Drawer>\n    );\n};\n\nexport default SideMenu;\n","import React from \"react\";\nimport { Paper, Typography, Theme, Grid } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { inflatingWhitespace } from \"../common/Whitespace\";\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(5),\n        padding: theme.spacing(5),\n        minHeight: theme.spacing(46),\n        minWidth: theme.spacing(92),\n    },\n}))(Paper);\n\nconst About: React.FC<{}> = (): JSX.Element => {\n    return (\n        <Grid container data-testid=\"About\">\n            <Grid item xs={3}></Grid>\n            <Grid item xs={6}>\n                <RootPaper>\n                    <Typography variant=\"h6\">About Chord Paper</Typography>\n                    <Typography variant=\"h6\">\n                        {inflatingWhitespace()}\n                    </Typography>\n                    <Typography>\n                        Chord Paper makes writing and reading chord sheets\n                        easier than the traditional monospace font formatting.\n                        It's a passion project born out of frustration at the\n                        clunkiness of writing chords on a computer.\n                    </Typography>\n                    <Typography>{inflatingWhitespace()}</Typography>\n                    <Typography>\n                        Hope you will find that Chord Paper helps you focus more\n                        of your musical time on playing and listening, and less\n                        on formatting.\n                    </Typography>\n                </RootPaper>\n            </Grid>\n            <Grid item xs={3}></Grid>\n        </Grid>\n    );\n};\n\nexport default About;\n","import React from \"react\";\nimport {\n    Theme,\n    ThemeProvider,\n    createMuiTheme,\n    PaletteColorOptions,\n    Grid,\n} from \"@material-ui/core\";\nimport ChordPaper from \"./components/ChordPaper\";\nimport { SnackbarProvider } from \"notistack\";\nimport { NeverGonnaGiveYouUp } from \"./NeverGonnaGiveYouUp\";\nimport { withStyles } from \"@material-ui/styles\";\nimport WoodBackground from \"./assets/img/symphony.png\";\nimport SideMenu from \"./components/SideMenu\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport About from \"./components/About\";\n\nconst createTheme = (): Theme => {\n    const lightBlue: PaletteColorOptions = {\n        main: \"#4fc3f7\",\n        light: \"#8bf6ff\",\n        dark: \"#0093c4\",\n        contrastText: \"#000000\",\n    };\n\n    const purple: PaletteColorOptions = {\n        main: \"#844ffc\",\n        light: \"#bb7eff\",\n        dark: \"#4a1fc8\",\n        contrastText: \"#ffffff\",\n    };\n\n    return createMuiTheme({\n        palette: {\n            primary: lightBlue,\n            secondary: purple,\n        },\n        typography: {\n            fontFamily: \"Merriweather\",\n            fontWeightRegular: 300,\n        },\n    });\n};\n\nconst AppLayout = withStyles({\n    root: {\n        backgroundImage: `url(${WoodBackground})`,\n        minHeight: \"100vh\",\n    },\n})(Grid);\n\nfunction App() {\n    const theme: Theme = createTheme();\n\n    const basePath = process.env.PUBLIC_URL;\n\n    const routeSwitches = (\n        <Switch>\n            <Route exact path=\"/\">\n                <ChordPaper initialSong={NeverGonnaGiveYouUp()} />\n            </Route>\n            <Route exact path=\"/about\">\n                <About />\n            </Route>\n        </Switch>\n    );\n\n    return (\n        <ThemeProvider theme={theme}>\n            <SnackbarProvider>\n                <BrowserRouter basename={basePath}>\n                    <SideMenu />\n                    <AppLayout container justify=\"center\">\n                        <Grid item>{routeSwitches}</Grid>\n                    </AppLayout>\n                </BrowserRouter>\n            </SnackbarProvider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}