{"version":3,"sources":["assets/img/symphony.png","components/edit/CopyAndPaste.ts","common/Whitespace.ts","components/about/About.tsx","components/edit/ErrorPage.tsx","common/LyricTokenizer.ts","common/ChordModel/ChordBlock.ts","common/ChordModel/ChordLinePatcher.ts","common/ChordModel/Collection.ts","common/ChordModel/ChordLine.ts","components/edit/DragAndDrop.tsx","components/Song.tsx","components/edit/InteractionContext.ts","components/edit/HighlightChordLyricStyle.ts","components/display/Lyric.tsx","components/edit/ChordDroppable.tsx","components/display/ChordSymbol.tsx","components/edit/DraggableChordSymbol.tsx","components/edit/TextInput.tsx","components/edit/Token.tsx","components/edit/Block.tsx","components/edit/ChordEditLine.tsx","components/edit/Line.tsx","components/edit/NewLine.tsx","components/edit/ChordPaperBody.tsx","components/tutorial/Playground.tsx","common/ChordModel/ChordSong.ts","components/tutorial/Common.tsx","components/tutorial/Start.tsx","components/Tutorial.tsx","components/tutorial/EditChord.tsx","components/tutorial/RemoveChord.tsx","components/tutorial/AddChord.tsx","components/tutorial/DragAndDropChord.tsx","components/tutorial/EditLyrics.tsx","components/tutorial/Instrumental.tsx","components/tutorial/ChordPositioning.tsx","components/tutorial/AddLine.tsx","components/tutorial/RemoveLine.tsx","components/tutorial/PasteLyrics.tsx","components/tutorial/MergeLine.tsx","components/tutorial/CopyAndPaste.tsx","components/SideMenu.tsx","components/edit/ChordPaperMenu.tsx","components/edit/EditableTypography.tsx","components/edit/Header.tsx","components/edit/ChordPaper.tsx","components/play/PlayMenu.tsx","components/play/PlayBlock.tsx","components/play/PlayLine.tsx","components/play/Play.tsx","components/WithAutoSave.tsx","components/SongRouter.tsx","components/Version.tsx","NeverGonnaGiveYouUp.ts","App.tsx","common/BrowserSave.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","RangePosition","isWhitespace","s","test","inflateIfEmpty","value","RootPaper","withStyles","theme","root","margin","spacing","padding","minHeight","minWidth","Paper","About","Grid","container","data-testid","item","xs","Typography","variant","position","ErrorPage","tokenize","lineOfLyrics","matches","match","ChordBlockValidator","iots","chord","lyric","type","ChordBlock","id","this","shortid","generate","lodash","omit","splitIndex","Error","tokens","lyricTokens","prevBlockLyricTokens","slice","thisBlockLyricTokens","prevBlock","join","other","validatedFields","jsonStr","result","parseJSON","isLeft","jsonObj","right","validationResult","decode","left","differ","dmp","DiffMatchPatch","diffTimeout","matchThreshold","ChordLineIterator","chordLine","currBlockIndex","currCharIndex","blockBuffer","prependLyrics","elements","map","currentBlock","charAt","length","skipChar","currentChar","nextChar","insertChar","atBlockBoundary","prevBlockIndex","deleteChar","i","splice","normalizeBlocks","replaceChordLineLyrics","newLyrics","diffs","diff_main","lyrics","diff_cleanupSemanticLossless","iterator","diff","diffOperation","diffChar","DiffOperation","DIFF_EQUAL","skip","DIFF_INSERT","insert","DIFF_DELETE","delete","finish","newBlocks","block","push","removeOrphanedBlocksWithNoChords","blocks","endsWith","lastIndex","addSpacesToOrphanedBlocks","Collection","undefined","index","findIndex","elem","idable","indexOfBefore","indexOf","newElem","ChordLineValidator","ChordLine","newChord","newPrevBlock","split","clone","chordBlocks","reduce","isEqual","otherBlock","contentEquals","isEmpty","chordBlock","fromValidatedFields","CopiedChordLinesValidator","copiedChordLines","normalizeNodeBoundary","offset","getPositionForNode","MIDDLE","offsetFromParent","findOffsetForNode","END","node","parentNode","nodeType","Node","TEXT_NODE","START","nodeValue","getPositionForTextNode","ELEMENT_NODE","childNodes","getPositionForElementNode","nodes","getSelectedLineIDs","selection","window","getSelection","rangeCount","range","wideRange","document","createRange","firstRange","getRangeAt","setStart","startContainer","startOffset","setEnd","endContainer","endOffset","rangeIndex","compareBoundaryPoints","Range","START_TO_START","END_TO_END","getWideSelectionBoundary","normalizeRange","lineElements","querySelectorAll","lineIDs","lineElementIndex","lineElement","intersectsNode","lineID","getAttribute","useLineCopyHandler","song","enqueueSnackbar","useSnackbar","event","lines","chordLines","filter","line","includes","copyMsg","serialized","payload","JSON","stringify","serializeCopiedChordLines","clipboardData","setData","preventDefault","useLinePasteHandler","deserializedCopyResult","obj","deserializeCopiedChordLines","errorMsg","message","currLine","get","copiedLines","addAfter","remove","RNDContext","createDndContext","HTML5Backend","SongMode","DragAndDrop","props","DNDElement","manager","useRef","children","current","dragDropManager","DndProvider","useDNDProviderElement","Fragment","InteractionContext","React","createContext","startInteraction","endInteraction","highlightedSpaceStyle","backgroundColor","palette","primary","main","highlightedWordStyle","color","outlineStyle","borderStyle","borderColor","borderRadius","borderWidth","withCustomLyricSelector","selector","options","customLyricClassSelector","withCustomChordSymbolSelector","customChordSymbolClassSelector","dragOverChordLyricStyle","highlightedSpace","highlightedWord","customOutlineStyles","outline","spaceClassSelector","wordClassSelector","chordSymbolSelector","hoverChordLyricStyle","chordTargetSelector","customChordTargetClassSelector","withCustomChordTargetSelector","lyricTypographyProps","display","lyricStyle","createStyles","tabSize","whiteSpace","wordSpacing","LyricTypography","Lyric","customClassName","className","clsx","ChordDroppable","useDrop","accept","drop","droppedChord","handled","onDropped","sourceBlockID","collect","monitor","isOver","shallow","dropRef","childElem","childClassName","dragOverClassName","hoverableClassName","cloneElement","RootRef","rootRef","ChordTypography","cursor","fontFamily","userSelect","ChordSymbol","formattedChord","DraggableChordSymbol","useDrag","chordBlockID","dragRef","InputTypography","width","grey","useContentEditableStyle","makeStyles","pointerEvents","content","TextInput","contentEditableRef","createRef","textContent","enterHandler","key","selectionRange","selectionOffsets","contains","specialBackspaceHandler","onSpecialBackspace","metaKey","ctrlKey","offsets","tabHandler","deleteContents","insertNode","createTextNode","collapse","normalize","specialStylingKeysHandler","newValue","onFinish","composeMultilinePaste","pasteContent","currValue","splitStringBySelection","beforeSelection","afterSelection","newPasteLines","handlePlainTextPaste","onPasteOverflow","getData","linesOfText","flatMap","setValue","handleJSONPaste","onJSONPaste","useEffect","focus","newRange","selectNodeContents","removeAllRanges","addRange","contentEditableStyle","classes","contentEditable","ref","onBlur","onKeyDown","handler","onPaste","suppressContentEditableWarning","InvisibleTypography","top","transform","ChordTargetBox","onClick","Token","lyricClassName","lyricBlock","Box","invisibleTarget","ChordInput","borderBottom","borderBottomColor","borderBottomWidth","useFirstTokenStyle","dragOver","red","hoverable","dark","useNormalTokenStyle","Block","useState","editing","setEditing","useContext","firstTokenStyle","normalTokenStyle","invisibleTargetForFirstToken","clickHandler","tokenIndex","onBlockSplit","stopPropagation","handleDragged","onChordChange","dropHandler","onChordDragAndDrop","endEdit","lyricBlocks","lyricToken","invisibleTargetOption","direction","onDragged","iconColorStyle","BackspaceIcon","UnstyledBackspaceIcon","Button","contained","UnstyledButton","Tooltip","tooltip","background","UnstyledTooltip","HighlightableBox","ChordEditLine","chordChangeHandler","setChord","onChangeLine","blockSplitHandler","splitBlock","placement","title","onRemove","interactive","onEdit","AtomicSelectionBox","LyricInput","secondary","Line","removed","setRemoved","startEdit","finishEdit","replaceLyrics","addHandler","onAddLine","removeHandler","onRemoveLine","setTimeout","pasteOverflowHandler","overflowContent","jsonPasteHandler","onMergeWithPreviousLine","nonEditableLine","onAdd","bottom","editLyricsInput","yeetDirection","Slide","in","timeout","data-lineid","HighlightableGrid","Divider","UnstyledDivider","AddCircleOutlineIcon","light","UnstyledAddCircleOutlineIcon","NewLine","useTheme","justify","style","useUninteractiveStyle","UnstyledPaper","ChordPaperBody","interacting","setInteracting","handleCopy","handleLinePaste","interactionContextValue","uninteractiveStyle","handleAddLineToTop","newLine","addBeginning","notifySongChanged","handleAddLine","handleRemoveLine","handleChangeLine","handlePasteOverflow","newChordLines","newLyricLine","fromLyrics","mergeWithPreviousLine","mergeLineWithPrevious","onSongChanged","handleChordDND","destinationBlockID","findLineAndBlock","sourceLine","destinationLine","destinationBlock","paperClassName","Provider","onCopy","elevation","firstNewLine","CheckCircleIcon","success","UnstyledCheckCircleIcon","Badge","UnstyledBadge","Playground","initialSong","setSong","setFinish","checkExpected","updatedSong","expectedSong","badgeContent","invisible","SongMetadataValidator","composedBy","performedBy","asHeardFrom","ChordSongValidator","metadata","ChordSong","prevLine","lastBlockIndex","otherLine","blockID","find","newTitle","newPerformedBy","newComposedBy","newAsHeardFrom","chordLineValidatedFields","lyricLines","lyricLine","LyricsTypography","LineBreak","Header","Preamble","allExercises","route","component","tabExample","example","variantMapping","body1","PlayArrowIcon","UnstyledPlayArrowIcon","marginTop","marginBottom","Fab","UnstyledFab","Tutorial","matchEntry","entry","exerciseEntry","exerciseIndex","nextButton","nextExercise","to","withPointerStyle","MenuIcon","UnstyledMenuIcon","CloseIcon","UnstyledCloseIcon","VerticalGridItem","maxWidth","TitleGrid","TitleName","CollapsedMenuSurface","height","FullHeightGrid","SideMenu","expanded","setExpanded","learnSubmenuOpen","setLearnSubMenuOpen","typographyProps","learnClickHandler","linkStyle","textDecoration","collapsedMenu","Drawer","open","anchor","alignContent","expandedMenu","alignItems","List","ListItem","button","ListItemIcon","ListItemText","primaryTypographyProps","exerciseLinks","exerciseRoute","inset","Collapse","tutorialMenu","SpeedDial","UnstyledSpeedDial","ChordPaperMenu","setOpen","pickFileHandler","fileList","files","file","fileReader","FileReader","onload","ev","target","ArrayBuffer","results","deserialize","onLoad","readAsText","loadAction","a","inputElem","createElement","addEventListener","click","icon","SpeedDialIcon","onOpen","onClose","ariaLabel","SpeedDialAction","tooltipTitle","blob","Blob","objectURL","URL","createObjectURL","download","href","revokeObjectURL","onNewSong","onPlay","PlaceholderTypography","EditableTypography","onValueChange","editableLine","placeholder","paddingBottom","align","details","newComposer","newPerformer","newHeardFrom","paddingTop","paddingLeft","paddingRight","ChordPaper","songChangeHandler","loadedSong","PlayMenu","FabProps","onMouseDownCapture","onExit","UnstyledTypography","PlayBlock","PlayLine","Play","windowWidth","useWindowWidth","columnWidth","snapThreshold","scrollPage","forward","nextPos","scrollX","distanceFromLastColumn","scrollTo","behavior","scrollForward","scrollBackward","handleKey","handleLeftClick","handleRightClick","ColumnedPaper","columnGap","columnRuleWidth","columnRuleStyle","columnRuleColor","columns","MarginBox","marginLeft","marginRight","removeEventListener","onMouseDown","onContextMenu","OriginalComponent","Song","mode","SongRouter","history","useHistory","editPath","basePath","playPath","switchToEdit","switchToPlay","path","Edit","PaddedTypography","Version","version","process","chords","NeverGonnaGiveYouUp","assembleLine","arr","tokenSize","subArr","chunk","lyricChunk","Math","floor","random","useBackdropStyles","backdrop","zIndex","drawer","createMuiTheme","contrastText","typography","fontWeightRegular","SnackbarProvider","variantSuccess","UnstyledSnackbarProvider","AppLayout","backgroundImage","WoodBackground","AutoSaveSongRouter","setLoadedSong","backdropStyles","loadResults","jsonSong","localStorage","getItem","loadSong","msg","loadLastSavedSong","Backdrop","CircularProgress","originalComponentProps","setItem","saveSong","AppContent","location","useLocation","routes","from","exact","pathname","App","ThemeProvider","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6a05a18c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/symphony.4ca23f9c.png\";","import {\n    ChordLine,\n    ChordLineValidator,\n    ChordLineValidatedFields,\n} from \"../../common/ChordModel/ChordLine\";\nimport * as iots from \"io-ts\";\nimport { Either, right, left, isLeft, parseJSON } from \"fp-ts/lib/Either\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { useSnackbar } from \"notistack\";\n\nconst CopiedChordLinesValidator = iots.type({\n    copiedChordLines: iots.array(ChordLineValidator),\n});\n\ntype CopiedChordLines = iots.TypeOf<typeof CopiedChordLinesValidator>;\n\nconst deserializeCopiedChordLines = (\n    jsonStr: string\n): Either<Error, ChordLine[]> | null => {\n    const result: Either<Error, unknown> = parseJSON(\n        jsonStr,\n        () => new Error(\"Failed to parse json string\")\n    );\n\n    if (isLeft(result)) {\n        return result;\n    }\n\n    const jsonObj = result.right as any;\n\n    // if the JSON doesn't contain this field, then it's a JSON copy payload\n    // from somewhere else - don't handle it\n    if (jsonObj.copiedChordLines === undefined) {\n        return null;\n    }\n\n    const validationResult = CopiedChordLinesValidator.decode(jsonObj);\n\n    if (isLeft(validationResult)) {\n        return left(new Error(\"Invalid Chord Lines payload\"));\n    }\n\n    const validatedChordLineObjects = validationResult.right.copiedChordLines;\n    const chordLines: ChordLine[] = validatedChordLineObjects.map(\n        (obj: ChordLineValidatedFields) => {\n            return ChordLine.fromValidatedFields(obj);\n        }\n    );\n\n    return right(chordLines);\n};\n\nconst serializeCopiedChordLines = (chordLines: ChordLine[]): string => {\n    const payload: CopiedChordLines = {\n        copiedChordLines: chordLines,\n    };\n\n    return JSON.stringify(payload);\n};\n\nenum RangePosition {\n    START,\n    END,\n    MIDDLE,\n}\n\nconst parentNode = (node: Node): Node => {\n    if (node.parentNode === null) {\n        throw new Error(\"Node doesn't have parent\");\n    }\n\n    return node.parentNode;\n};\n\nconst normalizeNodeBoundary = (\n    container: Node,\n    offset: number\n): [Node, number] => {\n    const position = getPositionForNode(container, offset);\n    if (position === RangePosition.MIDDLE) {\n        return [container, offset];\n    }\n\n    let offsetFromParent = findOffsetForNode(container);\n    if (position === RangePosition.END) {\n        offsetFromParent += 1;\n    }\n\n    return normalizeNodeBoundary(parentNode(container), offsetFromParent);\n};\n\n// ranges from selection tend to end up inside elements\n// e.g. selecting line 2 might look like\n// <div><div>line 1 |sel-start|</div></div>\n// <div><div>line 2 |sel-end|</div></div>\n// but what we really want is more like\n// <div><div>line 1 </div></div>\n// |sel-start|<div><div>line 2 </div></div>|sel-end|\n// this function adjusts the boundaries of range by climbing up the DOM tree\n// when the range boundary is at the start or end edge of an element\nconst normalizeRange = (range: Range) => {\n    const [startContainer, startOffset] = normalizeNodeBoundary(\n        range.startContainer,\n        range.startOffset\n    );\n    const [endContainer, endOffset] = normalizeNodeBoundary(\n        range.endContainer,\n        range.endOffset\n    );\n\n    range.setStart(startContainer, startOffset);\n    range.setEnd(endContainer, endOffset);\n};\n\nconst getPositionForTextNode = (\n    container: Node,\n    offset: number\n): RangePosition => {\n    if (offset === 0) {\n        return RangePosition.START;\n    }\n\n    const nodeValue: string | null = container.nodeValue;\n    if (nodeValue === null) {\n        throw new Error(\"Text node has no value?\");\n    }\n\n    if (offset === nodeValue.length) {\n        return RangePosition.END;\n    }\n\n    return RangePosition.MIDDLE;\n};\n\nconst getPositionForElementNode = (\n    container: Node,\n    offset: number\n): RangePosition => {\n    const childNodes = container.childNodes;\n    if (offset === 0) {\n        return RangePosition.START;\n    }\n\n    if (offset === childNodes.length) {\n        return RangePosition.END;\n    }\n\n    return RangePosition.MIDDLE;\n};\n\nconst getPositionForNode = (container: Node, offset: number): RangePosition => {\n    switch (container.nodeType) {\n        case Node.TEXT_NODE: {\n            return getPositionForTextNode(container, offset);\n        }\n        case Node.ELEMENT_NODE: {\n            return getPositionForElementNode(container, offset);\n        }\n\n        default: {\n            throw new Error(\"Crash for now \" + container.nodeType);\n        }\n    }\n};\n\nconst findOffsetForNode = (node: Node): number => {\n    if (node.parentNode === null) {\n        throw new Error(\"wtf\");\n    }\n\n    const nodes = node.parentNode.childNodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n        if (nodes.item(i) === node) {\n            return i;\n        }\n    }\n\n    throw new Error(\"Child node doesn't exist in parent???\");\n};\n\n// selection can be represented as many discontiguous ranges, but that doesn't help us\n// figure out whether a line is under selection or not.\n// this utility function figures out a range that's the superset of all ranges in the selection\n// with the start point as the earliest start point, and the end point as the latest end point\nconst getWideSelectionBoundary = (selection: Selection): Range => {\n    const wideRange = document.createRange();\n    const firstRange = selection.getRangeAt(0);\n    wideRange.setStart(firstRange.startContainer, firstRange.startOffset);\n    wideRange.setEnd(firstRange.endContainer, firstRange.endOffset);\n    // selecting in the app can result in many dis\n\n    for (let rangeIndex = 1; rangeIndex < selection.rangeCount; rangeIndex++) {\n        const range = selection.getRangeAt(rangeIndex);\n\n        if (\n            range.compareBoundaryPoints(Range.START_TO_START, wideRange) === -1\n        ) {\n            wideRange.setStart(range.startContainer, range.startOffset);\n        }\n\n        if (range.compareBoundaryPoints(Range.END_TO_END, wideRange) === 1) {\n            wideRange.setEnd(range.endContainer, range.endOffset);\n        }\n    }\n\n    return wideRange;\n};\n\nconst getSelectedLineIDs = (): string[] => {\n    const selection: Selection | null = window.getSelection();\n    if (selection === null || selection.rangeCount === 0) {\n        return [];\n    }\n\n    const range = getWideSelectionBoundary(selection);\n    normalizeRange(range);\n\n    const lineElements = document.querySelectorAll(\"[data-lineid]\");\n    const lineIDs: string[] = [];\n\n    for (\n        let lineElementIndex = 0;\n        lineElementIndex < lineElements.length;\n        lineElementIndex++\n    ) {\n        const lineElement = lineElements.item(lineElementIndex);\n\n        if (!range.intersectsNode(lineElement)) {\n            continue;\n        }\n\n        const lineID: string | null = lineElement.getAttribute(\"data-lineid\");\n        if (lineID === null) {\n            throw new Error(\n                \"Unexpected - line element should have line ID because that's how it was selected\"\n            );\n        }\n\n        lineIDs.push(lineID);\n    }\n\n    return lineIDs;\n};\n\nexport const useLineCopyHandler = (song: ChordSong) => {\n    const { enqueueSnackbar } = useSnackbar();\n\n    return (event: React.ClipboardEvent<HTMLDivElement>): boolean => {\n        const lineIDs: string[] = getSelectedLineIDs();\n        const lines = song.chordLines.filter((line: ChordLine): boolean => {\n            return lineIDs.includes(line.id);\n        });\n\n        if (lines.length === 0) {\n            return false;\n        }\n\n        const serialized = serializeCopiedChordLines(lines);\n        event.clipboardData.setData(\"application/json\", serialized);\n\n        event.preventDefault();\n\n        let copyMsg: string;\n        if (lines.length === 1) {\n            copyMsg = `1 line copied to your clipboard`;\n        } else {\n            copyMsg = `${lines.length} lines copied to your clipboard`;\n        }\n\n        enqueueSnackbar(copyMsg, { variant: \"info\" });\n        return true;\n    };\n};\n\nexport const useLinePasteHandler = (song: ChordSong) => {\n    const { enqueueSnackbar } = useSnackbar();\n\n    return (id: IDable<\"ChordLine\">, jsonStr: string): boolean => {\n        const deserializedCopyResult = deserializeCopiedChordLines(jsonStr);\n        // not actually a Chord Paper line payload, don't handle it\n        if (deserializedCopyResult === null) {\n            return false;\n        }\n\n        if (isLeft(deserializedCopyResult)) {\n            const errorMsg =\n                \"Failed to paste copied lines: \" +\n                deserializedCopyResult.left.message;\n            enqueueSnackbar(errorMsg, { variant: \"error\" });\n            return true;\n        }\n\n        const currLine: ChordLine = song.get(id);\n\n        const copiedLines: ChordLine[] = deserializedCopyResult.right;\n        song.addAfter(id, ...copiedLines);\n\n        // if the line is empty, the user was probably trying to paste into the current line, and not the next\n        // so just remove the current line to simulate that\n        if (currLine.isEmpty()) {\n            song.remove(id);\n        }\n\n        return true;\n    };\n};\n","export const isWhitespace = (s: string): boolean => {\n    return /^\\s+$/.test(s);\n};\n\nexport const inflatingWhitespace = (): string => {\n    return \"\\u00A0\";\n};\n\nexport const inflateIfEmpty = (value: string) => {\n    if (isWhitespace(value)) {\n        return inflatingWhitespace();\n    }\n\n    return value;\n};\n","import React from \"react\";\nimport { Paper, Typography, Theme, Grid } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { inflatingWhitespace } from \"../../common/Whitespace\";\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(5),\n        padding: theme.spacing(5),\n        minHeight: theme.spacing(46),\n        minWidth: theme.spacing(92),\n    },\n}))(Paper);\n\nconst About: React.FC<{}> = (): JSX.Element => {\n    return (\n        <Grid container data-testid=\"About\">\n            <Grid item xs={3}></Grid>\n            <Grid item xs={6}>\n                <RootPaper>\n                    <Typography variant=\"h6\">About Chord Paper</Typography>\n                    <Typography variant=\"h6\">\n                        {inflatingWhitespace()}\n                    </Typography>\n                    <Typography>\n                        Chord Paper makes writing and reading chord sheets\n                        easier than the traditional monospace font formatting.\n                        It's a passion project born out of frustration at the\n                        clunkiness of writing chords on a computer.\n                    </Typography>\n                    <Typography>{inflatingWhitespace()}</Typography>\n                    <Typography>\n                        Hope you will find that Chord Paper helps you focus more\n                        of your musical time on playing and listening, and less\n                        on formatting.\n                    </Typography>\n                </RootPaper>\n            </Grid>\n            <Grid item xs={3}></Grid>\n        </Grid>\n    );\n};\n\nexport default About;\n","import { Grid, Paper, Theme, Typography } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(5),\n        padding: theme.spacing(5),\n        minHeight: theme.spacing(46),\n        minWidth: theme.spacing(92),\n        position: \"relative\",\n    },\n}))(Paper);\n\nconst ErrorPage: React.FC<{}> = (): JSX.Element => {\n    return (\n        <Grid container data-testid=\"Tutorial\">\n            <Grid item xs={3}></Grid>\n            <Grid item xs={6}>\n                <RootPaper>\n                    <Typography>An Error Occurred Oh No</Typography>\n                </RootPaper>\n            </Grid>\n            <Grid item xs={3}></Grid>\n        </Grid>\n    );\n};\n\nexport default ErrorPage;\n","export const tokenize = (lineOfLyrics: string): string[] => {\n    const matches = lineOfLyrics.match(/((\\w|')+|[^\\w'])/g);\n    if (matches === null) {\n        return [];\n    }\n\n    return matches;\n};\n","import { Either, isLeft, left, parseJSON, right } from \"fp-ts/lib/Either\";\nimport * as iots from \"io-ts\";\nimport lodash from \"lodash\";\nimport shortid from \"shortid\";\nimport { tokenize } from \"../LyricTokenizer\";\nimport { IDable } from \"./Collection\";\n\ninterface ChordBlockConstructorParams {\n    chord: string;\n    lyric: string;\n}\n\nexport const ChordBlockValidator = iots.type({\n    chord: iots.string,\n    lyric: iots.string,\n    type: iots.literal(\"ChordBlock\"),\n});\n\nexport type ChordBlockValidatedFields = iots.TypeOf<typeof ChordBlockValidator>;\n\nexport class ChordBlock implements IDable<\"ChordBlock\"> {\n    id: string;\n    chord: string;\n    lyric: string;\n    type: \"ChordBlock\";\n\n    constructor({ chord, lyric }: ChordBlockConstructorParams) {\n        this.id = shortid.generate();\n        this.chord = chord;\n        this.lyric = lyric;\n        this.type = \"ChordBlock\";\n    }\n\n    toJSON(): object {\n        return lodash.omit(this, \"id\");\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordBlockValidatedFields\n    ): ChordBlock {\n        return new ChordBlock({\n            chord: validatedFields.chord,\n            lyric: validatedFields.lyric,\n        });\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordBlock> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordBlockValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Block object\"));\n        }\n\n        return right(\n            new ChordBlock({\n                chord: validationResult.right.chord,\n                lyric: validationResult.right.lyric,\n            })\n        );\n    }\n\n    get lyricTokens(): string[] {\n        return tokenize(this.lyric);\n    }\n\n    // splits a block, and returns the block before\n    // e.g.\n    // {id:\"A\", chord: \"B7\", lyric:\"my dear we're\"}\n    // splitBlock(4) =>\n    // {id:\"B\", chord: \"B7\", lyric:\"my dear \"}\n    // {id:\"A\", chord: \"\", \"we're\"}\n    split(splitIndex: number): ChordBlock {\n        if (splitIndex === 0) {\n            throw new Error(\"Split index can't be zero\");\n        }\n\n        const tokens = this.lyricTokens;\n        const prevBlockLyricTokens: string[] = tokens.slice(0, splitIndex);\n        const thisBlockLyricTokens: string[] = tokens.slice(splitIndex);\n\n        const prevBlock: ChordBlock = new ChordBlock({\n            chord: this.chord,\n            lyric: prevBlockLyricTokens.join(\"\"),\n        });\n\n        this.chord = \"\";\n        this.lyric = thisBlockLyricTokens.join(\"\");\n\n        return prevBlock;\n    }\n\n    contentEquals(other: ChordBlock): boolean {\n        return this.chord === other.chord && this.lyric === other.lyric;\n    }\n\n    isEmpty(): boolean {\n        return this.chord === \"\" && this.lyric === \"\";\n    }\n}\n","import { ChordLine } from \"./ChordLine\";\nimport { ChordBlock } from \"./ChordBlock\";\nimport { DiffMatchPatch, DiffOperation } from \"diff-match-patch-typescript\";\n\nconst differ: DiffMatchPatch = (() => {\n    const dmp = new DiffMatchPatch();\n    dmp.diffTimeout = 0;\n    dmp.matchThreshold = 0;\n    return dmp;\n})();\n\nclass ChordLineIterator {\n    private chordLine: ChordLine;\n    private currBlockIndex: number;\n    private currCharIndex: number;\n    private blockBuffer: string[];\n    private prependLyrics: string;\n\n    constructor(chordLine: ChordLine) {\n        this.chordLine = chordLine;\n\n        this.currBlockIndex = 0;\n        this.currCharIndex = 0;\n\n        this.blockBuffer = chordLine.elements.map(() => \"\");\n        this.prependLyrics = \"\";\n    }\n\n    private atBlockBoundary(): boolean {\n        return this.currCharIndex === 0;\n    }\n\n    private currentBlock(): ChordBlock {\n        return this.chordLine.elements[this.currBlockIndex];\n    }\n\n    private currentChar(): string {\n        return this.currentBlock().lyric.charAt(this.currCharIndex);\n    }\n\n    private nextChar(): void {\n        this.currCharIndex += 1;\n\n        if (this.currCharIndex >= this.currentBlock().lyric.length) {\n            this.currBlockIndex += 1;\n            this.currCharIndex = 0;\n        }\n    }\n\n    skip(skipChar: string): void {\n        if (this.currentChar() !== skipChar) {\n            throw new Error(\"Mismatched characters when skipping\");\n        }\n\n        this.blockBuffer[this.currBlockIndex] += skipChar;\n\n        this.nextChar();\n    }\n\n    insert(insertChar: string): void {\n        if (!this.atBlockBoundary()) {\n            this.blockBuffer[this.currBlockIndex] += insertChar;\n        } else {\n            // bias towards inserting  at the end of the previous block if between two blocks\n            // since chords are aligned to the beginning of the block, we don't want to shift the lyrics\n            // inside a block unnecessarily\n            const prevBlockIndex = this.currBlockIndex - 1;\n            if (prevBlockIndex >= 0) {\n                this.blockBuffer[prevBlockIndex] += insertChar;\n            } else {\n                this.prependLyrics += insertChar;\n            }\n        }\n    }\n\n    delete(deleteChar: string): void {\n        if (this.currentChar() !== deleteChar) {\n            throw new Error(\"Mismatched characters when deleting\");\n        }\n\n        this.nextChar();\n    }\n\n    finish(): void {\n        for (let i = 0; i < this.chordLine.elements.length; i++) {\n            this.chordLine.elements[i].lyric = this.blockBuffer[i];\n        }\n\n        if (this.prependLyrics !== \"\") {\n            this.chordLine.elements.splice(\n                0,\n                0,\n                new ChordBlock({ chord: \"\", lyric: this.prependLyrics })\n            );\n        }\n\n        this.chordLine.normalizeBlocks();\n    }\n}\n\nconst removeOrphanedBlocksWithNoChords = (chordLine: ChordLine): void => {\n    const newBlocks: ChordBlock[] = [];\n\n    for (const block of chordLine.elements) {\n        if (block.lyric !== \"\" || block.chord !== \"\") {\n            newBlocks.push(block);\n        }\n    }\n\n    chordLine.elements = newBlocks;\n};\n\nconst addSpacesToOrphanedBlocks = (chordLine: ChordLine): void => {\n    const blocks: ChordBlock[] = chordLine.elements;\n    for (let i = 0; i < blocks.length; i++) {\n        const block = blocks[i];\n        if (block.lyric !== \"\") {\n            continue;\n        }\n\n        const prevBlockHasSpaceToSteal =\n            i > 0 &&\n            blocks[i - 1].lyric.length > 1 &&\n            blocks[i - 1].lyric.endsWith(\" \");\n\n        if (prevBlockHasSpaceToSteal) {\n            // \"steal\" a space from the previous block\n            // e.g. if * represents a space\n            // G        A\n            // We're*no*strangers\n            // replaced with\n            // We're*no*\n            // instead of adding two spaces consecutively, like\n            // G        A\n            // We're*no**\n            // we'll just relegate one of the unused spaces for the orphaned block, like\n            // G       A\n            // We're*no*\n\n            // if there's no space to steal, just add one so that it's backed by a character\n            const prevBlock = blocks[i - 1];\n            const lastIndex = prevBlock.lyric.length - 1;\n            prevBlock.lyric = prevBlock.lyric.slice(0, lastIndex);\n        }\n\n        block.lyric = \" \";\n    }\n};\n\nexport const replaceChordLineLyrics = (\n    chordLine: ChordLine,\n    newLyrics: string\n): void => {\n    const diffs = differ.diff_main(chordLine.lyrics, newLyrics);\n    differ.diff_cleanupSemanticLossless(diffs);\n\n    const iterator = new ChordLineIterator(chordLine);\n\n    for (const diff of diffs) {\n        const diffOperation = diff[0];\n        for (const diffChar of diff[1]) {\n            switch (diffOperation) {\n                case DiffOperation.DIFF_EQUAL: {\n                    iterator.skip(diffChar);\n                    break;\n                }\n                case DiffOperation.DIFF_INSERT: {\n                    iterator.insert(diffChar);\n                    break;\n                }\n                case DiffOperation.DIFF_DELETE: {\n                    iterator.delete(diffChar);\n                    break;\n                }\n            }\n        }\n    }\n\n    iterator.finish();\n\n    removeOrphanedBlocksWithNoChords(chordLine);\n    addSpacesToOrphanedBlocks(chordLine);\n};\n","// use the name of the class the ID is describing for T\n// e.g. IDable<\"Person\">\nexport interface IDable<T extends string> {\n    id: string;\n    type: T;\n}\n\nexport abstract class Collection<T extends IDable<U>, U extends string> {\n    elements: T[];\n\n    constructor(elements?: T[]) {\n        if (elements !== undefined) {\n            this.elements = elements; //TODO: consider whether this needs to be a shallow copy\n        } else {\n            this.elements = [];\n        }\n    }\n\n    protected indexOf(id: string): number {\n        const index = this.elements.findIndex((elem: T) => elem.id === id);\n\n        if (index < 0) {\n            throw new Error(\"Can't find element inside collection\");\n        }\n\n        return index;\n    }\n\n    abstract clone(): Collection<T, U>;\n\n    // adds a element after the specified id\n    addAfter(idable: IDable<U>, ...newElem: T[]): void {\n        const indexOfBefore = this.indexOf(idable.id);\n        this.elements.splice(indexOfBefore + 1, 0, ...newElem);\n    }\n\n    addBeginning(...newElem: T[]): void {\n        this.elements.splice(0, 0, ...newElem);\n    }\n\n    remove(idable: IDable<U>): T {\n        const index = this.indexOf(idable.id);\n        const removed = this.elements.splice(index, 1);\n        return removed[0];\n    }\n\n    get(idable: IDable<U>): T {\n        const index = this.indexOf(idable.id);\n        return this.elements[index];\n    }\n}\n","import { Either, isLeft, left, parseJSON, right } from \"fp-ts/lib/Either\";\nimport * as iots from \"io-ts\";\nimport lodash from \"lodash\";\nimport shortid from \"shortid\";\nimport {\n    ChordBlock,\n    ChordBlockValidatedFields,\n    ChordBlockValidator,\n} from \"./ChordBlock\";\nimport { replaceChordLineLyrics } from \"./ChordLinePatcher\";\nimport { Collection, IDable } from \"./Collection\";\n\nexport const ChordLineValidator = iots.type({\n    elements: iots.array(ChordBlockValidator),\n    type: iots.literal(\"ChordLine\"),\n});\n\nexport type ChordLineValidatedFields = iots.TypeOf<typeof ChordLineValidator>;\n\nexport class ChordLine extends Collection<ChordBlock, \"ChordBlock\">\n    implements IDable<\"ChordLine\"> {\n    id: string;\n    type: \"ChordLine\";\n\n    constructor(elements?: ChordBlock[]) {\n        if (elements === undefined) {\n            elements = [new ChordBlock({ chord: \"\", lyric: \"\" })];\n        }\n\n        super(elements);\n\n        this.id = shortid.generate();\n        this.type = \"ChordLine\";\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordLineValidatedFields\n    ): ChordLine {\n        const chordBlockElems: ChordBlock[] = validatedFields.elements.map(\n            (value: ChordBlockValidatedFields) => {\n                return ChordBlock.fromValidatedFields(value);\n            }\n        );\n\n        return new ChordLine(chordBlockElems);\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordLine> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordLineValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Line object\"));\n        }\n\n        return right(this.fromValidatedFields(validationResult.right));\n    }\n\n    static fromLyrics(lyrics: string): ChordLine {\n        const block = new ChordBlock({\n            chord: \"\",\n            lyric: lyrics,\n        });\n\n        return new ChordLine([block]);\n    }\n\n    get chordBlocks(): ChordBlock[] {\n        return this.elements;\n    }\n\n    get lyrics(): string {\n        const lyricTokens = this.chordBlocks.map(\n            (chordBlock: ChordBlock) => chordBlock.lyric\n        );\n\n        return lyricTokens.join(\"\");\n    }\n\n    replaceLyrics(newLyrics: string): void {\n        if (newLyrics === this.lyrics) {\n            return;\n        }\n\n        replaceChordLineLyrics(this, newLyrics);\n    }\n\n    setChord(idable: IDable<\"ChordBlock\">, newChord: string): void {\n        const index = this.indexOf(idable.id);\n        this.elements[index].chord = newChord;\n        this.normalizeBlocks();\n    }\n\n    splitBlock(idable: IDable<\"ChordBlock\">, splitIndex: number): void {\n        const index = this.indexOf(idable.id);\n        const block = this.elements[index];\n        const newPrevBlock = block.split(splitIndex);\n        this.elements.splice(index, 0, newPrevBlock);\n    }\n\n    // passes through every block to ensure that blocks without chords exist (except for the first)\n    normalizeBlocks(): void {\n        const newBlocks: ChordBlock[] = [];\n\n        for (let i = 0; i < this.elements.length; i++) {\n            const block = this.elements[i];\n\n            if (block.chord === \"\" && newBlocks.length > 0) {\n                const lastIndex = newBlocks.length - 1;\n                newBlocks[lastIndex].lyric += block.lyric;\n            } else {\n                newBlocks.push(block);\n            }\n        }\n\n        // avoid rejiggering the data if it's a no-op\n        if (newBlocks.length !== this.elements.length) {\n            this.elements = newBlocks;\n        }\n    }\n\n    clone(): ChordLine {\n        const clone = new ChordLine(this.elements);\n        clone.id = this.id;\n        return clone;\n    }\n\n    toJSON(): object {\n        return lodash.omit(this, \"id\");\n    }\n\n    contentEquals(other: ChordLine): boolean {\n        if (this.chordBlocks.length !== other.chordBlocks.length) {\n            return false;\n        }\n\n        const reducer = (\n            isEqual: boolean,\n            value: ChordBlock,\n            index: number\n        ): boolean => {\n            if (!isEqual) {\n                return false;\n            }\n\n            const otherBlock = other.chordBlocks[index];\n            if (!value.contentEquals(otherBlock)) {\n                return false;\n            }\n\n            return true;\n        };\n\n        return this.chordBlocks.reduce(reducer, true);\n    }\n\n    isEmpty(): boolean {\n        if (this.chordBlocks.length > 1) {\n            return false;\n        }\n\n        if (this.chordBlocks.length === 0) {\n            return true;\n        }\n\n        return this.chordBlocks[0].isEmpty();\n    }\n}\n","import React, { useRef } from \"react\";\nimport { createDndContext, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nconst RNDContext = createDndContext(HTML5Backend);\n\ninterface DragAndDropProps {\n    children: React.ReactElement | null;\n}\n\nfunction useDNDProviderElement(props: DragAndDropProps) {\n    const manager = useRef(RNDContext);\n\n    if (!props.children) {\n        throw new Error(\"No children provided to DND wrapper\");\n    }\n\n    if (manager.current.dragDropManager === undefined) {\n        throw new Error(\"No DND manager found\");\n    }\n\n    return (\n        <DndProvider manager={manager.current.dragDropManager}>\n            {props.children}\n        </DndProvider>\n    );\n}\n\nconst DragAndDrop: React.FC<DragAndDropProps> = (\n    props: DragAndDropProps\n): JSX.Element => {\n    const DNDElement = useDNDProviderElement(props);\n    return <React.Fragment>{DNDElement}</React.Fragment>;\n};\n\nexport default DragAndDrop;\n","import React, { useState } from \"react\";\nimport { ChordSong } from \"../common/ChordModel/ChordSong\";\nimport ChordPaper from \"./edit/ChordPaper\";\nimport Play from \"./play/Play\";\n\nexport enum SongMode {\n    Edit,\n    Play,\n}\n\ninterface SongProps {\n    initialSong: ChordSong;\n    mode: SongMode;\n    onEdit?: () => void;\n    onPlay?: () => void;\n    onSongChanged?: (song: ChordSong) => void;\n}\n\nconst Song: React.FC<SongProps> = (props: SongProps): JSX.Element => {\n    const [song, setSong] = useState<ChordSong>(props.initialSong);\n\n    const handleSongChanged = (song: ChordSong) => {\n        const updatedSong = song.clone();\n        props.onSongChanged?.(updatedSong);\n        setSong(updatedSong);\n    };\n\n    if (props.mode === SongMode.Play) {\n        return <Play song={song} onEdit={props.onEdit} />;\n    }\n\n    return (\n        <ChordPaper\n            song={song}\n            onSongChanged={handleSongChanged}\n            onPlay={props.onPlay}\n        />\n    );\n};\n\nexport default Song;\n","import React from \"react\";\n\nexport interface InteractionSetter {\n    startInteraction: () => void;\n    endInteraction: () => void;\n}\n\nconst defaultSetter: InteractionSetter = {\n    startInteraction: () => {},\n    endInteraction: () => {},\n};\n\nexport const InteractionContext = React.createContext<InteractionSetter>(\n    defaultSetter\n);\n","import { Theme } from \"@material-ui/core\";\nimport { CSSProperties } from \"@material-ui/styles\";\n\nexport const spaceClassName = \"LyricTokenSpace\";\nexport const wordClassName = \"LyricTokenWord\";\nexport const firstTokenClassName = \"FirstLyricToken\";\n\nexport const chordTargetClassName = \"ChordTarget\";\nexport const chordSymbolClassName = \"ChordSymbol\";\n\nconst highlightedSpaceStyle = (theme: Theme): CSSProperties => ({\n    backgroundColor: theme.palette.primary.main,\n});\n\nconst highlightedWordStyle = (theme: Theme): CSSProperties => ({\n    color: theme.palette.primary.main,\n});\n\nconst outlineStyle = (theme: Theme): CSSProperties => ({\n    borderStyle: \"solid\",\n    borderColor: theme.palette.primary.main,\n    borderRadius: \"0.3em\",\n    borderWidth: \"0.075em\",\n});\n\nexport interface HighlightChordLyricStyleOptions {\n    outline?: (theme: Theme) => CSSProperties;\n    customLyricClassSelector?: string;\n    customChordTargetClassSelector?: string;\n    customChordSymbolClassSelector?: string;\n}\n\nconst withCustomLyricSelector = (\n    selector: string,\n    options?: HighlightChordLyricStyleOptions\n): string => {\n    if (options?.customLyricClassSelector === undefined) {\n        return selector;\n    }\n\n    return `${selector}.${options.customLyricClassSelector}`;\n};\n\nconst withCustomChordTargetSelector = (\n    selector: string,\n    options?: HighlightChordLyricStyleOptions\n): string => {\n    if (options?.customChordTargetClassSelector === undefined) {\n        return selector;\n    }\n\n    return `${selector}.${options.customChordTargetClassSelector}`;\n};\n\nconst withCustomChordSymbolSelector = (\n    selector: string,\n    options?: HighlightChordLyricStyleOptions\n): string => {\n    if (options?.customChordSymbolClassSelector === undefined) {\n        return selector;\n    }\n\n    return `${selector}.${options.customChordSymbolClassSelector}`;\n};\n\nexport const dragOverChordLyricStyle = (\n    options?: HighlightChordLyricStyleOptions\n) => {\n    return (theme: Theme) => {\n        const highlightedSpace = highlightedSpaceStyle(theme);\n        const highlightedWord = highlightedWordStyle(theme);\n\n        const customOutlineStyles: CSSProperties | undefined =\n            options?.outline !== undefined ? options.outline(theme) : undefined;\n\n        const outline = {\n            ...outlineStyle(theme),\n            ...customOutlineStyles,\n        };\n\n        const spaceClassSelector = withCustomLyricSelector(\n            `.${spaceClassName}`,\n            options\n        );\n        const wordClassSelector = withCustomLyricSelector(\n            `.${wordClassName}`,\n            options\n        );\n\n        const chordSymbolSelector = withCustomChordSymbolSelector(\n            `.${chordSymbolClassName}`,\n            options\n        );\n\n        return {\n            root: {\n                [`& ${spaceClassSelector}`]: highlightedSpace,\n                [`& ${wordClassSelector}`]: highlightedWord,\n                [`& ${chordSymbolSelector}`]: outline,\n            },\n        };\n    };\n};\n\nexport const hoverChordLyricStyle = (\n    options?: HighlightChordLyricStyleOptions\n) => {\n    return (theme: Theme) => {\n        const highlightedSpace = highlightedSpaceStyle(theme);\n        const highlightedWord = highlightedWordStyle(theme);\n\n        const customOutlineStyles: CSSProperties | undefined =\n            options?.outline !== undefined ? options.outline(theme) : undefined;\n\n        const outline = {\n            ...outlineStyle(theme),\n            ...customOutlineStyles,\n        };\n\n        const spaceClassSelector = withCustomLyricSelector(\n            `.${spaceClassName}`,\n            options\n        );\n        const wordClassSelector = withCustomLyricSelector(\n            `.${wordClassName}`,\n            options\n        );\n        const chordTargetSelector = withCustomChordTargetSelector(\n            `.${chordTargetClassName}`,\n            options\n        );\n        const chordSymbolSelector = withCustomChordSymbolSelector(\n            `.${chordSymbolClassName}`,\n            options\n        );\n\n        return {\n            root: {\n                [`& ${chordTargetSelector}:hover ~ ${spaceClassSelector}`]: highlightedSpace,\n                [`& ${chordTargetSelector}:hover ~ * ${spaceClassSelector}`]: highlightedSpace,\n\n                [`& ${chordTargetSelector}:hover ~ ${wordClassSelector}`]: highlightedWord,\n                [`& ${chordTargetSelector}:hover ~ * ${wordClassSelector}`]: highlightedWord,\n\n                [`& ${chordTargetSelector}${chordSymbolSelector}:hover`]: outline,\n                [`& ${chordTargetSelector}:hover ${chordSymbolSelector}`]: outline,\n            },\n        };\n    };\n};\n","import { Typography, withStyles, createStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { isWhitespace } from \"../../common/Whitespace\";\nimport {\n    spaceClassName,\n    wordClassName,\n} from \"../edit/HighlightChordLyricStyle\";\n\nexport const lyricTypographyVariant: \"h6\" = \"h6\";\n\nexport const lyricTypographyProps = {\n    variant: lyricTypographyVariant,\n    display: \"inline\" as \"inline\",\n};\n\nexport const lyricStyle = createStyles({\n    root: {\n        tabSize: 16,\n        whiteSpace: \"pre\",\n        wordSpacing: \".15em\",\n        display: \"inline-block\",\n    },\n});\n\nexport const LyricTypography = withStyles(lyricStyle)(Typography);\n\ninterface LyricProps extends DataTestID {\n    children: string;\n    className?: string;\n}\n\nconst Lyric: React.FC<LyricProps> = (props: LyricProps): JSX.Element => {\n    const customClassName = props.className ?? \"\";\n\n    const className = clsx({\n        [spaceClassName]: isWhitespace(props.children),\n        [wordClassName]: !isWhitespace(props.children),\n        [customClassName]: props.className !== undefined,\n    });\n\n    return (\n        <LyricTypography\n            {...lyricTypographyProps}\n            className={className}\n            data-testid={props[\"data-testid\"]}\n        >\n            {props.children}\n        </LyricTypography>\n    );\n};\n\nexport default Lyric;\n","import { RootRef } from \"@material-ui/core\";\nimport React from \"react\";\nimport { DropTargetMonitor, useDrop } from \"react-dnd\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\n\nexport const DNDChordType: \"chord\" = \"chord\";\n\nexport interface DNDChord {\n    type: typeof DNDChordType;\n    sourceBlockID: IDable<\"ChordBlock\">;\n    chord: string;\n    handled: boolean;\n}\n\nexport const NewDNDChord = (\n    sourceBlockID: IDable<\"ChordBlock\">,\n    chord: string\n): DNDChord => {\n    return {\n        type: DNDChordType,\n        sourceBlockID: sourceBlockID,\n        chord: chord,\n        handled: false,\n    };\n};\n\ninterface ClassNameable {\n    className?: string;\n}\n\ninterface ChordDroppableProps {\n    children: React.ReactElement<ClassNameable>;\n    onDropped: (newChord: string, sourceBlockID: IDable<\"ChordBlock\">) => void;\n    hoverableClassName?: string;\n    dragOverClassName?: string;\n}\n\nconst ChordDroppable: React.FC<ChordDroppableProps> = (\n    props: ChordDroppableProps\n) => {\n    const [{ isOver }, dropRef] = useDrop<DNDChord, DNDChord, any>({\n        accept: DNDChordType,\n        drop: (droppedChord: DNDChord) => {\n            if (!droppedChord.handled) {\n                droppedChord.handled = true;\n                props.onDropped(droppedChord.chord, droppedChord.sourceBlockID);\n            }\n            return droppedChord;\n        },\n        collect: (monitor: DropTargetMonitor) => ({\n            isOver: monitor.isOver({ shallow: true }),\n        }),\n    });\n\n    let childElem: React.ReactElement<ClassNameable> = props.children;\n    const childClassName: string | undefined = isOver\n        ? props.dragOverClassName\n        : props.hoverableClassName;\n\n    if (childClassName !== undefined) {\n        childElem = React.cloneElement(childElem, {\n            className: childClassName,\n        });\n    }\n\n    return <RootRef rootRef={dropRef}>{childElem}</RootRef>;\n};\n\nexport default ChordDroppable;\n","import { Typography } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { inflateIfEmpty } from \"../../common/Whitespace\";\nimport { lyricTypographyVariant } from \"./Lyric\";\n\nconst ChordTypography = withStyles({\n    root: {\n        whiteSpace: \"pre\",\n        cursor: \"pointer\",\n        fontFamily: \"PoriChord\",\n        userSelect: \"all\",\n    },\n})(Typography);\n\nexport interface ChordSymbolProps {\n    children: string;\n    className?: string;\n}\n\nconst ChordSymbol: React.FC<ChordSymbolProps> = (\n    props: ChordSymbolProps\n): JSX.Element => {\n    const formattedChord = (): string => {\n        let chord = props.children;\n        if (chord.endsWith(\" \")) {\n            return chord;\n        }\n\n        chord = chord + \" \";\n\n        return inflateIfEmpty(chord);\n    };\n\n    return (\n        <ChordTypography\n            variant={lyricTypographyVariant} // keep chords and lyrics the same size\n            display=\"inline\"\n            data-testid=\"ChordSymbol\"\n            className={props.className}\n        >\n            {formattedChord()}\n        </ChordTypography>\n    );\n};\n\nexport default ChordSymbol;\n","import { RootRef } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport ChordSymbol, { ChordSymbolProps } from \"../display/ChordSymbol\";\nimport { NewDNDChord } from \"./ChordDroppable\";\n\ninterface DraggableChordSymbolProps extends ChordSymbolProps {\n    chordBlockID: IDable<\"ChordBlock\">;\n    onDragged?: () => void;\n}\n\nconst DraggableChordSymbol: React.FC<DraggableChordSymbolProps> = (\n    props: DraggableChordSymbolProps\n): JSX.Element => {\n    const [, dragRef] = useDrag({\n        item: NewDNDChord(props.chordBlockID, props.children),\n    });\n\n    return (\n        <RootRef rootRef={dragRef}>\n            <ChordSymbol className={props.className}>\n                {props.children}\n            </ChordSymbol>\n        </RootRef>\n    );\n};\n\nexport default DraggableChordSymbol;\n","import {\n    makeStyles,\n    Theme,\n    TypographyVariant,\n    Typography,\n} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport { StyledComponentProps, withStyles } from \"@material-ui/styles\";\nimport React, { useEffect } from \"react\";\n\nconst InputTypography = withStyles((theme: Theme) => ({\n    root: {\n        width: \"100%\",\n        backgroundColor: grey[200],\n        whiteSpace: \"pre\",\n        display: \"inline-block\",\n    },\n}))(Typography);\n\nconst useContentEditableStyle = makeStyles({\n    root: {\n        display: \"inline-block\",\n        width: \"100%\",\n        pointerEvents: \"auto\",\n        userSelect: \"text\",\n        outline: \"none\",\n        // this prevent the span height from collapsing if there's no content\n        \"&:empty:before\": {\n            content: '\"\\\\a0\"',\n        },\n    },\n});\n\ninterface TextInputProps extends StyledComponentProps {\n    children: string;\n    onFinish?: (newValue: string) => void;\n    onSpecialBackspace?: () => void;\n    onPasteOverflow?: (overflowContent: string[]) => void;\n    onJSONPaste?: (jsonStr: string) => boolean;\n    width?: string;\n    variant?: TypographyVariant;\n}\n\nconst TextInput: React.FC<TextInputProps> = (\n    props: TextInputProps\n): JSX.Element => {\n    const contentEditableRef: React.RefObject<HTMLSpanElement> = React.createRef();\n\n    const value = (): string => {\n        if (\n            contentEditableRef.current === null ||\n            contentEditableRef.current.textContent === null\n        ) {\n            return \"\";\n        }\n\n        return contentEditableRef.current.textContent;\n    };\n\n    const setValue = (newValue: string) => {\n        if (contentEditableRef.current === null) {\n            return;\n        }\n\n        contentEditableRef.current.textContent = newValue;\n    };\n\n    const enterHandler = (\n        event: React.KeyboardEvent<HTMLDivElement>\n    ): boolean => {\n        if (event.key !== \"Enter\") {\n            return false;\n        }\n\n        finish(value());\n        return true;\n    };\n\n    const selectionRange = (): Range | null => {\n        const selection = window.getSelection();\n        if (selection === null || selection.rangeCount === 0) {\n            return null;\n        }\n\n        return selection.getRangeAt(0);\n    };\n\n    const selectionOffsets = (): [number, number] | null => {\n        if (contentEditableRef.current === null) {\n            return null;\n        }\n\n        const node = contentEditableRef.current;\n\n        const range = selectionRange();\n        if (\n            range === null ||\n            !node.contains(range.startContainer) ||\n            !node.contains(range.endContainer)\n        ) {\n            return null;\n        }\n\n        return [range.startOffset, range.endOffset];\n    };\n\n    const specialBackspaceHandler = (\n        event: React.KeyboardEvent<HTMLDivElement>\n    ): boolean => {\n        if (!props.onSpecialBackspace) {\n            return false;\n        }\n\n        const specialBackspace: boolean =\n            event.key === \"Backspace\" && (event.metaKey || event.ctrlKey);\n        if (!specialBackspace) {\n            return false;\n        }\n\n        const offsets = selectionOffsets();\n        if (offsets === null) {\n            return false;\n        }\n\n        if (offsets[0] !== 0 || offsets[1] !== 0) {\n            return false;\n        }\n\n        props.onSpecialBackspace();\n        return true;\n    };\n\n    const splitStringBySelection = (): [string, string] => {\n        const currValue = value();\n\n        const offsets = selectionOffsets();\n        if (offsets === null) {\n            return [value(), \"\"];\n        }\n\n        const beforeSelection = currValue.slice(0, offsets[0]);\n        const afterSelection = currValue.slice(offsets[1]);\n        return [beforeSelection, afterSelection];\n    };\n\n    const tabHandler = (\n        event: React.KeyboardEvent<HTMLDivElement>\n    ): boolean => {\n        if (event.key !== \"Tab\") {\n            return false;\n        }\n\n        if (contentEditableRef.current === null) {\n            return false;\n        }\n\n        const range = selectionRange();\n        if (range === null) {\n            return false;\n        }\n\n        range.deleteContents();\n        range.insertNode(document.createTextNode(\"\\t\"));\n        range.collapse(false);\n        contentEditableRef.current.normalize();\n\n        return true;\n    };\n\n    const specialStylingKeysHandler = (\n        event: React.KeyboardEvent<HTMLDivElement>\n    ): boolean => {\n        if (!event.metaKey && !event.ctrlKey) {\n            return false;\n        }\n\n        // prevent bold, underline, or italics commands\n        return (\n            event.key === \"b\" ||\n            event.key === \"B\" ||\n            event.key === \"u\" ||\n            event.key === \"U\" ||\n            event.key === \"i\" ||\n            event.key === \"I\"\n        );\n    };\n\n    const keyDownHandler = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        const handlers: ((\n            event: React.KeyboardEvent<HTMLDivElement>\n        ) => boolean)[] = [\n            enterHandler,\n            specialBackspaceHandler,\n            tabHandler,\n            specialStylingKeysHandler,\n        ];\n\n        for (const handler of handlers) {\n            const handled: boolean = handler(event);\n            if (handled) {\n                event.preventDefault();\n                return;\n            }\n        }\n    };\n\n    const finish = (newValue: string) => {\n        if (props.onFinish) {\n            props.onFinish(newValue);\n        }\n    };\n\n    const blurHandler = () => {\n        finish(value());\n    };\n\n    const composeMultilinePaste = (\n        pasteContent: string[]\n    ): [string, string[]] => {\n        const [beforeSelection, afterSelection] = splitStringBySelection();\n        const newValue = beforeSelection + pasteContent[0];\n\n        const newPasteLines = pasteContent.slice(1);\n        const lastIndex = newPasteLines.length - 1;\n        newPasteLines[lastIndex] += afterSelection;\n\n        return [newValue, newPasteLines];\n    };\n\n    const handlePlainTextPaste = (\n        event: React.ClipboardEvent<HTMLDivElement>\n    ): boolean => {\n        if (props.onPasteOverflow === undefined) {\n            return false;\n        }\n\n        const payload = event.clipboardData.getData(\"text/plain\");\n\n        if (payload === \"\") {\n            return false;\n        }\n\n        // handling both Windows + Mac\n        let linesOfText: string[] = payload.split(\"\\r\\n\");\n        linesOfText = linesOfText.flatMap((line: string) => line.split(\"\\n\"));\n\n        if (linesOfText.length === 0) {\n            return false;\n        }\n\n        const [newValue, newPasteLines] = composeMultilinePaste(linesOfText);\n\n        setValue(newValue);\n        finish(newValue);\n        props.onPasteOverflow(newPasteLines);\n        return true;\n    };\n\n    const handleJSONPaste = (\n        event: React.ClipboardEvent<HTMLDivElement>\n    ): boolean => {\n        if (props.onJSONPaste === undefined) {\n            return false;\n        }\n\n        const payload = event.clipboardData.getData(\"application/json\");\n\n        if (payload === \"\") {\n            return false;\n        }\n\n        const handled = props.onJSONPaste(payload);\n        if (handled) {\n            finish(value());\n        }\n\n        return handled;\n    };\n\n    const handlePaste = (event: React.ClipboardEvent<HTMLDivElement>) => {\n        const handlers: ((\n            event: React.ClipboardEvent<HTMLDivElement>\n        ) => boolean)[] = [handleJSONPaste, handlePlainTextPaste];\n\n        for (const handler of handlers) {\n            const handled: boolean = handler(event);\n            if (handled) {\n                event.preventDefault();\n                return;\n            }\n        }\n    };\n\n    const focusAndPlaceCaret = () => {\n        if (contentEditableRef.current === null) {\n            return;\n        }\n\n        contentEditableRef.current.focus();\n\n        const selection = window.getSelection();\n        if (selection === null) {\n            return;\n        }\n\n        const newRange = document.createRange();\n        newRange.selectNodeContents(contentEditableRef.current);\n        newRange.collapse(false);\n\n        selection.removeAllRanges();\n        selection.addRange(newRange);\n    };\n\n    useEffect(focusAndPlaceCaret);\n\n    const contentEditableStyle = useContentEditableStyle();\n\n    return (\n        <InputTypography\n            classes={props.classes}\n            variant={props.variant}\n            display=\"inline\"\n            data-testid=\"EditableLine\"\n        >\n            <span\n                contentEditable\n                className={contentEditableStyle.root}\n                ref={contentEditableRef}\n                data-testid=\"InnerInput\"\n                onBlur={blurHandler}\n                onKeyDown={keyDownHandler}\n                onPaste={handlePaste}\n                suppressContentEditableWarning\n            >\n                {props.children}\n            </span>\n        </InputTypography>\n    );\n};\n\nexport default TextInput;\n","import { Box, StyledComponentProps, withStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport Lyric, { LyricTypography, lyricTypographyProps } from \"../display/Lyric\";\nimport {\n    chordSymbolClassName,\n    chordTargetClassName,\n    firstTokenClassName,\n} from \"./HighlightChordLyricStyle\";\n\nconst InvisibleTypography = withStyles({\n    root: {\n        color: \"transparent\",\n        cursor: \"pointer\",\n        userSelect: \"none\",\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        transform: \"translate(0%, -115%)\",\n    },\n})(LyricTypography);\n\ninterface ChordTargetBoxProps extends StyledComponentProps {\n    children: string;\n    className?: string;\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => void;\n}\n\nconst ChordTargetBox: React.FC<ChordTargetBoxProps> = (\n    props: ChordTargetBoxProps\n): JSX.Element => {\n    return (\n        <InvisibleTypography\n            {...lyricTypographyProps}\n            onClick={props.onClick}\n            classes={props.classes}\n            className={props.className}\n            data-testid=\"ChordEditButton\"\n        >\n            {props.children}\n        </InvisibleTypography>\n    );\n};\n\ninterface TokenProps {\n    children: string;\n    index: number;\n    className?: string;\n    invisibleTarget?: { onClick: ChordTargetBoxProps[\"onClick\"] };\n}\n\nconst Token: React.FC<TokenProps> = (props: TokenProps): JSX.Element => {\n    const invisibleTarget = (): JSX.Element | null => {\n        if (props.invisibleTarget === undefined) {\n            return null;\n        }\n\n        return (\n            <ChordTargetBox\n                className={clsx(chordTargetClassName, chordSymbolClassName)}\n                onClick={props.invisibleTarget.onClick}\n            >\n                {props.children}\n            </ChordTargetBox>\n        );\n    };\n\n    const lyricClassName: string | undefined =\n        props.index === 0 ? firstTokenClassName : undefined;\n\n    const lyricBlock = (\n        <Lyric className={lyricClassName} data-testid={`Token-${props.index}`}>\n            {props.children}\n        </Lyric>\n    );\n\n    return (\n        <Box\n            className={props.className}\n            key={props.index}\n            position=\"relative\"\n            display=\"inline\"\n            data-testid={`TokenBox-${props.index}`}\n        >\n            {invisibleTarget()}\n            {lyricBlock}\n        </Box>\n    );\n};\n\nexport default Token;\n","import { Box, Grid, makeStyles, Theme } from \"@material-ui/core\";\nimport red from \"@material-ui/core/colors/red\";\nimport clsx from \"clsx\";\nimport React, { useState, useContext } from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { inflatingWhitespace } from \"../../common/Whitespace\";\nimport ChordDroppable from \"./ChordDroppable\";\nimport DraggableChordSymbol from \"./DraggableChordSymbol\";\nimport {\n    chordTargetClassName,\n    dragOverChordLyricStyle,\n    firstTokenClassName,\n    hoverChordLyricStyle,\n} from \"./HighlightChordLyricStyle\";\nimport { lyricTypographyVariant } from \"../display/Lyric\";\nimport TextInput from \"./TextInput\";\nimport Token from \"./Token\";\nimport { InteractionContext } from \"./InteractionContext\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst chordSymbolClassName = \"ChordSymbol\";\n\nconst blockChordSymbolClassName = \"BlockChordSymbol\";\nconst blockChordTargetClassName = \"BlockChordTarget\";\n\nconst ChordInput = withStyles((theme: Theme) => ({\n    root: {\n        fontFamily: \"PoriChord\",\n        borderBottom: \"solid\",\n        borderBottomColor: theme.palette.primary.main,\n        borderBottomWidth: \"2px\",\n    },\n}))(TextInput);\n\nconst useFirstTokenStyle = {\n    dragOver: makeStyles(\n        dragOverChordLyricStyle({\n            outline: (theme: Theme) => ({\n                borderColor: red[300],\n                color: red[300],\n            }),\n            customLyricClassSelector: firstTokenClassName,\n            customChordSymbolClassSelector: blockChordSymbolClassName,\n            customChordTargetClassSelector: blockChordTargetClassName,\n        })\n    ),\n    hoverable: makeStyles(\n        hoverChordLyricStyle({\n            outline: (theme: Theme) => ({\n                color: theme.palette.primary.dark,\n            }),\n            customLyricClassSelector: firstTokenClassName,\n            customChordSymbolClassSelector: blockChordSymbolClassName,\n            customChordTargetClassSelector: blockChordTargetClassName,\n        })\n    ),\n};\n\nconst useNormalTokenStyle = {\n    dragOver: makeStyles(dragOverChordLyricStyle()),\n    hoverable: makeStyles(hoverChordLyricStyle()),\n};\n\nexport interface BlockProps extends DataTestID {\n    chordBlock: ChordBlock;\n    onChordDragAndDrop?: (\n        destinationBlockID: IDable<\"ChordBlock\">,\n        splitIndex: number,\n        newChord: string,\n        sourceBlockID: IDable<\"ChordBlock\">\n    ) => void;\n    onChordChange?: (id: IDable<\"ChordBlock\">, newChord: string) => void;\n    onBlockSplit?: (id: IDable<\"ChordBlock\">, splitIndex: number) => void;\n}\n\nconst Block: React.FC<BlockProps> = (props: BlockProps): JSX.Element => {\n    const [editing, setEditing] = useState(false);\n    const { startInteraction, endInteraction } = useContext(InteractionContext);\n\n    let lyricTokens: string[] = props.chordBlock.lyricTokens;\n\n    if (lyricTokens.length === 0) {\n        lyricTokens = [inflatingWhitespace()];\n    }\n\n    const firstTokenStyle = {\n        hoverable: useFirstTokenStyle.hoverable(),\n        dragOver: useFirstTokenStyle.dragOver(),\n    };\n\n    const normalTokenStyle = {\n        hoverable: useNormalTokenStyle.hoverable(),\n        dragOver: useNormalTokenStyle.dragOver(),\n    };\n\n    const invisibleTargetForFirstToken: boolean =\n        props.chordBlock.chord === \"\" && !editing;\n\n    const clickHandler: (\n        tokenIndex: number\n    ) => (event: React.MouseEvent<HTMLSpanElement>) => void = (\n        tokenIndex: number\n    ) => {\n        return (event: React.MouseEvent<HTMLSpanElement>) => {\n            // block splitting happens after the first token\n            // as first token is already aligned with the current chord\n            if (tokenIndex !== 0 && props.onBlockSplit) {\n                props.onBlockSplit(props.chordBlock, tokenIndex);\n            }\n\n            setEditing(true);\n            startInteraction();\n\n            event.stopPropagation();\n        };\n    };\n\n    const handleDragged = () => {\n        if (props.onChordChange) {\n            props.onChordChange(props.chordBlock, \"\");\n        }\n    };\n\n    const dropHandler = (tokenIndex: number) => {\n        return (newChord: string, sourceBlockID: IDable<\"ChordBlock\">) => {\n            if (props.onChordDragAndDrop) {\n                props.onChordDragAndDrop(\n                    props.chordBlock,\n                    tokenIndex,\n                    newChord,\n                    sourceBlockID\n                );\n            }\n        };\n    };\n\n    const endEdit = (newChord: string) => {\n        if (props.onChordChange) {\n            props.onChordChange(props.chordBlock, newChord);\n        }\n\n        setEditing(false);\n        endInteraction();\n    };\n\n    const lyricBlock = (lyric: string, index: number): React.ReactElement => {\n        // every above lyric target above after the first should get its own highlightable outline chord target box\n        // the first one will depend if it has a chord above it.\n        // if it does not, then treat it the same as all other tokens\n        // if it does, then don't let it be highlightable, defer it to the chord row for highlighting\n        const hasInvisibleTarget = index > 0 || invisibleTargetForFirstToken;\n\n        const invisibleTargetOption = hasInvisibleTarget\n            ? {\n                  onClick: clickHandler(index),\n              }\n            : undefined;\n\n        return (\n            <ChordDroppable\n                key={index}\n                onDropped={dropHandler(index)}\n                hoverableClassName={normalTokenStyle.hoverable.root}\n                dragOverClassName={normalTokenStyle.dragOver.root}\n            >\n                <Token index={index} invisibleTarget={invisibleTargetOption}>\n                    {lyric}\n                </Token>\n            </ChordDroppable>\n        );\n    };\n\n    const lyricBlocks = lyricTokens.map((lyricToken: string, index: number) =>\n        lyricBlock(lyricToken, index)\n    );\n\n    const chordRow = (): JSX.Element => {\n        if (editing) {\n            return (\n                <Box data-testid=\"ChordEdit\">\n                    <ChordInput\n                        width=\"5em\"\n                        variant={lyricTypographyVariant}\n                        onFinish={endEdit}\n                    >\n                        {props.chordBlock.chord}\n                    </ChordInput>\n                </Box>\n            );\n        }\n\n        return (\n            <DraggableChordSymbol\n                chordBlockID={props.chordBlock}\n                onDragged={handleDragged}\n                className={clsx(\n                    chordSymbolClassName,\n                    blockChordSymbolClassName\n                )}\n            >\n                {props.chordBlock.chord}\n            </DraggableChordSymbol>\n        );\n    };\n\n    return (\n        <Box display=\"inline-block\">\n            <ChordDroppable\n                onDropped={dropHandler(0)}\n                hoverableClassName={firstTokenStyle.hoverable.root}\n                dragOverClassName={firstTokenStyle.dragOver.root}\n            >\n                <Grid\n                    container\n                    direction=\"column\"\n                    data-testid={props[\"data-testid\"]}\n                >\n                    <Grid\n                        className={clsx(\n                            chordTargetClassName,\n                            blockChordTargetClassName\n                        )}\n                        onClick={clickHandler(0)}\n                        item\n                    >\n                        {chordRow()}\n                    </Grid>\n                    <Grid item data-testid=\"Lyric\">\n                        {lyricBlocks}\n                    </Grid>\n                </Grid>\n            </ChordDroppable>\n        </Box>\n    );\n};\n\nexport default Block;\n","import {\n    Box,\n    Button as UnstyledButton,\n    Theme,\n    Tooltip as UnstyledTooltip,\n    withStyles,\n} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport red from \"@material-ui/core/colors/red\";\nimport UnstyledBackspaceIcon from \"@material-ui/icons/Backspace\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport Block, { BlockProps } from \"./Block\";\n\nconst iconColorStyle = {\n    root: {\n        color: red[300],\n    },\n};\n\nconst BackspaceIcon = withStyles(iconColorStyle)(UnstyledBackspaceIcon);\n\nconst Button = withStyles((theme: Theme) => ({\n    contained: {\n        backgroundColor: \"transparent\",\n        \"&:hover\": {\n            backgroundColor: theme.palette.primary.dark,\n        },\n    },\n}))(UnstyledButton);\n\nconst Tooltip = withStyles({\n    tooltip: {\n        padding: 0,\n        background: \"transparent\",\n        margin: 0,\n    },\n})(UnstyledTooltip);\n\nconst HighlightableBox = withStyles({\n    root: {\n        \"&:hover\": {\n            backgroundColor: grey[100],\n        },\n    },\n})(Box);\n\ninterface ChordEditLineProps {\n    chordLine: ChordLine;\n    onEdit?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    onAdd?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    onRemove?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    onChangeLine?: (id: IDable<\"ChordLine\">) => void;\n    onChordDragAndDrop?: BlockProps[\"onChordDragAndDrop\"];\n}\n\nconst ChordEditLine: React.FC<ChordEditLineProps> = (\n    props: ChordEditLineProps\n): JSX.Element => {\n    let chordBlocks: ChordBlock[] = props.chordLine.chordBlocks;\n    if (chordBlocks.length === 0) {\n        chordBlocks = [\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"\",\n            }),\n        ];\n    }\n\n    const hoverMenu = (): React.ReactElement => {\n        return (\n            <Button onClick={props.onRemove} data-testid={\"RemoveButton\"}>\n                <BackspaceIcon />\n            </Button>\n        );\n    };\n\n    const chordChangeHandler = (id: IDable<\"ChordBlock\">, newChord: string) => {\n        props.chordLine.setChord(id, newChord);\n\n        if (props.onChangeLine) {\n            props.onChangeLine(props.chordLine);\n        }\n    };\n\n    const blockSplitHandler = (\n        id: IDable<\"ChordBlock\">,\n        splitIndex: number\n    ) => {\n        props.chordLine.splitBlock(id, splitIndex);\n\n        if (props.onChangeLine) {\n            props.onChangeLine(props.chordLine);\n        }\n    };\n\n    const blocks: React.ReactElement[] = chordBlocks.map(\n        (chordBlock: ChordBlock, index: number) => (\n            <Block\n                key={chordBlock.id}\n                chordBlock={chordBlock}\n                onChordDragAndDrop={props.onChordDragAndDrop}\n                onChordChange={chordChangeHandler}\n                onBlockSplit={blockSplitHandler}\n                data-testid={`Block-${index}`}\n            ></Block>\n        )\n    );\n\n    return (\n        <Tooltip placement=\"right\" title={hoverMenu()} interactive>\n            <HighlightableBox\n                data-testid={\"NoneditableLine\"}\n                onClick={props.onEdit}\n            >\n                {blocks}\n            </HighlightableBox>\n        </Tooltip>\n    );\n};\n\nexport default ChordEditLine;\n","import { Box, Slide, withStyles, Theme } from \"@material-ui/core\";\nimport React, { useState, useContext } from \"react\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { lyricTypographyVariant, lyricStyle } from \"../display/Lyric\";\nimport { BlockProps } from \"./Block\";\nimport ChordEditLine from \"./ChordEditLine\";\nimport TextInput from \"./TextInput\";\nimport { InteractionContext } from \"./InteractionContext\";\n\nconst AtomicSelectionBox = withStyles({\n    root: {\n        userSelect: \"all\",\n    },\n})(Box);\n\nconst LyricInput = withStyles((theme: Theme) => ({\n    root: {\n        ...lyricStyle.root,\n        borderBottom: \"solid\",\n        borderBottomColor: theme.palette.secondary.main,\n        borderBottomWidth: \"2px\",\n    },\n}))(TextInput);\n\ninterface LineProps extends DataTestID {\n    chordLine: ChordLine;\n    \"data-lineid\": string;\n    onChangeLine?: (id: IDable<\"ChordLine\">) => void;\n    onAddLine?: (id: IDable<\"ChordLine\">) => void;\n    onRemoveLine?: (id: IDable<\"ChordLine\">) => void;\n    onPasteOverflow?: (\n        id: IDable<\"ChordLine\">,\n        overflowPasteContent: string[]\n    ) => void;\n    onJSONPaste?: (id: IDable<\"ChordLine\">, jsonStr: string) => boolean;\n    onMergeWithPreviousLine?: (id: IDable<\"ChordLine\">) => boolean;\n    onChordDragAndDrop?: BlockProps[\"onChordDragAndDrop\"];\n}\n\nconst Line: React.FC<LineProps> = (props: LineProps): JSX.Element => {\n    const [editing, setEditing] = useState(false);\n    const [removed, setRemoved] = useState(false);\n\n    const { startInteraction, endInteraction } = useContext(InteractionContext);\n\n    const startEdit = () => {\n        setEditing(true);\n        startInteraction();\n    };\n\n    const finishEdit = (newLyrics: string) => {\n        setEditing(false);\n\n        endInteraction();\n\n        props.chordLine.replaceLyrics(newLyrics);\n\n        if (props.onChangeLine) {\n            props.onChangeLine(props.chordLine);\n        }\n    };\n\n    const addHandler = () => {\n        if (props.onAddLine) {\n            props.onAddLine(props.chordLine);\n        }\n    };\n\n    const removalTime = 250;\n\n    const removeHandler = () => {\n        if (removed) {\n            return;\n        }\n\n        setRemoved(true);\n\n        if (props.onRemoveLine) {\n            setTimeout(() => {\n                if (props.onRemoveLine) {\n                    props.onRemoveLine(props.chordLine);\n                }\n            }, removalTime);\n        }\n    };\n\n    const pasteOverflowHandler = (overflowContent: string[]) => {\n        if (props.onPasteOverflow) {\n            props.onPasteOverflow(props.chordLine, overflowContent);\n            setEditing(false);\n        }\n    };\n\n    const jsonPasteHandler = (jsonStr: string): boolean => {\n        if (props.onJSONPaste === undefined) {\n            return false;\n        }\n\n        return props.onJSONPaste(props.chordLine, jsonStr);\n    };\n\n    const specialBackspaceHandler = () => {\n        if (props.onMergeWithPreviousLine) {\n            const handledAndStopEditing = props.onMergeWithPreviousLine(\n                props.chordLine\n            );\n            if (handledAndStopEditing) {\n                setEditing(false);\n            }\n        }\n    };\n\n    const nonEditableLine = (): React.ReactElement => {\n        return (\n            <ChordEditLine\n                chordLine={props.chordLine}\n                onChangeLine={props.onChangeLine}\n                onChordDragAndDrop={props.onChordDragAndDrop}\n                onAdd={addHandler}\n                onRemove={removeHandler}\n                onEdit={startEdit}\n            />\n        );\n    };\n\n    const editLyricsInput = (): React.ReactElement => {\n        const lyrics = props.chordLine.lyrics;\n\n        return (\n            <Box position=\"absolute\" left=\"0\" bottom=\"2px\" width=\"100%\">\n                <LyricInput\n                    variant={lyricTypographyVariant}\n                    onFinish={finishEdit}\n                    onJSONPaste={jsonPasteHandler}\n                    onPasteOverflow={pasteOverflowHandler}\n                    onSpecialBackspace={specialBackspaceHandler}\n                >\n                    {lyrics}\n                </LyricInput>\n            </Box>\n        );\n    };\n\n    let elem: React.ReactElement;\n    if (editing) {\n        // using a css trick to overlay the lyrics edit input over\n        // the noneditable lyrics line so chords are still showing\n        elem = (\n            <>\n                {nonEditableLine()}\n                {editLyricsInput()}\n            </>\n        );\n    } else {\n        elem = nonEditableLine();\n    }\n\n    const yeetDirection = removed ? \"up\" : \"down\";\n\n    return (\n        <Slide direction={yeetDirection} in={!removed} timeout={removalTime}>\n            <AtomicSelectionBox>\n                <Box\n                    borderBottom={1}\n                    borderColor=\"grey.50\"\n                    width=\"100%\"\n                    position=\"relative\"\n                    data-lineid={props[\"data-lineid\"]}\n                    data-testid={props[\"data-testid\"]}\n                >\n                    {elem}\n                </Box>\n            </AtomicSelectionBox>\n        </Slide>\n    );\n};\n\nexport default Line;\n","import {\n    Button,\n    Divider as UnstyledDivider,\n    Grid,\n    Theme,\n    Tooltip as UnstyledTooltip,\n} from \"@material-ui/core\";\nimport UnstyledAddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport { useTheme, withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { DataTestID } from \"../../common/DataTestID\";\n\nconst HighlightableGrid = withStyles({\n    root: {\n        \"&:hover .MuiDivider-root\": {\n            backgroundColor: \"rgba(0, 0, 0, 0.25)\",\n        },\n    },\n})(Grid);\n\nconst Tooltip = withStyles({\n    tooltip: {\n        padding: 0,\n        background: \"transparent\",\n        margin: 0,\n    },\n})(UnstyledTooltip);\n\nconst Divider = withStyles({\n    root: {\n        width: \"100%\",\n        backgroundColor: \"transparent\",\n    },\n})(UnstyledDivider);\n\nconst AddCircleOutlineIcon = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.secondary.light,\n    },\n}))(UnstyledAddCircleOutlineIcon);\n\ninterface NewLineProps extends DataTestID {\n    onAdd?: () => void;\n}\n\nconst NewLine: React.FC<NewLineProps> = (props: NewLineProps): JSX.Element => {\n    const theme: Theme = useTheme();\n\n    const hoverMenu = (): React.ReactElement => {\n        return (\n            <Button data-testid={\"AddButton\"} onClick={props.onAdd}>\n                <AddCircleOutlineIcon />\n            </Button>\n        );\n    };\n\n    return (\n        <Tooltip title={hoverMenu()} interactive placement=\"right\">\n            <HighlightableGrid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                onClick={props.onAdd}\n                data-testid={props[\"data-testid\"]}\n                style={{\n                    minHeight: theme.spacing(3),\n                }}\n            >\n                <Divider />\n            </HighlightableGrid>\n        </Tooltip>\n    );\n};\n\nexport default NewLine;\n","import {\n    Grid,\n    makeStyles,\n    Paper as UnstyledPaper,\n    withStyles,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { useLineCopyHandler, useLinePasteHandler } from \"./CopyAndPaste\";\nimport DragAndDrop from \"./DragAndDrop\";\nimport { InteractionContext, InteractionSetter } from \"./InteractionContext\";\nimport Line from \"./Line\";\nimport NewLine from \"./NewLine\";\n\nconst useUninteractiveStyle = makeStyles({\n    root: {\n        pointerEvents: \"none\",\n    },\n});\n\nconst Paper = withStyles({\n    root: {\n        width: \"auto\",\n    },\n})(UnstyledPaper);\n\ninterface ChordPaperBodyProps {\n    song: ChordSong;\n    onSongChanged?: (updatedSong: ChordSong) => void;\n}\n\nconst ChordPaperBody: React.FC<ChordPaperBodyProps> = (\n    props: ChordPaperBodyProps\n): React.ReactElement => {\n    const [interacting, setInteracting] = useState(false);\n    const handleCopy = useLineCopyHandler(props.song);\n    const handleLinePaste = useLinePasteHandler(props.song);\n\n    const interactionContextValue: InteractionSetter = {\n        startInteraction: () => {\n            setTimeout(() => {\n                setInteracting(true);\n            });\n        },\n        endInteraction: () => {\n            setTimeout(() => {\n                setInteracting(false);\n            });\n        },\n    };\n\n    const uninteractiveStyle = useUninteractiveStyle();\n\n    const handleAddLineToTop = () => {\n        const newLine: ChordLine = new ChordLine();\n        props.song.addBeginning(newLine);\n        notifySongChanged();\n    };\n\n    const handleAddLine = (id: IDable<\"ChordLine\">) => {\n        const newLine: ChordLine = new ChordLine();\n        props.song.addAfter(id, newLine);\n        notifySongChanged();\n    };\n\n    const handleRemoveLine = (id: IDable<\"ChordLine\">) => {\n        props.song.remove(id);\n        notifySongChanged();\n    };\n\n    const handleChangeLine = (id: IDable<\"ChordLine\">) => {\n        notifySongChanged();\n    };\n\n    const handlePasteOverflow = (\n        id: IDable<\"ChordLine\">,\n        overflowContent: string[]\n    ) => {\n        const newChordLines = overflowContent.map((newLyricLine: string) =>\n            ChordLine.fromLyrics(newLyricLine)\n        );\n        props.song.addAfter(id, ...newChordLines);\n        notifySongChanged();\n    };\n\n    const handleJSONPaste = (\n        id: IDable<\"ChordLine\">,\n        jsonStr: string\n    ): boolean => {\n        const handled = handleLinePaste(id, jsonStr);\n        if (!handled) {\n            return false;\n        }\n\n        notifySongChanged();\n        return true;\n    };\n\n    const mergeWithPreviousLine = (id: IDable<\"ChordLine\">): boolean => {\n        const didMerge = props.song.mergeLineWithPrevious(id);\n\n        if (didMerge) {\n            notifySongChanged();\n            return true;\n        }\n\n        return false;\n    };\n\n    const notifySongChanged = () => {\n        if (props.onSongChanged) {\n            props.onSongChanged(props.song);\n        }\n    };\n\n    const handleChordDND = (\n        destinationBlockID: IDable<\"ChordBlock\">,\n        splitIndex: number,\n        newChord: string,\n        sourceBlockID: IDable<\"ChordBlock\">\n    ) => {\n        // clearing the source block first allows handling of when the chord\n        // is dropped onto another token in the same block without special cases\n        const [sourceLine, sourceBlock] = props.song.findLineAndBlock(\n            sourceBlockID\n        );\n        sourceBlock.chord = \"\";\n\n        const [destinationLine, destinationBlock] = props.song.findLineAndBlock(\n            destinationBlockID\n        );\n        if (splitIndex !== 0) {\n            destinationLine.splitBlock(destinationBlockID, splitIndex);\n        }\n\n        destinationBlock.chord = newChord;\n\n        sourceLine.normalizeBlocks();\n        destinationLine.normalizeBlocks();\n\n        notifySongChanged();\n    };\n\n    const lines = () => {\n        const lines = props.song.chordLines.flatMap(\n            (line: ChordLine, index: number) => {\n                const addLineBelow = () => {\n                    handleAddLine(line);\n                };\n\n                return [\n                    <Line\n                        key={line.id}\n                        chordLine={line}\n                        data-lineid={line.id}\n                        onAddLine={handleAddLine}\n                        onRemoveLine={handleRemoveLine}\n                        onChangeLine={handleChangeLine}\n                        onJSONPaste={handleJSONPaste}\n                        onPasteOverflow={handlePasteOverflow}\n                        onMergeWithPreviousLine={mergeWithPreviousLine}\n                        onChordDragAndDrop={handleChordDND}\n                        data-testid={`Line-${index}`}\n                    />,\n                    <NewLine\n                        key={\"NewLine-\" + line.id}\n                        onAdd={addLineBelow}\n                        data-testid={`NewLine-${index}`}\n                    />,\n                ];\n            }\n        );\n\n        const firstNewLine = (\n            <NewLine\n                key={\"NewLine-Top\"}\n                onAdd={handleAddLineToTop}\n                data-testid={\"NewLine-Top\"}\n            />\n        );\n        lines.splice(0, 0, firstNewLine);\n\n        return lines;\n    };\n\n    // prevent other interactions if currently interacting\n    const allowInteraction: boolean = !interacting;\n    const paperClassName = allowInteraction\n        ? undefined\n        : uninteractiveStyle.root;\n\n    return (\n        <DragAndDrop>\n            <InteractionContext.Provider value={interactionContextValue}>\n                <Paper\n                    onCopy={handleCopy}\n                    className={paperClassName}\n                    elevation={0}\n                >\n                    <Grid container justify=\"center\">\n                        <Grid item xs={10}>\n                            {lines()}\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </InteractionContext.Provider>\n        </DragAndDrop>\n    );\n};\n\nexport default ChordPaperBody;\n","import {\n    Badge as UnstyledBadge,\n    Paper,\n    Theme,\n    withStyles,\n} from \"@material-ui/core\";\nimport UnstyledCheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport React, { useState } from \"react\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport ChordPaperBody from \"../edit/ChordPaperBody\";\n\nconst CheckCircleIcon = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.success.main,\n    },\n}))(UnstyledCheckCircleIcon);\n\nconst Badge = withStyles({\n    root: {\n        display: \"inherit\",\n    },\n})(UnstyledBadge);\n\ninterface PlaygroundProps {\n    initialSong: ChordSong;\n    expectedSong?: ChordSong;\n}\n\nconst Playground: React.FC<PlaygroundProps> = (\n    props: PlaygroundProps\n): JSX.Element => {\n    const [song, setSong] = useState<ChordSong>(props.initialSong);\n    const [finish, setFinish] = useState(false);\n\n    const songChangeHandler = (updatedSong: ChordSong) => {\n        setSong(updatedSong.clone());\n        checkExpected(updatedSong);\n    };\n\n    const checkExpected = (updatedSong: ChordSong) => {\n        // don't undo the green check if it's already been passing\n        if (finish) {\n            return;\n        }\n\n        if (\n            props.expectedSong !== undefined &&\n            props.expectedSong.contentEquals(updatedSong)\n        ) {\n            setFinish(true);\n        }\n    };\n\n    return (\n        <Badge badgeContent={<CheckCircleIcon />} invisible={!finish}>\n            <Paper elevation={1}>\n                <ChordPaperBody song={song} onSongChanged={songChangeHandler} />\n            </Paper>\n        </Badge>\n    );\n};\n\nexport default Playground;\n","import { Either, isLeft, left, parseJSON, right } from \"fp-ts/lib/Either\";\nimport * as iots from \"io-ts\";\nimport lodash from \"lodash\";\nimport { ChordBlock } from \"./ChordBlock\";\nimport {\n    ChordLine,\n    ChordLineValidatedFields,\n    ChordLineValidator,\n} from \"./ChordLine\";\nimport { Collection, IDable } from \"./Collection\";\n\nconst SongMetadataValidator = iots.type({\n    title: iots.string,\n    composedBy: iots.string,\n    performedBy: iots.string,\n    asHeardFrom: iots.string,\n});\n\ntype SongMetadata = iots.TypeOf<typeof SongMetadataValidator>;\n\nconst ChordSongValidator = iots.type({\n    elements: iots.array(ChordLineValidator),\n    metadata: SongMetadataValidator,\n});\ntype ChordSongValidatedFields = iots.TypeOf<typeof ChordSongValidator>;\n\nexport class ChordSong extends Collection<ChordLine, \"ChordLine\"> {\n    metadata: SongMetadata;\n\n    constructor(elements?: ChordLine[], metadata?: SongMetadata) {\n        if (elements === undefined) {\n            elements = [new ChordLine()];\n        }\n\n        super(elements);\n\n        if (metadata !== undefined) {\n            this.metadata = metadata;\n        } else {\n            this.metadata = {\n                title: \"\",\n                composedBy: \"\",\n                performedBy: \"\",\n                asHeardFrom: \"\",\n            };\n        }\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordSongValidatedFields\n    ): ChordSong {\n        const chordLines: ChordLine[] = validatedFields.elements.map(\n            (chordLineValidatedFields: ChordLineValidatedFields) => {\n                return ChordLine.fromValidatedFields(chordLineValidatedFields);\n            }\n        );\n        return new ChordSong(chordLines, validatedFields.metadata);\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordSong> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordSongValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Song object\"));\n        }\n\n        return right(this.fromValidatedFields(validationResult.right));\n    }\n\n    static fromLyricsLines(lyricLines: string[]): ChordSong {\n        const chordLines: ChordLine[] = lyricLines.map((lyricLine: string) =>\n            ChordLine.fromLyrics(lyricLine)\n        );\n        return new ChordSong(chordLines);\n    }\n\n    get chordLines(): ChordLine[] {\n        return this.elements;\n    }\n\n    get title(): string {\n        return this.metadata.title;\n    }\n\n    set title(newTitle: string) {\n        this.metadata.title = newTitle;\n    }\n\n    get performedBy(): string {\n        return this.metadata.performedBy;\n    }\n\n    set performedBy(newPerformedBy: string) {\n        this.metadata.performedBy = newPerformedBy;\n    }\n\n    get composedBy(): string {\n        return this.metadata.composedBy;\n    }\n\n    set composedBy(newComposedBy: string) {\n        this.metadata.composedBy = newComposedBy;\n    }\n\n    get asHeardFrom(): string {\n        return this.metadata.asHeardFrom;\n    }\n\n    set asHeardFrom(newAsHeardFrom: string) {\n        this.metadata.asHeardFrom = newAsHeardFrom;\n    }\n\n    clone(): ChordSong {\n        return new ChordSong(this.elements, this.metadata);\n    }\n\n    toJSON(): object {\n        return this;\n    }\n\n    mergeLineWithPrevious(idable: IDable<\"ChordLine\">): boolean {\n        const index = this.indexOf(idable.id);\n        // no previous line to merge with, just bail\n        if (index === 0) {\n            return false;\n        }\n\n        // the user experience usually would like a space between lines when they're merged\n        // e.g.\n        // Never Gonna\n        // Give You Up\n        // =>\n        // Never GonnaGive You Up is awkward\n        const prevLine = this.chordLines[index - 1];\n        const lastBlockIndex = prevLine.chordBlocks.length - 1;\n        prevLine.chordBlocks[lastBlockIndex].lyric += \" \";\n\n        const currLine = this.chordLines[index];\n        prevLine.chordBlocks.push(...currLine.chordBlocks);\n        prevLine.normalizeBlocks();\n\n        this.chordLines.splice(index, 1);\n\n        return true;\n    }\n\n    contentEquals(other: ChordSong): boolean {\n        if (this.chordLines.length !== other.chordLines.length) {\n            return false;\n        }\n\n        if (!lodash.isEqual(this.metadata, other.metadata)) {\n            return false;\n        }\n\n        const reducer = (\n            isEqual: boolean,\n            value: ChordLine,\n            index: number\n        ): boolean => {\n            if (!isEqual) {\n                return false;\n            }\n\n            const otherLine = other.chordLines[index];\n            if (!value.contentEquals(otherLine)) {\n                return false;\n            }\n\n            return true;\n        };\n\n        return this.chordLines.reduce(reducer, true);\n    }\n\n    findLineAndBlock(blockID: IDable<\"ChordBlock\">): [ChordLine, ChordBlock] {\n        for (const line of this.chordLines) {\n            const block: ChordBlock | undefined = line.chordBlocks.find(\n                (block: ChordBlock) => block.id === blockID.id\n            );\n            if (block !== undefined) {\n                return [line, block];\n            }\n        }\n\n        throw new Error(\"BlockID can't be found in the entire song\");\n    }\n}\n","import { Theme, Typography } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { inflatingWhitespace } from \"../../common/Whitespace\";\nexport const LyricsTypography = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.secondary.light,\n    },\n}))(Typography);\n\nexport const ChordTypography = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.primary.main,\n    },\n}))(Typography);\n\nexport const LineBreak = () => {\n    return <Typography>{inflatingWhitespace()}</Typography>;\n};\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { LineBreak } from \"./Common\";\n\nconst Header = () => {\n    return <Typography variant=\"h5\">Learning Chord Paper</Typography>;\n};\n\nconst Preamble = () => {\n    return (\n        <>\n            <Typography>\n                Chord Paper aims to be as intuitive and handy as possible, but\n                there could still be features that aren't obvious as we work out\n                the kinks. Let's walk through the basics together by making some\n                changes to chords and lyrics!\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Since Chord Paper is still in early stages, some of these could\n                change in the future.\n            </Typography>\n        </>\n    );\n};\n\nconst Starting: React.FC<{}> = (): JSX.Element => {\n    return (\n        <>\n            <Header />\n            <LineBreak />\n            <Preamble />\n        </>\n    );\n};\n\nexport default Starting;\n","import { Fab as UnstyledFab, Paper, Theme } from \"@material-ui/core\";\nimport UnstyledPlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { Link, Route } from \"react-router-dom\";\nimport ErrorPage from \"./edit/ErrorPage\";\nimport AddChord from \"./tutorial/AddChord\";\nimport AddLine from \"./tutorial/AddLine\";\nimport ChordPositioning from \"./tutorial/ChordPositioning\";\nimport CopyAndPaste from \"./tutorial/CopyAndPaste\";\nimport DragAndDropChord from \"./tutorial/DragAndDropChord\";\nimport EditChord from \"./tutorial/EditChord\";\nimport EditLyrics from \"./tutorial/EditLyrics\";\nimport Instrumental from \"./tutorial/Instrumental\";\nimport MergeLine from \"./tutorial/MergeLine\";\nimport PasteLyrics from \"./tutorial/PasteLyrics\";\nimport RemoveChord from \"./tutorial/RemoveChord\";\nimport RemoveLine from \"./tutorial/RemoveLine\";\nimport Starting from \"./tutorial/Start\";\n\ntype ExerciseEntry = {\n    title: string;\n    route: string;\n    component: React.FC<{}>;\n};\n\nexport type ExerciseRoute = {\n    title: string;\n    route: string;\n};\n\nconst allExercises: ExerciseEntry[] = [\n    {\n        title: \"Starting\",\n        route: \"/learn/start\",\n        component: Starting,\n    },\n    {\n        title: \"Edit a Chord\",\n        route: \"/learn/edit_chord\",\n        component: EditChord,\n    },\n    {\n        title: \"Remove a Chord\",\n        route: \"/learn/remove_chord\",\n        component: RemoveChord,\n    },\n    {\n        title: \"Add a Chord\",\n        route: \"/learn/add_chord\",\n        component: AddChord,\n    },\n    {\n        title: \"Drag and Drop Chords\",\n        route: \"/learn/drag_and_drop_chord\",\n        component: DragAndDropChord,\n    },\n    {\n        title: \"Edit Lyrics\",\n        route: \"/learn/edit_lyrics\",\n        component: EditLyrics,\n    },\n    {\n        title: \"Instrumentals\",\n        route: \"/learn/instrumentals\",\n        component: Instrumental,\n    },\n    {\n        title: \"Chord Positioning\",\n        route: \"/learn/chord_positioning\",\n        component: ChordPositioning,\n    },\n    {\n        title: \"Adding New Line\",\n        route: \"/learn/add_line\",\n        component: AddLine,\n    },\n    {\n        title: \"Removing a Line\",\n        route: \"/learn/remove_line\",\n        component: RemoveLine,\n    },\n    {\n        title: \"Pasting Lyrics\",\n        route: \"/learn/paste_lyrics\",\n        component: PasteLyrics,\n    },\n    {\n        title: \"Merging Lines\",\n        route: \"/learn/merge_lines\",\n        component: MergeLine,\n    },\n    {\n        title: \"Copying and Pasting Lines\",\n        route: \"/learn/copy_and_paste\",\n        component: CopyAndPaste,\n    },\n];\n\nexport const allExerciseRoutes = (): ExerciseRoute[] => {\n    return allExercises.map((entry: ExerciseEntry) => ({\n        title: entry.title,\n        route: entry.route,\n    }));\n};\n\nconst PlayArrowIcon = withStyles({\n    root: {\n        color: \"white\",\n    },\n})(UnstyledPlayArrowIcon);\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(5),\n        padding: theme.spacing(5),\n        minHeight: theme.spacing(46),\n        width: theme.spacing(92),\n        position: \"relative\",\n    },\n}))(Paper);\n\nconst Fab = withStyles((theme: Theme) => ({\n    root: {\n        position: \"absolute\",\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n}))(UnstyledFab);\n\ninterface TutorialProps {\n    route: string;\n}\n\nexport const TutorialSwitches = (): React.ReactElement[] => {\n    return allExercises.map((exerciseEntry: ExerciseEntry) => (\n        <Route key={exerciseEntry.route} exact path={exerciseEntry.route}>\n            <Tutorial route={exerciseEntry.route} />\n        </Route>\n    ));\n};\n\nconst Tutorial: React.FC<TutorialProps> = (\n    props: TutorialProps\n): JSX.Element => {\n    const matchEntry = (entry: ExerciseEntry): boolean => {\n        return entry.route === props.route;\n    };\n\n    const exerciseEntry: ExerciseEntry | undefined = allExercises.find(\n        matchEntry\n    );\n\n    if (exerciseEntry === undefined) {\n        return <ErrorPage />;\n    }\n\n    const exerciseIndex = allExercises.findIndex(matchEntry);\n\n    let nextButton: React.ReactElement | null = null;\n\n    if (exerciseIndex < allExercises.length - 1) {\n        const nextExercise = allExercises[exerciseIndex + 1];\n        nextButton = (\n            <Link to={nextExercise.route}>\n                <Fab color=\"primary\">\n                    <PlayArrowIcon />\n                </Fab>\n            </Link>\n        );\n    }\n\n    return (\n        <RootPaper>\n            <exerciseEntry.component />\n            {nextButton}\n        </RootPaper>\n    );\n};\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordTypography, LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst EditChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly \" }),\n            new ChordBlock({ chord: \"Bm\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Editing Chords</Typography>\n            <LineBreak />\n            <Typography>\n                Click on a chord to change it, then press enter to commit your\n                changes. Let's change the chord above{\" \"}\n                <LyricsTypography display=\"inline\">appear</LyricsTypography>{\" \"}\n                from <ChordTypography display=\"inline\">Bm</ChordTypography> to{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default EditChord;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordTypography, LineBreak } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst RemoveChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: \"Why do birds suddenly appear?\",\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Removing Chords</Typography>\n            <LineBreak />\n            <Typography>\n                Simply remove all the chord text when editing to clear the\n                chord. Let's remove the{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default RemoveChord;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport Playground from \"./Playground\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { LineBreak, LyricsTypography, ChordTypography } from \"./Common\";\n\nconst AddChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: \"Why do birds suddenly appear?\",\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: \"Why do birds suddenly \",\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Adding Chords</Typography>\n            <LineBreak />\n            <Typography>\n                Add a chord by hovering above a word, and clicking the outlined\n                box. Let's add{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography> back\n                above{\" \"}\n                <LyricsTypography display=\"inline\">appear</LyricsTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default AddChord;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordTypography, LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst DragAndDropChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"suddenly appear?\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Dragging and Dropping Chords</Typography>\n            <LineBreak />\n            <Typography>\n                It's also possible to drag and drop chords onto different parts\n                of the line when its initial placement wasn't quite correct.\n                Just drag a chord and drop it to the space above or on another\n                lyric.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Let's move the{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography> above{\" \"}\n                <LyricsTypography display=\"inline\">suddenly</LyricsTypography>{\" \"}\n                to above{\" \"}\n                <LyricsTypography display=\"inline\">appear</LyricsTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default DragAndDropChord;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst EditLyrics: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: \"Why oh why do birds suddenly \",\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Editing Lyrics</Typography>\n            <LineBreak />\n            <Typography>\n                You can edit the lyrics by clicking anywhere along the lyrics.\n                Finish editing lyrics by pressing enter or clicking outside the\n                text edit box. Chord Paper will move chords along with lyrics\n                when you edit them. Let's change the lyrics to:\n            </Typography>\n            <LyricsTypography>\n                Why oh why do birds suddenly appear?\n            </LyricsTypography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default EditLyrics;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { LineBreak, LyricsTypography, ChordTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst Instrumental: React.FC<{}> = (): JSX.Element => {\n    const tabExample = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"|\" }),\n            new ChordBlock({ chord: \"Bm\", lyric: \"\\t\" }),\n            new ChordBlock({ chord: \"A\", lyric: \"\\t|\" }),\n            new ChordBlock({ chord: \"E\", lyric: \"\\t\" }),\n            new ChordBlock({ chord: \"C#m7\", lyric: \"\\t|\" }),\n        ]),\n    ]);\n\n    const initialSong = new ChordSong();\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"|\" }),\n            new ChordBlock({ chord: \"Bm\", lyric: \"\\t\" }),\n            new ChordBlock({ chord: \"A\", lyric: \"\\t|\" }),\n            new ChordBlock({ chord: \"E\", lyric: \"\\t\" }),\n            new ChordBlock({ chord: \"C#m7\", lyric: \"\\t|\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Instrumental Sections</Typography>\n            <LineBreak />\n            <Typography>\n                One way to annotate chords that do not happen over lyrics is\n                using whitespace - notably{\" \"}\n                <LyricsTypography display=\"inline\">tab</LyricsTypography> or{\" \"}\n                <LyricsTypography display=\"inline\">space</LyricsTypography>.\n                Both will provide an empty lyric space to anchor chords to and\n                you should use either to get the formatting that you want.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Tabs are good for providing a large width for long instrumental\n                sections. You can insert a{\" \"}\n                <LyricsTypography display=\"inline\">tab</LyricsTypography>{\" \"}\n                character by pressing tab when editing lyrics.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                This example demonstrates using tabs and the | (pipe) character\n                for annotating and organizing chords without lyrics.\n            </Typography>\n            <Playground initialSong={tabExample} />\n            <LineBreak />\n            <Typography>\n                Let's replicate the example from above using just the{\" \"}\n                <LyricsTypography display=\"inline\">tab</LyricsTypography> and{\" \"}\n                <LyricsTypography display=\"inline\">|</LyricsTypography>{\" \"}\n                characters. Insert 4 tabs by editing the lyrics, and pressing\n                tab 4 times. Then divide them with{\" \"}\n                <LyricsTypography display=\"inline\">|</LyricsTypography>, and add{\" \"}\n                <ChordTypography display=\"inline\">Bm</ChordTypography>,{\" \"}\n                <ChordTypography display=\"inline\">A</ChordTypography>,{\" \"}\n                <ChordTypography display=\"inline\">E</ChordTypography>,{\" \"}\n                <ChordTypography display=\"inline\">C#m7</ChordTypography>{\" \"}\n                respectively to each tab.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default Instrumental;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport Playground from \"./Playground\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { LineBreak, LyricsTypography, ChordTypography } from \"./Common\";\n\nconst ChordPositioning: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly \" }),\n            new ChordBlock({ chord: \"\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    const example = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly\" }),\n            new ChordBlock({ chord: \"F#7\", lyric: \" ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"\\t\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly\" }),\n            new ChordBlock({ chord: \"F#7\", lyric: \" ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"\\t\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Chord Positioning</Typography>\n            <LineBreak />\n            <Typography>\n                Sometimes you want to emphasize a chord landing on a specific\n                syllable or between words. Without the overhead of standard\n                notation, we can do this by breaking up lyrics and annotating\n                spaces.\n            </Typography>\n            <LineBreak />\n\n            <Typography>Let's change the lyrics to:</Typography>\n            <LyricsTypography>Why do birds suddenly ap-pear?</LyricsTypography>\n            <Typography>\n                And add a tab after the{\" \"}\n                <LyricsTypography display=\"inline\">?</LyricsTypography>\n            </Typography>\n            <Typography>\n                Then add the chord{\" \"}\n                <ChordTypography display=\"inline\">F#7</ChordTypography> to the\n                space before{\" \"}\n                <LyricsTypography display=\"inline\">ap-</LyricsTypography>\n            </Typography>\n            <Typography>\n                Add the chord{\" \"}\n                <ChordTypography display=\"inline\">B7sus4</ChordTypography> to{\" \"}\n                <LyricsTypography display=\"inline\">pear</LyricsTypography>\n            </Typography>\n            <Typography>\n                Add the chord{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography> to the\n                tabbed space after{\" \"}\n            </Typography>\n            <Typography>It should look like this:</Typography>\n            <Playground initialSong={example} />\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default ChordPositioning;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst AddLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"Every time you are near\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Adding New Lines</Typography>\n            <LineBreak />\n            <Typography>\n                You can add more lines by hovering below (or above) and existing\n                line, and clicking the gray line or the add icon to the right.\n            </Typography>\n            <Typography>Let's add a line, and change the lyrics to:</Typography>\n            <LyricsTypography>Why do birds suddenly ap-pear?</LyricsTypography>\n            <LyricsTypography>Every time you are near</LyricsTypography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default AddLine;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { LineBreak } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst RemoveLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"Every time you are near\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Removing Lines</Typography>\n            <LineBreak />\n            <Typography>\n                Similarly, you can remove a line by hovering over the line, and\n                clicking the red remove icon to the right. Let's remove the\n                second line of lyrics.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default RemoveLine;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst PasteLyrics: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n        new ChordLine(),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"Every time you are near\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"Just like me, they long to be\",\n            }),\n        ]),\n        new ChordLine([new ChordBlock({ chord: \"\", lyric: \"Close to you\" })]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Pasting Lyrics</Typography>\n            <LineBreak />\n            <Typography>\n                It would be annoying to have to type out the lyrics. But we can\n                paste it in! Copy these lyrics, click into the second line, and\n                paste:\n            </Typography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                Every time you are near\n            </LyricsTypography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                Just like me, they long to be\n            </LyricsTypography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                Close to you\n            </LyricsTypography>\n\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default PasteLyrics;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { LineBreak } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst MergeLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: \"Why do birds\",\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"suddenly \",\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: \"appear?\",\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: \"Why do birds suddenly \",\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: \"appear?\",\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Merging Lines</Typography>\n            <LineBreak />\n            <Typography>\n                Sometimes the lyrics that we paste in is not the division we\n                want. Let's merge the two lines. Click into the second line,\n                move the cursor to the beginning of the line, and press\n            </Typography>\n            <Typography>\n                (CTRL+Backspace : Windows | CMD+Backspace : Mac)\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default MergeLine;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst CopyAndPaste: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"But I'm a \" }),\n            new ChordBlock({ chord: \"G\", lyric: \"creep, I'm a \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"weirdo\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"What the hell am doing \" }),\n            new ChordBlock({ chord: \"C\", lyric: \"here? I don't be-\" }),\n            new ChordBlock({ chord: \"Cm\", lyric: \"long here\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"I don't care if it \",\n            }),\n            new ChordBlock({ chord: \"G\", lyric: \"hurts, I wanna have con-\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"trol\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"I want a perfect \",\n            }),\n            new ChordBlock({ chord: \"C\", lyric: \"body, I want a perfect \" }),\n            new ChordBlock({ chord: \"Cm\", lyric: \"soul\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"I want you to \",\n            }),\n            new ChordBlock({ chord: \"G\", lyric: \"notice when I'm not a-\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"round\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"You're so fucking \",\n            }),\n            new ChordBlock({ chord: \"C\", lyric: \"special, I wish I was \" }),\n            new ChordBlock({ chord: \"Cm\", lyric: \"special\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"But I'm a \" }),\n            new ChordBlock({ chord: \"G\", lyric: \"creep, I'm a \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"weirdo\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"What the hell am doing \" }),\n            new ChordBlock({ chord: \"C\", lyric: \"here? I don't be-\" }),\n            new ChordBlock({ chord: \"Cm\", lyric: \"long here\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"I don't care if it \",\n            }),\n            new ChordBlock({ chord: \"G\", lyric: \"hurts, I wanna have con-\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"trol\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"I want a perfect \",\n            }),\n            new ChordBlock({ chord: \"C\", lyric: \"body, I want a perfect \" }),\n            new ChordBlock({ chord: \"Cm\", lyric: \"soul\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"I want you to \",\n            }),\n            new ChordBlock({ chord: \"G\", lyric: \"notice when I'm not a-\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"round\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"You're so fucking \",\n            }),\n            new ChordBlock({ chord: \"C\", lyric: \"special, I wish I was \" }),\n            new ChordBlock({ chord: \"Cm\", lyric: \"special\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"But I'm a \" }),\n            new ChordBlock({ chord: \"G\", lyric: \"creep, I'm a \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"weirdo\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"What the hell am doing \" }),\n            new ChordBlock({ chord: \"C\", lyric: \"here? I don't be-\" }),\n            new ChordBlock({ chord: \"Cm\", lyric: \"long here\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Copying and Pasting Lines</Typography>\n            <LineBreak />\n            <Typography>\n                Sometimes you want to just repeat what's on the page without\n                entering it all over again - choruses with the same lyrics,\n                repeating instrumental sections. You can do this by copying and\n                pasting entire lines that you've already written out.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                The easiest way to copy is to drag down from some empty space on\n                the left of the line you wish to start copying from, then\n                pressing (CTRL or CMD) + C, or right click -> copy.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                To paste, click to edit a lyric line, and press (CTRL or CMD) +\n                V, or right click -> paste.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Note that there's no partial copy - if any part of the line is\n                selected during the copy, the whole line is copied.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                If you have trouble selecting a line, try dragging your cursor\n                starting further left and above the line.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Let's try copying and pasting the repeated chorus:\n            </Typography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                But I'm a creep, I'm a weirdo\n            </LyricsTypography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                What the hell am I doing here? I don't belong here.\n            </LyricsTypography>\n            <LineBreak />\n            <Typography>\n                Copy those two lines, add a new line at the bottom, and paste it\n                there.\n            </Typography>\n\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default CopyAndPaste;\n","import {\n    Collapse,\n    Divider,\n    Drawer,\n    Grid,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Paper,\n    Theme,\n    Typography,\n} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport UnstyledCloseIcon from \"@material-ui/icons/Close\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport FreeBreakfastIcon from \"@material-ui/icons/FreeBreakfast\";\nimport UnstyledMenuIcon from \"@material-ui/icons/Menu\";\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\nimport PetsIcon from \"@material-ui/icons/Pets\";\nimport StoreIcon from \"@material-ui/icons/Store\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { allExerciseRoutes, ExerciseRoute } from \"./Tutorial\";\n\nconst withPointerStyle = withStyles({\n    root: {\n        cursor: \"pointer\",\n    },\n});\n\nconst MenuIcon = withPointerStyle(UnstyledMenuIcon);\nconst CloseIcon = withPointerStyle(UnstyledCloseIcon);\n\nconst VerticalGridItem = withStyles({\n    root: {\n        maxWidth: \"none\",\n    },\n})(Grid);\n\nconst TitleGrid = withStyles((theme: Theme) => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n}))(Grid);\n\nconst TitleName = withStyles({\n    root: {\n        color: grey[600],\n    },\n})(Typography);\n\nconst CollapsedMenuSurface = withStyles({\n    root: {\n        minWidth: \"24px\",\n        height: \"100vh\",\n    },\n})(Paper);\n\nconst FullHeightGrid = withStyles({\n    root: {\n        height: \"100%\",\n        width: \"100%\",\n    },\n})(Grid);\n\nconst SideMenu: React.FC<{}> = (): JSX.Element => {\n    const [expanded, setExpanded] = useState(false);\n    const [learnSubmenuOpen, setLearnSubMenuOpen] = useState(false);\n\n    const typographyProps = {\n        variant: \"h6\" as \"h6\",\n    };\n\n    const learnClickHandler = () => {\n        setLearnSubMenuOpen(!learnSubmenuOpen);\n    };\n\n    const tutorialMenu = () => {\n        const exerciseLinks = allExerciseRoutes().map(\n            (exerciseRoute: ExerciseRoute) => {\n                return (\n                    <Link\n                        key={exerciseRoute.route}\n                        to={exerciseRoute.route}\n                        style={linkStyle}\n                    >\n                        <ListItem button>\n                            <ListItemText inset primary={exerciseRoute.title} />\n                        </ListItem>\n                    </Link>\n                );\n            }\n        );\n\n        return (\n            <>\n                <ListItem key=\"Learn\" button onClick={learnClickHandler}>\n                    <ListItemIcon>\n                        <FreeBreakfastIcon />\n                    </ListItemIcon>\n                    <ListItemText\n                        primary=\"Learn\"\n                        primaryTypographyProps={typographyProps}\n                    />\n                    {learnSubmenuOpen ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                </ListItem>\n                <Collapse in={learnSubmenuOpen} timeout=\"auto\">\n                    <List>{exerciseLinks}</List>\n                </Collapse>\n            </>\n        );\n    };\n\n    const linkStyle = {\n        textDecoration: \"none\",\n        color: \"inherit\",\n    };\n\n    const collapsedMenu = (\n        <Drawer variant=\"persistent\" open={!expanded} anchor=\"left\">\n            <CollapsedMenuSurface>\n                <FullHeightGrid\n                    container\n                    direction=\"column\"\n                    alignContent=\"center\"\n                >\n                    <VerticalGridItem item xs={1}></VerticalGridItem>\n                    <VerticalGridItem item xs={1}>\n                        <MenuIcon onClick={() => setExpanded(true)} />\n                    </VerticalGridItem>\n                    <VerticalGridItem item xs={10}></VerticalGridItem>\n                </FullHeightGrid>\n            </CollapsedMenuSurface>\n        </Drawer>\n    );\n\n    const expandedMenu = (\n        <Drawer variant=\"persistent\" open={expanded} anchor=\"left\">\n            <TitleGrid container alignItems=\"center\" justify=\"space-between\">\n                <Grid item>\n                    <Link\n                        to=\"/\"\n                        style={linkStyle}\n                        data-testid=\"Menu-TitleButton\"\n                    >\n                        <TitleName variant=\"h5\" display=\"inline\">\n                            Chord Paper\n                        </TitleName>\n                    </Link>\n                </Grid>\n                <Grid item>\n                    <CloseIcon onClick={() => setExpanded(false)} />\n                </Grid>\n            </TitleGrid>\n\n            <Divider />\n            <List>\n                <Link\n                    key=\"/song\"\n                    to=\"/song\"\n                    style={linkStyle}\n                    data-testid=\"Menu-HomeButton\"\n                >\n                    <ListItem key=\"Song\" button>\n                        <ListItemIcon>\n                            <MusicNoteIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"Song\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n                <Link\n                    key=\"/demo\"\n                    to=\"/demo\"\n                    style={linkStyle}\n                    data-testid=\"Menu-DemoButton\"\n                >\n                    <ListItem key=\"Demo\" button>\n                        <ListItemIcon>\n                            <StoreIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"Demo\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n                {tutorialMenu()}\n                <Link\n                    key=\"/about\"\n                    to=\"/about\"\n                    style={linkStyle}\n                    data-testid=\"Menu-AboutButton\"\n                >\n                    <ListItem key=\"About\" button>\n                        <ListItemIcon>\n                            <PetsIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"About\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n            </List>\n        </Drawer>\n    );\n\n    return (\n        <>\n            {collapsedMenu}\n            {expandedMenu}\n        </>\n    );\n};\n\nexport default SideMenu;\n","import { Theme } from \"@material-ui/core\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport NoteAddIcon from \"@material-ui/icons/NoteAdd\";\nimport PlayIcon from \"@material-ui/icons/PlayArrow\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport {\n    SpeedDial as UnstyledSpeedDial,\n    SpeedDialAction,\n    SpeedDialIcon,\n} from \"@material-ui/lab\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { isLeft } from \"fp-ts/lib/Either\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\n\ninterface ChordPaperMenuProps {\n    song: ChordSong;\n    onLoad?: (loadedSong: ChordSong) => void;\n    onNewSong?: () => void;\n    onPlay?: () => void;\n}\n\nconst SpeedDial = withStyles((theme: Theme) => ({\n    root: {\n        position: \"fixed\",\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n}))(UnstyledSpeedDial);\n\nconst ChordPaperMenu: React.FC<ChordPaperMenuProps> = (\n    props: ChordPaperMenuProps\n): JSX.Element => {\n    const [open, setOpen] = useState(false);\n    const { enqueueSnackbar } = useSnackbar();\n\n    const openMenu = () => {\n        setOpen(true);\n    };\n\n    const closeMenu = () => {\n        setOpen(false);\n    };\n\n    const saveAction = () => {\n        const jsonStr = JSON.stringify(props.song);\n\n        const blob = new Blob([jsonStr], {\n            type: \"application/json\",\n        });\n        const objectURL = URL.createObjectURL(blob);\n\n        const anchor = document.createElement(\"a\");\n\n        anchor.download = \"chord_paper_song.json\";\n        if (props.song.title !== \"\") {\n            anchor.download = props.song.title + \".json\";\n        }\n        anchor.href = objectURL;\n        anchor.click();\n\n        URL.revokeObjectURL(objectURL);\n    };\n\n    function pickFileHandler(this: HTMLInputElement) {\n        const fileList = this.files;\n        if (fileList === null) {\n            return;\n        }\n\n        if (fileList.length > 1) {\n            enqueueSnackbar(\"Multiple files selected, only one file expected\", {\n                variant: \"error\",\n            });\n            return;\n        }\n\n        const file = fileList.item(0);\n        if (file === null) {\n            enqueueSnackbar(\"Could not retrieve file from file dialog\", {\n                variant: \"error\",\n            });\n            return;\n        }\n\n        const fileReader = new FileReader();\n        fileReader.onload = (ev: ProgressEvent<FileReader>) => {\n            if (\n                ev.target === null ||\n                ev.target.result === null ||\n                ev.target.result instanceof ArrayBuffer\n            ) {\n                return;\n            }\n\n            const results = ChordSong.deserialize(ev.target.result);\n            if (isLeft(results)) {\n                enqueueSnackbar(\n                    \"Can't load file, Song file failed validation\",\n                    {\n                        variant: \"error\",\n                    }\n                );\n                return;\n            }\n\n            if (props.onLoad) {\n                props.onLoad(results.right);\n            }\n        };\n\n        fileReader.readAsText(file);\n    }\n\n    const loadAction = async () => {\n        const inputElem: HTMLInputElement = document.createElement(\"input\");\n        inputElem.type = \"file\";\n        inputElem.addEventListener(\"change\", pickFileHandler);\n\n        inputElem.click();\n    };\n\n    return (\n        <SpeedDial\n            icon={<SpeedDialIcon />}\n            open={open}\n            onOpen={openMenu}\n            onClose={closeMenu}\n            ariaLabel=\"SpeedDial\"\n        >\n            <SpeedDialAction\n                icon={<SaveIcon />}\n                tooltipTitle=\"Save\"\n                onClick={saveAction}\n            />\n            <SpeedDialAction\n                icon={<FolderOpenIcon />}\n                tooltipTitle=\"Load\"\n                onClick={loadAction}\n            />\n            <SpeedDialAction\n                icon={<NoteAddIcon />}\n                tooltipTitle=\"New Song\"\n                onClick={props.onNewSong}\n            />\n            <SpeedDialAction\n                icon={<PlayIcon />}\n                tooltipTitle=\"Play Mode\"\n                onClick={props.onPlay}\n            />\n        </SpeedDial>\n    );\n};\n\nexport default ChordPaperMenu;\n","import { Box, Typography, TypographyProps } from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { inflateIfEmpty } from \"../../common/Whitespace\";\nimport TextInput from \"./TextInput\";\n\ninterface EditableTypographyProps extends DataTestID, TypographyProps {\n    children: string;\n    onValueChange?: (newValue: string) => void;\n    placeholder?: string;\n}\n\nconst PlaceholderTypography = withStyles({\n    root: {\n        color: grey[400],\n    },\n})(Typography);\n\nconst EditableTypography: React.FC<EditableTypographyProps> = (\n    props: EditableTypographyProps\n): JSX.Element => {\n    const [editing, setEditing] = useState(false);\n\n    const startEdit = () => {\n        setEditing(true);\n    };\n\n    const finishEdit = (newValue: string) => {\n        setEditing(false);\n        if (props.onValueChange) {\n            props.onValueChange(newValue);\n        }\n    };\n\n    const nonEditableLine = (): React.ReactElement => {\n        const {\n            children,\n            placeholder,\n            onValueChange,\n            ...typographyProps\n        } = props;\n\n        if (props.children === \"\" && props.placeholder !== undefined) {\n            return (\n                <PlaceholderTypography {...typographyProps} onClick={startEdit}>\n                    {props.placeholder}\n                </PlaceholderTypography>\n            );\n        }\n\n        return (\n            <Typography {...typographyProps} onClick={startEdit}>\n                {inflateIfEmpty(props.children)}\n            </Typography>\n        );\n    };\n\n    const editableLine = (): React.ReactElement => {\n        if (props.variant === \"inherit\" || props.variant === \"srOnly\") {\n            throw new Error(\"can't have these variant types\");\n        }\n\n        return (\n            <TextInput\n                variant={props.variant}\n                onFinish={finishEdit}\n                data-testid={\"EditableLine\"}\n            >\n                {props.children}\n            </TextInput>\n        );\n    };\n\n    const elem: React.ReactElement = editing\n        ? editableLine()\n        : nonEditableLine();\n\n    return <Box>{elem}</Box>;\n};\n\nexport default EditableTypography;\n","import { Box, Grid, Theme, Typography } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport EditableTypography from \"./EditableTypography\";\n\ninterface HeaderProps {\n    song: ChordSong;\n    onSongChanged?: (updatedSong: ChordSong) => void;\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps): JSX.Element => {\n    const theme: Theme = useTheme();\n\n    const notifySongChanged = (): void => {\n        if (props.onSongChanged) {\n            props.onSongChanged(props.song);\n        }\n    };\n\n    const updateTitleHandler = (newTitle: string) => {\n        props.song.title = newTitle;\n        notifySongChanged();\n    };\n\n    const updateComposeHandler = (newComposer: string) => {\n        props.song.composedBy = newComposer;\n        notifySongChanged();\n    };\n\n    const updatePerformerHandler = (newPerformer: string) => {\n        props.song.performedBy = newPerformer;\n        notifySongChanged();\n    };\n\n    const updateHeardFrom = (newHeardFrom: string) => {\n        props.song.asHeardFrom = newHeardFrom;\n        notifySongChanged();\n    };\n\n    const title = (\n        <Box paddingBottom={theme.spacing(0.5)}>\n            <EditableTypography\n                variant=\"h4\"\n                align=\"center\"\n                data-testid=\"SongTitle\"\n                placeholder=\"Song Title\"\n                onValueChange={updateTitleHandler}\n            >\n                {props.song.title}\n            </EditableTypography>\n        </Box>\n    );\n\n    const details = (\n        <Grid container justify=\"center\">\n            <Grid container item xs={4} justify=\"center\">\n                <Grid item>\n                    <Typography display=\"block\" variant=\"caption\">\n                        Composed by:{\" \"}\n                    </Typography>\n\n                    <EditableTypography\n                        display=\"block\"\n                        variant=\"caption\"\n                        placeholder=\"Stock Waterman\"\n                        onValueChange={updateComposeHandler}\n                        data-testid=\"ComposedBy\"\n                    >\n                        {props.song.composedBy}\n                    </EditableTypography>\n                </Grid>\n            </Grid>\n            <Grid container item xs={4} justify=\"center\">\n                <Grid item>\n                    <Typography display=\"inline\" variant=\"caption\">\n                        Performed by:{\" \"}\n                    </Typography>\n\n                    <EditableTypography\n                        variant=\"caption\"\n                        placeholder=\"Rick Astley\"\n                        onValueChange={updatePerformerHandler}\n                        data-testid=\"PerformedBy\"\n                    >\n                        {props.song.performedBy}\n                    </EditableTypography>\n                </Grid>\n            </Grid>\n            <Grid container item xs={4} justify=\"center\">\n                <Grid item>\n                    <Typography display=\"inline\" variant=\"caption\">\n                        As heard from:{\" \"}\n                    </Typography>\n                    <EditableTypography\n                        variant=\"caption\"\n                        placeholder=\"https://www.youtube.com/watch?v=dM9zwZCOmjM\"\n                        onValueChange={updateHeardFrom}\n                        data-testid=\"AsHeardAt\"\n                    >\n                        {props.song.asHeardFrom}\n                    </EditableTypography>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n\n    return (\n        <Box\n            paddingTop={theme.spacing(1)}\n            paddingLeft={theme.spacing(0.5)}\n            paddingRight={theme.spacing(0.5)}\n            data-testid=\"Header\"\n        >\n            {title}\n            {details}\n        </Box>\n    );\n};\n\nexport default Header;\n","import { Paper, Theme, withStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport ChordPaperBody from \"./ChordPaperBody\";\nimport ChordPaperMenu from \"./ChordPaperMenu\";\nimport Header from \"./Header\";\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(5),\n        minHeight: theme.spacing(92),\n        minWidth: theme.spacing(92),\n    },\n}))(Paper);\n\ninterface ChordPaperProps {\n    song: ChordSong;\n    onSongChanged?: (song: ChordSong) => void;\n    onPlay?: () => void;\n}\n\nconst ChordPaper: React.FC<ChordPaperProps> = (\n    props: ChordPaperProps\n): JSX.Element => {\n    const songChangeHandler = (song: ChordSong) => {\n        props.onSongChanged?.(song);\n    };\n\n    const loadHandler = (loadedSong: ChordSong) => {\n        props.onSongChanged?.(loadedSong);\n    };\n\n    const newSongHandler = () => {\n        props.onSongChanged?.(new ChordSong());\n    };\n\n    return (\n        <RootPaper elevation={3} data-testid=\"ChordPaper\">\n            <Header\n                data-testid={\"Header\"}\n                song={props.song}\n                onSongChanged={songChangeHandler}\n            />\n            <ChordPaperBody\n                song={props.song}\n                onSongChanged={songChangeHandler}\n            />\n            <ChordPaperMenu\n                song={props.song}\n                onLoad={loadHandler}\n                onNewSong={newSongHandler}\n                onPlay={props.onPlay}\n            />\n        </RootPaper>\n    );\n};\n\nexport default ChordPaper;\n","import { Theme } from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport UnstyledMenuIcon from \"@material-ui/icons/Menu\";\nimport {\n    SpeedDial as UnstyledSpeedDial,\n    SpeedDialAction,\n} from \"@material-ui/lab\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\n\ninterface PlayMenuProps {\n    onExit?: () => void;\n}\n\nconst MenuIcon = withStyles({\n    root: {\n        backgroundColor: \"transparent\",\n    },\n})(UnstyledMenuIcon);\n\nconst SpeedDial = withStyles((theme: Theme) => ({\n    root: {\n        position: \"fixed\",\n        top: theme.spacing(2),\n        right: theme.spacing(2),\n        \"& .MuiSpeedDial-fab\": {\n            backgroundColor: \"transparent\",\n            color: grey[500],\n        },\n    },\n}))(UnstyledSpeedDial);\n\nconst PlayMenu: React.FC<PlayMenuProps> = (\n    props: PlayMenuProps\n): JSX.Element => {\n    const [open, setOpen] = useState(false);\n\n    const openMenu = () => {\n        setOpen(true);\n    };\n\n    const closeMenu = () => {\n        setOpen(false);\n    };\n\n    const handleExit = (\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n        props.onExit?.();\n        event.stopPropagation();\n    };\n\n    return (\n        <SpeedDial\n            icon={<MenuIcon />}\n            direction=\"down\"\n            open={open}\n            onOpen={openMenu}\n            onClose={closeMenu}\n            ariaLabel=\"SpeedDial\"\n            FabProps={{\n                color: \"inherit\",\n            }}\n        >\n            <SpeedDialAction\n                icon={<ExitToAppIcon />}\n                tooltipTitle=\"Exit Play Mode\"\n                onMouseDownCapture={handleExit}\n            />\n        </SpeedDial>\n    );\n};\n\nexport default PlayMenu;\n","import { Box, Grid, Typography as UnstyledTypography } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport ChordSymbol from \"../display/ChordSymbol\";\n\nconst Typography = withStyles({\n    root: {\n        whiteSpace: \"pre\",\n    },\n})(UnstyledTypography);\n\ninterface PlayBlockProps {\n    block: ChordBlock;\n}\n\nconst PlayBlock: React.FC<PlayBlockProps> = (\n    props: PlayBlockProps\n): JSX.Element => {\n    return (\n        <Box display=\"inline-block\">\n            <Grid container direction=\"column\" component=\"span\">\n                <Grid item>\n                    <ChordSymbol>{props.block.chord}</ChordSymbol>\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"h6\" display=\"inline\">\n                        {props.block.lyric}\n                    </Typography>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default PlayBlock;\n","import { Box } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport PlayBlock from \"./PlayBlock\";\n\ninterface PlayLineProps {\n    line: ChordLine;\n}\n\nconst PlayLine: React.FC<PlayLineProps> = (\n    props: PlayLineProps\n): JSX.Element => {\n    return (\n        <Box>\n            {props.line.chordBlocks.map((block: ChordBlock) => (\n                <PlayBlock block={block}></PlayBlock>\n            ))}\n        </Box>\n    );\n};\n\nexport default PlayLine;\n","import { Box, Paper } from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { useWindowWidth } from \"@react-hook/window-size\";\nimport React, { useEffect } from \"react\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport PlayMenu from \"./PlayMenu\";\nimport PlayLine from \"./PlayLine\";\n\ninterface PlayProps {\n    song: ChordSong;\n    onEdit?: () => void;\n}\n\nconst Play: React.FC<PlayProps> = (props: PlayProps): JSX.Element => {\n    const numberOfColumns = 2;\n    const columnMargin = 20;\n\n    const windowWidth = useWindowWidth();\n    const columnWidth = windowWidth / numberOfColumns;\n    const snapThreshold = columnWidth / 2;\n\n    const scrollPage = (forward: boolean) => {\n        const currentPos = window.scrollX;\n        const delta = forward ? windowWidth : -windowWidth;\n\n        let nextPos = currentPos + delta;\n\n        const distanceFromLastColumn = nextPos % columnWidth;\n\n        if (distanceFromLastColumn < snapThreshold) {\n            nextPos -= distanceFromLastColumn;\n        } else {\n            const remainingDistance = columnWidth - distanceFromLastColumn;\n            nextPos += remainingDistance;\n        }\n\n        window.scrollTo({\n            left: nextPos,\n            top: 0,\n            behavior: \"smooth\",\n        });\n    };\n\n    const scrollForward = () => scrollPage(true);\n    const scrollBackward = () => scrollPage(false);\n\n    const handleKey = (event: KeyboardEvent) => {\n        // only three keys ever go backwards, everything else goes forwards\n        if (\n            event.key === \"ArrowLeft\" ||\n            event.key === \"ArrowUp\" ||\n            event.key === \"Backspace\"\n        ) {\n            scrollBackward();\n        } else {\n            scrollForward();\n        }\n\n        event.preventDefault();\n    };\n\n    const handleClick = (\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n        const handlers: ((\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => boolean)[] = [handleLeftClick, handleRightClick];\n\n        for (const handler of handlers) {\n            const handled: boolean = handler(event);\n            if (handled) {\n                event.preventDefault();\n                return;\n            }\n        }\n    };\n\n    const handleLeftClick = (\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ): boolean => {\n        // left click\n        if (event.button !== 0) {\n            return false;\n        }\n\n        scrollForward();\n        return true;\n    };\n\n    const handleRightClick = (\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ): boolean => {\n        // right click\n        if (event.button !== 2) {\n            return false;\n        }\n\n        scrollBackward();\n        return true;\n    };\n\n    // sorry, preventing context menu from showing up to make the right mouse click\n    // experience less annoying\n    const cancelContextMenu = (\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n        event.preventDefault();\n    };\n\n    const ColumnedPaper = withStyles({\n        root: {\n            columnGap: \"0px\",\n            columnRuleWidth: \"2px\",\n            columnRuleStyle: \"solid\",\n            columnRuleColor: grey[300],\n            columns: numberOfColumns,\n            height: \"100vh\",\n            width: \"100%\",\n        },\n    })(Paper);\n\n    // using margins instead of column-gap, CSS columns force the rightmost column\n    // up against the edge of the viewport and doesn't strictly respect column width\n    //\n    // making 0 gap columns with margins makes the math a lot simpler for each column\n    const MarginBox = withStyles({\n        root: {\n            marginLeft: `${columnMargin}px`,\n            marginRight: `${columnMargin}px`,\n        },\n    })(Box);\n\n    const lines = props.song.chordLines.map((chordLine: ChordLine) => {\n        return <PlayLine line={chordLine} />;\n    });\n\n    useEffect(() => {\n        window.addEventListener(\"keydown\", handleKey);\n\n        return () => window.removeEventListener(\"keydown\", handleKey);\n    });\n\n    return (\n        <ColumnedPaper\n            onMouseDown={handleClick}\n            onContextMenu={cancelContextMenu}\n        >\n            <PlayMenu onExit={props.onEdit} />\n            <MarginBox>{lines}</MarginBox>\n        </ColumnedPaper>\n    );\n};\n\nexport default Play;\n","import { Backdrop, CircularProgress, Theme } from \"@material-ui/core\";\nimport { createStyles, makeStyles } from \"@material-ui/styles\";\nimport { isLeft } from \"fp-ts/lib/Either\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { loadSong, saveSong } from \"../common/BrowserSave\";\nimport { ChordSong } from \"../common/ChordModel/ChordSong\";\n\nconst useBackdropStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        backdrop: {\n            zIndex: theme.zIndex.drawer + 1,\n            color: \"#fff\",\n        },\n    })\n);\n\ninterface SongProps {\n    initialSong: ChordSong;\n    onSongChanged?: (song: ChordSong) => void;\n}\n\ntype PropsWithoutSong<P extends SongProps> = Omit<P, keyof SongProps>;\n\nexport const withAutoSave = <P extends SongProps>(\n    OriginalComponent: React.FC<P>\n): React.FC<PropsWithoutSong<P>> => {\n    return (props: PropsWithoutSong<P>): JSX.Element => {\n        const [loadedSong, setLoadedSong] = useState<ChordSong | null>(null);\n        const { enqueueSnackbar } = useSnackbar();\n        const backdropStyles = useBackdropStyles();\n\n        const loadLastSavedSong = (): ChordSong => {\n            const loadResults = loadSong();\n\n            if (isLeft(loadResults)) {\n                const msg =\n                    \"Error loading previously auto saved song: \" +\n                    loadResults.left.message;\n                enqueueSnackbar(msg, { variant: \"error\" });\n                return new ChordSong();\n            }\n\n            if (loadResults.right === null) {\n                return new ChordSong();\n            }\n\n            enqueueSnackbar(\"Loaded last saved song\", { variant: \"success\" });\n            return loadResults.right;\n        };\n\n        const handleSongChanged = (song: ChordSong) => {\n            saveSong(song);\n        };\n\n        if (loadedSong === null) {\n            setLoadedSong(loadLastSavedSong());\n            return (\n                <Backdrop className={backdropStyles.backdrop} open>\n                    <CircularProgress />\n                </Backdrop>\n            );\n        }\n\n        // https://github.com/microsoft/TypeScript/issues/35858\n        const originalComponentProps = {\n            ...props,\n            initialSong: loadedSong,\n            onSongChanged: handleSongChanged,\n        } as P;\n\n        return <OriginalComponent {...originalComponentProps} />;\n    };\n};\n","import React from \"react\";\nimport { Route, useHistory } from \"react-router-dom\";\nimport { ChordSong } from \"../common/ChordModel/ChordSong\";\nimport Song, { SongMode } from \"./Song\";\n\ninterface SongRouterProps {\n    basePath: string;\n    initialSong: ChordSong;\n    onSongChanged?: (song: ChordSong) => void;\n}\n\nconst SongRouter: React.FC<SongRouterProps> = (\n    props: SongRouterProps\n): JSX.Element => {\n    const history = useHistory();\n\n    const editPath = `${props.basePath}/edit`;\n    const playPath = `${props.basePath}/play`;\n\n    const switchToEdit = () => {\n        history.push(editPath);\n    };\n\n    const switchToPlay = () => {\n        history.push(playPath);\n    };\n\n    return (\n        <>\n            <Route key={editPath} path={editPath}>\n                <Song\n                    initialSong={props.initialSong}\n                    mode={SongMode.Edit}\n                    onSongChanged={props.onSongChanged}\n                    onEdit={switchToEdit}\n                    onPlay={switchToPlay}\n                />\n            </Route>\n            <Route key={playPath} path={playPath}>\n                <Song\n                    initialSong={props.initialSong}\n                    mode={SongMode.Play}\n                    onSongChanged={props.onSongChanged}\n                    onEdit={switchToEdit}\n                    onPlay={switchToPlay}\n                />\n            </Route>\n        </>\n    );\n};\n\nexport default SongRouter;\n","import React from \"react\";\nimport { Typography, Theme } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nconst PaddedTypography = withStyles((theme: Theme) => ({\n    root: {\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        padding: theme.spacing(1),\n        color: grey[600],\n    },\n}))(Typography);\n\nconst Version: React.FC<{}> = (): JSX.Element => {\n    const version: string = process.env.REACT_APP_VERSION ?? \"dev-build\";\n\n    return <PaddedTypography variant=\"subtitle2\">{version}</PaddedTypography>;\n};\n\nexport default Version;\n","import { tokenize } from \"./common/LyricTokenizer\";\nimport { ChordSong } from \"./common/ChordModel/ChordSong\";\nimport { ChordLine } from \"./common/ChordModel/ChordLine\";\nimport { ChordBlock } from \"./common/ChordModel/ChordBlock\";\n\nconst lyrics = [\n    \"We're no strangers to love\",\n    \"You know the rules and so do I\",\n    \"A full commitment's what I'm thinking of\",\n    \"You wouldn't get this from any other guy\",\n    \"I just wanna tell you how I'm feeling\",\n    \"Gotta make you understand\",\n    \"Never gonna give you up\",\n    \"Never gonna let you down\",\n    \"Never gonna run around and desert you\",\n    \"Never gonna make you cry\",\n    \"Never gonna say goodbye\",\n    \"Never gonna tell a lie and hurt you\",\n];\n\nconst chords = [\"A\", \"Bb7\", \"Cm\", \"D/C#\", \"Em7\", \"Fmaj7\", \"G^\"];\n\nconst randomChord = (): string => {\n    return chords[Math.floor(Math.random() * chords.length)];\n};\n\nconst chunk = (arr: string, tokenSize: number): string[] => {\n    const tokens = tokenize(arr);\n    const results: string[] = [];\n\n    for (let i = 0; i < tokens.length; i += tokenSize) {\n        const subArr = tokens.slice(i, i + tokenSize);\n        results.push(subArr.join(\"\"));\n    }\n\n    return results;\n};\n\nexport const NeverGonnaGiveYouUp = (): ChordSong => {\n    const chordLines: ChordLine[] = lyrics.map((lyricLine: string) =>\n        assembleLine(lyricLine)\n    );\n\n    return new ChordSong(chordLines, {\n        title: \"Never Gonna Give You Up\",\n        performedBy: \"Rick Astley\",\n        composedBy: \"Stock Waterman\",\n        asHeardFrom: \"https://www.youtube.com/watch?v=dM9zwZCOmjM\",\n    });\n};\n\nconst assembleLine = (lyrics: string): ChordLine => {\n    const lyricChunks = chunk(lyrics, 4);\n\n    const chordBlocks: ChordBlock[] = lyricChunks.map((lyricChunk: string) => {\n        return new ChordBlock({\n            chord: randomChord(),\n            lyric: lyricChunk,\n        });\n    });\n\n    return new ChordLine(chordBlocks);\n};\n","import {\n    createMuiTheme,\n    Grid,\n    PaletteColorOptions,\n    Theme,\n    ThemeProvider,\n} from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { SnackbarProvider as UnstyledSnackbarProvider } from \"notistack\";\nimport React from \"react\";\nimport {\n    HashRouter,\n    Redirect,\n    Route,\n    Switch,\n    useLocation,\n} from \"react-router-dom\";\nimport WoodBackground from \"./assets/img/symphony.png\";\nimport About from \"./components/about/About\";\nimport SideMenu from \"./components/SideMenu\";\nimport SongRouter from \"./components/SongRouter\";\nimport { TutorialSwitches } from \"./components/Tutorial\";\nimport Version from \"./components/Version\";\nimport { NeverGonnaGiveYouUp } from \"./NeverGonnaGiveYouUp\";\nimport { withAutoSave } from \"./components/WithAutoSave\";\n\nconst createTheme = (): Theme => {\n    const lightBlue: PaletteColorOptions = {\n        main: \"#4fc3f7\",\n        light: \"#8bf6ff\",\n        dark: \"#0093c4\",\n        contrastText: \"#000000\",\n    };\n\n    const purple: PaletteColorOptions = {\n        main: \"#844ffc\",\n        light: \"#bb7eff\",\n        dark: \"#4a1fc8\",\n        contrastText: \"#ffffff\",\n    };\n\n    const green: PaletteColorOptions = {\n        main: \"#00c853\",\n        light: \"#5efc82\",\n        dark: \"#009624\",\n        contrastText: \"#000000\",\n    };\n\n    return createMuiTheme({\n        palette: {\n            primary: lightBlue,\n            secondary: purple,\n            success: green,\n        },\n        typography: {\n            fontFamily: \"Merriweather\",\n            fontWeightRegular: 300,\n        },\n    });\n};\n\nconst theme: Theme = createTheme();\n\nconst SnackbarProvider = withStyles((theme: Theme) => ({\n    variantSuccess: {\n        backgroundColor: theme.palette.success.main,\n    },\n}))(UnstyledSnackbarProvider);\n\nconst AppLayout = withStyles({\n    root: {\n        backgroundImage: `url(${WoodBackground})`,\n        minHeight: \"100vh\",\n    },\n})(Grid);\n\nconst shouldShowMenu = (path: string): boolean => {\n    return ![\"/song/play\", \"/demo/play\"].includes(path);\n};\n\nconst AutoSaveSongRouter = withAutoSave(SongRouter);\n\nconst AppContent: React.FC<{}> = (): JSX.Element => {\n    const location = useLocation();\n\n    const routes = (\n        <Switch>\n            <Redirect from=\"/\" to=\"/song\" exact />\n\n            <Redirect from=\"/song\" to=\"/song/edit\" exact />\n            <Route key=\"/song\" path=\"/song\">\n                <AutoSaveSongRouter basePath=\"/song\" />\n            </Route>\n\n            <Redirect from=\"/demo\" to=\"/demo/edit\" exact />\n            <Route key=\"/demo\" path=\"/demo\">\n                <SongRouter\n                    basePath=\"/demo\"\n                    initialSong={NeverGonnaGiveYouUp()}\n                />\n            </Route>\n\n            {TutorialSwitches()}\n            <Route key=\"/about\" exact path=\"/about\">\n                <About />\n            </Route>\n            <Redirect to=\"/\" />\n        </Switch>\n    );\n\n    return (\n        <>\n            {shouldShowMenu(location.pathname) && <SideMenu />}\n            <AppLayout container>\n                <Grid item container justify=\"center\">\n                    {routes}\n                </Grid>\n            </AppLayout>\n            <Version />\n        </>\n    );\n};\n\nfunction App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <SnackbarProvider>\n                <HashRouter>\n                    <AppContent />;\n                </HashRouter>\n            </SnackbarProvider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import { ChordSong } from \"./ChordModel/ChordSong\";\nimport { Either, right } from \"fp-ts/lib/Either\";\n\nconst lastSavedKey = \"last-auto-saved-song\";\n\nexport const saveSong = (song: ChordSong) => {\n    const localStorage = window.localStorage;\n    const jsonStr = JSON.stringify(song);\n\n    localStorage.setItem(lastSavedKey, jsonStr);\n};\n\nexport const loadSong = (): Either<Error, ChordSong | null> => {\n    const localStorage = window.localStorage;\n\n    const jsonSong = localStorage.getItem(lastSavedKey);\n    if (jsonSong === null) {\n        return right(null);\n    }\n\n    return ChordSong.deserialize(jsonSong);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}