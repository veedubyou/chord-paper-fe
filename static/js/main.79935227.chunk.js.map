{"version":3,"sources":["assets/img/symphony.png","common/ChordModel/Collection.ts","common/LyricTokenizer.ts","common/ChordModel/ChordBlock.ts","common/ChordModel/ChordLinePatcher.ts","common/ChordModel/ChordLine.ts","common/ChordModel/ChordSong.ts","common/Whitespace.ts","components/edit/HighlightChordLyricStyle.ts","components/display/Lyric.tsx","components/edit/ChordDroppable.tsx","components/display/ChordSymbol.tsx","components/edit/DraggableChordSymbol.tsx","components/edit/TextInput.tsx","components/edit/Token.tsx","components/edit/Block.tsx","components/edit/ChordEditLine.tsx","components/edit/Line.tsx","components/edit/NewLine.tsx","components/edit/DragAndDrop.tsx","components/edit/ChordPaperBody.tsx","components/edit/ChordPaperMenu.tsx","components/edit/EditableTypography.tsx","components/edit/Header.tsx","components/edit/ChordPaper.tsx","NeverGonnaGiveYouUp.ts","components/edit/ErrorPage.tsx","components/tutorial/Playground.tsx","components/tutorial/Common.tsx","components/tutorial/Start.tsx","components/Tutorial.tsx","components/tutorial/EditChord.tsx","components/tutorial/RemoveChord.tsx","components/tutorial/AddChord.tsx","components/tutorial/DragAndDropChord.tsx","components/tutorial/EditLyrics.tsx","components/tutorial/ChordPositioning.tsx","components/tutorial/AddLine.tsx","components/tutorial/RemoveLine.tsx","components/tutorial/PasteLyrics.tsx","components/tutorial/MergeLine.tsx","components/SideMenu.tsx","components/about/About.tsx","components/Version.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","stringifyIgnoreID","obj","JSON","stringify","key","value","Collection","elements","this","undefined","id","index","findIndex","elem","Error","idable","indexOfBefore","indexOf","newElem","splice","tokenize","lineOfLyrics","matches","match","ChordBlockValidator","iots","chord","lyric","type","ChordBlock","shortid","generate","splitIndex","tokens","lyricTokens","prevBlockLyricTokens","slice","thisBlockLyricTokens","prevBlock","join","other","validatedFields","jsonStr","result","parseJSON","isLeft","jsonObj","right","validationResult","decode","left","differ","dmp","DiffMatchPatch","diffTimeout","matchThreshold","ChordLineIterator","chordLine","currBlockIndex","currCharIndex","blockBuffer","prependLyrics","map","currentBlock","charAt","length","skipChar","currentChar","nextChar","insertChar","atBlockBoundary","prevBlockIndex","deleteChar","i","normalizeBlocks","replaceChordLineLyrics","newLyrics","diffs","diff_main","lyrics","diff_cleanupSemanticLossless","iterator","diff","diffOperation","diffChar","DiffOperation","DIFF_EQUAL","skip","DIFF_INSERT","insert","DIFF_DELETE","delete","finish","newBlocks","block","push","removeOrphanedBlocksWithNoChords","blocks","endsWith","lastIndex","addSpacesToOrphanedBlocks","ChordLineValidator","ChordLine","newChord","newPrevBlock","split","clone","chordBlocks","reduce","isEqual","otherBlock","contentEquals","chordBlock","fromValidatedFields","SongMetadataValidator","title","composedBy","performedBy","asHeardFrom","ChordSongValidator","metadata","ChordSong","prevLine","chordLines","lastBlockIndex","currLine","lodash","otherLine","blockID","line","find","newTitle","newPerformedBy","newComposedBy","newAsHeardFrom","chordLineValidatedFields","lyricLines","lyricLine","fromLyrics","isWhitespace","s","test","inflateIfEmpty","highlightedSpaceStyle","theme","backgroundColor","palette","primary","main","highlightedWordStyle","color","outlineStyle","borderStyle","borderColor","borderRadius","borderWidth","withCustomLyricSelector","selector","options","customLyricClassSelector","withCustomChordSymbolSelector","customChordSymbolClassSelector","dragOverChordLyricStyle","highlightedSpace","highlightedWord","customOutlineStyles","outline","spaceClassSelector","wordClassSelector","chordSymbolSelector","root","hoverChordLyricStyle","chordTargetSelector","customChordTargetClassSelector","withCustomChordTargetSelector","lyricTypographyProps","variant","display","LyricTypography","withStyles","whiteSpace","wordSpacing","Typography","Lyric","props","customClassName","className","clsx","children","data-testid","ChordDroppable","useDrop","accept","drop","droppedChord","handled","onDropped","sourceBlockID","collect","monitor","isOver","shallow","dropRef","childElem","childClassName","dragOverClassName","hoverableClassName","React","cloneElement","RootRef","rootRef","ChordTypography","cursor","fontFamily","ChordSymbol","formattedChord","DraggableChordSymbol","useDrag","item","chordBlockID","dragRef","TextInput","useState","setValue","inputRef","createRef","useTheme","newValue","onFinish","TextField","autoFocus","inputProps","typography","style","padding","fontSize","opacity","background","grey","width","browserInputProps","onBlur","onChange","event","target","onKeyDown","specialBackspace","metaKey","ctrlKey","selectionAtBeginning","current","selectionStart","selectionEnd","onSpecialBackspace","onPaste","payload","clipboardData","getData","linesOfText","flatMap","onPasteOverflow","preventDefault","pasteContent","beforeSelectionStr","afterSelectionStr","newPasteLines","composeMultilinePaste","fullWidth","InvisibleTypography","userSelect","position","top","transform","ChordTargetBox","onClick","classes","Token","lyricClassName","lyricBlock","Box","invisibleTarget","useFirstTokenStyle","dragOver","makeStyles","red","hoverable","dark","useNormalTokenStyle","Block","editing","setEditing","firstTokenStyle","normalTokenStyle","invisibleTargetForFirstToken","clickHandler","tokenIndex","onBlockSplit","stopPropagation","handleDragged","onChordChange","dropHandler","onChordDragAndDrop","endEdit","lyricBlocks","lyricToken","invisibleTargetOption","Grid","container","direction","onDragged","iconColorStyle","BackspaceIcon","UnstyledBackspaceIcon","Button","contained","UnstyledButton","Tooltip","tooltip","margin","UnstyledTooltip","HighlightableBox","ChordEditLine","chordChangeHandler","setChord","onChangeLine","blockSplitHandler","splitBlock","placement","onRemove","interactive","onEdit","Line","removed","setRemoved","startEdit","finishEdit","replaceLyrics","addHandler","onAddLine","removeHandler","onRemoveLine","setTimeout","pasteOverflowHandler","overflowContent","specialBackspaceHandler","onMergeWithPreviousLine","nonEditableLine","onAdd","bottom","editLyricsInput","yeetDirection","Slide","in","timeout","borderBottom","HighlightableGrid","Divider","UnstyledDivider","AddCircleOutlineIcon","secondary","light","UnstyledAddCircleOutlineIcon","NewLine","justify","minHeight","spacing","RNDContext","createDndContext","HTML5Backend","DragAndDrop","DNDElement","manager","useRef","dragDropManager","DndProvider","useDNDProviderElement","Fragment","Paper","UnstyledPaper","ChordPaperBody","addLineToTop","newLine","song","addBeginning","notifySongChanged","addLine","addAfter","removeLine","remove","changeLine","pasteOverflowFromLine","newChordLines","newLyricLine","mergeWithPreviousLine","mergeLineWithPrevious","onSongChanged","chordDragAndDropHandler","destinationBlockID","findLineAndBlock","sourceLine","destinationLine","destinationBlock","elevation","xs","lines","firstNewLine","SpeedDial","UnstyledSpeedDial","ChordPaperMenu","open","setOpen","enqueueSnackbar","useSnackbar","pickFileHandler","fileList","files","file","fileReader","FileReader","onload","ev","ArrayBuffer","results","deserialize","onLoad","readAsText","loadAction","a","inputElem","document","createElement","addEventListener","click","icon","SpeedDialIcon","onOpen","onClose","ariaLabel","SpeedDialAction","tooltipTitle","blob","Blob","serialize","objectURL","URL","createObjectURL","anchor","download","href","revokeObjectURL","onNewSong","PlaceholderTypography","EditableTypography","onValueChange","editableLine","placeholder","typographyProps","Header","paddingBottom","align","details","newComposer","newPerformer","newHeardFrom","paddingTop","paddingLeft","paddingRight","RootPaper","minWidth","ChordPaper","initialSong","setSong","songChangeHandler","updatedSong","loadedSong","chords","NeverGonnaGiveYouUp","assembleLine","arr","tokenSize","subArr","chunk","lyricChunk","Math","floor","random","ErrorPage","CheckCircleIcon","green","UnstyledCheckCircleIcon","Badge","UnstyledBadge","Playground","setFinish","checkExpected","expectedSong","badgeContent","invisible","LyricsTypography","LineBreak","Preamble","allExercises","route","component","variantMapping","body1","PlayArrowIcon","UnstyledPlayArrowIcon","marginTop","marginBottom","Fab","UnstyledFab","Tutorial","matchEntry","entry","exerciseEntry","exerciseIndex","nextButton","nextExercise","to","withPointerStyle","MenuIcon","UnstyledMenuIcon","CloseIcon","UnstyledCloseIcon","VerticalGridItem","maxWidth","TitleGrid","TitleName","CollapsedMenuSurface","height","FullHeightGrid","SideMenu","expanded","setExpanded","learnSubmenuOpen","setLearnSubMenuOpen","learnClickHandler","linkStyle","textDecoration","collapsedMenu","Drawer","alignContent","expandedMenu","alignItems","List","ListItem","button","ListItemIcon","ListItemText","primaryTypographyProps","exerciseLinks","exerciseRoute","inset","Collapse","tutorialMenu","About","PaddedTypography","Version","version","process","AppLayout","backgroundImage","WoodBackground","App","createMuiTheme","contrastText","fontWeightRegular","routeSwitches","exact","path","ThemeProvider","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79935227.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/symphony.4ca23f9c.png\";","// use the name of the class the ID is describing for T\n// e.g. IDable<\"Person\">\nexport interface IDable<T extends string> {\n    id: string;\n    type: T;\n}\n\nexport const stringifyIgnoreID = (obj: unknown): string => {\n    return JSON.stringify(obj, (key: string, value: string) => {\n        if (key === \"id\") {\n            return undefined;\n        }\n\n        return value;\n    });\n};\n\nexport abstract class Collection<T extends IDable<U>, U extends string> {\n    elements: T[];\n\n    constructor(elements?: T[]) {\n        if (elements !== undefined) {\n            this.elements = elements; //TODO: consider whether this needs to be a shallow copy\n        } else {\n            this.elements = [];\n        }\n    }\n\n    protected indexOf(id: string): number {\n        const index = this.elements.findIndex((elem: T) => elem.id === id);\n\n        if (index < 0) {\n            throw new Error(\"Can't find element inside collection\");\n        }\n\n        return index;\n    }\n\n    abstract clone(): Collection<T, U>;\n\n    // adds a element after the specified id\n    addAfter(idable: IDable<U>, ...newElem: T[]): void {\n        const indexOfBefore = this.indexOf(idable.id);\n        this.elements.splice(indexOfBefore + 1, 0, ...newElem);\n    }\n\n    addBeginning(...newElem: T[]): void {\n        this.elements.splice(0, 0, ...newElem);\n    }\n\n    remove(idable: IDable<U>): T {\n        const index = this.indexOf(idable.id);\n        const removed = this.elements.splice(index, 1);\n        return removed[0];\n    }\n}\n","export const tokenize = (lineOfLyrics: string): string[] => {\n    const matches = lineOfLyrics.match(/((\\w|')+|[^\\w'])/g);\n    if (matches === null) {\n        return [];\n    }\n\n    return matches;\n};\n","import { IDable, stringifyIgnoreID } from \"./Collection\";\nimport shortid from \"shortid\";\nimport { tokenize } from \"../LyricTokenizer\";\nimport * as iots from \"io-ts\";\nimport { Either, right, left, isLeft, parseJSON } from \"fp-ts/lib/Either\";\n\ninterface ChordBlockConstructorParams {\n    chord: string;\n    lyric: string;\n}\n\nexport const ChordBlockValidator = iots.type({\n    chord: iots.string,\n    lyric: iots.string,\n    type: iots.literal(\"ChordBlock\"),\n});\n\nexport type ChordBlockValidatedFields = iots.TypeOf<typeof ChordBlockValidator>;\n\nexport class ChordBlock implements IDable<\"ChordBlock\"> {\n    id: string;\n    chord: string;\n    lyric: string;\n    type: \"ChordBlock\";\n\n    constructor({ chord, lyric }: ChordBlockConstructorParams) {\n        this.id = shortid.generate();\n        this.chord = chord;\n        this.lyric = lyric;\n        this.type = \"ChordBlock\";\n    }\n\n    serialize(): string {\n        return stringifyIgnoreID(this);\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordBlockValidatedFields\n    ): ChordBlock {\n        return new ChordBlock({\n            chord: validatedFields.chord,\n            lyric: validatedFields.lyric,\n        });\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordBlock> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordBlockValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Block object\"));\n        }\n\n        return right(\n            new ChordBlock({\n                chord: validationResult.right.chord,\n                lyric: validationResult.right.lyric,\n            })\n        );\n    }\n\n    get lyricTokens(): string[] {\n        return tokenize(this.lyric);\n    }\n\n    // splits a block, and returns the block before\n    // e.g.\n    // {id:\"A\", chord: \"B7\", lyric:\"my dear we're\"}\n    // splitBlock(4) =>\n    // {id:\"B\", chord: \"B7\", lyric:\"my dear \"}\n    // {id:\"A\", chord: \"\", \"we're\"}\n    split(splitIndex: number): ChordBlock {\n        if (splitIndex === 0) {\n            throw new Error(\"Split index can't be zero\");\n        }\n\n        const tokens = this.lyricTokens;\n        const prevBlockLyricTokens: string[] = tokens.slice(0, splitIndex);\n        const thisBlockLyricTokens: string[] = tokens.slice(splitIndex);\n\n        const prevBlock: ChordBlock = new ChordBlock({\n            chord: this.chord,\n            lyric: prevBlockLyricTokens.join(\"\"),\n        });\n\n        this.chord = \"\";\n        this.lyric = thisBlockLyricTokens.join(\"\");\n\n        return prevBlock;\n    }\n\n    contentEquals(other: ChordBlock): boolean {\n        return this.chord === other.chord && this.lyric === other.lyric;\n    }\n}\n","import { ChordLine } from \"./ChordLine\";\nimport { ChordBlock } from \"./ChordBlock\";\nimport { DiffMatchPatch, DiffOperation } from \"diff-match-patch-typescript\";\n\nconst differ: DiffMatchPatch = (() => {\n    const dmp = new DiffMatchPatch();\n    dmp.diffTimeout = 0;\n    dmp.matchThreshold = 0;\n    return dmp;\n})();\n\nclass ChordLineIterator {\n    private chordLine: ChordLine;\n    private currBlockIndex: number;\n    private currCharIndex: number;\n    private blockBuffer: string[];\n    private prependLyrics: string;\n\n    constructor(chordLine: ChordLine) {\n        this.chordLine = chordLine;\n\n        this.currBlockIndex = 0;\n        this.currCharIndex = 0;\n\n        this.blockBuffer = chordLine.elements.map(() => \"\");\n        this.prependLyrics = \"\";\n    }\n\n    private atBlockBoundary(): boolean {\n        return this.currCharIndex === 0;\n    }\n\n    private currentBlock(): ChordBlock {\n        return this.chordLine.elements[this.currBlockIndex];\n    }\n\n    private currentChar(): string {\n        return this.currentBlock().lyric.charAt(this.currCharIndex);\n    }\n\n    private nextChar(): void {\n        this.currCharIndex += 1;\n\n        if (this.currCharIndex >= this.currentBlock().lyric.length) {\n            this.currBlockIndex += 1;\n            this.currCharIndex = 0;\n        }\n    }\n\n    skip(skipChar: string): void {\n        if (this.currentChar() !== skipChar) {\n            throw new Error(\"Mismatched characters when skipping\");\n        }\n\n        this.blockBuffer[this.currBlockIndex] += skipChar;\n\n        this.nextChar();\n    }\n\n    insert(insertChar: string): void {\n        if (!this.atBlockBoundary()) {\n            this.blockBuffer[this.currBlockIndex] += insertChar;\n        } else {\n            // bias towards inserting  at the end of the previous block if between two blocks\n            // since chords are aligned to the beginning of the block, we don't want to shift the lyrics\n            // inside a block unnecessarily\n            const prevBlockIndex = this.currBlockIndex - 1;\n            if (prevBlockIndex >= 0) {\n                this.blockBuffer[prevBlockIndex] += insertChar;\n            } else {\n                this.prependLyrics += insertChar;\n            }\n        }\n    }\n\n    delete(deleteChar: string): void {\n        if (this.currentChar() !== deleteChar) {\n            throw new Error(\"Mismatched characters when deleting\");\n        }\n\n        this.nextChar();\n    }\n\n    finish(): void {\n        for (let i = 0; i < this.chordLine.elements.length; i++) {\n            this.chordLine.elements[i].lyric = this.blockBuffer[i];\n        }\n\n        if (this.prependLyrics !== \"\") {\n            this.chordLine.elements.splice(\n                0,\n                0,\n                new ChordBlock({ chord: \"\", lyric: this.prependLyrics })\n            );\n        }\n\n        this.chordLine.normalizeBlocks();\n    }\n}\n\nconst removeOrphanedBlocksWithNoChords = (chordLine: ChordLine): void => {\n    const newBlocks: ChordBlock[] = [];\n\n    for (const block of chordLine.elements) {\n        if (block.lyric !== \"\" || block.chord !== \"\") {\n            newBlocks.push(block);\n        }\n    }\n\n    chordLine.elements = newBlocks;\n};\n\nconst addSpacesToOrphanedBlocks = (chordLine: ChordLine): void => {\n    const blocks: ChordBlock[] = chordLine.elements;\n    for (let i = 0; i < blocks.length; i++) {\n        const block = blocks[i];\n        if (block.lyric !== \"\") {\n            continue;\n        }\n\n        const prevBlockHasSpaceToSteal =\n            i > 0 &&\n            blocks[i - 1].lyric.length > 1 &&\n            blocks[i - 1].lyric.endsWith(\" \");\n\n        if (prevBlockHasSpaceToSteal) {\n            // \"steal\" a space from the previous block\n            // e.g. if * represents a space\n            // G        A\n            // We're*no*strangers\n            // replaced with\n            // We're*no*\n            // instead of adding two spaces consecutively, like\n            // G        A\n            // We're*no**\n            // we'll just relegate one of the unused spaces for the orphaned block, like\n            // G       A\n            // We're*no*\n\n            // if there's no space to steal, just add one so that it's backed by a character\n            const prevBlock = blocks[i - 1];\n            const lastIndex = prevBlock.lyric.length - 1;\n            prevBlock.lyric = prevBlock.lyric.slice(0, lastIndex);\n        }\n\n        block.lyric = \" \";\n    }\n};\n\nexport const replaceChordLineLyrics = (\n    chordLine: ChordLine,\n    newLyrics: string\n): void => {\n    const diffs = differ.diff_main(chordLine.lyrics, newLyrics);\n    differ.diff_cleanupSemanticLossless(diffs);\n\n    const iterator = new ChordLineIterator(chordLine);\n\n    for (const diff of diffs) {\n        const diffOperation = diff[0];\n        for (const diffChar of diff[1]) {\n            switch (diffOperation) {\n                case DiffOperation.DIFF_EQUAL: {\n                    iterator.skip(diffChar);\n                    break;\n                }\n                case DiffOperation.DIFF_INSERT: {\n                    iterator.insert(diffChar);\n                    break;\n                }\n                case DiffOperation.DIFF_DELETE: {\n                    iterator.delete(diffChar);\n                    break;\n                }\n            }\n        }\n    }\n\n    iterator.finish();\n\n    removeOrphanedBlocksWithNoChords(chordLine);\n    addSpacesToOrphanedBlocks(chordLine);\n};\n","import { Collection, IDable, stringifyIgnoreID } from \"./Collection\";\nimport shortid from \"shortid\";\nimport * as iots from \"io-ts\";\nimport { Either, right, left, isLeft, parseJSON } from \"fp-ts/lib/Either\";\nimport { replaceChordLineLyrics } from \"./ChordLinePatcher\";\nimport {\n    ChordBlockValidator,\n    ChordBlockValidatedFields,\n    ChordBlock,\n} from \"./ChordBlock\";\n\nexport const ChordLineValidator = iots.type({\n    elements: iots.array(ChordBlockValidator),\n    type: iots.literal(\"ChordLine\"),\n});\n\nexport type ChordLineValidatedFields = iots.TypeOf<typeof ChordLineValidator>;\n\nexport class ChordLine extends Collection<ChordBlock, \"ChordBlock\">\n    implements IDable<\"ChordLine\"> {\n    id: string;\n    type: \"ChordLine\";\n\n    constructor(elements?: ChordBlock[]) {\n        if (elements === undefined) {\n            elements = [new ChordBlock({ chord: \"\", lyric: \"\" })];\n        }\n\n        super(elements);\n\n        this.id = shortid.generate();\n        this.type = \"ChordLine\";\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordLineValidatedFields\n    ): ChordLine {\n        const chordBlockElems: ChordBlock[] = validatedFields.elements.map(\n            (value: ChordBlockValidatedFields) => {\n                return ChordBlock.fromValidatedFields(value);\n            }\n        );\n\n        return new ChordLine(chordBlockElems);\n    }\n\n    serialize(): string {\n        return stringifyIgnoreID(this);\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordLine> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordLineValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Line object\"));\n        }\n\n        return right(this.fromValidatedFields(validationResult.right));\n    }\n\n    static fromLyrics(lyrics: string): ChordLine {\n        const block = new ChordBlock({\n            chord: \"\",\n            lyric: lyrics,\n        });\n\n        return new ChordLine([block]);\n    }\n\n    get chordBlocks(): ChordBlock[] {\n        return this.elements;\n    }\n\n    get lyrics(): string {\n        const lyricTokens = this.chordBlocks.map(\n            (chordBlock: ChordBlock) => chordBlock.lyric\n        );\n\n        return lyricTokens.join(\"\");\n    }\n\n    replaceLyrics(newLyrics: string): void {\n        if (newLyrics === this.lyrics) {\n            return;\n        }\n\n        replaceChordLineLyrics(this, newLyrics);\n    }\n\n    setChord(idable: IDable<\"ChordBlock\">, newChord: string): void {\n        const index = this.indexOf(idable.id);\n        this.elements[index].chord = newChord;\n        this.normalizeBlocks();\n    }\n\n    splitBlock(idable: IDable<\"ChordBlock\">, splitIndex: number): void {\n        const index = this.indexOf(idable.id);\n        const block = this.elements[index];\n        const newPrevBlock = block.split(splitIndex);\n        this.elements.splice(index, 0, newPrevBlock);\n    }\n\n    // passes through every block to ensure that blocks without chords exist (except for the first)\n    normalizeBlocks(): void {\n        const newBlocks: ChordBlock[] = [];\n\n        for (let i = 0; i < this.elements.length; i++) {\n            const block = this.elements[i];\n\n            if (block.chord === \"\" && newBlocks.length > 0) {\n                const lastIndex = newBlocks.length - 1;\n                newBlocks[lastIndex].lyric += block.lyric;\n            } else {\n                newBlocks.push(block);\n            }\n        }\n\n        // avoid rejiggering the data if it's a no-op\n        if (newBlocks.length !== this.elements.length) {\n            this.elements = newBlocks;\n        }\n    }\n\n    clone(): ChordLine {\n        const clone = new ChordLine(this.elements);\n        clone.id = this.id;\n        return clone;\n    }\n\n    contentEquals(other: ChordLine): boolean {\n        if (this.chordBlocks.length !== other.chordBlocks.length) {\n            return false;\n        }\n\n        const reducer = (\n            isEqual: boolean,\n            value: ChordBlock,\n            index: number\n        ): boolean => {\n            if (!isEqual) {\n                return false;\n            }\n\n            const otherBlock = other.chordBlocks[index];\n            if (!value.contentEquals(otherBlock)) {\n                return false;\n            }\n\n            return true;\n        };\n\n        return this.chordBlocks.reduce(reducer, true);\n    }\n}\n","import * as iots from \"io-ts\";\nimport { Collection, stringifyIgnoreID, IDable } from \"./Collection\";\nimport { Either, right, left, isLeft, parseJSON } from \"fp-ts/lib/Either\";\nimport {\n    ChordLineValidator,\n    ChordLineValidatedFields,\n    ChordLine,\n} from \"./ChordLine\";\nimport lodash from \"lodash\";\nimport { ChordBlock } from \"./ChordBlock\";\n\nconst SongMetadataValidator = iots.type({\n    title: iots.string,\n    composedBy: iots.string,\n    performedBy: iots.string,\n    asHeardFrom: iots.string,\n});\n\ntype SongMetadata = iots.TypeOf<typeof SongMetadataValidator>;\n\nconst ChordSongValidator = iots.type({\n    elements: iots.array(ChordLineValidator),\n    metadata: SongMetadataValidator,\n});\ntype ChordSongValidatedFields = iots.TypeOf<typeof ChordSongValidator>;\n\nexport class ChordSong extends Collection<ChordLine, \"ChordLine\"> {\n    metadata: SongMetadata;\n\n    constructor(elements?: ChordLine[], metadata?: SongMetadata) {\n        if (elements === undefined) {\n            elements = [new ChordLine()];\n        }\n\n        super(elements);\n\n        if (metadata !== undefined) {\n            this.metadata = metadata;\n        } else {\n            this.metadata = {\n                title: \"\",\n                composedBy: \"\",\n                performedBy: \"\",\n                asHeardFrom: \"\",\n            };\n        }\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordSongValidatedFields\n    ): ChordSong {\n        const chordLines: ChordLine[] = validatedFields.elements.map(\n            (chordLineValidatedFields: ChordLineValidatedFields) => {\n                return ChordLine.fromValidatedFields(chordLineValidatedFields);\n            }\n        );\n        return new ChordSong(chordLines, validatedFields.metadata);\n    }\n\n    serialize(): string {\n        return stringifyIgnoreID(this);\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordSong> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordSongValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Song object\"));\n        }\n\n        return right(this.fromValidatedFields(validationResult.right));\n    }\n\n    static fromLyricsLines(lyricLines: string[]): ChordSong {\n        const chordLines: ChordLine[] = lyricLines.map((lyricLine: string) =>\n            ChordLine.fromLyrics(lyricLine)\n        );\n        return new ChordSong(chordLines);\n    }\n\n    get chordLines(): ChordLine[] {\n        return this.elements;\n    }\n\n    get title(): string {\n        return this.metadata.title;\n    }\n\n    set title(newTitle: string) {\n        this.metadata.title = newTitle;\n    }\n\n    get performedBy(): string {\n        return this.metadata.performedBy;\n    }\n\n    set performedBy(newPerformedBy: string) {\n        this.metadata.performedBy = newPerformedBy;\n    }\n\n    get composedBy(): string {\n        return this.metadata.composedBy;\n    }\n\n    set composedBy(newComposedBy: string) {\n        this.metadata.composedBy = newComposedBy;\n    }\n\n    get asHeardFrom(): string {\n        return this.metadata.asHeardFrom;\n    }\n\n    set asHeardFrom(newAsHeardFrom: string) {\n        this.metadata.asHeardFrom = newAsHeardFrom;\n    }\n\n    clone(): ChordSong {\n        return new ChordSong(this.elements, this.metadata);\n    }\n\n    mergeLineWithPrevious(idable: IDable<\"ChordLine\">): boolean {\n        const index = this.indexOf(idable.id);\n        // no previous line to merge with, just bail\n        if (index === 0) {\n            return false;\n        }\n\n        // the user experience usually would like a space between lines when they're merged\n        // e.g.\n        // Never Gonna\n        // Give You Up\n        // =>\n        // Never GonnaGive You Up is awkward\n        const prevLine = this.chordLines[index - 1];\n        const lastBlockIndex = prevLine.chordBlocks.length - 1;\n        prevLine.chordBlocks[lastBlockIndex].lyric += \" \";\n\n        const currLine = this.chordLines[index];\n        prevLine.chordBlocks.push(...currLine.chordBlocks);\n        prevLine.normalizeBlocks();\n\n        this.chordLines.splice(index, 1);\n\n        return true;\n    }\n\n    contentEquals(other: ChordSong): boolean {\n        if (this.chordLines.length !== other.chordLines.length) {\n            return false;\n        }\n\n        if (!lodash.isEqual(this.metadata, other.metadata)) {\n            return false;\n        }\n\n        const reducer = (\n            isEqual: boolean,\n            value: ChordLine,\n            index: number\n        ): boolean => {\n            if (!isEqual) {\n                return false;\n            }\n\n            const otherLine = other.chordLines[index];\n            if (!value.contentEquals(otherLine)) {\n                return false;\n            }\n\n            return true;\n        };\n\n        return this.chordLines.reduce(reducer, true);\n    }\n\n    findLineAndBlock(blockID: IDable<\"ChordBlock\">): [ChordLine, ChordBlock] {\n        for (const line of this.chordLines) {\n            const block: ChordBlock | undefined = line.chordBlocks.find(\n                (block: ChordBlock) => block.id === blockID.id\n            );\n            if (block !== undefined) {\n                return [line, block];\n            }\n        }\n\n        throw new Error(\"BlockID can't be found in the entire song\");\n    }\n}\n","export const isWhitespace = (s: string): boolean => {\n    return /^\\s+$/.test(s);\n};\n\nexport const inflatingWhitespace = (): string => {\n    return \"\\u00A0\";\n};\n\nexport const inflateIfEmpty = (value: string) => {\n    if (isWhitespace(value)) {\n        return inflatingWhitespace();\n    }\n\n    return value;\n};\n","import { Theme } from \"@material-ui/core\";\nimport { CSSProperties } from \"@material-ui/styles\";\n\nexport const spaceClassName = \"LyricTokenSpace\";\nexport const wordClassName = \"LyricTokenWord\";\nexport const firstTokenClassName = \"FirstLyricToken\";\n\nexport const chordTargetClassName = \"ChordTarget\";\nexport const chordSymbolClassName = \"ChordSymbol\";\n\nconst highlightedSpaceStyle = (theme: Theme): CSSProperties => ({\n    backgroundColor: theme.palette.primary.main,\n});\n\nconst highlightedWordStyle = (theme: Theme): CSSProperties => ({\n    color: theme.palette.primary.main,\n});\n\nconst outlineStyle = (theme: Theme): CSSProperties => ({\n    borderStyle: \"solid\",\n    borderColor: theme.palette.primary.main,\n    borderRadius: \"0.3em\",\n    borderWidth: \"0.075em\",\n});\n\nexport interface HighlightChordLyricStyleOptions {\n    outline?: (theme: Theme) => CSSProperties;\n    customLyricClassSelector?: string;\n    customChordTargetClassSelector?: string;\n    customChordSymbolClassSelector?: string;\n}\n\nconst withCustomLyricSelector = (\n    selector: string,\n    options?: HighlightChordLyricStyleOptions\n): string => {\n    if (options?.customLyricClassSelector === undefined) {\n        return selector;\n    }\n\n    return `${selector}.${options.customLyricClassSelector}`;\n};\n\nconst withCustomChordTargetSelector = (\n    selector: string,\n    options?: HighlightChordLyricStyleOptions\n): string => {\n    if (options?.customChordTargetClassSelector === undefined) {\n        return selector;\n    }\n\n    return `${selector}.${options.customChordTargetClassSelector}`;\n};\n\nconst withCustomChordSymbolSelector = (\n    selector: string,\n    options?: HighlightChordLyricStyleOptions\n): string => {\n    if (options?.customChordSymbolClassSelector === undefined) {\n        return selector;\n    }\n\n    return `${selector}.${options.customChordSymbolClassSelector}`;\n};\n\nexport const dragOverChordLyricStyle = (\n    options?: HighlightChordLyricStyleOptions\n) => {\n    return (theme: Theme) => {\n        const highlightedSpace = highlightedSpaceStyle(theme);\n        const highlightedWord = highlightedWordStyle(theme);\n\n        const customOutlineStyles: CSSProperties | undefined =\n            options?.outline !== undefined ? options.outline(theme) : undefined;\n\n        const outline = {\n            ...outlineStyle(theme),\n            ...customOutlineStyles,\n        };\n\n        const spaceClassSelector = withCustomLyricSelector(\n            `.${spaceClassName}`,\n            options\n        );\n        const wordClassSelector = withCustomLyricSelector(\n            `.${wordClassName}`,\n            options\n        );\n\n        const chordSymbolSelector = withCustomChordSymbolSelector(\n            `.${chordSymbolClassName}`,\n            options\n        );\n\n        return {\n            root: {\n                [`& ${spaceClassSelector}`]: highlightedSpace,\n                [`& ${wordClassSelector}`]: highlightedWord,\n                [`& ${chordSymbolSelector}`]: outline,\n            },\n        };\n    };\n};\n\nexport const hoverChordLyricStyle = (\n    options?: HighlightChordLyricStyleOptions\n) => {\n    return (theme: Theme) => {\n        const highlightedSpace = highlightedSpaceStyle(theme);\n        const highlightedWord = highlightedWordStyle(theme);\n\n        const customOutlineStyles: CSSProperties | undefined =\n            options?.outline !== undefined ? options.outline(theme) : undefined;\n\n        const outline = {\n            ...outlineStyle(theme),\n            ...customOutlineStyles,\n        };\n\n        const spaceClassSelector = withCustomLyricSelector(\n            `.${spaceClassName}`,\n            options\n        );\n        const wordClassSelector = withCustomLyricSelector(\n            `.${wordClassName}`,\n            options\n        );\n        const chordTargetSelector = withCustomChordTargetSelector(\n            `.${chordTargetClassName}`,\n            options\n        );\n        const chordSymbolSelector = withCustomChordSymbolSelector(\n            `.${chordSymbolClassName}`,\n            options\n        );\n\n        return {\n            root: {\n                [`& ${chordTargetSelector}:hover ~ ${spaceClassSelector}`]: highlightedSpace,\n                [`& ${chordTargetSelector}:hover ~ * ${spaceClassSelector}`]: highlightedSpace,\n\n                [`& ${chordTargetSelector}:hover ~ ${wordClassSelector}`]: highlightedWord,\n                [`& ${chordTargetSelector}:hover ~ * ${wordClassSelector}`]: highlightedWord,\n\n                [`& ${chordTargetSelector}${chordSymbolSelector}:hover`]: outline,\n                [`& ${chordTargetSelector}:hover ${chordSymbolSelector}`]: outline,\n            },\n        };\n    };\n};\n","import { Typography, withStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { isWhitespace } from \"../../common/Whitespace\";\nimport {\n    spaceClassName,\n    wordClassName,\n} from \"../edit/HighlightChordLyricStyle\";\n\nexport const lyricTypographyVariant: \"h6\" = \"h6\";\n\nexport const lyricTypographyProps = {\n    variant: lyricTypographyVariant,\n    display: \"inline\" as \"inline\",\n};\n\nexport const LyricTypography = withStyles({\n    root: {\n        whiteSpace: \"pre\",\n        wordSpacing: \".15em\",\n    },\n})(Typography);\n\ninterface LyricProps extends DataTestID {\n    children: string;\n    className?: string;\n}\n\nconst Lyric: React.FC<LyricProps> = (props: LyricProps): JSX.Element => {\n    const customClassName = props.className ?? \"\";\n\n    const className = clsx({\n        [spaceClassName]: isWhitespace(props.children),\n        [wordClassName]: !isWhitespace(props.children),\n        [customClassName]: props.className !== undefined,\n    });\n\n    return (\n        <LyricTypography\n            {...lyricTypographyProps}\n            className={className}\n            data-testid={props[\"data-testid\"]}\n        >\n            {props.children}\n        </LyricTypography>\n    );\n};\n\nexport default Lyric;\n","import { RootRef } from \"@material-ui/core\";\nimport React from \"react\";\nimport { DropTargetMonitor, useDrop } from \"react-dnd\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\n\nexport const DNDChordType: \"chord\" = \"chord\";\n\nexport interface DNDChord {\n    type: typeof DNDChordType;\n    sourceBlockID: IDable<\"ChordBlock\">;\n    chord: string;\n    handled: boolean;\n}\n\nexport const NewDNDChord = (\n    sourceBlockID: IDable<\"ChordBlock\">,\n    chord: string\n): DNDChord => {\n    return {\n        type: DNDChordType,\n        sourceBlockID: sourceBlockID,\n        chord: chord,\n        handled: false,\n    };\n};\n\ninterface ClassNameable {\n    className?: string;\n}\n\ninterface ChordDroppableProps {\n    children: React.ReactElement<ClassNameable>;\n    onDropped: (newChord: string, sourceBlockID: IDable<\"ChordBlock\">) => void;\n    hoverableClassName?: string;\n    dragOverClassName?: string;\n}\n\nconst ChordDroppable: React.FC<ChordDroppableProps> = (\n    props: ChordDroppableProps\n) => {\n    const [{ isOver }, dropRef] = useDrop<DNDChord, DNDChord, any>({\n        accept: DNDChordType,\n        drop: (droppedChord: DNDChord) => {\n            if (!droppedChord.handled) {\n                droppedChord.handled = true;\n                props.onDropped(droppedChord.chord, droppedChord.sourceBlockID);\n            }\n            return droppedChord;\n        },\n        collect: (monitor: DropTargetMonitor) => ({\n            isOver: monitor.isOver({ shallow: true }),\n        }),\n    });\n\n    let childElem: React.ReactElement<ClassNameable> = props.children;\n    const childClassName: string | undefined = isOver\n        ? props.dragOverClassName\n        : props.hoverableClassName;\n\n    if (childClassName !== undefined) {\n        childElem = React.cloneElement(childElem, {\n            className: childClassName,\n        });\n    }\n\n    return <RootRef rootRef={dropRef}>{childElem}</RootRef>;\n};\n\nexport default ChordDroppable;\n","import { Theme, Typography } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { inflateIfEmpty } from \"../../common/Whitespace\";\nimport { lyricTypographyVariant } from \"./Lyric\";\n\nconst ChordTypography = withStyles((theme: Theme) => ({\n    root: {\n        whiteSpace: \"pre\",\n        cursor: \"pointer\",\n        fontFamily: \"PoriChord\",\n    },\n}))(Typography);\n\nexport interface ChordSymbolProps {\n    children: string;\n    className?: string;\n}\n\nconst ChordSymbol: React.FC<ChordSymbolProps> = (\n    props: ChordSymbolProps\n): JSX.Element => {\n    const formattedChord = (): string => {\n        let chord = props.children;\n        if (chord.endsWith(\" \")) {\n            return chord;\n        }\n\n        chord = chord + \" \";\n\n        return inflateIfEmpty(chord);\n    };\n\n    return (\n        <ChordTypography\n            variant={lyricTypographyVariant} // keep chords and lyrics the same size\n            display=\"inline\"\n            data-testid=\"ChordSymbol\"\n            className={props.className}\n        >\n            {formattedChord()}\n        </ChordTypography>\n    );\n};\n\nexport default ChordSymbol;\n","import { RootRef } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport ChordSymbol, { ChordSymbolProps } from \"../display/ChordSymbol\";\nimport { NewDNDChord } from \"./ChordDroppable\";\n\ninterface DraggableChordSymbolProps extends ChordSymbolProps {\n    chordBlockID: IDable<\"ChordBlock\">;\n    onDragged?: () => void;\n}\n\nconst DraggableChordSymbol: React.FC<DraggableChordSymbolProps> = (\n    props: DraggableChordSymbolProps\n): JSX.Element => {\n    const [, dragRef] = useDrag({\n        item: NewDNDChord(props.chordBlockID, props.children),\n    });\n\n    return (\n        <RootRef rootRef={dragRef}>\n            <ChordSymbol className={props.className}>\n                {props.children}\n            </ChordSymbol>\n        </RootRef>\n    );\n};\n\nexport default DraggableChordSymbol;\n","import {\n    InputBaseComponentProps,\n    TextField,\n    Theme,\n    TypographyVariant,\n    useTheme,\n} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport { CSSProperties } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\n\ninterface TextInputProps {\n    children: string;\n    onFinish?: (newValue: string) => void;\n    onSpecialBackspace?: () => void;\n    onPasteOverflow?: (overflowContent: string[]) => void;\n    width?: string;\n    variant?: TypographyVariant;\n}\n\nconst TextInput: React.FC<TextInputProps> = (\n    props: TextInputProps\n): JSX.Element => {\n    const [value, setValue] = useState<string>(props.children);\n    const inputRef: React.RefObject<HTMLInputElement> = React.createRef();\n    const theme: Theme = useTheme();\n\n    const updateValue = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => {\n        setValue(event.target.value);\n    };\n\n    const keyDownHandler = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"Enter\") {\n            finish(value);\n            return;\n        }\n\n        const specialBackspace: boolean =\n            event.key === \"Backspace\" && (event.metaKey || event.ctrlKey);\n        const selectionAtBeginning: boolean =\n            inputRef.current?.selectionStart === 0 &&\n            inputRef.current?.selectionEnd === 0;\n\n        if (\n            specialBackspace &&\n            selectionAtBeginning &&\n            props.onSpecialBackspace\n        ) {\n            props.onSpecialBackspace();\n        }\n    };\n\n    const finish = (newValue: string) => {\n        if (props.onFinish) {\n            props.onFinish(newValue);\n        }\n    };\n\n    const blurHandler = () => {\n        finish(value);\n    };\n\n    const composeMultilinePaste = (\n        pasteContent: string[]\n    ): [string, string[]] => {\n        let beforeSelectionStr: string;\n        let afterSelectionStr: string;\n        if (\n            inputRef.current === null ||\n            inputRef.current.selectionStart === null ||\n            inputRef.current.selectionEnd === null\n        ) {\n            beforeSelectionStr = value;\n            afterSelectionStr = \"\";\n        } else {\n            beforeSelectionStr = value.slice(\n                0,\n                inputRef.current.selectionStart\n            );\n            afterSelectionStr = value.slice(inputRef.current.selectionEnd);\n        }\n\n        const newValue = beforeSelectionStr + pasteContent[0];\n\n        const newPasteLines = pasteContent.slice(1);\n        const lastIndex = newPasteLines.length - 1;\n        newPasteLines[lastIndex] += afterSelectionStr;\n\n        return [newValue, newPasteLines];\n    };\n\n    const pasteHandler = (event: React.ClipboardEvent<HTMLDivElement>) => {\n        const payload = event.clipboardData.getData(\"text/plain\");\n\n        if (payload === \"\") {\n            return;\n        }\n\n        // handling both Windows + Mac\n        let linesOfText: string[] = payload.split(\"\\r\\n\");\n        linesOfText = linesOfText.flatMap((line: string) => line.split(\"\\n\"));\n\n        if (linesOfText.length > 1 && props.onPasteOverflow !== undefined) {\n            event.preventDefault();\n\n            const [newValue, newPasteLines] = composeMultilinePaste(\n                linesOfText\n            );\n\n            setValue(newValue);\n            finish(newValue);\n            props.onPasteOverflow(newPasteLines);\n        }\n    };\n\n    const browserInputProps = () => {\n        let variant: CSSProperties | undefined = undefined;\n        if (props.variant !== undefined) {\n            variant = theme?.typography?.[props.variant];\n        }\n\n        const padding: string | number | undefined =\n            variant?.padding !== undefined ? variant.padding : 0;\n        const fontSize: string | number | undefined = variant?.fontSize;\n\n        const inputProps: InputBaseComponentProps = {\n            style: {\n                padding: padding,\n                fontSize: fontSize,\n                opacity: 1,\n                background: grey[100],\n            },\n        };\n\n        if (props.width !== undefined && inputProps.style) {\n            inputProps.style.width = props.width;\n        }\n\n        return inputProps;\n    };\n\n    return (\n        <TextField\n            autoFocus\n            variant=\"filled\"\n            inputProps={{\n                \"data-testid\": \"InnerInput\",\n                ...browserInputProps(),\n            }}\n            inputRef={inputRef}\n            value={value}\n            onBlur={blurHandler}\n            onChange={updateValue}\n            onKeyDown={keyDownHandler}\n            onPaste={pasteHandler}\n            fullWidth\n            data-testid=\"EditableLine\"\n        />\n    );\n};\n\nexport default TextInput;\n","import { Box, StyledComponentProps, withStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport Lyric, { LyricTypography, lyricTypographyProps } from \"../display/Lyric\";\nimport {\n    chordSymbolClassName,\n    chordTargetClassName,\n    firstTokenClassName,\n} from \"./HighlightChordLyricStyle\";\n\nconst InvisibleTypography = withStyles({\n    root: {\n        color: \"transparent\",\n        cursor: \"pointer\",\n        userSelect: \"none\",\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        transform: \"translate(0%, -115%)\",\n    },\n})(LyricTypography);\n\ninterface ChordTargetBoxProps extends StyledComponentProps {\n    children: string;\n    className?: string;\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => void;\n}\n\nconst ChordTargetBox: React.FC<ChordTargetBoxProps> = (\n    props: ChordTargetBoxProps\n): JSX.Element => {\n    return (\n        <InvisibleTypography\n            {...lyricTypographyProps}\n            onClick={props.onClick}\n            classes={props.classes}\n            className={props.className}\n            data-testid=\"ChordEditButton\"\n        >\n            {props.children}\n        </InvisibleTypography>\n    );\n};\n\ninterface TokenProps {\n    children: string;\n    index: number;\n    className?: string;\n    invisibleTarget?: { onClick: ChordTargetBoxProps[\"onClick\"] };\n}\n\nconst Token: React.FC<TokenProps> = (props: TokenProps): JSX.Element => {\n    const invisibleTarget = (): JSX.Element | null => {\n        if (props.invisibleTarget === undefined) {\n            return null;\n        }\n\n        return (\n            <ChordTargetBox\n                className={clsx(chordTargetClassName, chordSymbolClassName)}\n                onClick={props.invisibleTarget.onClick}\n            >\n                {props.children}\n            </ChordTargetBox>\n        );\n    };\n\n    const lyricClassName: string | undefined =\n        props.index === 0 ? firstTokenClassName : undefined;\n\n    const lyricBlock = (\n        <Lyric className={lyricClassName} data-testid={`Token-${props.index}`}>\n            {props.children}\n        </Lyric>\n    );\n\n    return (\n        <Box\n            className={props.className}\n            key={props.index}\n            position=\"relative\"\n            display=\"inline\"\n            data-testid={`TokenBox-${props.index}`}\n        >\n            {invisibleTarget()}\n            {lyricBlock}\n        </Box>\n    );\n};\n\nexport default Token;\n","import { Box, Grid, makeStyles, Theme } from \"@material-ui/core\";\nimport red from \"@material-ui/core/colors/red\";\nimport clsx from \"clsx\";\nimport React, { useState } from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { inflatingWhitespace } from \"../../common/Whitespace\";\nimport ChordDroppable from \"./ChordDroppable\";\nimport DraggableChordSymbol from \"./DraggableChordSymbol\";\nimport {\n    chordTargetClassName,\n    dragOverChordLyricStyle,\n    firstTokenClassName,\n    hoverChordLyricStyle,\n} from \"./HighlightChordLyricStyle\";\nimport { lyricTypographyVariant } from \"../display/Lyric\";\nimport TextInput from \"./TextInput\";\nimport Token from \"./Token\";\n\nconst chordSymbolClassName = \"ChordSymbol\";\n\nconst blockChordSymbolClassName = \"BlockChordSymbol\";\nconst blockChordTargetClassName = \"BlockChordTarget\";\n\nconst useFirstTokenStyle = {\n    dragOver: makeStyles(\n        dragOverChordLyricStyle({\n            outline: (theme: Theme) => ({\n                borderColor: red[300],\n                color: red[300],\n            }),\n            customLyricClassSelector: firstTokenClassName,\n            customChordSymbolClassSelector: blockChordSymbolClassName,\n            customChordTargetClassSelector: blockChordTargetClassName,\n        })\n    ),\n    hoverable: makeStyles(\n        hoverChordLyricStyle({\n            outline: (theme: Theme) => ({\n                color: theme.palette.primary.dark,\n            }),\n            customLyricClassSelector: firstTokenClassName,\n            customChordSymbolClassSelector: blockChordSymbolClassName,\n            customChordTargetClassSelector: blockChordTargetClassName,\n        })\n    ),\n};\n\nconst useNormalTokenStyle = {\n    dragOver: makeStyles(dragOverChordLyricStyle()),\n    hoverable: makeStyles(hoverChordLyricStyle()),\n};\n\nexport interface BlockProps extends DataTestID {\n    chordBlock: ChordBlock;\n    onChordDragAndDrop?: (\n        destinationBlockID: IDable<\"ChordBlock\">,\n        splitIndex: number,\n        newChord: string,\n        sourceBlockID: IDable<\"ChordBlock\">\n    ) => void;\n    onChordChange?: (id: IDable<\"ChordBlock\">, newChord: string) => void;\n    onBlockSplit?: (id: IDable<\"ChordBlock\">, splitIndex: number) => void;\n}\n\nconst Block: React.FC<BlockProps> = (props: BlockProps): JSX.Element => {\n    const [editing, setEditing] = useState(false);\n\n    let lyricTokens: string[] = props.chordBlock.lyricTokens;\n\n    if (lyricTokens.length === 0) {\n        lyricTokens = [inflatingWhitespace()];\n    }\n\n    const firstTokenStyle = {\n        hoverable: useFirstTokenStyle.hoverable(),\n        dragOver: useFirstTokenStyle.dragOver(),\n    };\n\n    const normalTokenStyle = {\n        hoverable: useNormalTokenStyle.hoverable(),\n        dragOver: useNormalTokenStyle.dragOver(),\n    };\n\n    const invisibleTargetForFirstToken: boolean =\n        props.chordBlock.chord === \"\" && !editing;\n\n    const clickHandler: (\n        tokenIndex: number\n    ) => (event: React.MouseEvent<HTMLSpanElement>) => void = (\n        tokenIndex: number\n    ) => {\n        return (event: React.MouseEvent<HTMLSpanElement>) => {\n            // block splitting happens after the first token\n            // as first token is already aligned with the current chord\n            if (tokenIndex !== 0 && props.onBlockSplit) {\n                props.onBlockSplit(props.chordBlock, tokenIndex);\n            }\n\n            setEditing(true);\n            event.stopPropagation();\n        };\n    };\n\n    const handleDragged = () => {\n        if (props.onChordChange) {\n            props.onChordChange(props.chordBlock, \"\");\n        }\n    };\n\n    const dropHandler = (tokenIndex: number) => {\n        return (newChord: string, sourceBlockID: IDable<\"ChordBlock\">) => {\n            if (props.onChordDragAndDrop) {\n                props.onChordDragAndDrop(\n                    props.chordBlock,\n                    tokenIndex,\n                    newChord,\n                    sourceBlockID\n                );\n            }\n        };\n    };\n\n    const endEdit = (newChord: string) => {\n        if (props.onChordChange) {\n            props.onChordChange(props.chordBlock, newChord);\n        }\n\n        setEditing(false);\n    };\n\n    const lyricBlock = (lyric: string, index: number): React.ReactElement => {\n        // every above lyric target above after the first should get its own highlightable outline chord target box\n        // the first one will depend if it has a chord above it.\n        // if it does not, then treat it the same as all other tokens\n        // if it does, then don't let it be highlightable, defer it to the chord row for highlighting\n        const hasInvisibleTarget = index > 0 || invisibleTargetForFirstToken;\n\n        const invisibleTargetOption = hasInvisibleTarget\n            ? {\n                  onClick: clickHandler(index),\n              }\n            : undefined;\n\n        return (\n            <ChordDroppable\n                key={index}\n                onDropped={dropHandler(index)}\n                hoverableClassName={normalTokenStyle.hoverable.root}\n                dragOverClassName={normalTokenStyle.dragOver.root}\n            >\n                <Token index={index} invisibleTarget={invisibleTargetOption}>\n                    {lyric}\n                </Token>\n            </ChordDroppable>\n        );\n    };\n\n    const lyricBlocks = lyricTokens.map((lyricToken: string, index: number) =>\n        lyricBlock(lyricToken, index)\n    );\n\n    const chordRow = (): JSX.Element => {\n        if (editing) {\n            return (\n                <Box data-testid=\"ChordEdit\">\n                    <TextInput\n                        width=\"5em\"\n                        variant={lyricTypographyVariant}\n                        onFinish={endEdit}\n                    >\n                        {props.chordBlock.chord}\n                    </TextInput>\n                </Box>\n            );\n        }\n\n        return (\n            <DraggableChordSymbol\n                chordBlockID={props.chordBlock}\n                onDragged={handleDragged}\n                className={clsx(\n                    chordSymbolClassName,\n                    blockChordSymbolClassName\n                )}\n            >\n                {props.chordBlock.chord}\n            </DraggableChordSymbol>\n        );\n    };\n\n    return (\n        <Box display=\"inline-block\">\n            <ChordDroppable\n                onDropped={dropHandler(0)}\n                hoverableClassName={firstTokenStyle.hoverable.root}\n                dragOverClassName={firstTokenStyle.dragOver.root}\n            >\n                <Grid\n                    container\n                    direction=\"column\"\n                    data-testid={props[\"data-testid\"]}\n                >\n                    <Grid\n                        className={clsx(\n                            chordTargetClassName,\n                            blockChordTargetClassName\n                        )}\n                        onClick={clickHandler(0)}\n                        item\n                    >\n                        {chordRow()}\n                    </Grid>\n                    <Grid item data-testid=\"Lyric\">\n                        {lyricBlocks}\n                    </Grid>\n                </Grid>\n            </ChordDroppable>\n        </Box>\n    );\n};\n\nexport default Block;\n","import {\n    Box,\n    Button as UnstyledButton,\n    Theme,\n    Tooltip as UnstyledTooltip,\n    withStyles,\n} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport red from \"@material-ui/core/colors/red\";\nimport UnstyledBackspaceIcon from \"@material-ui/icons/Backspace\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport Block, { BlockProps } from \"./Block\";\n\nconst iconColorStyle = {\n    root: {\n        color: red[300],\n    },\n};\n\nconst BackspaceIcon = withStyles(iconColorStyle)(UnstyledBackspaceIcon);\n\nconst Button = withStyles((theme: Theme) => ({\n    contained: {\n        backgroundColor: \"transparent\",\n        \"&:hover\": {\n            backgroundColor: theme.palette.primary.dark,\n        },\n    },\n}))(UnstyledButton);\n\nconst Tooltip = withStyles({\n    tooltip: {\n        padding: 0,\n        background: \"transparent\",\n        margin: 0,\n    },\n})(UnstyledTooltip);\n\nconst HighlightableBox = withStyles((theme: Theme) => ({\n    root: {\n        \"&:hover\": {\n            backgroundColor: grey[100],\n        },\n    },\n}))(Box);\n\ninterface ChordEditLineProps {\n    chordLine: ChordLine;\n    onEdit?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    onAdd?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    onRemove?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    onChangeLine?: (id: IDable<\"ChordLine\">) => void;\n    onChordDragAndDrop?: BlockProps[\"onChordDragAndDrop\"];\n}\n\nconst ChordEditLine: React.FC<ChordEditLineProps> = (\n    props: ChordEditLineProps\n): JSX.Element => {\n    let chordBlocks: ChordBlock[] = props.chordLine.chordBlocks;\n    if (chordBlocks.length === 0) {\n        chordBlocks = [\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"\",\n            }),\n        ];\n    }\n\n    const hoverMenu = (): React.ReactElement => {\n        return (\n            <Button onClick={props.onRemove} data-testid={\"RemoveButton\"}>\n                <BackspaceIcon />\n            </Button>\n        );\n    };\n\n    const chordChangeHandler = (id: IDable<\"ChordBlock\">, newChord: string) => {\n        props.chordLine.setChord(id, newChord);\n\n        if (props.onChangeLine) {\n            props.onChangeLine(props.chordLine);\n        }\n    };\n\n    const blockSplitHandler = (\n        id: IDable<\"ChordBlock\">,\n        splitIndex: number\n    ) => {\n        props.chordLine.splitBlock(id, splitIndex);\n\n        if (props.onChangeLine) {\n            props.onChangeLine(props.chordLine);\n        }\n    };\n\n    const blocks: React.ReactElement[] = chordBlocks.map(\n        (chordBlock: ChordBlock, index: number) => (\n            <Block\n                key={chordBlock.id}\n                chordBlock={chordBlock}\n                onChordDragAndDrop={props.onChordDragAndDrop}\n                onChordChange={chordChangeHandler}\n                onBlockSplit={blockSplitHandler}\n                data-testid={`Block-${index}`}\n            ></Block>\n        )\n    );\n\n    return (\n        <Tooltip placement=\"right\" title={hoverMenu()} interactive>\n            <HighlightableBox\n                data-testid={\"NoneditableLine\"}\n                onClick={props.onEdit}\n            >\n                {blocks}\n            </HighlightableBox>\n        </Tooltip>\n    );\n};\n\nexport default ChordEditLine;\n","import { Box, Slide } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { lyricTypographyVariant } from \"../display/Lyric\";\nimport { BlockProps } from \"./Block\";\nimport ChordEditLine from \"./ChordEditLine\";\nimport TextInput from \"./TextInput\";\n\ninterface LineProps extends DataTestID {\n    chordLine: ChordLine;\n    onChangeLine?: (id: IDable<\"ChordLine\">) => void;\n    onAddLine?: (id: IDable<\"ChordLine\">) => void;\n    onRemoveLine?: (id: IDable<\"ChordLine\">) => void;\n    onPasteOverflow?: (\n        id: IDable<\"ChordLine\">,\n        overflowPasteContent: string[]\n    ) => void;\n    onMergeWithPreviousLine?: (id: IDable<\"ChordLine\">) => boolean;\n    onChordDragAndDrop?: BlockProps[\"onChordDragAndDrop\"];\n}\n\nconst Line: React.FC<LineProps> = (props: LineProps): JSX.Element => {\n    const [editing, setEditing] = useState(false);\n    const [removed, setRemoved] = useState(false);\n\n    const startEdit = () => {\n        setEditing(true);\n    };\n\n    const finishEdit = (newLyrics: string) => {\n        setEditing(false);\n\n        props.chordLine.replaceLyrics(newLyrics);\n\n        if (props.onChangeLine) {\n            props.onChangeLine(props.chordLine);\n        }\n    };\n\n    const addHandler = () => {\n        if (props.onAddLine) {\n            props.onAddLine(props.chordLine);\n        }\n    };\n\n    const removalTime = 250;\n\n    const removeHandler = () => {\n        if (removed) {\n            return;\n        }\n\n        setRemoved(true);\n\n        if (props.onRemoveLine) {\n            setTimeout(() => {\n                if (props.onRemoveLine) {\n                    props.onRemoveLine(props.chordLine);\n                }\n            }, removalTime);\n        }\n    };\n\n    const pasteOverflowHandler = (overflowContent: string[]) => {\n        if (props.onPasteOverflow) {\n            props.onPasteOverflow(props.chordLine, overflowContent);\n            setEditing(false);\n        }\n    };\n\n    const specialBackspaceHandler = () => {\n        if (props.onMergeWithPreviousLine) {\n            const handledAndStopEditing = props.onMergeWithPreviousLine(\n                props.chordLine\n            );\n            if (handledAndStopEditing) {\n                setEditing(false);\n            }\n        }\n    };\n\n    const nonEditableLine = (): React.ReactElement => {\n        return (\n            <ChordEditLine\n                chordLine={props.chordLine}\n                onChangeLine={props.onChangeLine}\n                onChordDragAndDrop={props.onChordDragAndDrop}\n                onAdd={addHandler}\n                onRemove={removeHandler}\n                onEdit={startEdit}\n            />\n        );\n    };\n\n    const editLyricsInput = (): React.ReactElement => {\n        const lyrics = props.chordLine.lyrics;\n\n        return (\n            <Box position=\"absolute\" left=\"0\" bottom=\"2px\" width=\"100%\">\n                <TextInput\n                    variant={lyricTypographyVariant}\n                    onFinish={finishEdit}\n                    onPasteOverflow={pasteOverflowHandler}\n                    onSpecialBackspace={specialBackspaceHandler}\n                >\n                    {lyrics}\n                </TextInput>\n            </Box>\n        );\n    };\n\n    let elem: React.ReactElement;\n    if (editing) {\n        // using a css trick to overlay the lyrics edit input over\n        // the noneditable lyrics line so chords are still showing\n        elem = (\n            <>\n                {nonEditableLine()}\n                {editLyricsInput()}\n            </>\n        );\n    } else {\n        elem = nonEditableLine();\n    }\n\n    const yeetDirection = removed ? \"up\" : \"down\";\n\n    return (\n        <Slide direction={yeetDirection} in={!removed} timeout={removalTime}>\n            <Box\n                borderBottom={1}\n                borderColor=\"grey.50\"\n                width=\"100%\"\n                position=\"relative\"\n                data-testid={props[\"data-testid\"]}\n            >\n                {elem}\n            </Box>\n        </Slide>\n    );\n};\n\nexport default Line;\n","import {\n    Button,\n    Divider as UnstyledDivider,\n    Grid,\n    Theme,\n    Tooltip as UnstyledTooltip,\n} from \"@material-ui/core\";\nimport UnstyledAddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport { useTheme, withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { DataTestID } from \"../../common/DataTestID\";\n\nconst HighlightableGrid = withStyles({\n    root: {\n        \"&:hover .MuiDivider-root\": {\n            backgroundColor: \"rgba(0, 0, 0, 0.25)\",\n        },\n    },\n})(Grid);\n\nconst Tooltip = withStyles({\n    tooltip: {\n        padding: 0,\n        background: \"transparent\",\n        margin: 0,\n    },\n})(UnstyledTooltip);\n\nconst Divider = withStyles({\n    root: {\n        width: \"100%\",\n        backgroundColor: \"transparent\",\n    },\n})(UnstyledDivider);\n\nconst AddCircleOutlineIcon = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.secondary.light,\n    },\n}))(UnstyledAddCircleOutlineIcon);\n\ninterface NewLineProps extends DataTestID {\n    onAdd?: () => void;\n}\n\nconst NewLine: React.FC<NewLineProps> = (props: NewLineProps): JSX.Element => {\n    const theme: Theme = useTheme();\n\n    const hoverMenu = (): React.ReactElement => {\n        return (\n            <Button data-testid={\"AddButton\"} onClick={props.onAdd}>\n                <AddCircleOutlineIcon />\n            </Button>\n        );\n    };\n\n    return (\n        <Tooltip title={hoverMenu()} interactive placement=\"right\">\n            <HighlightableGrid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                onClick={props.onAdd}\n                data-testid={props[\"data-testid\"]}\n                style={{\n                    minHeight: theme.spacing(3),\n                }}\n            >\n                <Divider />\n            </HighlightableGrid>\n        </Tooltip>\n    );\n};\n\nexport default NewLine;\n","import React, { useRef } from \"react\";\nimport { createDndContext, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nconst RNDContext = createDndContext(HTML5Backend);\n\ninterface DragAndDropProps {\n    children: React.ReactElement | null;\n}\n\nfunction useDNDProviderElement(props: DragAndDropProps) {\n    const manager = useRef(RNDContext);\n\n    if (!props.children) {\n        throw new Error(\"No children provided to DND wrapper\");\n    }\n\n    if (manager.current.dragDropManager === undefined) {\n        throw new Error(\"No DND manager found\");\n    }\n\n    return (\n        <DndProvider manager={manager.current.dragDropManager}>\n            {props.children}\n        </DndProvider>\n    );\n}\n\nconst DragAndDrop: React.FC<DragAndDropProps> = (\n    props: DragAndDropProps\n): JSX.Element => {\n    const DNDElement = useDNDProviderElement(props);\n    return <React.Fragment>{DNDElement}</React.Fragment>;\n};\n\nexport default DragAndDrop;\n","import React from \"react\";\nimport { Paper as UnstyledPaper, withStyles, Grid } from \"@material-ui/core\";\nimport Line from \"./Line\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport NewLine from \"./NewLine\";\nimport DragAndDrop from \"./DragAndDrop\";\n\nconst Paper = withStyles({\n    root: {\n        width: \"auto\",\n    },\n})(UnstyledPaper);\n\ninterface ChordPaperBodyProps {\n    song: ChordSong;\n    onSongChanged?: (updatedSong: ChordSong) => void;\n}\n\nconst ChordPaperBody: React.FC<ChordPaperBodyProps> = (\n    props: ChordPaperBodyProps\n): React.ReactElement => {\n    const addLineToTop = () => {\n        const newLine: ChordLine = new ChordLine();\n        props.song.addBeginning(newLine);\n        notifySongChanged();\n    };\n\n    const addLine = (id: IDable<\"ChordLine\">) => {\n        const newLine: ChordLine = new ChordLine();\n        props.song.addAfter(id, newLine);\n        notifySongChanged();\n    };\n\n    const removeLine = (id: IDable<\"ChordLine\">) => {\n        props.song.remove(id);\n        notifySongChanged();\n    };\n\n    const changeLine = (id: IDable<\"ChordLine\">) => {\n        notifySongChanged();\n    };\n\n    const pasteOverflowFromLine = (\n        id: IDable<\"ChordLine\">,\n        overflowContent: string[]\n    ) => {\n        const newChordLines = overflowContent.map((newLyricLine: string) =>\n            ChordLine.fromLyrics(newLyricLine)\n        );\n        props.song.addAfter(id, ...newChordLines);\n        notifySongChanged();\n    };\n\n    const mergeWithPreviousLine = (id: IDable<\"ChordLine\">): boolean => {\n        const didMerge = props.song.mergeLineWithPrevious(id);\n\n        if (didMerge) {\n            notifySongChanged();\n            return true;\n        }\n\n        return false;\n    };\n\n    const notifySongChanged = () => {\n        if (props.onSongChanged) {\n            props.onSongChanged(props.song);\n        }\n    };\n\n    const chordDragAndDropHandler = (\n        destinationBlockID: IDable<\"ChordBlock\">,\n        splitIndex: number,\n        newChord: string,\n        sourceBlockID: IDable<\"ChordBlock\">\n    ) => {\n        // clearing the source block first allows handling of when the chord\n        // is dropped onto another token in the same block without special cases\n        const [sourceLine, sourceBlock] = props.song.findLineAndBlock(\n            sourceBlockID\n        );\n        sourceBlock.chord = \"\";\n\n        const [destinationLine, destinationBlock] = props.song.findLineAndBlock(\n            destinationBlockID\n        );\n        if (splitIndex !== 0) {\n            destinationLine.splitBlock(destinationBlockID, splitIndex);\n        }\n\n        destinationBlock.chord = newChord;\n\n        sourceLine.normalizeBlocks();\n        destinationLine.normalizeBlocks();\n\n        notifySongChanged();\n    };\n\n    const lines = () => {\n        const lines = props.song.chordLines.flatMap(\n            (line: ChordLine, index: number) => {\n                const addLineBelow = () => {\n                    addLine(line);\n                };\n\n                return [\n                    <Line\n                        key={line.id}\n                        chordLine={line}\n                        onAddLine={addLine}\n                        onRemoveLine={removeLine}\n                        onChangeLine={changeLine}\n                        onPasteOverflow={pasteOverflowFromLine}\n                        onMergeWithPreviousLine={mergeWithPreviousLine}\n                        onChordDragAndDrop={chordDragAndDropHandler}\n                        data-testid={`Line-${index}`}\n                    />,\n                    <NewLine\n                        key={\"NewLine-\" + line.id}\n                        onAdd={addLineBelow}\n                        data-testid={`NewLine-${index}`}\n                    />,\n                ];\n            }\n        );\n\n        const firstNewLine = (\n            <NewLine\n                key={\"NewLine-Top\"}\n                onAdd={addLineToTop}\n                data-testid={\"NewLine-Top\"}\n            />\n        );\n        lines.splice(0, 0, firstNewLine);\n\n        return lines;\n    };\n\n    return (\n        <DragAndDrop>\n            <Paper elevation={0}>\n                <Grid container>\n                    <Grid item xs={1}></Grid>\n                    <Grid item xs={10}>\n                        {lines()}\n                    </Grid>\n                    <Grid item xs={1}></Grid>\n                </Grid>\n            </Paper>\n        </DragAndDrop>\n    );\n};\n\nexport default ChordPaperBody;\n","import { Theme } from \"@material-ui/core\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport NoteAddIcon from \"@material-ui/icons/NoteAdd\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport {\n    SpeedDial as UnstyledSpeedDial,\n    SpeedDialAction,\n    SpeedDialIcon,\n} from \"@material-ui/lab\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { isLeft } from \"fp-ts/lib/Either\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\n\ninterface ChordPaperMenuProps {\n    song: ChordSong;\n    onLoad?: (loadedSong: ChordSong) => void;\n    onNewSong?: () => void;\n}\n\nconst SpeedDial = withStyles((theme: Theme) => ({\n    root: {\n        position: \"fixed\",\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n}))(UnstyledSpeedDial);\n\nconst ChordPaperMenu: React.FC<ChordPaperMenuProps> = (\n    props: ChordPaperMenuProps\n): JSX.Element => {\n    const [open, setOpen] = useState(false);\n    const { enqueueSnackbar } = useSnackbar();\n\n    const openMenu = () => {\n        setOpen(true);\n    };\n\n    const closeMenu = () => {\n        setOpen(false);\n    };\n\n    const saveAction = () => {\n        const blob = new Blob([props.song.serialize()], {\n            type: \"application/json\",\n        });\n        const objectURL = URL.createObjectURL(blob);\n\n        const anchor = document.createElement(\"a\");\n\n        anchor.download = \"chord_paper_song.json\";\n        if (props.song.title !== \"\") {\n            anchor.download = props.song.title + \".json\";\n        }\n        anchor.href = objectURL;\n        anchor.click();\n\n        URL.revokeObjectURL(objectURL);\n    };\n\n    function pickFileHandler(this: HTMLInputElement) {\n        const fileList = this.files;\n        if (fileList === null) {\n            return;\n        }\n\n        if (fileList.length > 1) {\n            enqueueSnackbar(\"Multiple files selected, only one file expected\", {\n                variant: \"error\",\n            });\n            return;\n        }\n\n        const file = fileList.item(0);\n        if (file === null) {\n            enqueueSnackbar(\"Could not retrieve file from file dialog\", {\n                variant: \"error\",\n            });\n            return;\n        }\n\n        const fileReader = new FileReader();\n        fileReader.onload = (ev: ProgressEvent<FileReader>) => {\n            if (\n                ev.target === null ||\n                ev.target.result === null ||\n                ev.target.result instanceof ArrayBuffer\n            ) {\n                return;\n            }\n\n            const results = ChordSong.deserialize(ev.target.result);\n            if (isLeft(results)) {\n                enqueueSnackbar(\n                    \"Can't load file, Song file failed validation\",\n                    {\n                        variant: \"error\",\n                    }\n                );\n                return;\n            }\n\n            if (props.onLoad) {\n                props.onLoad(results.right);\n            }\n        };\n\n        fileReader.readAsText(file);\n    }\n\n    const loadAction = async () => {\n        const inputElem: HTMLInputElement = document.createElement(\"input\");\n        inputElem.type = \"file\";\n        inputElem.addEventListener(\"change\", pickFileHandler);\n\n        inputElem.click();\n    };\n\n    return (\n        <SpeedDial\n            icon={<SpeedDialIcon />}\n            open={open}\n            onOpen={openMenu}\n            onClose={closeMenu}\n            ariaLabel=\"SpeedDial\"\n        >\n            <SpeedDialAction\n                icon={<SaveIcon />}\n                tooltipTitle=\"Save\"\n                onClick={saveAction}\n            />\n            <SpeedDialAction\n                icon={<FolderOpenIcon />}\n                tooltipTitle=\"Load\"\n                onClick={loadAction}\n            />\n            <SpeedDialAction\n                icon={<NoteAddIcon />}\n                tooltipTitle=\"New Song\"\n                onClick={props.onNewSong}\n            />\n        </SpeedDial>\n    );\n};\n\nexport default ChordPaperMenu;\n","import { Box, Typography, TypographyProps } from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { inflateIfEmpty } from \"../../common/Whitespace\";\nimport TextInput from \"./TextInput\";\n\ninterface EditableTypographyProps extends DataTestID, TypographyProps {\n    children: string;\n    onValueChange?: (newValue: string) => void;\n    placeholder?: string;\n}\n\nconst PlaceholderTypography = withStyles({\n    root: {\n        color: grey[400],\n    },\n})(Typography);\n\nconst EditableTypography: React.FC<EditableTypographyProps> = (\n    props: EditableTypographyProps\n): JSX.Element => {\n    const [editing, setEditing] = useState(false);\n\n    const startEdit = () => {\n        setEditing(true);\n    };\n\n    const finishEdit = (newValue: string) => {\n        setEditing(false);\n        if (props.onValueChange) {\n            props.onValueChange(newValue);\n        }\n    };\n\n    const nonEditableLine = (): React.ReactElement => {\n        const {\n            children,\n            placeholder,\n            onValueChange,\n            ...typographyProps\n        } = props;\n\n        if (props.children === \"\" && props.placeholder !== undefined) {\n            return (\n                <PlaceholderTypography {...typographyProps} onClick={startEdit}>\n                    {props.placeholder}\n                </PlaceholderTypography>\n            );\n        }\n\n        return (\n            <Typography {...typographyProps} onClick={startEdit}>\n                {inflateIfEmpty(props.children)}\n            </Typography>\n        );\n    };\n\n    const editableLine = (): React.ReactElement => {\n        if (props.variant === \"inherit\" || props.variant === \"srOnly\") {\n            throw new Error(\"can't have these variant types\");\n        }\n\n        return (\n            <TextInput\n                variant={props.variant}\n                onFinish={finishEdit}\n                data-testid={\"EditableLine\"}\n            >\n                {props.children}\n            </TextInput>\n        );\n    };\n\n    const elem: React.ReactElement = editing\n        ? editableLine()\n        : nonEditableLine();\n\n    return <Box>{elem}</Box>;\n};\n\nexport default EditableTypography;\n","import { Box, Grid, Theme, Typography } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport EditableTypography from \"./EditableTypography\";\n\ninterface HeaderProps {\n    song: ChordSong;\n    onSongChanged?: (updatedSong: ChordSong) => void;\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps): JSX.Element => {\n    const theme: Theme = useTheme();\n\n    const notifySongChanged = (): void => {\n        if (props.onSongChanged) {\n            props.onSongChanged(props.song);\n        }\n    };\n\n    const updateTitleHandler = (newTitle: string) => {\n        props.song.title = newTitle;\n        notifySongChanged();\n    };\n\n    const updateComposeHandler = (newComposer: string) => {\n        props.song.composedBy = newComposer;\n        notifySongChanged();\n    };\n\n    const updatePerformerHandler = (newPerformer: string) => {\n        props.song.performedBy = newPerformer;\n        notifySongChanged();\n    };\n\n    const updateHeardFrom = (newHeardFrom: string) => {\n        props.song.asHeardFrom = newHeardFrom;\n        notifySongChanged();\n    };\n\n    const title = (\n        <Box paddingBottom={theme.spacing(0.5)}>\n            <EditableTypography\n                variant=\"h4\"\n                align=\"center\"\n                data-testid=\"SongTitle\"\n                placeholder=\"Song Title\"\n                onValueChange={updateTitleHandler}\n            >\n                {props.song.title}\n            </EditableTypography>\n        </Box>\n    );\n\n    const details = (\n        <Grid container justify=\"center\">\n            <Grid container item xs={4} justify=\"center\">\n                <Grid item>\n                    <Typography display=\"block\" variant=\"caption\">\n                        Composed by:{\" \"}\n                    </Typography>\n\n                    <EditableTypography\n                        display=\"block\"\n                        variant=\"caption\"\n                        placeholder=\"Stock Waterman\"\n                        onValueChange={updateComposeHandler}\n                        data-testid=\"ComposedBy\"\n                    >\n                        {props.song.composedBy}\n                    </EditableTypography>\n                </Grid>\n            </Grid>\n            <Grid container item xs={4} justify=\"center\">\n                <Grid item>\n                    <Typography display=\"inline\" variant=\"caption\">\n                        Performed by:{\" \"}\n                    </Typography>\n\n                    <EditableTypography\n                        variant=\"caption\"\n                        placeholder=\"Rick Astley\"\n                        onValueChange={updatePerformerHandler}\n                        data-testid=\"PerformedBy\"\n                    >\n                        {props.song.performedBy}\n                    </EditableTypography>\n                </Grid>\n            </Grid>\n            <Grid container item xs={4} justify=\"center\">\n                <Grid item>\n                    <Typography display=\"inline\" variant=\"caption\">\n                        As heard from:{\" \"}\n                    </Typography>\n                    <EditableTypography\n                        variant=\"caption\"\n                        placeholder=\"https://www.youtube.com/watch?v=dM9zwZCOmjM\"\n                        onValueChange={updateHeardFrom}\n                        data-testid=\"AsHeardAt\"\n                    >\n                        {props.song.asHeardFrom}\n                    </EditableTypography>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n\n    return (\n        <Box\n            paddingTop={theme.spacing(1)}\n            paddingLeft={theme.spacing(0.5)}\n            paddingRight={theme.spacing(0.5)}\n            data-testid=\"Header\"\n        >\n            {title}\n            {details}\n        </Box>\n    );\n};\n\nexport default Header;\n","import { Paper, Theme, withStyles } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport ChordPaperBody from \"./ChordPaperBody\";\nimport ChordPaperMenu from \"./ChordPaperMenu\";\nimport Header from \"./Header\";\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(5),\n        minHeight: theme.spacing(92),\n        minWidth: theme.spacing(92),\n    },\n}))(Paper);\n\ninterface ChordPaperProps {\n    initialSong: ChordSong;\n}\n\nconst ChordPaper: React.FC<ChordPaperProps> = (\n    props: ChordPaperProps\n): JSX.Element => {\n    const [song, setSong] = useState<ChordSong>(props.initialSong);\n\n    const songChangeHandler = (updatedSong: ChordSong) => {\n        setSong(updatedSong.clone());\n    };\n\n    const loadHandler = (loadedSong: ChordSong) => {\n        setSong(loadedSong.clone());\n    };\n\n    const newSongHandler = () => {\n        setSong(new ChordSong());\n    };\n\n    return (\n        <RootPaper elevation={3} data-testid=\"ChordPaper\">\n            <Header\n                data-testid={\"Header\"}\n                song={song}\n                onSongChanged={songChangeHandler}\n            />\n            <ChordPaperBody song={song} onSongChanged={songChangeHandler} />\n            <ChordPaperMenu\n                song={song}\n                onLoad={loadHandler}\n                onNewSong={newSongHandler}\n            />\n        </RootPaper>\n    );\n};\n\nexport default ChordPaper;\n","import { tokenize } from \"./common/LyricTokenizer\";\nimport { ChordSong } from \"./common/ChordModel/ChordSong\";\nimport { ChordLine } from \"./common/ChordModel/ChordLine\";\nimport { ChordBlock } from \"./common/ChordModel/ChordBlock\";\n\nconst lyrics = [\n    \"We're no strangers to love\",\n    \"You know the rules and so do I\",\n    \"A full commitment's what I'm thinking of\",\n    \"You wouldn't get this from any other guy\",\n    \"I just wanna tell you how I'm feeling\",\n    \"Gotta make you understand\",\n    \"Never gonna give you up\",\n    \"Never gonna let you down\",\n    \"Never gonna run around and desert you\",\n    \"Never gonna make you cry\",\n    \"Never gonna say goodbye\",\n    \"Never gonna tell a lie and hurt you\",\n];\n\nconst chords = [\"A\", \"Bb7\", \"Cm\", \"D/C#\", \"Em7\", \"Fmaj7\", \"G^\"];\n\nconst randomChord = (): string => {\n    return chords[Math.floor(Math.random() * chords.length)];\n};\n\nconst chunk = (arr: string, tokenSize: number): string[] => {\n    const tokens = tokenize(arr);\n    const results: string[] = [];\n\n    for (let i = 0; i < tokens.length; i += tokenSize) {\n        const subArr = tokens.slice(i, i + tokenSize);\n        results.push(subArr.join(\"\"));\n    }\n\n    return results;\n};\n\nexport const NeverGonnaGiveYouUp = (): ChordSong => {\n    const chordLines: ChordLine[] = lyrics.map((lyricLine: string) =>\n        assembleLine(lyricLine)\n    );\n\n    return new ChordSong(chordLines, {\n        title: \"Never Gonna Give You Up\",\n        performedBy: \"Rick Astley\",\n        composedBy: \"Stock Waterman\",\n        asHeardFrom: \"https://www.youtube.com/watch?v=dM9zwZCOmjM\",\n    });\n};\n\nconst assembleLine = (lyrics: string): ChordLine => {\n    const lyricChunks = chunk(lyrics, 4);\n\n    const chordBlocks: ChordBlock[] = lyricChunks.map((lyricChunk: string) => {\n        return new ChordBlock({\n            chord: randomChord(),\n            lyric: lyricChunk,\n        });\n    });\n\n    return new ChordLine(chordBlocks);\n};\n","import { Grid, Paper, Theme, Typography } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(5),\n        padding: theme.spacing(5),\n        minHeight: theme.spacing(46),\n        minWidth: theme.spacing(92),\n        position: \"relative\",\n    },\n}))(Paper);\n\nconst ErrorPage: React.FC<{}> = (): JSX.Element => {\n    return (\n        <Grid container data-testid=\"Tutorial\">\n            <Grid item xs={3}></Grid>\n            <Grid item xs={6}>\n                <RootPaper>\n                    <Typography>An Error Occurred Oh No</Typography>\n                </RootPaper>\n            </Grid>\n            <Grid item xs={3}></Grid>\n        </Grid>\n    );\n};\n\nexport default ErrorPage;\n","import { Badge as UnstyledBadge, Paper, withStyles } from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport UnstyledCheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport React, { useState } from \"react\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport ChordPaperBody from \"../edit/ChordPaperBody\";\n\nconst CheckCircleIcon = withStyles({\n    root: {\n        color: green[200],\n    },\n})(UnstyledCheckCircleIcon);\n\nconst Badge = withStyles({\n    root: {\n        display: \"inherit\",\n    },\n})(UnstyledBadge);\n\ninterface PlaygroundProps {\n    initialSong: ChordSong;\n    expectedSong?: ChordSong;\n}\n\nconst Playground: React.FC<PlaygroundProps> = (\n    props: PlaygroundProps\n): JSX.Element => {\n    const [song, setSong] = useState<ChordSong>(props.initialSong);\n    const [finish, setFinish] = useState(false);\n\n    const songChangeHandler = (updatedSong: ChordSong) => {\n        setSong(updatedSong.clone());\n        checkExpected(updatedSong);\n    };\n\n    const checkExpected = (updatedSong: ChordSong) => {\n        // don't undo the green check if it's already been passing\n        if (finish) {\n            return;\n        }\n\n        if (\n            props.expectedSong !== undefined &&\n            props.expectedSong.contentEquals(updatedSong)\n        ) {\n            setFinish(true);\n        }\n    };\n\n    return (\n        <Badge badgeContent={<CheckCircleIcon />} invisible={!finish}>\n            <Paper elevation={1}>\n                <ChordPaperBody song={song} onSongChanged={songChangeHandler} />\n            </Paper>\n        </Badge>\n    );\n};\n\nexport default Playground;\n","import { Theme, Typography } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { inflatingWhitespace } from \"../../common/Whitespace\";\nexport const LyricsTypography = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.secondary.light,\n    },\n}))(Typography);\n\nexport const ChordTypography = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.primary.main,\n    },\n}))(Typography);\n\nexport const LineBreak = () => {\n    return <Typography>{inflatingWhitespace()}</Typography>;\n};\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { LineBreak } from \"./Common\";\n\nconst Header = () => {\n    return <Typography variant=\"h5\">Learning Chord Paper</Typography>;\n};\n\nconst Preamble = () => {\n    return (\n        <>\n            <Typography>\n                Chord Paper aims to be as intuitive and handy as possible, but\n                there could still be features that aren't obvious as we work out\n                the kinks. Let's walk through the basics together by making some\n                changes to chords and lyrics!\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Since Chord Paper is still in early stages, some of these could\n                change in the future.\n            </Typography>\n        </>\n    );\n};\n\nconst Starting: React.FC<{}> = (): JSX.Element => {\n    return (\n        <>\n            <Header />\n            <LineBreak />\n            <Preamble />\n        </>\n    );\n};\n\nexport default Starting;\n","import { Fab as UnstyledFab, Paper, Theme } from \"@material-ui/core\";\nimport UnstyledPlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { Link, Route } from \"react-router-dom\";\nimport ErrorPage from \"./edit/ErrorPage\";\nimport AddChord from \"./tutorial/AddChord\";\nimport AddLine from \"./tutorial/AddLine\";\nimport ChordPositioning from \"./tutorial/ChordPositioning\";\nimport EditChord from \"./tutorial/EditChord\";\nimport EditLyrics from \"./tutorial/EditLyrics\";\nimport MergeLine from \"./tutorial/MergeLine\";\nimport PasteLyrics from \"./tutorial/PasteLyrics\";\nimport RemoveChord from \"./tutorial/RemoveChord\";\nimport RemoveLine from \"./tutorial/RemoveLine\";\nimport Starting from \"./tutorial/Start\";\nimport DragAndDropChord from \"./tutorial/DragAndDropChord\";\n\ntype ExerciseEntry = {\n    title: string;\n    route: string;\n    component: React.FC<{}>;\n};\n\nexport type ExerciseRoute = {\n    title: string;\n    route: string;\n};\n\nconst allExercises: ExerciseEntry[] = [\n    {\n        title: \"Starting\",\n        route: \"/learn/start\",\n        component: Starting,\n    },\n    {\n        title: \"Edit a Chord\",\n        route: \"/learn/edit_chord\",\n        component: EditChord,\n    },\n    {\n        title: \"Remove a Chord\",\n        route: \"/learn/remove_chord\",\n        component: RemoveChord,\n    },\n    {\n        title: \"Add a Chord\",\n        route: \"/learn/add_chord\",\n        component: AddChord,\n    },\n    {\n        title: \"Drag and Drop Chords\",\n        route: \"/learn/drag_and_drop_chord\",\n        component: DragAndDropChord,\n    },\n    {\n        title: \"Edit Lyrics\",\n        route: \"/learn/edit_lyrics\",\n        component: EditLyrics,\n    },\n    {\n        title: \"Chord Positioning\",\n        route: \"/learn/chord_positioning\",\n        component: ChordPositioning,\n    },\n    {\n        title: \"Adding New Line\",\n        route: \"/learn/add_line\",\n        component: AddLine,\n    },\n    {\n        title: \"Removing a Line\",\n        route: \"/learn/remove_line\",\n        component: RemoveLine,\n    },\n    {\n        title: \"Pasting Lyrics\",\n        route: \"/learn/paste_lyrics\",\n        component: PasteLyrics,\n    },\n    {\n        title: \"Merging Lines\",\n        route: \"/learn/merge_lines\",\n        component: MergeLine,\n    },\n];\n\nexport const allExerciseRoutes = (): ExerciseRoute[] => {\n    return allExercises.map((entry: ExerciseEntry) => ({\n        title: entry.title,\n        route: entry.route,\n    }));\n};\n\nconst PlayArrowIcon = withStyles({\n    root: {\n        color: \"white\",\n    },\n})(UnstyledPlayArrowIcon);\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(5),\n        padding: theme.spacing(5),\n        minHeight: theme.spacing(46),\n        width: theme.spacing(92),\n        position: \"relative\",\n    },\n}))(Paper);\n\nconst Fab = withStyles((theme: Theme) => ({\n    root: {\n        position: \"absolute\",\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n}))(UnstyledFab);\n\ninterface TutorialProps {\n    route: string;\n}\n\nexport const TutorialSwitches = (): React.ReactElement[] => {\n    return allExercises.map((exerciseEntry: ExerciseEntry) => (\n        <Route key={exerciseEntry.route} exact path={exerciseEntry.route}>\n            <Tutorial route={exerciseEntry.route} />\n        </Route>\n    ));\n};\n\nconst Tutorial: React.FC<TutorialProps> = (\n    props: TutorialProps\n): JSX.Element => {\n    const matchEntry = (entry: ExerciseEntry): boolean => {\n        return entry.route === props.route;\n    };\n\n    const exerciseEntry: ExerciseEntry | undefined = allExercises.find(\n        matchEntry\n    );\n\n    if (exerciseEntry === undefined) {\n        return <ErrorPage />;\n    }\n\n    const exerciseIndex = allExercises.findIndex(matchEntry);\n\n    let nextButton: React.ReactElement | null = null;\n\n    if (exerciseIndex < allExercises.length - 1) {\n        const nextExercise = allExercises[exerciseIndex + 1];\n        nextButton = (\n            <Link to={nextExercise.route}>\n                <Fab color=\"primary\">\n                    <PlayArrowIcon />\n                </Fab>\n            </Link>\n        );\n    }\n\n    return (\n        <RootPaper>\n            <exerciseEntry.component />\n            {nextButton}\n        </RootPaper>\n    );\n};\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordTypography, LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst EditChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly \" }),\n            new ChordBlock({ chord: \"Bm\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Editing Chords</Typography>\n            <LineBreak />\n            <Typography>\n                Click on a chord to change it. Let's change the chord above{\" \"}\n                <LyricsTypography display=\"inline\">appear</LyricsTypography>{\" \"}\n                from <ChordTypography display=\"inline\">Bm</ChordTypography> to{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default EditChord;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordTypography, LineBreak } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst RemoveChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: \"Why do birds suddenly appear?\",\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Removing Chords</Typography>\n            <LineBreak />\n            <Typography>\n                Simply remove all the chord text when editing to clear the\n                chord. Let's remove the{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default RemoveChord;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport Playground from \"./Playground\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { LineBreak, LyricsTypography, ChordTypography } from \"./Common\";\n\nconst AddChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: \"Why do birds suddenly appear?\",\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: \"Why do birds suddenly \",\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Adding Chords</Typography>\n            <LineBreak />\n            <Typography>\n                Add a chord by hovering above a word, and clicking the outlined\n                box. Let's add{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography> back\n                above{\" \"}\n                <LyricsTypography display=\"inline\">appear</LyricsTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default AddChord;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordTypography, LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst DragAndDropChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"suddenly appear?\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Dragging and Dropping Chords</Typography>\n            <LineBreak />\n            <Typography>\n                It's also possible to drag and drop chords onto different parts\n                of the line when its initial placement wasn't quite correct.\n                Just drag a chord and drop it to the space above or on another\n                lyric.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Let's move the{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography> above{\" \"}\n                <LyricsTypography display=\"inline\">suddenly</LyricsTypography>{\" \"}\n                to above{\" \"}\n                <LyricsTypography display=\"inline\">appear</LyricsTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default DragAndDropChord;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst EditLyrics: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly \" }),\n            new ChordBlock({ chord: \"B7\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: \"Why oh why do birds suddenly \",\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Editing Lyrics</Typography>\n            <LineBreak />\n            <Typography>\n                You can edit the lyrics by clicking anywhere along the lyrics.\n                Chord Paper will move chords along with lyrics when you edit\n                them. Let's change the lyrics to:\n            </Typography>\n            <LyricsTypography>\n                Why oh why do birds suddenly appear?\n            </LyricsTypography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default EditLyrics;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport Playground from \"./Playground\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { LineBreak, LyricsTypography, ChordTypography } from \"./Common\";\n\nconst ChordPositioning: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly \" }),\n            new ChordBlock({ chord: \"\", lyric: \"appear?\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Chord Positioning</Typography>\n            <LineBreak />\n            <Typography>\n                Sometimes you want to emphasize a chord landing on a specific\n                syllable or between words. Without the overhead of standard\n                notation, we can do this by breaking up lyrics and annotating\n                spaces.\n            </Typography>\n            <LineBreak />\n\n            <Typography>Let's change the lyrics to:</Typography>\n            <LyricsTypography>Why do birds suddenly ap-pear?</LyricsTypography>\n            <Typography>\n                And add a space after the{\" \"}\n                <LyricsTypography display=\"inline\">?</LyricsTypography>\n            </Typography>\n            <Typography>\n                Then add{\" \"}\n                <ChordTypography display=\"inline\">B7sus4</ChordTypography> to{\" \"}\n                <LyricsTypography display=\"inline\">pear</LyricsTypography>\n            </Typography>\n            <Typography>\n                And then, also add{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography> to the\n                space after{\" \"}\n                <LyricsTypography display=\"inline\">?</LyricsTypography> (this\n                can be tricky due to the spacing. work in progress)\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default ChordPositioning;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst AddLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"Every time you are near\" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Adding New Lines</Typography>\n            <LineBreak />\n            <Typography>\n                You can add more lines by hovering below (or above) and existing\n                line, and clicking the gray line or the add icon to the right.\n            </Typography>\n            <Typography>Let's add a line, and change the lyrics to:</Typography>\n            <LyricsTypography>Why do birds suddenly ap-pear?</LyricsTypography>\n            <LyricsTypography>Every time you are near</LyricsTypography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default AddLine;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { LineBreak } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst RemoveLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"Every time you are near\" }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Removing Lines</Typography>\n            <LineBreak />\n            <Typography>\n                Similarly, you can remove a line by hovering over the line, and\n                clicking the red remove icon to the right. Let's remove the\n                second line of lyrics.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default RemoveLine;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst PasteLyrics: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n        new ChordLine(),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"C^\", lyric: \"Why do birds suddenly ap-\" }),\n            new ChordBlock({ chord: \"B7sus4\", lyric: \"pear?\" }),\n            new ChordBlock({ chord: \"B7\", lyric: \" \" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({ chord: \"\", lyric: \"Every time you are near\" }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"Just like me, they long to be\",\n            }),\n        ]),\n        new ChordLine([new ChordBlock({ chord: \"\", lyric: \"Close to you\" })]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Pasting Lyrics</Typography>\n            <LineBreak />\n            <Typography>\n                It would be annoying to have to type out the lyrics. But we can\n                paste it in! Copy these lyrics, click into the second line, and\n                paste:\n            </Typography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                Every time you are near\n            </LyricsTypography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                Just like me, they long to be\n            </LyricsTypography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                Close to you\n            </LyricsTypography>\n\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default PasteLyrics;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { LineBreak } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst MergeLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: \"Why do birds\",\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: \"suddenly \",\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: \"appear?\",\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: \"Why do birds suddenly \",\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: \"appear?\",\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Merging Lines</Typography>\n            <LineBreak />\n            <Typography>\n                Sometimes the lyrics that we paste in is not the division we\n                want. Let's merge the two lines. Click into the second line,\n                move the cursor to the beginning of the line, and press\n            </Typography>\n            <Typography>\n                (CTRL+Backspace : Windows | CMD+Backspace : Mac)\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default MergeLine;\n","import {\n    Collapse,\n    Divider,\n    Drawer,\n    Grid,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Paper,\n    Theme,\n    Typography,\n} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport UnstyledCloseIcon from \"@material-ui/icons/Close\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport FreeBreakfastIcon from \"@material-ui/icons/FreeBreakfast\";\nimport UnstyledMenuIcon from \"@material-ui/icons/Menu\";\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\nimport PetsIcon from \"@material-ui/icons/Pets\";\nimport StoreIcon from \"@material-ui/icons/Store\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { allExerciseRoutes, ExerciseRoute } from \"./Tutorial\";\n\nconst withPointerStyle = withStyles({\n    root: {\n        cursor: \"pointer\",\n    },\n});\n\nconst MenuIcon = withPointerStyle(UnstyledMenuIcon);\nconst CloseIcon = withPointerStyle(UnstyledCloseIcon);\n\nconst VerticalGridItem = withStyles({\n    root: {\n        maxWidth: \"none\",\n    },\n})(Grid);\n\nconst TitleGrid = withStyles((theme: Theme) => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n}))(Grid);\n\nconst TitleName = withStyles((theme: Theme) => ({\n    root: {\n        color: grey[600],\n    },\n}))(Typography);\n\nconst CollapsedMenuSurface = withStyles({\n    root: {\n        minWidth: \"24px\",\n        height: \"100vh\",\n    },\n})(Paper);\n\nconst FullHeightGrid = withStyles({\n    root: {\n        height: \"100%\",\n        width: \"100%\",\n    },\n})(Grid);\n\nconst SideMenu: React.FC<{}> = (): JSX.Element => {\n    const [expanded, setExpanded] = useState(false);\n    const [learnSubmenuOpen, setLearnSubMenuOpen] = useState(false);\n\n    const typographyProps = {\n        variant: \"h6\" as \"h6\",\n    };\n\n    const learnClickHandler = () => {\n        setLearnSubMenuOpen(!learnSubmenuOpen);\n    };\n\n    const tutorialMenu = () => {\n        const exerciseLinks = allExerciseRoutes().map(\n            (exerciseRoute: ExerciseRoute) => {\n                return (\n                    <Link\n                        key={exerciseRoute.route}\n                        to={exerciseRoute.route}\n                        style={linkStyle}\n                    >\n                        <ListItem button>\n                            <ListItemText inset primary={exerciseRoute.title} />\n                        </ListItem>\n                    </Link>\n                );\n            }\n        );\n\n        return (\n            <>\n                <ListItem key=\"Learn\" button onClick={learnClickHandler}>\n                    <ListItemIcon>\n                        <FreeBreakfastIcon />\n                    </ListItemIcon>\n                    <ListItemText\n                        primary=\"Learn\"\n                        primaryTypographyProps={typographyProps}\n                    />\n                    {learnSubmenuOpen ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                </ListItem>\n                <Collapse in={learnSubmenuOpen} timeout=\"auto\">\n                    <List>{exerciseLinks}</List>\n                </Collapse>\n            </>\n        );\n    };\n\n    const linkStyle = {\n        textDecoration: \"none\",\n        color: \"inherit\",\n    };\n\n    const collapsedMenu = (\n        <Drawer variant=\"persistent\" open={!expanded} anchor=\"left\">\n            <CollapsedMenuSurface>\n                <FullHeightGrid\n                    container\n                    direction=\"column\"\n                    alignContent=\"center\"\n                >\n                    <VerticalGridItem item xs={1}></VerticalGridItem>\n                    <VerticalGridItem item xs={1}>\n                        <MenuIcon onClick={() => setExpanded(true)} />\n                    </VerticalGridItem>\n                    <VerticalGridItem item xs={10}></VerticalGridItem>\n                </FullHeightGrid>\n            </CollapsedMenuSurface>\n        </Drawer>\n    );\n\n    const expandedMenu = (\n        <Drawer variant=\"persistent\" open={expanded} anchor=\"left\">\n            <TitleGrid container alignItems=\"center\" justify=\"space-between\">\n                <Grid item>\n                    <Link\n                        to=\"/\"\n                        style={linkStyle}\n                        data-testid=\"Menu-TitleButton\"\n                    >\n                        <TitleName variant=\"h5\" display=\"inline\">\n                            Chord Paper\n                        </TitleName>\n                    </Link>\n                </Grid>\n                <Grid item>\n                    <CloseIcon onClick={() => setExpanded(false)} />\n                </Grid>\n            </TitleGrid>\n\n            <Divider />\n            <List>\n                <Link\n                    key=\"/\"\n                    to=\"/\"\n                    style={linkStyle}\n                    data-testid=\"Menu-HomeButton\"\n                >\n                    <ListItem key=\"Song\" button>\n                        <ListItemIcon>\n                            <MusicNoteIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"Song\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n                <Link\n                    key=\"/demo\"\n                    to=\"/demo\"\n                    style={linkStyle}\n                    data-testid=\"Menu-DemoButton\"\n                >\n                    <ListItem key=\"Demo\" button>\n                        <ListItemIcon>\n                            <StoreIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"Demo\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n                {tutorialMenu()}\n                <Link\n                    key=\"/about\"\n                    to=\"/about\"\n                    style={linkStyle}\n                    data-testid=\"Menu-AboutButton\"\n                >\n                    <ListItem key=\"About\" button>\n                        <ListItemIcon>\n                            <PetsIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"About\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n            </List>\n        </Drawer>\n    );\n\n    return (\n        <>\n            {collapsedMenu}\n            {expandedMenu}\n        </>\n    );\n};\n\nexport default SideMenu;\n","import React from \"react\";\nimport { Paper, Typography, Theme, Grid } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { inflatingWhitespace } from \"../../common/Whitespace\";\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(5),\n        padding: theme.spacing(5),\n        minHeight: theme.spacing(46),\n        minWidth: theme.spacing(92),\n    },\n}))(Paper);\n\nconst About: React.FC<{}> = (): JSX.Element => {\n    return (\n        <Grid container data-testid=\"About\">\n            <Grid item xs={3}></Grid>\n            <Grid item xs={6}>\n                <RootPaper>\n                    <Typography variant=\"h6\">About Chord Paper</Typography>\n                    <Typography variant=\"h6\">\n                        {inflatingWhitespace()}\n                    </Typography>\n                    <Typography>\n                        Chord Paper makes writing and reading chord sheets\n                        easier than the traditional monospace font formatting.\n                        It's a passion project born out of frustration at the\n                        clunkiness of writing chords on a computer.\n                    </Typography>\n                    <Typography>{inflatingWhitespace()}</Typography>\n                    <Typography>\n                        Hope you will find that Chord Paper helps you focus more\n                        of your musical time on playing and listening, and less\n                        on formatting.\n                    </Typography>\n                </RootPaper>\n            </Grid>\n            <Grid item xs={3}></Grid>\n        </Grid>\n    );\n};\n\nexport default About;\n","import React from \"react\";\nimport { Typography, Theme } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nconst PaddedTypography = withStyles((theme: Theme) => ({\n    root: {\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        padding: theme.spacing(1),\n        color: grey[600],\n    },\n}))(Typography);\n\nconst Version: React.FC<{}> = (): JSX.Element => {\n    const version: string = process.env.REACT_APP_VERSION ?? \"dev-build\";\n\n    return <PaddedTypography variant=\"subtitle2\">{version}</PaddedTypography>;\n};\n\nexport default Version;\n","import React from \"react\";\nimport {\n    Theme,\n    ThemeProvider,\n    createMuiTheme,\n    PaletteColorOptions,\n    Grid,\n} from \"@material-ui/core\";\nimport ChordPaper from \"./components/edit/ChordPaper\";\nimport { SnackbarProvider } from \"notistack\";\nimport { NeverGonnaGiveYouUp } from \"./NeverGonnaGiveYouUp\";\nimport { withStyles } from \"@material-ui/styles\";\nimport WoodBackground from \"./assets/img/symphony.png\";\nimport SideMenu from \"./components/SideMenu\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport About from \"./components/about/About\";\nimport { TutorialSwitches } from \"./components/Tutorial\";\nimport Version from \"./components/Version\";\nimport { ChordSong } from \"./common/ChordModel/ChordSong\";\n\nconst createTheme = (): Theme => {\n    const lightBlue: PaletteColorOptions = {\n        main: \"#4fc3f7\",\n        light: \"#8bf6ff\",\n        dark: \"#0093c4\",\n        contrastText: \"#000000\",\n    };\n\n    const purple: PaletteColorOptions = {\n        main: \"#844ffc\",\n        light: \"#bb7eff\",\n        dark: \"#4a1fc8\",\n        contrastText: \"#ffffff\",\n    };\n\n    return createMuiTheme({\n        palette: {\n            primary: lightBlue,\n            secondary: purple,\n        },\n        typography: {\n            fontFamily: \"Merriweather\",\n            fontWeightRegular: 300,\n        },\n    });\n};\n\nconst AppLayout = withStyles({\n    root: {\n        backgroundImage: `url(${WoodBackground})`,\n        minHeight: \"100vh\",\n    },\n})(Grid);\n\nfunction App() {\n    const theme: Theme = createTheme();\n\n    const routeSwitches = (\n        <Switch>\n            <Route key=\"/\" exact path=\"/\">\n                <ChordPaper initialSong={new ChordSong()} />\n            </Route>\n            <Route key=\"/demo\" exact path=\"/demo\">\n                <ChordPaper initialSong={NeverGonnaGiveYouUp()} />\n            </Route>\n            {TutorialSwitches()}\n            <Route key=\"/about\" exact path=\"/about\">\n                <About />\n            </Route>\n        </Switch>\n    );\n\n    return (\n        <ThemeProvider theme={theme}>\n            <SnackbarProvider>\n                <HashRouter>\n                    <SideMenu />\n                    <AppLayout container>\n                        <Grid item container justify=\"center\">\n                            {routeSwitches}\n                        </Grid>\n                    </AppLayout>\n                    <Version />\n                </HashRouter>\n            </SnackbarProvider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}