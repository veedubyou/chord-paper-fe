{"version":3,"sources":["assets/img/symphony.png","assets/img/error.jpeg","assets/img/google_signin.svg","components/lyrics/Tab.tsx","common/Whitespace.ts","common/ChordModel/Lyric.ts","common/ChordModel/ChordBlock.ts","common/ChordModel/ChordLinePatcher.ts","common/ChordModel/Collection.ts","common/ChordModel/ChordLine.ts","common/ChordModel/ChordSong.ts","components/about/About.tsx","components/display/ErrorPage.tsx","common/paths.ts","components/PlayerTimeContext.tsx","common/ChordModel/tracks/BaseTrack.ts","common/ChordModel/tracks/SingleTrack.ts","common/mapObject.ts","common/ChordModel/tracks/StemTrack.ts","components/edit/LineSelection.ts","components/track_player/dialog/error.ts","components/track_player/dialog/LabelField.tsx","components/track_player/internal_player/google_drive.ts","components/track_player/dialog/URLField.tsx","components/track_player/dialog/SingleTrackRow.tsx","components/track_player/dialog/StemTrackRow.tsx","components/track_player/dialog/SplitStemTrackRow.tsx","common/ChordModel/tracks/SplitStemRequest.ts","components/track_player/dialog/TrackListEditDialog.tsx","common/PlainFn.ts","components/track_player/internal_player/usePlayerControls.ts","components/GlobalKeyListener.tsx","components/track_player/common.tsx","components/track_player/MicroPlayer.tsx","components/track_player/internal_player/BeginningIcon.tsx","components/track_player/internal_player/ForwardIcon.tsx","components/track_player/internal_player/ControlButton.tsx","components/track_player/internal_player/ControlGroup.tsx","components/track_player/internal_player/PlayrateControl.tsx","components/track_player/internal_player/SectionLabel.tsx","components/track_player/internal_player/ControlPane.tsx","components/track_player/internal_player/single/SingleTrackPlayer.tsx","components/track_player/internal_player/stem/audioCtx.ts","components/track_player/internal_player/stem/StemTrackControlPane.tsx","components/track_player/internal_player/stem/LoadedStemTrackPlayer.tsx","components/track_player/internal_player/stem/StemTrackPlayer.tsx","components/track_player/TrackPlayer.tsx","components/track_player/MultiTrackPlayer.tsx","components/track_player/JamStation.tsx","common/backend/errors.ts","common/backend/requests.ts","common/ChordModel/tracks/Track.ts","common/ChordModel/tracks/TrackList.ts","components/display/ErrorImage.tsx","components/user/userContext.ts","components/track_player/TrackListProvider.tsx","components/edit/CopyAndPaste.ts","components/edit/DragAndDrop.tsx","common/transpose/MusicNotes.ts","components/edit/InteractionContext.ts","components/edit/HighlightChordLyricStyle.ts","components/lyrics/Serialization.tsx","components/display/Lyric.tsx","components/edit/ChordDroppable.tsx","components/display/ChordSymbol.tsx","components/edit/DraggableChordSymbol.tsx","components/edit/ControlledTextInput.tsx","components/edit/TextInput.tsx","components/edit/Token.tsx","components/edit/Block.tsx","components/edit/WithHoverMenu.tsx","components/edit/lyric_input/SelectionUtils.ts","components/edit/lyric_input/useKeyHandler.ts","components/edit/lyric_input/usePasteHandler.ts","components/edit/lyric_input/useSelectionHandler.ts","components/edit/lyric_input/LyricInput.tsx","components/edit/WithLyricInput.tsx","components/display/SectionLabel.ts","components/edit/EditableTypography.tsx","components/edit/TimeInput.tsx","components/edit/WithSection.tsx","components/edit/Line.tsx","components/edit/NewLine.tsx","components/edit/ChordPaperBody.tsx","components/edit/BatchDelete.ts","components/display/LastSavedAt.tsx","components/edit/Header.tsx","components/edit/menu/load.ts","components/WithCloud.tsx","common/transpose/Keys.ts","common/transpose/Transpose.ts","components/edit/menu/TransposeMenu.tsx","components/edit/menu/ChordPaperMenu.tsx","components/edit/menu/save.ts","components/edit/menu/cloudSave.ts","components/edit/ChordPaper.tsx","components/play/keyMap.ts","components/play/PlayBlock.tsx","components/play/PlayLine.tsx","components/play/PlayContent.tsx","components/play/DisplaySettingsDialog.tsx","components/play/PlayMenu.tsx","components/play/Play.tsx","components/SongRouter.tsx","components/WithSongContext.tsx","components/Demo.tsx","components/LoadSongDialog.tsx","components/tutorial/Playground.tsx","components/tutorial/Common.tsx","components/tutorial/AddChord.tsx","components/tutorial/AddLine.tsx","components/tutorial/ChordPositioning.tsx","components/tutorial/CopyAndPaste.tsx","components/tutorial/DragAndDropChord.tsx","components/tutorial/EditChord.tsx","components/tutorial/EditLyrics.tsx","components/tutorial/Instrumental.tsx","components/tutorial/MergeLine.tsx","components/tutorial/PasteLyrics.tsx","components/tutorial/RemoveChord.tsx","components/tutorial/RemoveLine.tsx","components/tutorial/Start.tsx","components/tutorial/Labels.tsx","components/Tutorial.tsx","components/tutorial/SplitLine.tsx","components/tutorial/PlayMode.tsx","components/tutorial/Saving.tsx","components/user/Login.tsx","components/SideMenu.tsx","components/SongFetcher.tsx","components/Version.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SizedTab","allTabTypes","sizedTab","SmallTab","serializedStr","MediumTab","LargeTab","findTabType","attrName","attr","tabType","find","undefined","Error","isValidTabValue","lyricTabTypeOfDOMNode","node","HTMLElement","tagName","toLowerCase","dataAttribute","dataset","sizeStyleFn","size","root","display","width","makeSizeStyle","makeStyles","makeSizeMap","makeEditingSizeStyle","style","backgroundColor","blueGrey","content","margin","makeEditingSizeMap","useEditingSizeMap","Tab","props","normalSizeMap","useSizeMap","editingSizeMap","sizeMap","edit","type","className","contentEditable","data-lyrictabtype","isWhitespace","s","test","inflateIfEmpty","value","LyricValidator","iots","serializedLyric","tokenizationRegex","regex","RegExp","Lyric","serializedLyrics","this","transformFn","matches","match","map","rawStr","other","arr","joinChar","container","join","validatedFields","ChordBlockValidator","chord","lyric","ChordBlock","id","shortid","generate","lodash","omit","splitIndex","tokens","lyricTokens","prevBlockLyricTokens","slice","thisBlockLyricTokens","prevBlock","lyricString","get","prevBlockLyrics","thisBlockLyrics","isEqual","isEmpty","length","tokenize","unionLyric","fromValidatedFields","jsonStr","result","parseJSON","isLeft","jsonObj","right","validationResult","decode","left","differ","dmp","DiffMatchPatch","diffTimeout","matchThreshold","rawStringGetter","lyrics","ChordLineIterator","chordLine","currBlockIndex","currCharIndex","blockBuffer","prependLyrics","elements","currentBlock","currentRawLyrics","charAt","skipChar","currentChar","nextChar","insertChar","atBlockBoundary","prevBlockIndex","deleteChar","i","splice","normalizeBlocks","orphanTab","replaceChordLineLyrics","newLyrics","currRawLyrics","newRawLyrics","diffs","diff_main","diff_cleanupSemanticLossless","iterator","diff","diffOperation","diffChar","DiffOperation","DIFF_EQUAL","skip","DIFF_INSERT","insert","DIFF_DELETE","delete","finish","newBlocks","block","push","removeOrphanedBlocksWithNoChords","blocks","addTabsToOrphanedBlocks","Collection","index","findIndex","elem","ids","indexOf","idable","indexOfBefore","newElem","idables","requiredFields","LabelSectionValidator","name","TimeSectionValidator","time","SectionValidator","optionalFields","label","section","ChordLineValidator","timeSectionSortFn","a","b","ChordLine","newChord","newName","removeSectionName","newTime","removeSectionTime","newPrevBlock","splitByTokenIndex","nextLine","totalLyricLength","remainingChars","lyricLength","splitCharIndex","blocksOfCurrLine","blocksOfNextLine","firstHalfBlock","splitByCharIndex","append","clone","chordBlocks","reduce","otherBlock","contentEquals","chordBlock","chordBlockElems","sectionFromLabel","MetadataValidator","title","composedBy","performedBy","SongSummaryTypes","owner","lastSavedAt","DateFromISOString","metadata","SongSummaryValidator","ListSongSummaryValidator","SongSummary","fields","jsonList","songSummaryList","ChordSongValidator","ChordSong","input_elements","cloneDeep","user","userID","prevLine","chordLines","lastBlockIndex","currLine","addAfter","otherLine","blockID","line","timeSections","sort","newTitle","newPerformedBy","newComposedBy","chordLineValidatedFields","fromJSONObject","lyricLines","lyricLine","fromLyrics","RootPaper","withStyles","theme","spacing","padding","minHeight","minWidth","Paper","About","Grid","data-testid","item","xs","Typography","variant","position","ErrorPage","rootPath","aboutPath","songPath","SongIDPath","mode","SongIDModePath","newSongPath","withNew","path","demoPath","DemoModePath","URL","PlayerTimeContext","React","createContext","createRef","PlayerTimeProvider","getPlayerTimeRef","useRef","Provider","children","validateValue","trim","BaseTrackValidator","SingleTrackValidator","track_type","url","SingleTrack","mapObject","source","dest","key","hasOwnProperty","oldValue","RangePosition","makeStemTrackValidator","emptyKeyMap","trackType","stringTypes","stem_urls","StemTrack","stems_urls","TwoStemEmptyObject","accompaniment","vocals","TwoStemTrackValidator","TwoStemTrack","FourStemEmptyObject","bass","drums","FourStemTrackValidator","FourStemTrack","FiveStemEmptyObject","piano","FiveStemTrackValidator","FiveStemTrack","textFieldValidation","validValue","error","helperText","LabelField","TextField","onChange","event","target","googleDriveExportLinkRegex","googleDriveViewerLinkRegex","ensureGoogleDriveCacheBusted","randID","isGoogleDriveExportLink","URLField","labelText","onKeyDown","metaKey","ctrlKey","results","convertViewLinkToExportLink","preventDefault","disabled","RowContainer","SingleTrackRow","alignItems","track","newLabel","updatedTrack","newURL","Button","onClick","onRemove","Divider","StemTrackRow","handleLabelChange","stemURLFields","stemKey","fieldLabel","urlFieldLabels","rows","createSubsequentRows","SplitStemTrackRow","currentlyProcessing","urlLabelText","original_url","SplitStemTrackValidator","SplitStemTrack","splitType","originalURL","FlexBox","justifyItems","Box","InlineBlockBox","UnstyledBox","AddNewRowBox","cursor","marginTop","marginBottom","marginLeft","UnstyledTypography","LoadedTrackListEditDialog","initialTrackList","trackList","tracks","useState","setTrackList","version","setVersion","addTrackMenuElement","setAddTrackMenuElement","bumpVersion","cloneTrackList","handleAddTrackMenu","currentTarget","handleCloseAddTrackMenu","handleAddSingleTrack","handleAddTrack","handleAddTwoStemTrack","handleAddFourStemTrack","handleAddFiveStemTrack","handleAddSplitStemTrack","newTrack","appendTrack","removeTrack","hasError","validate","trackChangeHandler","updateTrack","trackListInputs","rowKey","showAddTrackMenu","Fragment","Menu","open","anchorEl","onClose","MenuItem","DialogContent","variantMapping","body2","DialogActions","onSubmit","TrackListEditDialog","internalContent","trackListLoad","state","CircularProgress","tracklist","Dialog","maxWidth","DialogTitle","onRefresh","voidFn","unfocusedControls","playerRef","_current","newCurrent","playing","togglePlay","jumpBack","jumpForward","goToBeginning","skipBack","action","enabled","skipForward","currentTime","currentTimeFormatted","onProgress","onPlay","onPause","currentSectionLabel","playratePercentage","onPlayratePercentageChange","usePlayerControls","setPlaying","setCurrentTime","setPlayratePercentage","currentTimeRef","current","useContext","getCurrentTime","useEffect","seekTo","pauseAction","setTimeout","currentSectionIndex","forEach","currentSection","skipBackButton","previousSection","skipForwardButton","findNextSectionIndex","sectionIndex","nextSectionIndex","nextSectionToSkipTo","nextSection","nextNextSectionIndex","Duration","fromMillis","toFormat","playedSeconds","GlobalKeyListenerContext","useRegisterTopKeyListener","GlobalKeyListenerProvider","keyListeners","wrapListener","listener","isContentEditable","defaultPrevented","stopImmediatePropagation","wrappedListener","original","wrapped","window","addEventListener","entry","removeEventListener","removeAll","unshift","addAll","roundedTopCornersStyle","borderTopLeftRadius","borderTopRightRadius","roundedCornersStyle","borderRadius","controlPaneStyle","widthOfString","typographyVariant","phattestString","typography","font","fontFamily","fontSize","canvasContext","document","createElement","getContext","measurement","measureText","greyTextColour","grey","BottomRightBox","bottom","withBottomRightBox","boxShadow","TitleBar","justifyContent","PlayIcon","color","palette","primary","main","UnstyledPlayIcon","PauseIcon","secondary","UnstyledPauseIcon","ExpandButton","MicroPlayer","addTopKeyListener","removeKeyListener","tempJumpIcon","setTempJumpIcon","playerControls","show","handleKey","code","icon","playersLoaded","Slide","in","direction","Tooltip","tooltipMessage","BeginningIcon","SvgIcon","d","ForwardIcon","UnstyledButton","PrimaryButton","SecondaryButton","makeControlButton","child","tooltipMsg","ColoredButton","ControlButton","Play","Pause","JumpBack","JumpForward","SkipBack","SkipForward","Beginning","DecreasePlayrate","IncreasePlayrate","ControlGroupBox","alignContent","VerticalMiddleDivider","marginRight","ControlGroup","contents","orientation","flexItem","PlayrateBox","PercentageDisplay","PlayrateControl","playrate","Math","round","percentage","decreaseDisabled","increaseDisabled","SectionLabelTypography","SectionLabel","divider","ControlPaneBox","ControlPane","playPauseButton","onTogglePlay","onSkipBack","onJumpBack","onSkipForward","onJumpForward","onGoToBeginning","sectionLabel","SingleTrackPlayer","trackURL","useMemo","commonReactPlayerProps","ref","controls","playbackRate","progressInterval","height","config","file","forceAudio","currentTrack","focused","audioCtx","getAudioCtx","AudioContext","FullSizedBox","paddingLeft","paddingRight","VolumeSlider","Slider","withColoredButtonStyle","textTransform","opacity","DisabledButton","ColouredButtons","white","pink","yellow","purple","lightBlue","lightGreen","StemTrackControlPane","buttons","stemControls","stemButton","RenderedButton","buttonColour","onEnabledChanged","stopPropagation","volume","_event","onVolumeChanged","min","max","step","valueLabelDisplay","createToneNodes","stem","volumeNode","Tone","playerNode","audioBuffer","grainSize","overlap","chain","endNode","LoadedStemTrackPlayer","enqueueSnackbar","useSnackbar","toneNodes","stems","initialPlayerState","masterVolumePercentage","muted","volumePercentage","playerState","setPlayerState","playerStateRef","silentURL","createBuffer","sampleRate","arrayBuffer","audioBufferToWav","blob","Blob","createObjectURL","createEmptySongURL","duration","attributes","onVolumeChange","newPlayerState","minDuration","maxDuration","buffer","start","pause","adjustedToneTime","seconds","abs","stemState","stemIndex","nodes","stemVolume","stemVolumeDecibels","log10","mute","toneNode","sync","toDestination","unsync","disconnect","dispose","stemControlPane","stemInput","newVolume","PaddedBox","StemTrackPlayer","fetchState","setFetchState","fetchStateRef","fetchAudioBuffer","handleProgress","ky","timeout","onDownloadProgress","response","decodeAudioData","fetchAudioBufferWithProgress","progress","currentFetchState","newFetchState","details","loadedBytes","transferredBytes","totalBytes","then","loadPlayers","audioBufferPromises","bufferPromise","Promise","all","resolvedKeyBuffers","encounteredError","stemInputs","buttonSpecs","buttonSpec","audioBufferSearch","AudioBuffer","keyObject","total","stemTotal","loaded","formattedProgress","prettyBytes","progressBar","LinearProgress","percent","console","TrackPlayer","innerPlayer","Collapse","CenteredBox","TitleBarButton","usePaddingLeftStyle","Select","UnstyledSelect","FullPlayerContainer","MultiTrackPlayer","paddingLeftStyle","onMinimize","trackListEditButton","onOpenTrackEditDialog","trackRefreshButton","onSelectCurrentTrack","trackListPicker","items","tracklistLoad","disableUnderline","currentTrackIndex","titleBar","JamStation","playerVisibilityState","setPlayerVisibilityState","randomID","trackEditDialogState","setTrackEditDialogState","setLoadPlayers","setCurrentTrackIndex","trackListIsEmpty","collapsedButtonFn","expandFn","collapsedButtonClassName","openTrackEditDialog","closeTrackEditDialog","trackEditDialog","onTrackListChanged","showPlayer","useCallback","minimizePlayer","fullPlayer","useErrorMessage","showErrorMsg","msg","unknownError","showGenericErrorMsg","HTTPError","responseClone","json","backendHost","process","login","authToken","post","headers","Authorization","parsed","getSong","songID","getTrackList","getSongsForUser","createSong","song","updateSong","isUnsaved","put","updateTrackList","song_id","TrackValidator","TrackListValidator","TrackList","useErrorStyles","objectFit","ErrorImage","errorStyles","src","ErrorImg","alt","User","googleUser","getAuthResponse","id_token","listen","refreshAuthToken","call","getNewAuthToken","UserContext","validateResponse","TrackListProvider","showError","handleFetchedTracklist","fetchResult","fetchTrackList","handleTrackListChanged","isOwner","updateResult","refresh","normalizeNodeBoundary","offset","getPositionForNode","MIDDLE","offsetFromParent","findOffsetForNode","END","parentNode","nodeType","Node","TEXT_NODE","START","nodeValue","getPositionForTextNode","ELEMENT_NODE","childNodes","getPositionForElementNode","getSelectedLineIDs","selection","getSelection","rangeCount","range","wideRange","createRange","firstRange","getRangeAt","setStart","startContainer","startOffset","setEnd","endContainer","endOffset","rangeIndex","compareBoundaryPoints","Range","START_TO_START","END_TO_END","getWideSelectionBoundary","normalizeRange","lineElements","querySelectorAll","lineIDs","lineElementIndex","lineElement","intersectsNode","lineID","getAttribute","CopiedChordLinesValidator","copiedChordLines","useLineCopyHandler","lines","filter","includes","copyMsg","serialized","payload","JSON","stringify","serializeCopiedChordLines","clipboardData","setData","useLinePasteHandler","deserializedCopyResult","obj","deserializeCopiedChordLines","errorMsg","message","copiedLines","remove","RNDContext","createDndContext","backend","HTML5Backend","welpThingsBroke","untypesafeBackend","handleTopDragEnter","__original__handleTopDragEnter","e","altKeyPressed","handleTopDragOver","__original__handleTopDragOver","ChromaticScale","DragAndDrop","DNDElement","manager","dragDropManager","DndProvider","useDNDProviderElement","InteractionContext","startInteraction","endInteraction","useEditingState","editing","setEditing","startEdit","finishEdit","highlightedSpaceStyle","highlightedWordStyle","outlineStyle","borderStyle","borderColor","borderWidth","withCustomLyricSelector","selector","options","customLyricClassSelector","withCustomChordSymbolSelector","customChordSymbolClassSelector","dragOverChordLyricStyle","highlightedSpace","highlightedWord","customOutlineStyles","outline","spaceClassSelector","wordClassSelector","chordSymbolSelector","hoverChordLyricStyle","chordTargetSelector","customChordTargetClassSelector","withCustomChordTargetSelector","deserializeLyrics","tokenIndex","deserializeLyricStr","serializeLyrics","childNode","textContent","lyricTypographyProps","lyricStyle","createStyles","whiteSpace","wordSpacing","LyricTypography","LyricDisplay","customClassName","clsx","isEntirelySpace","ChordDropTarget","useDrop","accept","drop","droppedChord","monitor","dropResult","getDropResult","handled","isCopyAction","dropEffect","onDropped","sourceBlockID","collect","isOver","shallow","dropRef","RootRef","rootRef","ChordDroppable","childrenWithClassname","childElem","childClassName","dragOverClassName","hoverableClassName","cloneElement","ChordTypography","userSelect","ChordSymbol","endsWith","formattedChord","DraggableChordSymbol","useDrag","chordBlockID","dragRef","ControlledTextInput","useTheme","newValue","onFinish","browserInputProps","inputProps","paddingSpacing","background","classes","autoFocus","InputProps","inputRef","onBlur","onValueChange","placeholder","fullWidth","TextInput","setValue","InvisibleTypography","top","transform","ChordTargetBox","Token","lyricClassName","lyricBlock","invisibleTarget","ChordInput","borderBottom","borderBottomColor","borderBottomWidth","useFirstTokenStyle","dragOver","red","hoverable","dark","useNormalTokenStyle","Block","firstTokenStyle","normalTokenStyle","invisibleTargetForFirstToken","clickHandler","onBlockSplit","handleDragged","onChordChange","dropHandler","copyAction","onChordDragAndDrop","endEdit","lyricBlocks","lyricToken","invisibleTargetOption","onDragged","contained","tooltip","UnstyledTooltip","WithHoverMenu","hoverMenu","ButtonGroup","menuItems","menuItem","placement","interactive","contentEditableElement","contentEditableRef","selectionRange","contains","insertNodeAtSelection","deleteContents","insertNode","collapse","normalize","childIndex","parent","nodeBeforeSelection","targetNodeIndex","currNodeIndex","enterHandler","callback","specialBackspaceHandler","collapsed","firstChild","isSelectionAtBeginning","tabHandler","domLyricTab","shiftKey","domNode","backspaceHandler","parentElement","removeChild","directionKeyHandler","nodeIndex","childNodeIndex","childCount","textNode","nodeAfterSelection","setBaseAndExtent","useKeyDownHandler","sizeType","useDomLyricTab","handlers","specialEnterCallback","specialBackspaceCallback","enterCallback","handler","serializedLyricsFromRange","documentFragment","cloneContents","composeMultilinePaste","pasteContent","currentRange","beforeRange","afterRange","selectNodeContents","splitContentBySelection","beforeSelection","afterSelection","serializedLyricsForThisLine","remainingSerializedLyrics","handlePlainTextPaste","getData","linesOfText","split","flatMap","createTextNode","newPasteLines","isCollapsed","setStartAfter","setEndAfter","handleSelectionChange","InputTypography","useContentEditableStyle","pointerEvents","LyricInput","handleKeyDown","onSpecialBackspace","onSpecialEnter","handlePaste","pasteJSONCallback","pastePlainTextCallback","usePasteHandler","onJSONPaste","firstLine","restOfLines","onLyricOverflow","contentEditableStyle","lyricContent","focus","newRange","removeAllRanges","addRange","onPaste","suppressContentEditableWarning","UnstyledLyricInput","WithLyricInput","lyricEdit","replaceLyrics","onChangeLine","pasteOverflow","overflowContent","jsonPaste","specialBackspace","onMergeWithPreviousLine","specialEnter","onSplitLine","sectionLabelStyle","PlaceholderTypography","EditableTypography","editingState","setEditingState","editControl","onStartEdit","onEndEdit","editableLine","typographyProps","nonEditableLine","textAlign","UnstyledControlledTextInput","TimeInput","secondsToString","initialValue","inputBoxRef","decomposeTimeString","timeString","numericValue","Number","secondsPart","floor","validateTimeValue","minutesPart","isNaN","minutes","buttonAdornment","InputAdornment","IconButton","edge","currentGetPlayerTime","playerTimeSeconds","formattedValue","colonIndex","substring","formatValue","sanitizedValue","replaceAll","replace","sanitizeValue","startAdornment","UnstyledEditableTypography","shadows","WithSection","handleTimeChange","setSectionTime","childElement","timeInput","disableTooltipFocus","arrow","disableFocusListener","setSectionName","AtomicSelectionBox","BackspaceIcon","UnstyledBackspaceIcon","HighlightableBox","Line","removed","setRemoved","chordChange","setChord","blockSplit","splitBlock","onRemoveLine","withHoverMenu","basicLine","lineContent","editLabel","withLyricInput","yeetDirection","data-lineid","HighlightableGrid","UnstyledDivider","AddCircleOutlineIcon","light","UnstyledAddCircleOutlineIcon","NewLine","onAdd","justify","useUninteractiveStyle","UnstyledPaper","ChordPaperBody","interacting","setInteracting","handleCopy","handleLinePaste","handleBatchLineDelete","lineIDables","removeMultiple","interactionContextValue","uninteractiveStyle","handleAddLineToTop","newLine","addBeginning","notifySongChanged","handleRemoveLine","handleChangeLine","handleLyricOverflow","newChordLines","newLyricLine","handleJSONPaste","mergeWithPreviousLine","mergeLineWithPrevious","splitLine","onSongChanged","handleChordDND","destinationBlockID","findLineAndBlock","sourceLine","sourceBlock","destinationLine","destinationBlock","allowInteraction","paperClassName","onCopy","elevation","tabIndex","handleAddLine","firstNewLine","LastSavedAt","Date","setLastRefreshed","interval","setInterval","clearInterval","lastSaved","DateTime","fromJSDate","diffNow","as","toLocaleString","DATETIME_MED","relativeDescription","toRelative","timeDescription","UnstyledLastSavedAt","Header","paddingBottom","align","newComposer","newPerformer","paddingTop","useLoadMenuAction","onLoad","inputElem","filePickerHandler","fileList","files","fileReader","FileReader","onload","ev","ArrayBuffer","deserialize","readAsText","createFilePickerHandler","click","NoteClass","AllChromaticScale","C","C_sharp","Db","D","D_sharp","Eb","E","Fb","E_sharp","F","F_sharp","Gb","G","G_sharp","Ab","A","A_sharp","Bb","B","Cb","B_sharp","OriginalComponent","mapping","getNoteClass","note","UnusableKeys","UsableKeys","Center","MajorKeys","isMajorKey","MinorKeys","isMinorKey","transposeNote","fromKey","toKey","difference","from","to","fromNoteClass","getDifference","moveBy","moveUpSemitones","transposeSymbol","symbol","matchingNotes","scaleNote","startsWith","matchingNote","transposedNote","transposeChord","baseChord","FormControl","UnstyledFormControl","TransposeMenu","originalKey","transposedKey","keySelection","setKeySelection","keySelectChangeHandler","changedField","newSelectValue","newKeySelection","createKeySelect","currentKey","changeHandler","keyCollection","keyName","RadioGroup","FormControlLabel","control","InputLabel","htmlFor","transposeSong","SpeedDial","UnstyledSpeedDial","ChordPaperMenu","setOpen","transposeMenuOpen","setTransposeMenuOpen","offlineMode","setOfflineMode","loadAction","saveAction","deepClone","objectURL","anchor","download","href","revokeObjectURL","cloudSaveAction","history","useHistory","createNewSong","createResult","deserializeResult","log","deserializedSong","withID","withMode","useCloudCreateSong","useKonamiCode","onOpen","ariaLabel","SpeedDialAction","tooltipTitle","songClone","forkSong","useWhiteStyle","ChordPaper","whiteStyle","songChangeHandler","trackPlayer","scrollBackwardsKeys","scrollForwardKeys","PlayBlock","component","LabelTypography","TopMarginBox","PlayLine","lineComponent","labelElement","PlayContent","numberOfEmptyColumns","setNumberOfEmptyColumns","useRegisterKeyListener","addKeyListener","numberOfColumnsPerPage","displaySettings","columnMargin","windowWidth","useWindowWidth","columnWidth","snapThreshold","scrollPage","forward","nextPos","scrollX","scrollDelta","scrollType","distanceFromLastColumn","scrollTo","behavior","scrollForward","scrollBackward","handleLeftClick","button","handleRightClick","ColumnedPaper","columnGap","columnRuleWidth","columnRuleStyle","columnRuleColor","columns","MarginBox","FullHeightBox","pageBreakInside","emptyColumns","cols","isScrollBackwardsKey","isScrollForwardsKey","numberOfColumnsInLastPage","body","scrollWidth","nextNumberOfEmptyColumns","onMouseDown","onContextMenu","FormLabel","UnstyledFormLabel","RadioLabelTypography","DisplaySettingsDialog","numberOfColumns","defaultSettings","toString","settings","setSettings","validateNumber","strValue","convertedNumber","validateInt","convertedInteger","validatedSettings","numberOfColumnsResults","fontSizeResults","columnMarginResults","inputSpecs","field","adornment","validationErrorPropsFn","val","makeInput","spec","textFieldProps","defaultValue","newSettings","endAdornment","scrollTypeToggle","MenuIcon","UnstyledMoreVertIcon","PlayMenu","displaySettingsOpen","setDisplaySettingsOpen","onDisplaySettingsChange","FabProps","onMouseDownCapture","onExit","useTransparentStyle","setDisplaySettings","transparentStyle","onEdit","ThemeProvider","createMuiTheme","fontWeightRegular","transformToFC","editPath","playPath","exact","withSongContext","setSong","propsWithoutInitialSong","originalComponentProps","DemoSong","SongRouter","Demo","loadSongResults","NeverGonnaGiveYouPlasticLove","LoadSongDialog","wrapInDialog","summaries","summarySortFn","loadSummaries","summariesResult","fromJSONList","summaryListItem","summary","songLink","detailElement","detail","ListItem","ListItemText","primaryTypographyProps","secondaryTypographyProps","List","CheckCircleIcon","success","UnstyledCheckCircleIcon","Badge","UnstyledBadge","Playground","initialSong","setFinish","checkExpected","updatedSong","expectedSong","badgeContent","invisible","LyricsTypography","LineBreak","AddChord","AddLine","ChordPositioning","example","CopyAndPaste","body1","DragAndDropChord","EditChord","EditLyrics","Instrumental","tabExample","MergeLine","PasteLyrics","RemoveChord","RemoveLine","Preamble","Starting","allExercises","route","PlayArrowIcon","UnstyledPlayArrowIcon","Fab","UnstyledFab","Tutorial","matchEntry","exerciseEntry","exerciseIndex","nextButton","nextExercise","useSigninStyles","Login","gapiLoaded","setGapiLoaded","signinStyles","userNotSignedIn","gapi","load","handleGoogleLogin","currentUser","idToken","loginResult","parsedUser","onUserChanged","auth2","init","client_id","scope","authClient","attachClickHandler","getElementById","failureReason","isSignedIn","SigninIcon","userDescription","withPointerStyle","UnstyledMenuIcon","CloseIcon","UnstyledCloseIcon","Drawer","flexDirection","UnstyledDrawer","VerticalGridItem","TitleGrid","TitleName","CollapsedMenuSurface","FullHeightGrid","useFillerStyle","flexGrow","SideMenu","expanded","setExpanded","showLoadSongsDialog","setShowLoadSongsDialog","learnSubmenuOpen","setLearnSubMenuOpen","fillerStyle","learnClickHandler","linkStyle","textDecoration","collapsedMenu","expandedMenu","ListItemIcon","exerciseLinks","exerciseRoute","inset","tutorialMenu","InternalFetcher","fetchSong","thickness","SongFetcher","useParams","PaddedTypography","Version","contrastText","SnackbarProvider","variantSuccess","UnstyledSnackbarProvider","AppLayout","backgroundImage","Background","MainSong","dirtyRef","shouldSave","unloadMessageFn","returnValue","handleError","saveIfChanged","isOnline","save","isEditMode","location","pathname","AppContent","setUser","useLocation","loadSongPath","isFullScreen","isPlayMode","routes","newUser","App","titleTemplate","defaultTitle","GlobalKeyListener","Boolean","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6e1a67e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/symphony.4ca23f9c.png\";","module.exports = __webpack_public_path__ + \"static/media/error.c3a3f87e.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/google_signin.c386978e.svg\";","import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\n\n// for data attribute\nexport const dataSetTabName = \"lyrictabtype\";\nexport const dataAttributeTabName: \"data-lyrictabtype\" = \"data-lyrictabtype\";\n\nexport enum SizedTab {\n    SmallTab,\n    MediumTab,\n    LargeTab,\n}\n\nexport interface LyricTabType {\n    sizedTab: SizedTab;\n    serializedStr: \"\\ue100\" | \"\\ue200\" | \"\\ue400\";\n    [dataAttributeTabName]: \"1\" | \"2\" | \"4\";\n}\n\nexport const allTabTypes: LyricTabType[] = [\n    {\n        sizedTab: SizedTab.SmallTab,\n        serializedStr: \"\\ue100\",\n        [dataAttributeTabName]: \"1\",\n    },\n    {\n        sizedTab: SizedTab.MediumTab,\n        serializedStr: \"\\ue200\",\n        [dataAttributeTabName]: \"2\",\n    },\n    {\n        sizedTab: SizedTab.LargeTab,\n        serializedStr: \"\\ue400\",\n        [dataAttributeTabName]: \"4\",\n    },\n];\n\nexport const findTabType = <T extends keyof LyricTabType>(\n    attrName: T,\n    attr: LyricTabType[T]\n): LyricTabType => {\n    const tabType: LyricTabType | undefined = allTabTypes.find(\n        (tabType: LyricTabType) => tabType[attrName] === attr\n    );\n\n    if (tabType === undefined) {\n        throw new Error(`Unexpectedly can't find tab type by ${attrName}`);\n    }\n\n    return tabType;\n};\n\nexport const isValidTabValue = <T extends keyof LyricTabType>(\n    attrName: T,\n    attr: any\n): attr is LyricTabType[T] => {\n    const tabType: LyricTabType | undefined = allTabTypes.find(\n        (tabType: LyricTabType) => tabType[attrName] === attr\n    );\n\n    return tabType !== undefined;\n};\n\nexport const lyricTabTypeOfDOMNode = (node: Node): SizedTab | null => {\n    if (node instanceof HTMLElement && node.tagName.toLowerCase() === \"span\") {\n        const dataAttribute = node.dataset[dataSetTabName];\n\n        if (isValidTabValue(dataAttributeTabName, dataAttribute)) {\n            const tabType = findTabType(dataAttributeTabName, dataAttribute);\n            return tabType.sizedTab;\n        }\n    }\n\n    return null;\n};\n\nconst sizeBasis = 1.5;\n\nconst sizeStyleFn = (size: number) => {\n    return {\n        root: {\n            display: \"inline-block\",\n            width: `${sizeBasis * size}em`,\n        },\n    };\n};\n\nconst makeSizeStyle = (size: number) => {\n    return makeStyles(sizeStyleFn(size));\n};\n\nconst makeSizeMap = {\n    [SizedTab.SmallTab]: makeSizeStyle(1),\n    [SizedTab.MediumTab]: makeSizeStyle(2),\n    [SizedTab.LargeTab]: makeSizeStyle(4),\n};\n\nconst useSizeMap = () => {\n    // listing explicitly instead of using a loop to let\n    // typescript know the available keys\n    return {\n        [SizedTab.SmallTab]: makeSizeMap[SizedTab.SmallTab](),\n        [SizedTab.MediumTab]: makeSizeMap[SizedTab.MediumTab](),\n        [SizedTab.LargeTab]: makeSizeMap[SizedTab.LargeTab](),\n    };\n};\n\nconst makeEditingSizeStyle = (size: number) => {\n    const style = sizeStyleFn(size);\n\n    return makeStyles({\n        root: {\n            backgroundColor: blueGrey[100],\n            \"&:before\": {\n                content: '\"\\\\a0\"',\n            },\n            margin: \"0.05em\",\n            ...style.root,\n        },\n    });\n};\n\nconst makeEditingSizeMap = {\n    [SizedTab.SmallTab]: makeEditingSizeStyle(1),\n    [SizedTab.MediumTab]: makeEditingSizeStyle(2),\n    [SizedTab.LargeTab]: makeEditingSizeStyle(4),\n};\n\nconst useEditingSizeMap = () => {\n    // listing explicitly instead of using a loop to let\n    // typescript know the available keys\n    return {\n        [SizedTab.SmallTab]: makeEditingSizeMap[SizedTab.SmallTab](),\n        [SizedTab.MediumTab]: makeEditingSizeMap[SizedTab.MediumTab](),\n        [SizedTab.LargeTab]: makeEditingSizeMap[SizedTab.LargeTab](),\n    };\n};\n\nexport type DomLyricTabFn = (sizeType: SizedTab) => Node;\n\nexport const useDomLyricTab = (): DomLyricTabFn => {\n    const sizeMap = useEditingSizeMap();\n\n    return (sizeType: SizedTab): Node => {\n        const node = document.createElement(\"span\");\n        node.className = sizeMap[sizeType].root;\n        node.contentEditable = \"false\";\n\n        const tabType = findTabType(\"sizedTab\", sizeType);\n        node.dataset[dataSetTabName] = tabType[dataAttributeTabName];\n\n        return node;\n    };\n};\n\ninterface TabProps {\n    type: SizedTab;\n    edit: boolean;\n}\n\nconst Tab: React.FC<TabProps> = (props: TabProps): JSX.Element => {\n    const normalSizeMap = useSizeMap();\n    const editingSizeMap = useEditingSizeMap();\n\n    const sizeMap = props.edit ? editingSizeMap : normalSizeMap;\n    const tabType = findTabType(\"sizedTab\", props.type);\n\n    return (\n        <span\n            className={sizeMap[props.type].root}\n            contentEditable=\"false\"\n            data-lyrictabtype={tabType[dataAttributeTabName]}\n        ></span>\n    );\n};\n\nexport default Tab;\n","export const isWhitespace = (s: string): boolean => {\n    return /^\\s+$/.test(s);\n};\n\nexport const inflatingWhitespace = (): string => {\n    return \"\\u00A0\";\n};\n\nexport const inflateIfEmpty = (value: string) => {\n    if (isWhitespace(value)) {\n        return inflatingWhitespace();\n    }\n\n    return value;\n};\n","import * as iots from \"io-ts\";\nimport { allTabTypes, isValidTabValue } from \"../../components/lyrics/Tab\";\nimport { isWhitespace } from \"../Whitespace\";\n\nexport const LyricValidator = iots.type({\n    serializedLyric: iots.string,\n});\n\nexport type LyricValidatedFields = iots.TypeOf<typeof LyricValidator>;\n\nconst tokenizationRegex: RegExp = ((): RegExp => {\n    let regex = \"\";\n    // add the regex for each special tab \"character\"\n    for (const tabType of allTabTypes) {\n        regex += `(${tabType.serializedStr})|`;\n    }\n\n    // match each word (with apostrophe inclusive for words like I'm)\n    // and all other non-words\n    regex += `(\\\\w|')+|[^w]`;\n    regex = `(${regex})`;\n\n    return new RegExp(regex, \"g\");\n})();\n\nexport class Lyric {\n    private serializedLyric: string;\n\n    constructor(serializedLyrics: string) {\n        this.serializedLyric = serializedLyrics;\n    }\n\n    get<T>(transformFn: (serializedLyrics: string) => T): T {\n        return transformFn(this.serializedLyric);\n    }\n\n    tokenize(): Lyric[] {\n        const matches = this.serializedLyric.match(tokenizationRegex);\n        if (matches === null) {\n            return [];\n        }\n\n        return matches.map((rawStr: string) => new Lyric(rawStr));\n    }\n\n    append(other: Lyric | string) {\n        if (typeof other === \"string\") {\n            this.serializedLyric += other;\n        } else {\n            this.serializedLyric += other.serializedLyric;\n        }\n    }\n\n    isEmpty(): boolean {\n        return this.serializedLyric === \"\";\n    }\n\n    isEntirelySpace(): boolean {\n        return (\n            isWhitespace(this.serializedLyric) ||\n            isValidTabValue(\"serializedStr\", this.serializedLyric)\n        );\n    }\n\n    isEqual(other: Lyric): boolean {\n        return this.serializedLyric === other.serializedLyric;\n    }\n\n    static join(arr: Lyric[], joinChar: string): Lyric {\n        const rawLyricStrs: string[] = arr.map((container: Lyric) => {\n            return container.serializedLyric;\n        });\n\n        return new Lyric(rawLyricStrs.join(joinChar));\n    }\n\n    static fromValidatedFields(validatedFields: LyricValidatedFields): Lyric {\n        return new Lyric(validatedFields.serializedLyric);\n    }\n}\n","import { Either, isLeft, left, parseJSON, right } from \"fp-ts/lib/Either\";\nimport * as iots from \"io-ts\";\nimport lodash from \"lodash\";\nimport shortid from \"shortid\";\nimport { IDable } from \"./Collection\";\nimport { Lyric, LyricValidator } from \"./Lyric\";\n\ninterface ChordBlockConstructorParams {\n    chord: string;\n    lyric: Lyric;\n}\n\nexport const ChordBlockValidator = iots.type({\n    chord: iots.string,\n    lyric: LyricValidator,\n    type: iots.literal(\"ChordBlock\"),\n});\n\nexport type ChordBlockValidatedFields = iots.TypeOf<typeof ChordBlockValidator>;\n\nexport class ChordBlock implements IDable<ChordBlock> {\n    id: string;\n    chord: string;\n    lyric: Lyric;\n    type: \"ChordBlock\";\n\n    constructor({ chord, lyric }: ChordBlockConstructorParams) {\n        this.id = shortid.generate();\n        this.chord = chord;\n        this.lyric = lyric;\n        this.type = \"ChordBlock\";\n    }\n\n    toJSON(): object {\n        return lodash.omit(this, \"id\");\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordBlockValidatedFields\n    ): ChordBlock {\n        const unionLyric = validatedFields.lyric;\n        const serializedLyric = Lyric.fromValidatedFields(unionLyric);\n\n        return new ChordBlock({\n            chord: validatedFields.chord,\n            lyric: serializedLyric,\n        });\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordBlock> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordBlockValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Block object\"));\n        }\n\n        const unionLyric = validationResult.right.lyric;\n        const serializedLyric = Lyric.fromValidatedFields(unionLyric);\n\n        return right(\n            new ChordBlock({\n                chord: validationResult.right.chord,\n                lyric: serializedLyric,\n            })\n        );\n    }\n\n    get lyricTokens(): Lyric[] {\n        return this.lyric.tokenize();\n    }\n\n    // splits a block, and returns the block before\n    // e.g.\n    // {id:\"A\", chord: \"B7\", lyric:\"my dear we're\"}\n    // splitBlock(4) =>\n    // {id:\"B\", chord: \"B7\", lyric:\"my dear \"}\n    // {id:\"A\", chord: \"\", \"we're\"}\n    splitByTokenIndex(splitIndex: number): ChordBlock {\n        if (splitIndex === 0) {\n            throw new Error(\"Split index can't be zero\");\n        }\n\n        const tokens = this.lyricTokens;\n        const prevBlockLyricTokens: Lyric[] = tokens.slice(0, splitIndex);\n        const thisBlockLyricTokens: Lyric[] = tokens.slice(splitIndex);\n\n        const prevBlock: ChordBlock = new ChordBlock({\n            chord: this.chord,\n            lyric: Lyric.join(prevBlockLyricTokens, \"\"),\n        });\n\n        this.chord = \"\";\n        this.lyric = Lyric.join(thisBlockLyricTokens, \"\");\n\n        return prevBlock;\n    }\n\n    splitByCharIndex(splitIndex: number): ChordBlock {\n        if (splitIndex === 0) {\n            return new ChordBlock({ chord: \"\", lyric: new Lyric(\"\") });\n        }\n\n        const lyricString: string = this.lyric.get((s: string) => s);\n        const prevBlockLyrics: Lyric = new Lyric(\n            lyricString.slice(0, splitIndex)\n        );\n        const thisBlockLyrics: Lyric = new Lyric(lyricString.slice(splitIndex));\n\n        const prevBlock: ChordBlock = new ChordBlock({\n            chord: this.chord,\n            lyric: prevBlockLyrics,\n        });\n\n        this.chord = \"\";\n        this.lyric = thisBlockLyrics;\n\n        return prevBlock;\n    }\n\n    contentEquals(other: ChordBlock): boolean {\n        return this.chord === other.chord && this.lyric.isEqual(other.lyric);\n    }\n\n    isEmpty(): boolean {\n        return this.chord === \"\" && this.lyric.isEmpty();\n    }\n\n    lyricLength(): number {\n        const lyricString = this.lyric.get((s: string) => s);\n        return lyricString.length;\n    }\n}\n","import { ChordLine } from \"./ChordLine\";\nimport { ChordBlock } from \"./ChordBlock\";\nimport { DiffMatchPatch, DiffOperation } from \"diff-match-patch-typescript\";\nimport { Lyric } from \"./Lyric\";\nimport { findTabType, SizedTab } from \"../../components/lyrics/Tab\";\n\nconst differ: DiffMatchPatch = (() => {\n    const dmp = new DiffMatchPatch();\n    dmp.diffTimeout = 0;\n    dmp.matchThreshold = 0;\n    return dmp;\n})();\n\n// we know what we're doing here - the raw serialized string is to be compared\nconst rawStringGetter = (lyrics: string) => lyrics;\n\nclass ChordLineIterator {\n    private chordLine: ChordLine;\n    private currBlockIndex: number;\n    private currCharIndex: number;\n    private blockBuffer: string[];\n    private prependLyrics: string;\n\n    constructor(chordLine: ChordLine) {\n        this.chordLine = chordLine;\n\n        this.currBlockIndex = 0;\n        this.currCharIndex = 0;\n\n        this.blockBuffer = chordLine.elements.map(() => \"\");\n        this.prependLyrics = \"\";\n    }\n\n    private atBlockBoundary(): boolean {\n        return this.currCharIndex === 0;\n    }\n\n    private currentBlock(): ChordBlock {\n        return this.chordLine.elements[this.currBlockIndex];\n    }\n\n    private currentRawLyrics(): string {\n        return this.currentBlock().lyric.get(rawStringGetter);\n    }\n\n    private currentChar(): string {\n        return this.currentRawLyrics().charAt(this.currCharIndex);\n    }\n\n    private nextChar(): void {\n        this.currCharIndex += 1;\n\n        if (this.currCharIndex >= this.currentRawLyrics().length) {\n            this.currBlockIndex += 1;\n            this.currCharIndex = 0;\n        }\n    }\n\n    skip(skipChar: string): void {\n        if (this.currentChar() !== skipChar) {\n            throw new Error(\"Mismatched characters when skipping\");\n        }\n\n        this.blockBuffer[this.currBlockIndex] += skipChar;\n\n        this.nextChar();\n    }\n\n    insert(insertChar: string): void {\n        if (!this.atBlockBoundary()) {\n            this.blockBuffer[this.currBlockIndex] += insertChar;\n        } else {\n            // bias towards inserting  at the end of the previous block if between two blocks\n            // since chords are aligned to the beginning of the block, we don't want to shift the lyrics\n            // inside a block unnecessarily\n            const prevBlockIndex = this.currBlockIndex - 1;\n            if (prevBlockIndex >= 0) {\n                this.blockBuffer[prevBlockIndex] += insertChar;\n            } else {\n                this.prependLyrics += insertChar;\n            }\n        }\n    }\n\n    delete(deleteChar: string): void {\n        if (this.currentChar() !== deleteChar) {\n            throw new Error(\"Mismatched characters when deleting\");\n        }\n\n        this.nextChar();\n    }\n\n    finish(): void {\n        for (let i = 0; i < this.chordLine.elements.length; i++) {\n            this.chordLine.elements[i].lyric = new Lyric(this.blockBuffer[i]);\n        }\n\n        if (this.prependLyrics !== \"\") {\n            this.chordLine.elements.splice(\n                0,\n                0,\n                new ChordBlock({\n                    chord: \"\",\n                    lyric: new Lyric(this.prependLyrics),\n                })\n            );\n        }\n\n        this.chordLine.normalizeBlocks();\n    }\n}\n\nconst removeOrphanedBlocksWithNoChords = (chordLine: ChordLine): void => {\n    const newBlocks: ChordBlock[] = [];\n\n    for (const block of chordLine.elements) {\n        if (!block.lyric.isEmpty() || block.chord !== \"\") {\n            newBlocks.push(block);\n        }\n    }\n\n    chordLine.elements = newBlocks;\n};\n\nconst orphanTab: string = findTabType(\"sizedTab\", SizedTab.SmallTab)\n    .serializedStr;\n\nconst addTabsToOrphanedBlocks = (chordLine: ChordLine): void => {\n    const blocks: ChordBlock[] = chordLine.elements;\n    for (let i = 0; i < blocks.length; i++) {\n        const block = blocks[i];\n        if (!block.lyric.isEmpty()) {\n            continue;\n        }\n\n        block.lyric = new Lyric(orphanTab);\n    }\n};\n\nexport const replaceChordLineLyrics = (\n    chordLine: ChordLine,\n    newLyrics: Lyric\n): void => {\n    const currRawLyrics = chordLine.lyrics.get(rawStringGetter);\n    const newRawLyrics = newLyrics.get(rawStringGetter);\n\n    const diffs = differ.diff_main(currRawLyrics, newRawLyrics);\n    differ.diff_cleanupSemanticLossless(diffs);\n\n    const iterator = new ChordLineIterator(chordLine);\n\n    for (const diff of diffs) {\n        const diffOperation = diff[0];\n        for (const diffChar of diff[1]) {\n            switch (diffOperation) {\n                case DiffOperation.DIFF_EQUAL: {\n                    iterator.skip(diffChar);\n                    break;\n                }\n                case DiffOperation.DIFF_INSERT: {\n                    iterator.insert(diffChar);\n                    break;\n                }\n                case DiffOperation.DIFF_DELETE: {\n                    iterator.delete(diffChar);\n                    break;\n                }\n            }\n        }\n    }\n\n    iterator.finish();\n\n    removeOrphanedBlocksWithNoChords(chordLine);\n    addTabsToOrphanedBlocks(chordLine);\n};\n","// use the name of the class the ID is describing for T\n// e.g. IDable<Person>\nexport interface IDable<T extends IDable<T>> {\n    id: string;\n    type: T[\"type\"];\n}\n\nexport abstract class Collection<T extends IDable<T>> {\n    elements: T[];\n\n    constructor(elements?: T[]) {\n        if (elements !== undefined) {\n            this.elements = elements; //TODO: consider whether this needs to be a shallow copy\n        } else {\n            this.elements = [];\n        }\n    }\n\n    protected indexOf(id: string): number {\n        const index = this.elements.findIndex((elem: T) => elem.id === id);\n\n        if (index < 0) {\n            throw new Error(\"Can't find element inside collection\");\n        }\n\n        return index;\n    }\n\n    protected multiIndexOf(ids: string[]): number[] {\n        return ids.map(this.indexOf);\n    }\n\n    abstract clone(): Collection<T>;\n\n    // adds a element after the specified id\n    addAfter(idable: IDable<T>, ...newElem: T[]): void {\n        const indexOfBefore = this.indexOf(idable.id);\n        this.elements.splice(indexOfBefore + 1, 0, ...newElem);\n    }\n\n    addBeginning(...newElem: T[]): void {\n        this.elements.splice(0, 0, ...newElem);\n    }\n\n    remove(idable: IDable<T>): T {\n        const index = this.indexOf(idable.id);\n        const removed = this.elements.splice(index, 1);\n        return removed[0];\n    }\n\n    removeMultiple(idables: IDable<T>[]): T[] {\n        const removed = idables.map(\n            (idable: IDable<T>): T => {\n                const index = this.indexOf(idable.id);\n                const removedElement = this.elements.splice(index, 1);\n                return removedElement[0];\n            }\n        );\n\n        return removed;\n    }\n\n    get(idable: IDable<T>): T {\n        const index = this.indexOf(idable.id);\n        return this.elements[index];\n    }\n}\n","import { Either, isLeft, left, parseJSON, right } from \"fp-ts/lib/Either\";\nimport * as iots from \"io-ts\";\nimport lodash from \"lodash\";\nimport shortid from \"shortid\";\nimport {\n    ChordBlock,\n    ChordBlockValidatedFields,\n    ChordBlockValidator,\n} from \"./ChordBlock\";\nimport { replaceChordLineLyrics } from \"./ChordLinePatcher\";\nimport { Collection, IDable } from \"./Collection\";\nimport { Lyric } from \"./Lyric\";\n\nconst requiredFields = iots.type({\n    elements: iots.array(ChordBlockValidator),\n    type: iots.literal(\"ChordLine\"),\n});\n\nconst LabelSectionValidator = iots.type({\n    type: iots.literal(\"label\"),\n    name: iots.string,\n});\n\nconst TimeSectionValidator = iots.type({\n    type: iots.literal(\"time\"),\n    name: iots.string,\n    time: iots.number,\n});\n\nconst SectionValidator = iots.union([\n    LabelSectionValidator,\n    TimeSectionValidator,\n]);\n\nconst optionalFields = iots.partial({\n    label: iots.string,\n    section: SectionValidator,\n});\n\nexport const ChordLineValidator = iots.intersection([\n    requiredFields,\n    optionalFields,\n]);\n\nexport type LabelSection = iots.TypeOf<typeof LabelSectionValidator>;\nexport type TimeSection = iots.TypeOf<typeof TimeSectionValidator>;\nexport type Section = iots.TypeOf<typeof SectionValidator>;\nexport type ChordLineValidatedFields = iots.TypeOf<typeof ChordLineValidator>;\n\nexport const timeSectionSortFn = (a: TimeSection, b: TimeSection): number => {\n    if (a.time < b.time) {\n        return -1;\n    }\n\n    if (a.time > b.time) {\n        return 1;\n    }\n\n    return 0;\n};\n\nexport class ChordLine extends Collection<ChordBlock>\n    implements IDable<ChordLine> {\n    id: string;\n    type: \"ChordLine\";\n    section?: Section;\n\n    constructor(elements?: ChordBlock[], section?: Section) {\n        if (elements === undefined) {\n            elements = [new ChordBlock({ chord: \"\", lyric: new Lyric(\"\") })];\n        }\n\n        super(elements);\n\n        this.id = shortid.generate();\n        this.type = \"ChordLine\";\n        this.section = section;\n    }\n\n    static sectionFromLabel(label?: string): Section | undefined {\n        if (label === undefined) {\n            return undefined;\n        }\n\n        return {\n            type: \"label\",\n            name: label,\n        };\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordLineValidatedFields\n    ): ChordLine {\n        const chordBlockElems: ChordBlock[] = validatedFields.elements.map(\n            (value: ChordBlockValidatedFields) => {\n                return ChordBlock.fromValidatedFields(value);\n            }\n        );\n\n        let section: Section | undefined = validatedFields.section;\n        if (section === undefined) {\n            section = this.sectionFromLabel(validatedFields.label);\n        }\n\n        return new ChordLine(chordBlockElems, section);\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordLine> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordLineValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Line object\"));\n        }\n\n        return right(this.fromValidatedFields(validationResult.right));\n    }\n\n    static fromLyrics(lyrics: Lyric): ChordLine {\n        const block = new ChordBlock({\n            chord: \"\",\n            lyric: lyrics,\n        });\n\n        return new ChordLine([block]);\n    }\n\n    get chordBlocks(): ChordBlock[] {\n        return this.elements;\n    }\n\n    get lyrics(): Lyric {\n        const lyricTokens = this.chordBlocks.map(\n            (chordBlock: ChordBlock) => chordBlock.lyric\n        );\n\n        return Lyric.join(lyricTokens, \"\");\n    }\n\n    replaceLyrics(newLyrics: Lyric): void {\n        if (this.lyrics.isEqual(newLyrics)) {\n            return;\n        }\n\n        replaceChordLineLyrics(this, newLyrics);\n    }\n\n    setChord(idable: IDable<ChordBlock>, newChord: string): void {\n        const index = this.indexOf(idable.id);\n        this.elements[index].chord = newChord;\n        this.normalizeBlocks();\n    }\n\n    removeSectionName(): boolean {\n        if (this.section === undefined) {\n            return false;\n        }\n\n        this.section = undefined;\n\n        return true;\n    }\n\n    setSectionName(newName: string): boolean {\n        if (newName === \"\") {\n            return this.removeSectionName();\n        }\n\n        if (this.section === undefined) {\n            this.section = {\n                type: \"label\",\n                name: newName,\n            };\n\n            return true;\n        }\n\n        this.section.name = newName;\n        return true;\n    }\n\n    removeSectionTime(): boolean {\n        if (this.section === undefined) {\n            return false;\n        }\n\n        this.section = {\n            type: \"label\",\n            name: this.section.name,\n        };\n\n        return true;\n    }\n\n    setSectionTime(newTime: number | null): boolean {\n        if (newTime === null) {\n            return this.removeSectionTime();\n        }\n\n        const name = this.section !== undefined ? this.section.name : \"\";\n\n        this.section = {\n            type: \"time\",\n            name: name,\n            time: newTime,\n        };\n\n        return true;\n    }\n\n    splitBlock(idable: IDable<ChordBlock>, splitIndex: number): void {\n        const index = this.indexOf(idable.id);\n        const block = this.elements[index];\n        const newPrevBlock = block.splitByTokenIndex(splitIndex);\n        this.elements.splice(index, 0, newPrevBlock);\n    }\n\n    splitByCharIndex(splitIndex: number): ChordLine {\n        if (splitIndex === 0) {\n            const nextLine = new ChordLine(this.elements);\n            this.elements = [\n                new ChordBlock({ chord: \"\", lyric: new Lyric(\"\") }),\n            ];\n            return nextLine;\n        }\n\n        const totalLyricLength = this.lyrics.get((s: string) => s).length;\n        if (splitIndex >= totalLyricLength) {\n            return new ChordLine();\n        }\n\n        const [splitCharIndex, i] = (() => {\n            let remainingChars = splitIndex;\n            for (let i = 0; i < this.elements.length; i++) {\n                const block = this.elements[i];\n                const lyricLength = block.lyricLength();\n\n                if (remainingChars - lyricLength >= 0) {\n                    remainingChars -= lyricLength;\n                    continue;\n                }\n\n                return [remainingChars, i];\n            }\n\n            throw new Error(\n                \"Unexpected: shouldn't have walked this many characters\"\n            );\n        })();\n\n        const blocksOfCurrLine = this.elements.slice(0, i);\n        let blocksOfNextLine: ChordBlock[] = [];\n        if (splitCharIndex > 0) {\n            const block = this.elements[i];\n            const firstHalfBlock = block.splitByCharIndex(splitCharIndex);\n            blocksOfCurrLine.push(firstHalfBlock);\n            blocksOfNextLine.push(block);\n            blocksOfNextLine.push(...this.elements.slice(i + 1));\n        } else {\n            blocksOfNextLine = this.elements.slice(i);\n        }\n\n        this.elements = blocksOfCurrLine;\n\n        return new ChordLine(blocksOfNextLine);\n    }\n\n    // passes through every block to ensure that blocks without chords exist (except for the first)\n    normalizeBlocks(): void {\n        const newBlocks: ChordBlock[] = [];\n\n        for (let i = 0; i < this.elements.length; i++) {\n            const block = this.elements[i];\n\n            if (block.chord === \"\" && newBlocks.length > 0) {\n                const lastIndex = newBlocks.length - 1;\n                newBlocks[lastIndex].lyric.append(block.lyric);\n            } else {\n                newBlocks.push(block);\n            }\n        }\n\n        // avoid rejiggering the data if it's a no-op\n        if (newBlocks.length !== this.elements.length) {\n            this.elements = newBlocks;\n        }\n    }\n\n    clone(): ChordLine {\n        const clone = new ChordLine(this.elements, this.section);\n        clone.id = this.id;\n        return clone;\n    }\n\n    toJSON(): object {\n        return lodash.omit(this, \"id\");\n    }\n\n    contentEquals(other: ChordLine): boolean {\n        if (this.chordBlocks.length !== other.chordBlocks.length) {\n            return false;\n        }\n\n        if (!lodash.isEqual(this.section, other.section)) {\n            return false;\n        }\n\n        const reducer = (\n            isEqual: boolean,\n            value: ChordBlock,\n            index: number\n        ): boolean => {\n            if (!isEqual) {\n                return false;\n            }\n\n            const otherBlock = other.chordBlocks[index];\n            if (!value.contentEquals(otherBlock)) {\n                return false;\n            }\n\n            return true;\n        };\n\n        return this.chordBlocks.reduce(reducer, true);\n    }\n\n    isEmpty(): boolean {\n        if (this.chordBlocks.length > 1) {\n            return false;\n        }\n\n        if (this.chordBlocks.length === 0) {\n            return true;\n        }\n\n        return this.chordBlocks[0].isEmpty();\n    }\n}\n","import { Either, isLeft, left, parseJSON, right } from \"fp-ts/lib/Either\";\nimport * as iots from \"io-ts\";\nimport { DateFromISOString } from \"io-ts-types\";\nimport lodash from \"lodash\";\nimport { User } from \"../../components/user/userContext\";\nimport { ChordBlock } from \"./ChordBlock\";\nimport {\n    ChordLine,\n    ChordLineValidatedFields,\n    ChordLineValidator,\n    TimeSection,\n    timeSectionSortFn,\n} from \"./ChordLine\";\nimport { Collection, IDable } from \"./Collection\";\nimport { Lyric } from \"./Lyric\";\n\nconst MetadataValidator = iots.type({\n    title: iots.string,\n    composedBy: iots.string,\n    performedBy: iots.string,\n});\n\ntype Metadata = iots.TypeOf<typeof MetadataValidator>;\n\nconst SongSummaryTypes = {\n    id: iots.string,\n    owner: iots.string,\n    lastSavedAt: iots.union([DateFromISOString, iots.null]),\n    metadata: MetadataValidator,\n};\n\nconst SongSummaryValidator = iots.type(SongSummaryTypes);\n\nconst ListSongSummaryValidator = iots.array(SongSummaryValidator);\n\ntype SongSummaryValidatedFields = iots.TypeOf<typeof SongSummaryValidator>;\n\nexport class SongSummary implements SongSummaryValidatedFields {\n    id: string;\n    owner: string;\n    lastSavedAt: Date | null;\n    metadata: Metadata;\n\n    constructor(fields?: SongSummaryValidatedFields) {\n        if (fields === undefined) {\n            this.id = \"\";\n            this.owner = \"\";\n            this.metadata = {\n                title: \"\",\n                composedBy: \"\",\n                performedBy: \"\",\n            };\n            this.lastSavedAt = null;\n            return;\n        }\n\n        this.id = fields.id;\n        this.owner = fields.owner;\n        this.metadata = fields.metadata;\n        this.lastSavedAt = fields.lastSavedAt;\n    }\n\n    static fromJSONObject(jsonObj: unknown): Either<Error, SongSummary> {\n        const validationResult = SongSummaryValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Song Summary object\"));\n        }\n\n        return right(new SongSummary({ ...validationResult.right }));\n    }\n\n    static fromJSONList(jsonList: unknown): Either<Error, SongSummary[]> {\n        const validationResult = ListSongSummaryValidator.decode(jsonList);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Song Summary list\"));\n        }\n\n        const songSummaryList: SongSummary[] = validationResult.right.map(\n            (fields: SongSummaryValidatedFields): SongSummary => {\n                return new SongSummary({ ...fields });\n            }\n        );\n\n        return right(songSummaryList);\n    }\n}\n\nconst ChordSongValidator = iots.type({\n    ...SongSummaryTypes,\n    elements: iots.array(ChordLineValidator),\n});\n\ntype ChordSongValidatedFields = iots.TypeOf<typeof ChordSongValidator>;\n\nexport class ChordSong extends Collection<ChordLine>\n    implements SongSummaryValidatedFields {\n    id: string;\n    owner: string;\n    lastSavedAt: Date | null;\n    metadata: Metadata;\n\n    constructor(\n        input_elements?: ChordLine[],\n        fields?: SongSummaryValidatedFields\n    ) {\n        const elements = input_elements ?? [new ChordLine()];\n\n        super(elements);\n\n        if (fields === undefined) {\n            this.id = \"\";\n            this.owner = \"\";\n            this.metadata = {\n                title: \"\",\n                composedBy: \"\",\n                performedBy: \"\",\n            };\n            this.lastSavedAt = null;\n            return;\n        }\n\n        this.id = fields.id;\n        this.owner = fields.owner;\n        this.metadata = fields.metadata;\n        this.lastSavedAt = fields.lastSavedAt;\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordSongValidatedFields\n    ): ChordSong {\n        const chordLines: ChordLine[] = validatedFields.elements.map(\n            (chordLineValidatedFields: ChordLineValidatedFields) => {\n                return ChordLine.fromValidatedFields(chordLineValidatedFields);\n            }\n        );\n\n        return new ChordSong(chordLines, validatedFields);\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordSong> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        return ChordSong.fromJSONObject(jsonObj);\n    }\n\n    static fromJSONObject(jsonObj: unknown): Either<Error, ChordSong> {\n        const validationResult = ChordSongValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Song object\"));\n        }\n\n        return right(this.fromValidatedFields(validationResult.right));\n    }\n\n    static fromLyricsLines(lyricLines: Lyric[]): ChordSong {\n        const chordLines: ChordLine[] = lyricLines.map((lyricLine: Lyric) =>\n            ChordLine.fromLyrics(lyricLine)\n        );\n        return new ChordSong(chordLines);\n    }\n\n    get chordLines(): ChordLine[] {\n        return this.elements;\n    }\n\n    get timeSections(): TimeSection[] {\n        const collectSections = (\n            timeSections: TimeSection[],\n            line: ChordLine\n        ): TimeSection[] => {\n            if (line.section?.type === \"time\") {\n                timeSections.push(line.section);\n            }\n\n            return timeSections;\n        };\n\n        const timeSections = this.elements.reduce(collectSections, []);\n        timeSections.sort(timeSectionSortFn);\n        return timeSections;\n    }\n\n    get title(): string {\n        return this.metadata.title;\n    }\n\n    set title(newTitle: string) {\n        this.metadata.title = newTitle;\n    }\n\n    get performedBy(): string {\n        return this.metadata.performedBy;\n    }\n\n    set performedBy(newPerformedBy: string) {\n        this.metadata.performedBy = newPerformedBy;\n    }\n\n    get composedBy(): string {\n        return this.metadata.composedBy;\n    }\n\n    set composedBy(newComposedBy: string) {\n        this.metadata.composedBy = newComposedBy;\n    }\n\n    clone(): ChordSong {\n        return new ChordSong(this.elements, {\n            ...this,\n        });\n    }\n\n    // deep clone clones only the contents of the song, not the ownership information\n    // i.e. not ID, not owner ID, not last saved, etc\n    deepClone(): ChordSong {\n        const clone = lodash.cloneDeep(this);\n        clone.id = \"\";\n        clone.owner = \"\";\n        clone.lastSavedAt = null;\n        return clone;\n    }\n\n    toJSON(): object {\n        return this;\n    }\n\n    isUnsaved(): boolean {\n        return this.id === \"\";\n    }\n\n    isOwner(user: User | null): boolean {\n        if (this.owner === \"\") {\n            return false;\n        }\n\n        if (user === null) {\n            return false;\n        }\n\n        return this.owner === user.userID;\n    }\n\n    mergeLineWithPrevious(idable: IDable<ChordLine>): boolean {\n        const index = this.indexOf(idable.id);\n        // no previous line to merge with, just bail\n        if (index === 0) {\n            return false;\n        }\n\n        // the user experience usually would like a space between lines when they're merged\n        // e.g.\n        // Never Gonna\n        // Give You Up\n        // =>\n        // Never GonnaGive You Up is awkward\n        const prevLine = this.chordLines[index - 1];\n        const lastBlockIndex = prevLine.chordBlocks.length - 1;\n        prevLine.chordBlocks[lastBlockIndex].lyric.append(new Lyric(\" \"));\n\n        const currLine = this.chordLines[index];\n        prevLine.chordBlocks.push(...currLine.chordBlocks);\n        prevLine.normalizeBlocks();\n\n        this.chordLines.splice(index, 1);\n\n        return true;\n    }\n\n    splitLine(idable: IDable<ChordLine>, splitIndex: number): boolean {\n        const chordLine = this.get(idable);\n        const nextLine = chordLine.splitByCharIndex(splitIndex);\n\n        this.addAfter(chordLine, nextLine);\n\n        return true;\n    }\n\n    contentEquals(other: ChordSong): boolean {\n        if (this.chordLines.length !== other.chordLines.length) {\n            return false;\n        }\n\n        if (!lodash.isEqual(this.metadata, other.metadata)) {\n            return false;\n        }\n\n        const reducer = (\n            isEqual: boolean,\n            value: ChordLine,\n            index: number\n        ): boolean => {\n            if (!isEqual) {\n                return false;\n            }\n\n            const otherLine = other.chordLines[index];\n            if (!value.contentEquals(otherLine)) {\n                return false;\n            }\n\n            return true;\n        };\n\n        return this.chordLines.reduce(reducer, true);\n    }\n\n    findLineAndBlock(blockID: IDable<ChordBlock>): [ChordLine, ChordBlock] {\n        for (const line of this.chordLines) {\n            const block: ChordBlock | undefined = line.chordBlocks.find(\n                (block: ChordBlock) => block.id === blockID.id\n            );\n            if (block !== undefined) {\n                return [line, block];\n            }\n        }\n\n        throw new Error(\"BlockID can't be found in the entire song\");\n    }\n}\n","import React from \"react\";\nimport { Paper, Typography, Theme, Grid } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { inflatingWhitespace } from \"../../common/Whitespace\";\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(5),\n        padding: theme.spacing(5),\n        minHeight: theme.spacing(46),\n        minWidth: theme.spacing(92),\n    },\n}))(Paper);\n\nconst About: React.FC<{}> = (): JSX.Element => {\n    return (\n        <Grid container data-testid=\"About\">\n            <Grid item xs={3}></Grid>\n            <Grid item xs={6}>\n                <RootPaper>\n                    <Typography variant=\"h6\">About Chord Paper</Typography>\n                    <Typography variant=\"h6\">\n                        {inflatingWhitespace()}\n                    </Typography>\n                    <Typography>\n                        Chord Paper makes writing and reading chord sheets\n                        easier than the traditional monospace font formatting.\n                        It's a passion project born out of frustration at the\n                        clunkiness of writing chords on a computer.\n                    </Typography>\n                    <Typography>{inflatingWhitespace()}</Typography>\n                    <Typography>\n                        Hope you will find that Chord Paper helps you focus more\n                        of your musical time on playing and listening, and less\n                        on formatting.\n                    </Typography>\n                </RootPaper>\n            </Grid>\n            <Grid item xs={3}></Grid>\n        </Grid>\n    );\n};\n\nexport default About;\n","import { Grid, Paper, Theme, Typography } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(5),\n        padding: theme.spacing(5),\n        minHeight: theme.spacing(46),\n        minWidth: theme.spacing(92),\n        position: \"relative\",\n    },\n}))(Paper);\n\nconst ErrorPage: React.FC<{}> = (): JSX.Element => {\n    return (\n        <Grid container data-testid=\"Tutorial\">\n            <Grid item xs={3}></Grid>\n            <Grid item xs={6}>\n                <RootPaper>\n                    <Typography>An Error Occurred Oh No</Typography>\n                </RootPaper>\n            </Grid>\n            <Grid item xs={3}></Grid>\n        </Grid>\n    );\n};\n\nexport default ErrorPage;\n","// P A T H S\n// by Isayama\n\ntype Mode = \"edit\" | \"play\";\nconst newSongID = \"new\";\n\nexport class RootPath {\n    URL(): string {\n        return \"/\";\n    }\n}\nexport const rootPath = new RootPath();\n\nexport class AboutPath {\n    URL(): string {\n        return \"/about\";\n    }\n}\nexport const aboutPath = new AboutPath();\n\nexport class SongPath {\n    URL(): string {\n        return \"/song\";\n    }\n\n    withID(id: string): SongIDPath {\n        return new SongIDPath(id);\n    }\n\n    withNew(): SongIDPath {\n        return new SongIDPath(newSongID);\n    }\n}\nexport const songPath = new SongPath();\n\nexport class SongIDPath {\n    private readonly id: string;\n\n    constructor(id: string) {\n        this.id = id;\n    }\n    URL(): string {\n        return `/song/${this.id}`;\n    }\n\n    isNew(): boolean {\n        return this.id === newSongID;\n    }\n\n    withMode(mode: Mode): SongIDModePath {\n        return new SongIDModePath(this.id, mode);\n    }\n\n    parent(): SongPath {\n        return songPath;\n    }\n}\nexport const newSongPath = songPath.withNew();\n\nexport class SongIDModePath {\n    private readonly id: string;\n    private readonly mode: Mode;\n    constructor(id: string, mode: Mode) {\n        this.id = id;\n        this.mode = mode;\n    }\n    URL(): string {\n        return `/song/${this.id}/${this.mode}`;\n    }\n\n    parent(): SongIDPath {\n        return new SongIDPath(this.id);\n    }\n\n    static isPlayMode(path: string): boolean {\n        const result = path.match(/\\/song\\/.+\\/play/i);\n        return result !== null;\n    }\n\n    static isEditMode(path: string): boolean {\n        const result = path.match(/\\/song\\/.+\\/edit/i);\n        return result !== null;\n    }\n}\n\nexport class DemoPath {\n    URL(): string {\n        return \"/demo\";\n    }\n\n    withMode(mode: Mode): DemoModePath {\n        return new DemoModePath(mode);\n    }\n}\nexport const demoPath = new DemoPath();\n\nexport class DemoModePath {\n    private readonly mode: Mode;\n    constructor(mode: Mode) {\n        this.mode = mode;\n    }\n\n    URL(): string {\n        return `/demo/${this.mode}`;\n    }\n\n    parent(): DemoPath {\n        return demoPath;\n    }\n\n    static isPlayMode(path: string): boolean {\n        return path === new DemoModePath(\"play\").URL();\n    }\n}\n","import React, { createRef, useRef } from \"react\";\n\nexport type GetPlayerTimeFn = () => number;\ntype GetPlayerTimeFnRef = React.MutableRefObject<GetPlayerTimeFn | null>;\n\nexport const PlayerTimeContext = React.createContext<GetPlayerTimeFnRef>(\n    createRef()\n);\n\ninterface PlayerTimeProviderProps {\n    children: React.ReactNode;\n}\n\nconst PlayerTimeProvider: React.FC<PlayerTimeProviderProps> = (\n    props: PlayerTimeProviderProps\n) => {\n    const getPlayerTimeRef: GetPlayerTimeFnRef = useRef<GetPlayerTimeFn | null>(\n        null\n    );\n\n    return (\n        <PlayerTimeContext.Provider value={getPlayerTimeRef}>\n            {props.children}\n        </PlayerTimeContext.Provider>\n    );\n};\n\nexport default PlayerTimeProvider;\n","import * as iots from \"io-ts\";\n\nexport const validateValue = (value: string): boolean => {\n    return value.trim() !== \"\";\n};\n\nexport const BaseTrackValidator = iots.type({\n    id: iots.string,\n    label: iots.string,\n});\n","import * as iots from \"io-ts\";\nimport { BaseTrackValidator, validateValue } from \"./BaseTrack\";\n\nexport const SingleTrackValidator = iots.intersection([\n    BaseTrackValidator,\n    iots.type({\n        track_type: iots.literal(\"single\"),\n        url: iots.string,\n    }),\n]);\n\ntype SingleTrackValidatedFields = iots.TypeOf<typeof SingleTrackValidator>;\nexport class SingleTrack implements SingleTrackValidatedFields {\n    id: string;\n    track_type: \"single\";\n    label: string;\n    url: string;\n\n    constructor(id: string, label: string, url: string) {\n        this.id = id;\n        this.track_type = \"single\";\n        this.label = label;\n        this.url = url;\n    }\n\n    static fromValidatedFields(\n        validatedFields: SingleTrackValidatedFields\n    ): SingleTrack {\n        return new SingleTrack(\n            validatedFields.id,\n            validatedFields.label,\n            validatedFields.url\n        );\n    }\n\n    validate(): boolean {\n        return validateValue(this.label) && validateValue(this.url);\n    }\n}\n","type ValueOf<T> = T[keyof T];\n\ntype Dest<T, U> = {\n    [P in keyof T]: U;\n};\n\nexport function mapObject<T extends object, U>(\n    source: T,\n    transformFn: (value: ValueOf<T>, key: keyof T) => U\n): {\n    [P in keyof T]: U; // ugly to inline this, but this allows the type hints in VS Code to be more explicit\n} {\n    let dest = {} as Dest<T, U>;\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const oldValue = source[key];\n            dest[key] = transformFn(oldValue, key);\n        }\n    }\n    return dest;\n}\n","import * as iots from \"io-ts\";\nimport { mapObject } from \"../../mapObject\";\nimport { BaseTrackValidator, validateValue } from \"./BaseTrack\";\n\nconst makeStemTrackValidator = <T extends object, S extends string>(\n    emptyKeyMap: T,\n    trackType: S\n) => {\n    const stringTypes = mapObject(emptyKeyMap, () => iots.string);\n\n    return iots.intersection([\n        BaseTrackValidator,\n        iots.type({\n            track_type: iots.literal(trackType),\n            stem_urls: iots.type(stringTypes),\n        }),\n    ]);\n};\n\ntype StemURLs<StemKey extends string> = {\n    [P in StemKey]: string;\n};\n\nexport abstract class StemTrack<StemKey extends string> {\n    id: string;\n    label: string;\n    stem_urls: StemURLs<StemKey>;\n\n    constructor(id: string, label: string, stems_urls: StemURLs<StemKey>) {\n        this.id = id;\n        this.label = label;\n        this.stem_urls = stems_urls;\n    }\n\n    abstract keyObject(): Record<StemKey, undefined>;\n\n    validate(): boolean {\n        if (!validateValue(this.label)) {\n            return false;\n        }\n\n        let key: StemKey;\n        for (key in this.stem_urls) {\n            if (!validateValue(this.stem_urls[key])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n// Two stems\nconst TwoStemEmptyObject = {\n    accompaniment: undefined,\n    vocals: undefined,\n};\n\nexport type TwoStemKeys = keyof typeof TwoStemEmptyObject;\nexport const TwoStemTrackValidator = makeStemTrackValidator(\n    TwoStemEmptyObject,\n    \"2stems\"\n);\n\ntype TwoStemTrackValidatedFields = iots.TypeOf<typeof TwoStemTrackValidator>;\n\nexport class TwoStemTrack extends StemTrack<TwoStemKeys>\n    implements TwoStemTrackValidatedFields {\n    track_type: \"2stems\";\n\n    constructor(id: string, label: string, stem_urls: StemURLs<TwoStemKeys>) {\n        super(id, label, stem_urls);\n        this.track_type = \"2stems\";\n    }\n\n    keyObject(): Record<TwoStemKeys, undefined> {\n        return TwoStemEmptyObject;\n    }\n\n    static fromValidatedFields(\n        validatedFields: TwoStemTrackValidatedFields\n    ): TwoStemTrack {\n        return new TwoStemTrack(\n            validatedFields.id,\n            validatedFields.label,\n            validatedFields.stem_urls\n        );\n    }\n}\n\n// Four stems\nconst FourStemEmptyObject = {\n    bass: undefined,\n    drums: undefined,\n    other: undefined,\n    vocals: undefined,\n};\n\nexport type FourStemKeys = keyof typeof FourStemEmptyObject;\nexport const FourStemTrackValidator = makeStemTrackValidator(\n    FourStemEmptyObject,\n    \"4stems\"\n);\n\ntype FourStemTrackValidatedFields = iots.TypeOf<typeof FourStemTrackValidator>;\n\nexport class FourStemTrack extends StemTrack<FourStemKeys>\n    implements FourStemTrackValidatedFields {\n    track_type: \"4stems\";\n\n    constructor(id: string, label: string, stem_urls: StemURLs<FourStemKeys>) {\n        super(id, label, stem_urls);\n        this.track_type = \"4stems\";\n    }\n\n    keyObject(): Record<FourStemKeys, undefined> {\n        return FourStemEmptyObject;\n    }\n\n    static fromValidatedFields(\n        validatedFields: FourStemTrackValidatedFields\n    ): FourStemTrack {\n        return new FourStemTrack(\n            validatedFields.id,\n            validatedFields.label,\n            validatedFields.stem_urls\n        );\n    }\n}\n\n// Five stems\nconst FiveStemEmptyObject = {\n    bass: undefined,\n    drums: undefined,\n    other: undefined,\n    piano: undefined,\n    vocals: undefined,\n};\n\nexport type FiveStemKeys = keyof typeof FiveStemEmptyObject;\nexport const FiveStemTrackValidator = makeStemTrackValidator(\n    FiveStemEmptyObject,\n    \"5stems\"\n);\n\ntype FiveStemTrackValidatedFields = iots.TypeOf<typeof FiveStemTrackValidator>;\n\nexport class FiveStemTrack extends StemTrack<FiveStemKeys>\n    implements FiveStemTrackValidatedFields {\n    track_type: \"5stems\";\n\n    constructor(id: string, label: string, stem_urls: StemURLs<FiveStemKeys>) {\n        super(id, label, stem_urls);\n        this.track_type = \"5stems\";\n    }\n\n    keyObject(): Record<FiveStemKeys, undefined> {\n        return FiveStemEmptyObject;\n    }\n\n    static fromValidatedFields(\n        validatedFields: FiveStemTrackValidatedFields\n    ): FiveStemTrack {\n        return new FiveStemTrack(\n            validatedFields.id,\n            validatedFields.label,\n            validatedFields.stem_urls\n        );\n    }\n}\n","enum RangePosition {\n    START,\n    END,\n    MIDDLE,\n}\n\nconst parentNode = (node: Node): Node => {\n    if (node.parentNode === null) {\n        throw new Error(\"Node doesn't have parent\");\n    }\n\n    return node.parentNode;\n};\n\nconst normalizeNodeBoundary = (\n    container: Node,\n    offset: number\n): [Node, number] => {\n    const position = getPositionForNode(container, offset);\n    if (position === RangePosition.MIDDLE) {\n        return [container, offset];\n    }\n\n    let offsetFromParent = findOffsetForNode(container);\n    if (position === RangePosition.END) {\n        offsetFromParent += 1;\n    }\n\n    return normalizeNodeBoundary(parentNode(container), offsetFromParent);\n};\n\n// ranges from selection tend to end up inside elements\n// e.g. selecting line 2 might look like\n// <div><div>line 1 |sel-start|</div></div>\n// <div><div>line 2 |sel-end|</div></div>\n// but what we really want is more like\n// <div><div>line 1 </div></div>\n// |sel-start|<div><div>line 2 </div></div>|sel-end|\n// this function adjusts the boundaries of range by climbing up the DOM tree\n// when the range boundary is at the start or end edge of an element\nconst normalizeRange = (range: Range) => {\n    const [startContainer, startOffset] = normalizeNodeBoundary(\n        range.startContainer,\n        range.startOffset\n    );\n    const [endContainer, endOffset] = normalizeNodeBoundary(\n        range.endContainer,\n        range.endOffset\n    );\n\n    range.setStart(startContainer, startOffset);\n    range.setEnd(endContainer, endOffset);\n};\n\nconst getPositionForTextNode = (\n    container: Node,\n    offset: number\n): RangePosition => {\n    if (offset === 0) {\n        return RangePosition.START;\n    }\n\n    const nodeValue: string | null = container.nodeValue;\n    if (nodeValue === null) {\n        throw new Error(\"Text node has no value?\");\n    }\n\n    if (offset === nodeValue.length) {\n        return RangePosition.END;\n    }\n\n    return RangePosition.MIDDLE;\n};\n\nconst getPositionForElementNode = (\n    container: Node,\n    offset: number\n): RangePosition => {\n    const childNodes = container.childNodes;\n    if (offset === 0) {\n        return RangePosition.START;\n    }\n\n    if (offset === childNodes.length) {\n        return RangePosition.END;\n    }\n\n    return RangePosition.MIDDLE;\n};\n\nconst getPositionForNode = (container: Node, offset: number): RangePosition => {\n    switch (container.nodeType) {\n        case Node.TEXT_NODE: {\n            return getPositionForTextNode(container, offset);\n        }\n        case Node.ELEMENT_NODE: {\n            return getPositionForElementNode(container, offset);\n        }\n\n        default: {\n            throw new Error(\"Crash for now \" + container.nodeType);\n        }\n    }\n};\n\nconst findOffsetForNode = (node: Node): number => {\n    if (node.parentNode === null) {\n        throw new Error(\"wtf\");\n    }\n\n    const nodes = node.parentNode.childNodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n        if (nodes.item(i) === node) {\n            return i;\n        }\n    }\n\n    throw new Error(\"Child node doesn't exist in parent???\");\n};\n\n// selection can be represented as many discontiguous ranges, but that doesn't help us\n// figure out whether a line is under selection or not.\n// this utility function figures out a range that's the superset of all ranges in the selection\n// with the start point as the earliest start point, and the end point as the latest end point\nconst getWideSelectionBoundary = (selection: Selection): Range => {\n    const wideRange = document.createRange();\n    const firstRange = selection.getRangeAt(0);\n    wideRange.setStart(firstRange.startContainer, firstRange.startOffset);\n    wideRange.setEnd(firstRange.endContainer, firstRange.endOffset);\n    // selecting in the app can result in many dis\n\n    for (let rangeIndex = 1; rangeIndex < selection.rangeCount; rangeIndex++) {\n        const range = selection.getRangeAt(rangeIndex);\n\n        if (\n            range.compareBoundaryPoints(Range.START_TO_START, wideRange) === -1\n        ) {\n            wideRange.setStart(range.startContainer, range.startOffset);\n        }\n\n        if (range.compareBoundaryPoints(Range.END_TO_END, wideRange) === 1) {\n            wideRange.setEnd(range.endContainer, range.endOffset);\n        }\n    }\n\n    return wideRange;\n};\n\nexport const getSelectedLineIDs = (): string[] => {\n    const selection: Selection | null = window.getSelection();\n    if (selection === null || selection.rangeCount === 0) {\n        return [];\n    }\n\n    const range = getWideSelectionBoundary(selection);\n    normalizeRange(range);\n\n    const lineElements = document.querySelectorAll(\"[data-lineid]\");\n    const lineIDs: string[] = [];\n\n    for (\n        let lineElementIndex = 0;\n        lineElementIndex < lineElements.length;\n        lineElementIndex++\n    ) {\n        const lineElement = lineElements.item(lineElementIndex);\n\n        if (!range.intersectsNode(lineElement)) {\n            continue;\n        }\n\n        const lineID: string | null = lineElement.getAttribute(\"data-lineid\");\n        if (lineID === null) {\n            throw new Error(\n                \"Unexpected - line element should have line ID because that's how it was selected\"\n            );\n        }\n\n        lineIDs.push(lineID);\n    }\n\n    return lineIDs;\n};\n","import { TextFieldProps } from \"@material-ui/core\";\n\nconst validateValue = (value: string): boolean => {\n    return value.trim() !== \"\";\n};\n\nexport const textFieldValidation = (value: string): TextFieldProps => {\n    const validValue = validateValue(value);\n\n    return {\n        error: validValue ? undefined : true,\n        helperText: validValue ? undefined : \"Can't be empty\",\n    };\n};\n","import { TextField } from \"@material-ui/core\";\nimport React from \"react\";\nimport { textFieldValidation } from \"./error\";\n\ninterface LabelFieldProps {\n    value: string;\n    onChange: (newValue: string) => void;\n}\n\nconst LabelField: React.FC<LabelFieldProps> = (\n    props: LabelFieldProps\n): JSX.Element => {\n    const labelChangeHandler = (\n        event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n    ) => {\n        props.onChange(event.target.value);\n    };\n\n    return (\n        <TextField\n            label=\"Track Label\"\n            variant=\"outlined\"\n            value={props.value}\n            onChange={labelChangeHandler}\n            {...textFieldValidation(props.value)}\n        />\n    );\n};\n\nexport default LabelField;\n","const googleDriveExportLinkRegex = new RegExp(`.*drive.google.com/.*?.+`);\nconst googleDriveViewerLinkRegex = new RegExp(\n    `.*drive.google.com/file/d/(.+)/.*`\n);\n\nconst isGoogleDriveExportLink = (url: string): boolean => {\n    const results = url.match(googleDriveExportLinkRegex);\n    return results !== null;\n};\n\nexport const ensureGoogleDriveCacheBusted = (\n    url: string,\n    randID: string\n): string => {\n    if (!isGoogleDriveExportLink(url)) {\n        return url;\n    }\n\n    return url + \"&cacheBuster=\" + randID;\n};\n\nexport const convertViewLinkToExportLink = (url: string): string | null => {\n    const results = url.match(googleDriveViewerLinkRegex);\n    if (results === null) {\n        return null;\n    }\n\n    if (results.length < 2) {\n        return null;\n    }\n\n    const fileID = results[1];\n\n    return \"https://drive.google.com/uc?export=download&id=\" + fileID;\n};\n","import { TextField } from \"@material-ui/core\";\nimport React from \"react\";\nimport { convertViewLinkToExportLink } from \"../internal_player/google_drive\";\nimport { textFieldValidation } from \"./error\";\n\ninterface URLFieldProps {\n    labelText: string;\n    value: string;\n    onChange: (newValue: string) => void;\n    disabled?: boolean;\n}\n\nconst URLField: React.FC<URLFieldProps> = (\n    props: URLFieldProps\n): JSX.Element => {\n    const handleChange = (\n        event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n    ) => {\n        props.onChange(event.target.value);\n    };\n\n    const handleKey = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        // only process for (CMD | CTRL) + g\n        if (!event.metaKey && !event.ctrlKey) {\n            return;\n        }\n\n        if (event.key !== \"g\" && event.key !== \"G\") {\n            return;\n        }\n\n        const possiblyGoogleDriveViewLink: string = props.value;\n        const result: string | null = convertViewLinkToExportLink(\n            possiblyGoogleDriveViewLink\n        );\n        if (result === null) {\n            return;\n        }\n\n        props.onChange(result);\n        event.preventDefault();\n    };\n\n    return (\n        <TextField\n            label={props.labelText}\n            variant=\"outlined\"\n            value={props.value}\n            onChange={handleChange}\n            onKeyDown={handleKey}\n            disabled={props.disabled}\n            {...textFieldValidation(props.value)}\n        />\n    );\n};\n\nexport default URLField;\n","import { Button, Divider, Grid, Theme } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { SingleTrack } from \"../../../common/ChordModel/tracks/SingleTrack\";\nimport LabelField from \"./LabelField\";\nimport URLField from \"./URLField\";\nimport lodash from \"lodash\";\n\ninterface SingleTrackRowProps {\n    track: SingleTrack;\n    onChange: (newTrack: SingleTrack) => void;\n    onRemove: () => void;\n}\n\nconst RowContainer = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(2),\n    },\n}))(Grid);\n\nconst SingleTrackRow: React.FC<SingleTrackRowProps> = (\n    props: SingleTrackRowProps\n): JSX.Element => {\n    const handleLabelChange = (newLabel: string) => {\n        const updatedTrack = lodash.clone(props.track);\n        updatedTrack.label = newLabel;\n        props.onChange(updatedTrack);\n    };\n\n    const handleURLChange = (newURL: string) => {\n        const updatedTrack = lodash.clone(props.track);\n        updatedTrack.url = newURL;\n        props.onChange(updatedTrack);\n    };\n\n    return (\n        <>\n            <RowContainer container alignItems=\"center\">\n                <Grid xs={5} item>\n                    <LabelField\n                        value={props.track.label}\n                        onChange={handleLabelChange}\n                    />\n                </Grid>\n                <Grid xs={5} item>\n                    <URLField\n                        labelText=\"Track URL\"\n                        value={props.track.url}\n                        onChange={handleURLChange}\n                    />\n                </Grid>\n                <Grid xs={2} item>\n                    <Button onClick={props.onRemove}>\n                        <DeleteIcon />\n                    </Button>\n                </Grid>\n            </RowContainer>\n\n            <Divider />\n        </>\n    );\n};\n\nexport default SingleTrackRow;\n","import { Button, Divider, Grid, Theme } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { withStyles } from \"@material-ui/styles\";\nimport lodash from \"lodash\";\nimport React from \"react\";\nimport { StemTrack } from \"../../../common/ChordModel/tracks/StemTrack\";\nimport { mapObject } from \"../../../common/mapObject\";\nimport LabelField from \"./LabelField\";\nimport URLField from \"./URLField\";\n\nexport type URLFieldLabel<StemKey extends string> = {\n    key: StemKey;\n    label: string;\n};\n\ninterface StemTrackRowProps<\n    StemKey extends string,\n    T extends StemTrack<StemKey>\n> {\n    track: T;\n    urlFieldLabels: URLFieldLabel<StemKey>[];\n    onChange: (newTrack: T) => void;\n    onRemove: () => void;\n}\n\nconst RowContainer = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(2),\n    },\n}))(Grid);\n\nconst StemTrackRow = <StemKey extends string, T extends StemTrack<StemKey>>(\n    props: StemTrackRowProps<StemKey, T>\n): JSX.Element => {\n    const handleLabelChange = (newLabel: string) => {\n        const updatedTrack = lodash.clone(props.track);\n        updatedTrack.label = newLabel;\n        props.onChange(updatedTrack);\n    };\n\n    const makeURLField = (\n        url: string,\n        stemKey: StemKey\n    ): React.ReactElement => {\n        const handleChange = (newURL: string) => {\n            const updatedTrack = lodash.clone(props.track);\n            updatedTrack.stem_urls[stemKey] = newURL;\n            props.onChange(updatedTrack);\n        };\n\n        const label = (() => {\n            const fieldLabel = props.urlFieldLabels.find(\n                (value: URLFieldLabel<StemKey>) => value.key === stemKey\n            );\n            if (fieldLabel === undefined) {\n                return \"File URL\";\n            }\n\n            return fieldLabel.label;\n        })();\n\n        return (\n            <URLField labelText={label} value={url} onChange={handleChange} />\n        );\n    };\n\n    const stemURLFields = mapObject(props.track.stem_urls, makeURLField);\n\n    const createFirstRow = (stemKey: StemKey) => {\n        return (\n            <RowContainer key={stemKey} container alignItems=\"center\">\n                <Grid xs={5} item>\n                    <LabelField\n                        value={props.track.label}\n                        onChange={handleLabelChange}\n                    />\n                </Grid>\n                <Grid xs={5} item>\n                    {stemURLFields[stemKey]}\n                </Grid>\n                <Grid xs={2} item>\n                    <Button onClick={props.onRemove}>\n                        <DeleteIcon />\n                    </Button>\n                </Grid>\n            </RowContainer>\n        );\n    };\n\n    const createSubsequentRows = (stemKey: StemKey) => {\n        return (\n            <RowContainer key={stemKey} container alignItems=\"center\">\n                <Grid xs={5} item></Grid>\n                <Grid xs={5} item>\n                    {stemURLFields[stemKey]}\n                </Grid>\n                <Grid xs={2} item></Grid>\n            </RowContainer>\n        );\n    };\n\n    const rows = props.urlFieldLabels.map(\n        (fieldLabel: URLFieldLabel<StemKey>, index: number) => {\n            if (index === 0) {\n                return createFirstRow(fieldLabel.key);\n            }\n\n            return createSubsequentRows(fieldLabel.key);\n        }\n    );\n\n    return (\n        <>\n            {rows}\n            <Divider />\n        </>\n    );\n};\n\nexport default StemTrackRow;\n","import { Button, Divider, Grid, Theme } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { withStyles } from \"@material-ui/styles\";\nimport lodash from \"lodash\";\nimport React from \"react\";\nimport { SplitStemTrack } from \"../../../common/ChordModel/tracks/SplitStemRequest\";\nimport LabelField from \"./LabelField\";\nimport URLField from \"./URLField\";\n\ninterface SplitStemTrackRowProps {\n    track: SplitStemTrack;\n    onChange: (newTrack: SplitStemTrack) => void;\n    onRemove: () => void;\n}\n\nconst RowContainer = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(2),\n    },\n}))(Grid);\n\nconst SplitStemTrackRow: React.FC<SplitStemTrackRowProps> = (\n    props: SplitStemTrackRowProps\n): JSX.Element => {\n    const handleLabelChange = (newLabel: string) => {\n        const updatedTrack = lodash.clone(props.track);\n        updatedTrack.label = newLabel;\n        props.onChange(updatedTrack);\n    };\n\n    const handleURLChange = (newURL: string) => {\n        const updatedTrack = lodash.clone(props.track);\n        updatedTrack.original_url = newURL;\n        props.onChange(updatedTrack);\n    };\n\n    const currentlyProcessing = props.track.id !== \"\";\n\n    const urlLabelText: string = (() => {\n        if (currentlyProcessing) {\n            return \"Processing track...\";\n        }\n\n        switch (props.track.track_type) {\n            case \"split_2stems\": {\n                return \"Track URL to be split into 2 stems\";\n            }\n\n            case \"split_4stems\": {\n                return \"Track URL to be split into 4 stems\";\n            }\n\n            case \"split_5stems\": {\n                return \"Track URL to be split into 5 stems\";\n            }\n        }\n    })();\n\n    return (\n        <>\n            <RowContainer container alignItems=\"center\">\n                <Grid xs={5} item>\n                    <LabelField\n                        value={props.track.label}\n                        onChange={handleLabelChange}\n                    />\n                </Grid>\n                <Grid xs={5} item>\n                    <URLField\n                        labelText={urlLabelText}\n                        value={props.track.original_url}\n                        onChange={handleURLChange}\n                        disabled={currentlyProcessing}\n                    />\n                </Grid>\n                <Grid xs={2} item>\n                    <Button onClick={props.onRemove}>\n                        <DeleteIcon />\n                    </Button>\n                </Grid>\n            </RowContainer>\n\n            <Divider />\n        </>\n    );\n};\n\nexport default SplitStemTrackRow;\n","import * as iots from \"io-ts\";\nimport { BaseTrackValidator, validateValue } from \"./BaseTrack\";\n\nexport const SplitStemTrackValidator = iots.intersection([\n    BaseTrackValidator,\n    iots.type({\n        track_type: iots.union([\n            iots.literal(\"split_2stems\"),\n            iots.literal(\"split_4stems\"),\n            iots.literal(\"split_5stems\"),\n        ]),\n        original_url: iots.string,\n    }),\n]);\n\ntype SplitStemTrackValidatedFields = iots.TypeOf<\n    typeof SplitStemTrackValidator\n>;\n\nexport type SplitStemTypes = \"split_2stems\" | \"split_4stems\" | \"split_5stems\";\nexport class SplitStemTrack implements SplitStemTrackValidatedFields {\n    id: string;\n    track_type: SplitStemTypes;\n    label: string;\n    original_url: string;\n\n    constructor(\n        id: string,\n        label: string,\n        splitType: SplitStemTypes,\n        originalURL: string\n    ) {\n        this.id = id;\n        this.track_type = splitType;\n        this.label = label;\n        this.original_url = originalURL;\n    }\n\n    static fromValidatedFields(\n        validatedFields: SplitStemTrackValidatedFields\n    ): SplitStemTrack {\n        return new SplitStemTrack(\n            validatedFields.id,\n            validatedFields.label,\n            validatedFields.track_type,\n            validatedFields.original_url\n        );\n    }\n\n    validate(): boolean {\n        return validateValue(this.label) && validateValue(this.original_url);\n    }\n}\n","import {\n    Box,\n    Box as UnstyledBox,\n    Button,\n    CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Menu,\n    MenuItem,\n    Theme,\n    Typography as UnstyledTypography,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { withStyles } from \"@material-ui/styles\";\nimport lodash from \"lodash\";\nimport React, { useState } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\n\nimport { SingleTrack } from \"../../../common/ChordModel/tracks/SingleTrack\";\nimport {\n    FiveStemKeys,\n    FiveStemTrack,\n    FourStemKeys,\n    FourStemTrack,\n    TwoStemKeys,\n    TwoStemTrack,\n} from \"../../../common/ChordModel/tracks/StemTrack\";\nimport { Track } from \"../../../common/ChordModel/tracks/Track\";\nimport { TrackList } from \"../../../common/ChordModel/tracks/TrackList\";\nimport { PlainFn } from \"../../../common/PlainFn\";\nimport { TrackListLoad } from \"../TrackListProvider\";\nimport SingleTrackRow from \"./SingleTrackRow\";\nimport StemTrackRow, { URLFieldLabel } from \"./StemTrackRow\";\nimport SplitStemTrackRow from \"./SplitStemTrackRow\";\nimport {\n    SplitStemTrack,\n    SplitStemTypes,\n} from \"../../../common/ChordModel/tracks/SplitStemRequest\";\n\ninterface TrackListEditDialogProps {\n    open: boolean;\n    onClose?: PlainFn;\n    trackListLoad: TrackListLoad;\n    onSubmit?: (trackList: TrackList) => void;\n    onRefresh?: PlainFn;\n}\n\nconst FlexBox = withStyles((theme: Theme) => ({\n    root: {\n        display: \"flex\",\n        padding: theme.spacing(5),\n        alignItems: \"center\",\n        justifyItems: \"center\",\n    },\n}))(Box);\n\nconst InlineBlockBox = withStyles({\n    root: {\n        display: \"inline-block\",\n    },\n})(UnstyledBox);\n\nconst AddNewRowBox = withStyles((theme: Theme) => ({\n    root: {\n        cursor: \"pointer\",\n        display: \"flex\",\n        alignItems: \"center\",\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}))(UnstyledBox);\n\nconst Typography = withStyles((theme: Theme) => ({\n    root: {\n        marginLeft: theme.spacing(2),\n        marginBottom: theme.spacing(1),\n    },\n}))(UnstyledTypography);\n\nconst TrackListEditDialog: React.FC<TrackListEditDialogProps> = (\n    props: TrackListEditDialogProps\n): JSX.Element => {\n    const internalContent: JSX.Element = (() => {\n        if (props.trackListLoad.state === \"loading\") {\n            return (\n                <FlexBox>\n                    <CircularProgress size=\"15rem\" />\n                </FlexBox>\n            );\n        }\n\n        return (\n            <LoadedTrackListEditDialog\n                trackList={props.trackListLoad.tracklist}\n                onSubmit={props.onSubmit}\n                onClose={props.onClose}\n            />\n        );\n    })();\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose} maxWidth={false}>\n            <DialogTitle>\n                <Button onClick={props.onRefresh}>\n                    <RefreshIcon />\n                </Button>\n                Edit Track List\n            </DialogTitle>\n            {internalContent}\n        </Dialog>\n    );\n};\n\ninterface LoadedTrackListEditDialogProps {\n    trackList: TrackList;\n    onSubmit?: (trackList: TrackList) => void;\n    onClose?: PlainFn;\n}\n\nconst LoadedTrackListEditDialog: React.FC<LoadedTrackListEditDialogProps> = (\n    props: LoadedTrackListEditDialogProps\n): JSX.Element => {\n    const emptySingleTrack = (): Track => {\n        return new SingleTrack(\"\", \"\", \"\");\n    };\n\n    const initialTrackList: TrackList = (() => {\n        const clone = lodash.cloneDeep(props.trackList);\n        if (clone.tracks.length === 0) {\n            clone.tracks.push(emptySingleTrack());\n        }\n\n        return clone;\n    })();\n\n    const [trackList, setTrackList] = useState<TrackList>(initialTrackList);\n    const [version, setVersion] = useState(0);\n    const [\n        addTrackMenuElement,\n        setAddTrackMenuElement,\n    ] = useState<HTMLElement | null>(null);\n\n    const bumpVersion = () => setVersion(version + 1);\n    const cloneTrackList = () => lodash.cloneDeep(trackList);\n\n    const handleAddTrackMenu = (event: React.MouseEvent<HTMLElement>) => {\n        setAddTrackMenuElement(event.currentTarget);\n    };\n\n    const handleCloseAddTrackMenu = () => {\n        setAddTrackMenuElement(null);\n    };\n\n    const handleAddSingleTrack = () => {\n        handleAddTrack(new SingleTrack(\"\", \"\", \"\"));\n    };\n\n    const handleAddTwoStemTrack = () => {\n        handleAddTrack(\n            new TwoStemTrack(\"\", \"\", { vocals: \"\", accompaniment: \"\" })\n        );\n    };\n\n    const handleAddFourStemTrack = () => {\n        handleAddTrack(\n            new FourStemTrack(\"\", \"\", {\n                vocals: \"\",\n                other: \"\",\n                bass: \"\",\n                drums: \"\",\n            })\n        );\n    };\n\n    const handleAddFiveStemTrack = () => {\n        handleAddTrack(\n            new FiveStemTrack(\"\", \"\", {\n                vocals: \"\",\n                other: \"\",\n                piano: \"\",\n                bass: \"\",\n                drums: \"\",\n            })\n        );\n    };\n\n    const handleAddSplitStemTrack = (splitType: SplitStemTypes) => {\n        handleAddTrack(new SplitStemTrack(\"\", \"\", splitType, \"\"));\n    };\n\n    const handleAddTrack = (newTrack: Track) => {\n        appendTrack(newTrack);\n        handleCloseAddTrackMenu();\n    };\n\n    const appendTrack = (track: Track) => {\n        const clone = cloneTrackList();\n        clone.tracks.push(track);\n        bumpVersion();\n        setTrackList(clone);\n    };\n\n    const removeTrack = (index: number) => {\n        const clone = cloneTrackList();\n        clone.tracks.splice(index, 1);\n        bumpVersion();\n        setTrackList(clone);\n    };\n\n    const hasError: boolean = (() => {\n        for (let track of trackList.tracks) {\n            if (!track.validate()) {\n                return true;\n            }\n        }\n\n        return false;\n    })();\n\n    const updateTrack = (index: number, track: Track) => {\n        const clone = cloneTrackList();\n        clone.tracks.splice(index, 1, track);\n        setTrackList(clone);\n    };\n\n    const trackChangeHandler = (index: number) => {\n        return (newTrack: Track) => {\n            updateTrack(index, newTrack);\n        };\n    };\n\n    const trackListInputs = (() => {\n        const rows: React.ReactElement[] = trackList.tracks.map(\n            // linter is wrong here - switch at the bottom is exhaustive and the compiler can verify\n            // it thinks that it may possibly return undefined, but it can't\n            // eslint-disable-next-line array-callback-return\n            (track: Track, index: number): React.ReactElement => {\n                // about version-index:\n                // we don't want to rerender the textboxes every time because it interrupts the\n                // typing experience by blurring focus while the user types\n                //\n                // but also we want to rerender the boxes every time the list is updated\n                // i.e. tracks are added or removed\n                // because the mapping of the track indices to the boxes may have changed\n                //\n                // version helps with this mostly because the track indices stably identify a track\n                // for the same version\n                const rowKey = `${version}-${index}`;\n\n                switch (track.track_type) {\n                    case \"single\": {\n                        return (\n                            <SingleTrackRow\n                                key={rowKey}\n                                track={track}\n                                onChange={trackChangeHandler(index)}\n                                onRemove={() => removeTrack(index)}\n                            />\n                        );\n                    }\n\n                    case \"2stems\": {\n                        const urlFieldLabels: URLFieldLabel<TwoStemKeys>[] = [\n                            {\n                                key: \"vocals\",\n                                label: \"Vocals File URL\",\n                            },\n                            {\n                                key: \"accompaniment\",\n                                label: \"Accompaniment File URL\",\n                            },\n                        ];\n\n                        return (\n                            <StemTrackRow\n                                key={rowKey}\n                                track={track}\n                                urlFieldLabels={urlFieldLabels}\n                                onChange={trackChangeHandler(index)}\n                                onRemove={() => removeTrack(index)}\n                            />\n                        );\n                    }\n\n                    case \"4stems\": {\n                        const urlFieldLabels: URLFieldLabel<FourStemKeys>[] = [\n                            {\n                                key: \"vocals\",\n                                label: \"Vocals File URL\",\n                            },\n                            {\n                                key: \"other\",\n                                label: \"Other File URL\",\n                            },\n                            {\n                                key: \"bass\",\n                                label: \"Bass File URL\",\n                            },\n                            {\n                                key: \"drums\",\n                                label: \"Drums File URL\",\n                            },\n                        ];\n\n                        return (\n                            <StemTrackRow\n                                key={rowKey}\n                                track={track}\n                                urlFieldLabels={urlFieldLabels}\n                                onChange={trackChangeHandler(index)}\n                                onRemove={() => removeTrack(index)}\n                            />\n                        );\n                    }\n\n                    case \"5stems\": {\n                        const urlFieldLabels: URLFieldLabel<FiveStemKeys>[] = [\n                            {\n                                key: \"vocals\",\n                                label: \"Vocals File URL\",\n                            },\n                            {\n                                key: \"other\",\n                                label: \"Other File URL\",\n                            },\n                            {\n                                key: \"piano\",\n                                label: \"Piano File URL\",\n                            },\n                            {\n                                key: \"bass\",\n                                label: \"Bass File URL\",\n                            },\n                            {\n                                key: \"drums\",\n                                label: \"Drums File URL\",\n                            },\n                        ];\n\n                        return (\n                            <StemTrackRow\n                                key={rowKey}\n                                track={track}\n                                urlFieldLabels={urlFieldLabels}\n                                onChange={trackChangeHandler(index)}\n                                onRemove={() => removeTrack(index)}\n                            />\n                        );\n                    }\n\n                    case \"split_2stems\":\n                    case \"split_4stems\":\n                    case \"split_5stems\": {\n                        return (\n                            <SplitStemTrackRow\n                                key={rowKey}\n                                track={track}\n                                onChange={trackChangeHandler(index)}\n                                onRemove={() => removeTrack(index)}\n                            />\n                        );\n                    }\n                }\n            }\n        );\n\n        const showAddTrackMenu = addTrackMenuElement !== null;\n\n        rows.push(\n            <React.Fragment key=\"append\">\n                <InlineBlockBox>\n                    <AddNewRowBox\n                        key=\"append-action\"\n                        onClick={handleAddTrackMenu}\n                    >\n                        <AddIcon />\n                        <Typography>Add a new track</Typography>\n                    </AddNewRowBox>\n                </InlineBlockBox>\n                <Menu\n                    open={showAddTrackMenu}\n                    anchorEl={addTrackMenuElement}\n                    onClose={handleCloseAddTrackMenu}\n                >\n                    <MenuItem onClick={handleAddSingleTrack}>\n                        Single Track\n                    </MenuItem>\n                    <MenuItem onClick={handleAddTwoStemTrack}>\n                        2 Stem Track\n                    </MenuItem>\n                    <MenuItem onClick={handleAddFourStemTrack}>\n                        4 Stem Track\n                    </MenuItem>\n                    <MenuItem onClick={handleAddFiveStemTrack}>\n                        5 Stem Track\n                    </MenuItem>\n                    <MenuItem\n                        onClick={() => handleAddSplitStemTrack(\"split_2stems\")}\n                    >\n                        Split Track into 2 Stems\n                    </MenuItem>\n                    <MenuItem\n                        onClick={() => handleAddSplitStemTrack(\"split_4stems\")}\n                    >\n                        Split Track into 4 Stems\n                    </MenuItem>\n                    <MenuItem\n                        onClick={() => handleAddSplitStemTrack(\"split_5stems\")}\n                    >\n                        Split Track into 5 Stems\n                    </MenuItem>\n                </Menu>\n            </React.Fragment>\n        );\n\n        return rows;\n    })();\n\n    const handleSubmit = () => {\n        if (hasError) {\n            return;\n        }\n\n        props.onSubmit?.(trackList);\n    };\n\n    return (\n        <>\n            <DialogContent>\n                <Typography variant=\"body2\" variantMapping={{ body2: \"div\" }}>\n                    <Box>Add URLs for the audio track this song.</Box>\n                    <Box>\n                        This can be your own hosted files, or Youtube, etc.\n                    </Box>\n                </Typography>\n                <Typography variant=\"body2\" variantMapping={{ body2: \"div\" }}>\n                    <Box>\n                        This player works best if every track is a version of\n                        the same song,\n                    </Box>\n                    <Box>\n                        e.g. the original recording, just the accompaniment,\n                        only drums + bass.\n                    </Box>\n                </Typography>\n                <Divider />\n                {trackListInputs}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose}>Cancel</Button>\n                <Button disabled={hasError} onClick={handleSubmit}>\n                    OK\n                </Button>\n            </DialogActions>\n        </>\n    );\n};\n\nexport default TrackListEditDialog;\n","export type PlainFn = () => void;\nexport const voidFn: PlainFn = () => {};\n","import { Duration } from \"luxon\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport FilePlayer from \"react-player/file\";\nimport { TimeSection } from \"../../../common/ChordModel/ChordLine\";\nimport { PlainFn, voidFn } from \"../../../common/PlainFn\";\nimport { PlayerTimeContext } from \"../../PlayerTimeContext\";\n\nexport interface ButtonActionAndState {\n    action: PlainFn;\n    enabled: boolean;\n}\n\nexport interface PlayerControls {\n    playerRef: React.MutableRefObject<ReactPlayer | FilePlayer | undefined>;\n    playing: boolean;\n    togglePlay: PlainFn;\n    jumpBack: PlainFn;\n    jumpForward: PlainFn;\n    goToBeginning: PlainFn;\n    skipBack: ButtonActionAndState;\n    skipForward: ButtonActionAndState;\n    currentTime: number;\n    currentTimeFormatted: string;\n    onProgress: (state: {\n        played: number;\n        playedSeconds: number;\n        loaded: number;\n        loadedSeconds: number;\n    }) => void;\n    onPlay: PlainFn;\n    onPause: PlainFn;\n    currentSectionLabel: string;\n    playratePercentage: number;\n    onPlayratePercentageChange: (val: number) => void;\n}\n\nclass NoopMutableRef {\n    _current: ReactPlayer | FilePlayer | undefined;\n\n    constructor() {\n        this._current = undefined;\n    }\n\n    public set current(newCurrent: ReactPlayer | FilePlayer | undefined) {}\n\n    public get current(): ReactPlayer | FilePlayer | undefined {\n        return undefined;\n    }\n}\n\nexport const unfocusedControls: PlayerControls = {\n    playerRef: new NoopMutableRef(),\n    playing: false,\n    togglePlay: voidFn,\n    jumpBack: voidFn,\n    jumpForward: voidFn,\n    goToBeginning: voidFn,\n    skipBack: {\n        action: voidFn,\n        enabled: false,\n    },\n    skipForward: {\n        action: voidFn,\n        enabled: false,\n    },\n    currentTime: 0,\n    currentTimeFormatted: \"0:00\",\n    onProgress: voidFn,\n    onPlay: voidFn,\n    onPause: voidFn,\n    currentSectionLabel: \"\",\n    playratePercentage: 100,\n    onPlayratePercentageChange: voidFn,\n};\n\nexport const usePlayerControls = (\n    timeSections: TimeSection[]\n): PlayerControls => {\n    const [playing, setPlaying] = useState(false);\n    const [currentTime, setCurrentTime] = useState(0);\n    const playerRef = useRef<ReactPlayer | FilePlayer>();\n    const [playratePercentage, setPlayratePercentage] = useState(100);\n\n    // a ref version so that a past render can access a future state\n    // see outOfSyncWorkaround for the reason\n    const currentTimeRef = useRef<number>(currentTime);\n    currentTimeRef.current = currentTime;\n\n    const jumpInterval = 5; // seconds\n\n    const skipBackBuffer = 2; // seconds;\n    const skipForwardBuffer = 2; // seconds;\n\n    // the amount to skip to before the section - helps not drop the user right on the down beat\n    const skipLeadIn = 1; // seconds;\n\n    {\n        const getPlayerTimeRef = useContext(PlayerTimeContext);\n        const getCurrentTime = () => currentTimeRef.current;\n\n        useEffect(() => {\n            getPlayerTimeRef.current = getCurrentTime;\n        }, [getPlayerTimeRef, getCurrentTime]);\n    }\n\n    const seekTo = (time: number) => {\n        if (time < 0) {\n            time = 0;\n        }\n\n        playerRef.current?.seekTo(time, \"seconds\");\n    };\n\n    const handlePlayState = () => {\n        setPlaying(true);\n    };\n\n    const handlePauseState = () => {\n        setPlaying(false);\n    };\n\n    const outOfSyncWorkaround = () => {\n        // this is pretty unpleasant, but on certain videos, React Player can run into a race condition where\n        // it doesn't respond to playing=true/false, so the play and pause button doesn't actually affect the track\n        // this can be repro'd inconsistently by quickly toggling play/pause several times, or jump back, then pause in the compact player\n        //\n        // attempt at throttling didn't work, the wonkiness can occur even at 5 seconds of throttling depending on the course of events\n        // one observation is that this wonky state can be reset out of by performing a seek after it gets into this state\n        // however, it can't be too soon, hence the set timeout\n        // and also we would want to seek to the time of the most updated time, not the one during the current render, hence the use of ref\n        setTimeout(() => {\n            seekTo(currentTimeRef.current);\n        }, 200);\n    };\n\n    const pauseAction = () => {\n        setPlaying(false);\n        outOfSyncWorkaround();\n    };\n\n    const playAction = () => {\n        setPlaying(true);\n    };\n\n    const togglePlayAction = () => {\n        if (playing) {\n            pauseAction();\n        } else {\n            playAction();\n        }\n    };\n\n    const jumpBackAction = () => {\n        let newTime = currentTime - jumpInterval;\n        if (newTime < 0) {\n            newTime = 0;\n        }\n\n        seekTo(newTime);\n    };\n\n    const jumpForwardAction = () => {\n        const newTime = currentTime + jumpInterval;\n        seekTo(newTime);\n    };\n\n    const goToBeginningAction = () => {\n        seekTo(0);\n    };\n\n    const currentSectionIndex = ((): number | null => {\n        if (timeSections.length === 0) {\n            return null;\n        }\n\n        let currentSectionIndex: number | null = null;\n\n        timeSections.forEach((section: TimeSection, index: number) => {\n            if (currentTime >= section.time) {\n                if (\n                    currentSectionIndex === null ||\n                    section.time > timeSections[currentSectionIndex].time\n                ) {\n                    currentSectionIndex = index;\n                }\n            }\n        });\n\n        return currentSectionIndex;\n    })();\n\n    const currentSection: TimeSection | null =\n        currentSectionIndex != null ? timeSections[currentSectionIndex] : null;\n\n    const currentSectionLabel =\n        currentSection !== null ? currentSection.name : \"\";\n\n    const skipBackButton: ButtonActionAndState = {\n        action: () => {\n            if (currentSection === null) {\n                return;\n            }\n\n            const previousSection: TimeSection | null = (() => {\n                if (currentSectionIndex === null || currentSectionIndex === 0) {\n                    return null;\n                }\n\n                return timeSections[currentSectionIndex - 1];\n            })();\n\n            if (\n                previousSection !== null &&\n                currentTime <= currentSection.time + skipBackBuffer\n            ) {\n                seekTo(previousSection.time - skipLeadIn);\n                return;\n            }\n\n            seekTo(currentSection.time - skipLeadIn);\n        },\n        enabled: currentSection !== null,\n    };\n\n    const skipForwardButton: ButtonActionAndState = (() => {\n        const findNextSectionIndex = (\n            sectionIndex: number | null\n        ): number | null => {\n            if (timeSections.length === 0) {\n                return null;\n            }\n\n            if (sectionIndex === null) {\n                return 0;\n            }\n\n            if (sectionIndex === timeSections.length - 1) {\n                return null;\n            }\n\n            return sectionIndex + 1;\n        };\n\n        const nextSectionIndex = findNextSectionIndex(currentSectionIndex);\n\n        // determine what the actual next section is - it could be the next one or next next one depending on the buffer\n        const nextSectionToSkipTo: TimeSection | null = (() => {\n            if (nextSectionIndex === null) {\n                return null;\n            }\n\n            const nextSection = timeSections[nextSectionIndex];\n\n            // we could return section (n + 1) or section (n + 2)\n            // the idea is that, e.g. the user is at 1:05 but the next section is at 1:06, and next next section is 1:30\n            // then the user actually wants to go to 1:30 by skipping forward\n            if (currentTime < nextSection.time - skipForwardBuffer) {\n                return nextSection;\n            }\n\n            const nextNextSectionIndex = findNextSectionIndex(nextSectionIndex);\n            if (nextNextSectionIndex === null) {\n                return null;\n            }\n\n            return timeSections[nextNextSectionIndex];\n        })();\n\n        return {\n            action: () => {\n                if (nextSectionToSkipTo !== null) {\n                    seekTo(nextSectionToSkipTo.time - skipLeadIn);\n                }\n            },\n            enabled: nextSectionToSkipTo !== null,\n        };\n    })();\n\n    const handleProgress = (state: {\n        played: number;\n        playedSeconds: number;\n        loaded: number;\n        loadedSeconds: number;\n    }) => {\n        setCurrentTime(state.playedSeconds);\n    };\n\n    const currentTimeFormatted: string = (() => {\n        const duration: Duration = Duration.fromMillis(currentTime * 1000);\n        return duration.toFormat(\"m:ss\");\n    })();\n\n    return {\n        playerRef: playerRef,\n        playing: playing,\n        togglePlay: togglePlayAction,\n        skipBack: skipBackButton,\n        skipForward: skipForwardButton,\n        jumpBack: jumpBackAction,\n        jumpForward: jumpForwardAction,\n        goToBeginning: goToBeginningAction,\n        currentTime: currentTime,\n        currentTimeFormatted: currentTimeFormatted,\n        onProgress: handleProgress,\n        onPlay: handlePlayState,\n        onPause: handlePauseState,\n        currentSectionLabel: currentSectionLabel,\n        playratePercentage: playratePercentage,\n        onPlayratePercentageChange: setPlayratePercentage,\n    };\n};\n","import React, { useContext, useRef } from \"react\";\n\ntype KeyListener = (event: KeyboardEvent) => void;\ninterface StoredKeyListener {\n    original: KeyListener;\n    wrapped: KeyListener;\n}\ntype RegisterKeyListenerFn = (listener: KeyListener) => void;\n\nconst GlobalKeyListenerContext = React.createContext<\n    [RegisterKeyListenerFn, RegisterKeyListenerFn, RegisterKeyListenerFn]\n>([() => {}, () => {}, () => {}]);\n\ninterface GlobalKeyListenerProviderProps {\n    children: React.ReactNode;\n}\n\nexport const useRegisterKeyListener = (): [\n    RegisterKeyListenerFn,\n    RegisterKeyListenerFn\n] => {\n    const [registerKeyListener, , unregisterKeyListener] = useContext(\n        GlobalKeyListenerContext\n    );\n    return [registerKeyListener, unregisterKeyListener];\n};\n\nexport const useRegisterTopKeyListener = (): [\n    RegisterKeyListenerFn,\n    RegisterKeyListenerFn\n] => {\n    const [, registerTopKeyListener, unregisterKeyListener] = useContext(\n        GlobalKeyListenerContext\n    );\n    return [registerTopKeyListener, unregisterKeyListener];\n};\n\nconst GlobalKeyListenerProvider: React.FC<GlobalKeyListenerProviderProps> = (\n    props: GlobalKeyListenerProviderProps\n): JSX.Element => {\n    const keyListeners = useRef<StoredKeyListener[]>([]);\n\n    const removeAll = () => {\n        for (let entry of keyListeners.current) {\n            window.removeEventListener(\"keydown\", entry.wrapped, true);\n        }\n    };\n\n    const addAll = () => {\n        for (let entry of keyListeners.current) {\n            window.addEventListener(\"keydown\", entry.wrapped, true);\n        }\n    };\n\n    const wrapListener = (listener: KeyListener): KeyListener => {\n        return (event: KeyboardEvent) => {\n            // do not fire for any typing contexts\n            if (event.target instanceof HTMLElement) {\n                if (\n                    event.target.tagName === \"INPUT\" ||\n                    event.target.tagName === \"TEXTAREA\" ||\n                    event.target.isContentEditable\n                ) {\n                    return;\n                }\n            }\n\n            listener(event);\n            if (event.defaultPrevented) {\n                event.stopImmediatePropagation();\n            }\n        };\n    };\n\n    const registerKeyListener = (listener: KeyListener) => {\n        const wrappedListener = wrapListener(listener);\n\n        keyListeners.current.push({\n            original: listener,\n            wrapped: wrappedListener,\n        });\n\n        window.addEventListener(\"keydown\", wrappedListener, true);\n    };\n\n    const registerTopKeyListener = (listener: KeyListener) => {\n        const wrappedListener = wrapListener(listener);\n\n        removeAll();\n        keyListeners.current.unshift({\n            original: listener,\n            wrapped: wrappedListener,\n        });\n        addAll();\n    };\n\n    const unregisterKeyListener = (listener: KeyListener) => {\n        const index = keyListeners.current.findIndex(\n            (entry: StoredKeyListener) => entry.original === listener\n        );\n        if (index === -1) {\n            return;\n        }\n\n        const entry = keyListeners.current[index];\n\n        window.removeEventListener(\"keydown\", entry.wrapped, true);\n        keyListeners.current.splice(index, 1);\n    };\n\n    return (\n        <GlobalKeyListenerContext.Provider\n            value={[\n                registerKeyListener,\n                registerTopKeyListener,\n                unregisterKeyListener,\n            ]}\n        >\n            {props.children}\n        </GlobalKeyListenerContext.Provider>\n    );\n};\n\nexport default GlobalKeyListenerProvider;\n","import { Box, Theme, TypographyVariant } from \"@material-ui/core\";\nimport { blueGrey, grey } from \"@material-ui/core/colors\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\n\nexport const roundedTopCornersStyle = (theme: Theme) => ({\n    borderTopLeftRadius: theme.spacing(1.5),\n    borderTopRightRadius: theme.spacing(1.5),\n});\n\nexport const roundedCornersStyle = (theme: Theme) => ({\n    borderRadius: theme.spacing(1.5),\n});\n\nexport const controlPaneStyle = {\n    backgroundColor: blueGrey[50],\n    display: \"flex\",\n    alignItems: \"center\",\n};\n\n// pretty wild stuff, but I've come across some circumstances where I want\n// to provide a min width to an element so that its surrounding elements\n// do not shift\n//\n// flexbox was considered but it required some magic guess of the container's\n// width, which is just as uneducated as any other guess\n//\n// suppose you have a box that contains a number that's unlikely go to beyond\n// 200 - and suppose 200 is the largest width that the value can be\n// (e.g. perhaps in some fonts 199 is wider, then you'd use that)\n// then minWidthOf(theme, \"body\", \"200\") would return a size to use as the minWidth\n// so that the range of values will not change the size of the container\n// or move its surrounding elements\nexport const widthOfString = (\n    theme: Theme,\n    typographyVariant: TypographyVariant,\n    phattestString: string\n): string | undefined => {\n    const typography = theme.typography[typographyVariant];\n\n    const font: string | undefined = (() => {\n        if (typography.fontFamily === undefined) {\n            return undefined;\n        }\n\n        if (typography.fontSize === undefined) {\n            return undefined;\n        }\n\n        return `${typography.fontSize} ${typography.fontFamily}`;\n    })();\n\n    if (font === undefined) {\n        return undefined;\n    }\n\n    const canvas = document.createElement(\"canvas\");\n    const canvasContext = canvas.getContext(\"2d\");\n    if (canvasContext === null) {\n        return undefined;\n    }\n\n    canvasContext.font = font;\n    const measurement = canvasContext.measureText(phattestString);\n    return `${measurement.width}px`;\n};\n\nexport const greyTextColour = grey[700];\n\nconst BottomRightBox = withStyles((theme: Theme) => ({\n    root: {\n        position: \"fixed\",\n        bottom: 0,\n        right: theme.spacing(2),\n        ...roundedTopCornersStyle(theme),\n    },\n}))(Box);\n\nexport const withBottomRightBox = (children: React.ReactElement) => (\n    <BottomRightBox boxShadow={4}>{children}</BottomRightBox>\n);\n\nconst BottomLeftBox = withStyles((theme: Theme) => ({\n    root: {\n        position: \"fixed\",\n        bottom: 0,\n        left: theme.spacing(2),\n        ...roundedTopCornersStyle(theme),\n    },\n}))(Box);\n\nexport const withBottomLeftBox = (children: React.ReactElement) => (\n    <BottomLeftBox boxShadow={4}>{children}</BottomLeftBox>\n);\n\nexport const TitleBar = withStyles((theme: Theme) => ({\n    root: {\n        width: \"100%\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        ...roundedTopCornersStyle(theme),\n    },\n}))(Box);\n","import { Button, Slide, Theme, Tooltip } from \"@material-ui/core\";\nimport RadioIcon from \"@material-ui/icons/Radio\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useEffect, useState } from \"react\";\nimport { useRegisterTopKeyListener } from \"../GlobalKeyListener\";\nimport { roundedTopCornersStyle, withBottomRightBox } from \"./common\";\nimport { PlayerControls } from \"./internal_player/usePlayerControls\";\nimport UnstyledPlayIcon from \"@material-ui/icons/PlayArrow\";\nimport UnstyledPauseIcon from \"@material-ui/icons/Pause\";\nimport JumpBackIcon from \"@material-ui/icons/FastRewind\";\nimport JumpForwardIcon from \"@material-ui/icons/FastForward\";\n\nconst PlayIcon = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.primary.main,\n    },\n}))(UnstyledPlayIcon);\n\nconst PauseIcon = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.secondary.main,\n    },\n}))(UnstyledPauseIcon);\n\nconst ExpandButton = withStyles((theme: Theme) => ({\n    root: {\n        ...roundedTopCornersStyle(theme),\n    },\n}))(Button);\n\ninterface MicroPlayerProps {\n    show: boolean;\n    playersLoaded: boolean;\n    disabled?: boolean;\n    tooltipMessage: string;\n    playerControls: PlayerControls;\n    onClick: () => void;\n    className?: string;\n}\n\nconst MicroPlayer: React.FC<MicroPlayerProps> = (\n    props: MicroPlayerProps\n): JSX.Element => {\n    const [addTopKeyListener, removeKeyListener] = useRegisterTopKeyListener();\n    const [tempJumpIcon, setTempJumpIcon] = useState<\"back\" | \"forward\" | null>(\n        null\n    );\n\n    {\n        const togglePlay = props.playerControls.togglePlay;\n        const jumpBack = props.playerControls.jumpBack;\n        const jumpForward = props.playerControls.jumpForward;\n        const onClick = props.onClick;\n        const show = props.show;\n\n        useEffect(() => {\n            if (!show) {\n                return;\n            }\n\n            const handleKey = (event: KeyboardEvent) => {\n                if (event.code === \"Slash\") {\n                    onClick();\n                    event.preventDefault();\n                }\n\n                // make this only happen when CTRL/CMD is pressed\n                // don't want to just fire sporadically without\n                // visual feedback\n                if (!event.ctrlKey && !event.metaKey) {\n                    return;\n                }\n\n                switch (event.code) {\n                    // because space doesn't work because FUCK MACOS\n                    case \"Enter\":\n                    case \"Space\": {\n                        togglePlay();\n                        event.preventDefault();\n                        break;\n                    }\n\n                    case \"ArrowLeft\": {\n                        jumpBack();\n                        setTempJumpIcon(\"back\");\n                        event.preventDefault();\n                        break;\n                    }\n\n                    case \"ArrowRight\": {\n                        jumpForward();\n                        setTempJumpIcon(\"forward\");\n                        event.preventDefault();\n                        break;\n                    }\n                }\n            };\n\n            addTopKeyListener(handleKey);\n            return () => removeKeyListener(handleKey);\n        }, [\n            addTopKeyListener,\n            removeKeyListener,\n            show,\n            onClick,\n            togglePlay,\n            jumpBack,\n            jumpForward,\n            setTempJumpIcon,\n        ]);\n    }\n\n    useEffect(() => {\n        if (tempJumpIcon === null) {\n            return;\n        }\n\n        setTimeout(() => setTempJumpIcon(null), 1000);\n    }, [tempJumpIcon, setTempJumpIcon]);\n\n    const icon: React.ReactElement = (() => {\n        if (!props.playersLoaded) {\n            return <RadioIcon />;\n        }\n\n        if (tempJumpIcon === \"back\") {\n            return <JumpBackIcon />;\n        }\n\n        if (tempJumpIcon === \"forward\") {\n            return <JumpForwardIcon />;\n        }\n\n        if (!props.playerControls.playing) {\n            return <PauseIcon />;\n        }\n\n        return <PlayIcon />;\n    })();\n\n    return (\n        <Slide in={props.show} direction=\"up\">\n            {withBottomRightBox(\n                // span inserted to workaround disabled elements with tooltip\n                // https://material-ui.com/components/tooltips/#disabled-elements\n                <Tooltip title={props.tooltipMessage}>\n                    <span>\n                        <ExpandButton\n                            className={props.className}\n                            onClick={props.onClick}\n                            disabled={props.disabled}\n                        >\n                            {icon}\n                        </ExpandButton>\n                    </span>\n                </Tooltip>\n            )}\n        </Slide>\n    );\n};\n\nexport default MicroPlayer;\n","import { SvgIcon, SvgIconProps } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst BeginningIcon: React.FC<SvgIconProps> = (props: SvgIconProps) => {\n    return (\n        <SvgIcon {...props}>\n            <path d=\"M6 6h2v12h-2z m1.5 6l8 6V6z m7 0 l8 6V6z\" />\n        </SvgIcon>\n    );\n};\n\nexport default BeginningIcon;\n","import { SvgIcon, SvgIconProps } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst ForwardIcon: React.FC<SvgIconProps> = (props: SvgIconProps) => {\n    return (\n        <SvgIcon {...props}>\n            <path d=\"M18,13c0,3.31-2.69,6-6,6s-6-2.69-6-6s2.69-6,6-6v4l5-5l-5-5v4c-4.42,0-8,3.58-8,8c0,4.42,3.58,8,8,8c4.42,0,8-3.58,8-8 H18z\" />\n        </SvgIcon>\n    );\n};\n\nexport default ForwardIcon;\n","import { Button as UnstyledButton, Theme, Tooltip } from \"@material-ui/core\";\nimport { ButtonProps } from \"@material-ui/core/Button\";\nimport DecreasePlayrateIcon from \"@material-ui/icons/ArrowDropDown\";\nimport IncreasePlayrateIcon from \"@material-ui/icons/ArrowDropUp\";\nimport PauseIcon from \"@material-ui/icons/Pause\";\nimport PlayIcon from \"@material-ui/icons/PlayArrow\";\nimport JumpBackIcon from \"@material-ui/icons/Replay\";\nimport SkipForwardIcon from \"@material-ui/icons/SkipNext\";\nimport SkipBackIcon from \"@material-ui/icons/SkipPrevious\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport BeginningIcon from \"./BeginningIcon\";\nimport { roundedCornersStyle } from \"../common\";\nimport JumpForwardIcon from \"./ForwardIcon\";\n\nconst Button = withStyles((theme: Theme) => ({\n    root: {\n        minWidth: 0,\n        ...roundedCornersStyle(theme),\n    },\n}))(UnstyledButton);\n\nconst PrimaryButton = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.primary.main,\n    },\n}))(Button);\n\nconst SecondaryButton = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.secondary.main,\n    },\n}))(Button);\n\nconst makeControlButton = (\n    child: React.ReactElement,\n    key: string,\n    tooltipMsg: string,\n    color: \"primary\" | \"secondary\"\n): React.FC<ButtonProps> => {\n    const ColoredButton = color === \"primary\" ? PrimaryButton : SecondaryButton;\n\n    return (props: ButtonProps) => (\n        <Tooltip key={key} title={tooltipMsg}>\n            <span>\n                <ColoredButton {...props} size=\"large\">\n                    {child}\n                </ColoredButton>\n            </span>\n        </Tooltip>\n    );\n};\n\nexport const ControlButton = {\n    Play: makeControlButton(\n        <PlayIcon />,\n        \"play-button\",\n        \"Play the damn song\",\n        \"primary\"\n    ),\n    Pause: makeControlButton(\n        <PauseIcon />,\n        \"pause-button\",\n        \"Pause\",\n        \"secondary\"\n    ),\n    JumpBack: makeControlButton(\n        <JumpBackIcon />,\n        \"jump-back-buttonn\",\n        \"Jump Back\",\n        \"primary\"\n    ),\n    JumpForward: makeControlButton(\n        <JumpForwardIcon />,\n        \"jump-forward-button\",\n        \"Jump Forward\",\n        \"primary\"\n    ),\n    SkipBack: makeControlButton(\n        <SkipBackIcon />,\n        \"skip-back-button\",\n        \"Go back a section\",\n        \"primary\"\n    ),\n    SkipForward: makeControlButton(\n        <SkipForwardIcon />,\n        \"skip-back-button\",\n        \"Go forward a section\",\n        \"primary\"\n    ),\n    Beginning: makeControlButton(\n        <BeginningIcon />,\n        \"beginning-button\",\n        \"Go to Beginning\",\n        \"primary\"\n    ),\n    DecreasePlayrate: makeControlButton(\n        <DecreasePlayrateIcon />,\n        \"decrease-playrate-button\",\n        \"Play slower\",\n        \"primary\"\n    ),\n    IncreasePlayrate: makeControlButton(\n        <IncreasePlayrateIcon />,\n        \"increase-playrate-button\",\n        \"Play faster\",\n        \"primary\"\n    ),\n};\n","import { Box, Divider, Theme } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\n\nexport const ControlGroupBox = withStyles({\n    root: {\n        display: \"flex\",\n        alignContent: \"center\",\n    },\n})(Box);\n\nexport const VerticalMiddleDivider = withStyles((theme: Theme) => ({\n    root: {\n        marginLeft: 0,\n        marginRight: 0,\n        marginTop: theme.spacing(1.5),\n        marginBottom: theme.spacing(1.5),\n    },\n}))(Divider);\n\ninterface ControlGroupProps {\n    children: React.ReactElement[];\n}\n\nconst ControlGroup: React.FC<ControlGroupProps> = (\n    props: ControlGroupProps\n): JSX.Element => {\n    const contents: React.ReactElement[] = props.children.map(\n        (child: React.ReactElement, index: number) => {\n            return (\n                <React.Fragment key={index}>\n                    {child}\n                    <VerticalMiddleDivider\n                        key={`divider-${index}`}\n                        orientation=\"vertical\"\n                        flexItem\n                    />\n                </React.Fragment>\n            );\n        }\n    );\n\n    return <ControlGroupBox>{contents}</ControlGroupBox>;\n};\n\nexport default ControlGroup;\n","import { Box, Theme, Tooltip, Typography } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { greyTextColour, widthOfString } from \"../common\";\nimport { ControlButton } from \"./ControlButton\";\nimport { ControlGroupBox } from \"./ControlGroup\";\n\nconst PlayrateBox = withStyles({\n    root: {\n        justifyContent: \"space-between\",\n    },\n})(ControlGroupBox);\n\nconst PercentageDisplay = withStyles((theme: Theme) => {\n    return {\n        root: {\n            color: greyTextColour,\n            minWidth: widthOfString(theme, \"h6\", \"200%\"),\n            display: \"flex\",\n            justifyContent: \"center\",\n        },\n    };\n})(Typography);\n\ninterface PlayrateControlProps {\n    playratePercentage: number;\n    onChange: (newPlayratePercentage: number) => void;\n}\n\nconst PlayrateControl: React.FC<PlayrateControlProps> = (\n    props: PlayrateControlProps\n): JSX.Element => {\n    const playrate = Math.round(props.playratePercentage);\n    const interval = 5;\n    const percentage: string = `${playrate}%`;\n\n    const onDecrease = () => props.onChange(playrate - interval);\n    const onIncrease = () => props.onChange(playrate + interval);\n\n    const decreaseDisabled = playrate - interval < 50;\n    const increaseDisabled = playrate + interval > 100;\n\n    return (\n        <PlayrateBox>\n            <ControlButton.DecreasePlayrate\n                onClick={onDecrease}\n                disabled={decreaseDisabled}\n            />\n            <Tooltip title=\"Playback speed\">\n                <PercentageDisplay variant=\"h6\">\n                    <Box>{percentage}</Box>\n                </PercentageDisplay>\n            </Tooltip>\n\n            <ControlButton.IncreasePlayrate\n                onClick={onIncrease}\n                disabled={increaseDisabled}\n            />\n        </PlayrateBox>\n    );\n};\n\nexport default PlayrateControl;\n","import { Theme, Typography } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { greyTextColour } from \"../common\";\nimport { VerticalMiddleDivider } from \"./ControlGroup\";\n\nconst SectionLabelTypography = withStyles((theme: Theme) => ({\n    root: {\n        marginLeft: theme.spacing(1.5),\n        marginRight: theme.spacing(1.5),\n        color: greyTextColour,\n    },\n}))(Typography);\n\ninterface SectionLabelProps {\n    value: string;\n    divider?: boolean;\n}\n\nconst SectionLabel: React.FC<SectionLabelProps> = (\n    props: SectionLabelProps\n) => {\n    if (props.value === \"\") {\n        return null;\n    }\n\n    return (\n        <>\n            <SectionLabelTypography variant=\"body1\">\n                {props.value}\n            </SectionLabelTypography>\n            {props.divider && (\n                <VerticalMiddleDivider orientation=\"vertical\" flexItem />\n            )}\n        </>\n    );\n};\n\nexport default SectionLabel;\n","import { Box } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useEffect } from \"react\";\nimport { PlainFn } from \"../../../common/PlainFn\";\nimport { useRegisterTopKeyListener } from \"../../GlobalKeyListener\";\nimport { controlPaneStyle } from \"../common\";\nimport { ControlButton } from \"./ControlButton\";\nimport ControlGroup from \"./ControlGroup\";\nimport PlayrateControl from \"./PlayrateControl\";\nimport SectionLabel from \"./SectionLabel\";\nimport { ButtonActionAndState } from \"./usePlayerControls\";\n\ninterface ControlPaneProps {\n    show: boolean;\n    playing: boolean;\n    onTogglePlay: PlainFn;\n    onJumpBack: PlainFn;\n    onJumpForward: PlainFn;\n    onGoToBeginning: PlainFn;\n    onSkipBack: ButtonActionAndState;\n    onSkipForward: ButtonActionAndState;\n    playratePercentage: number;\n    onPlayratePercentageChange: (newPlayrate: number) => void;\n    sectionLabel: string;\n}\n\nconst ControlPaneBox = withStyles({\n    root: {\n        ...controlPaneStyle,\n        justifyContent: \"space-between\",\n    },\n})(Box);\n\nconst ControlPane: React.FC<ControlPaneProps> = (\n    props: ControlPaneProps\n): JSX.Element => {\n    const [addTopKeyListener, removeKeyListener] = useRegisterTopKeyListener();\n\n    const playPauseButton = props.playing ? (\n        <ControlButton.Pause onClick={props.onTogglePlay} />\n    ) : (\n        <ControlButton.Play onClick={props.onTogglePlay} />\n    );\n\n    useEffect(() => {\n        if (!props.show) {\n            return;\n        }\n\n        const handleKey = (event: KeyboardEvent) => {\n            switch (event.code) {\n                case \"Space\": {\n                    props.onTogglePlay();\n                    event.preventDefault();\n\n                    break;\n                }\n                case \"ArrowLeft\": {\n                    if (event.ctrlKey || event.metaKey) {\n                        props.onSkipBack.action();\n                    } else {\n                        props.onJumpBack();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case \"ArrowRight\": {\n                    if (event.ctrlKey || event.metaKey) {\n                        props.onSkipForward.action();\n                    } else {\n                        props.onJumpForward();\n                    }\n\n                    event.preventDefault();\n                    return;\n                }\n            }\n        };\n\n        addTopKeyListener(handleKey);\n        return () => {\n            removeKeyListener(handleKey);\n        };\n    }, [props, addTopKeyListener, removeKeyListener]);\n\n    return (\n        <ControlPaneBox>\n            <ControlGroup>\n                <ControlButton.Beginning onClick={props.onGoToBeginning} />\n                <ControlButton.SkipBack\n                    disabled={!props.onSkipBack.enabled}\n                    onClick={props.onSkipBack.action}\n                />\n                <ControlButton.JumpBack onClick={props.onJumpBack} />\n                {playPauseButton}\n                <ControlButton.JumpForward onClick={props.onJumpForward} />\n                <ControlButton.SkipForward\n                    disabled={!props.onSkipForward.enabled}\n                    onClick={props.onSkipForward.action}\n                />\n            </ControlGroup>\n            <SectionLabel value={props.sectionLabel} />\n            <PlayrateControl\n                playratePercentage={props.playratePercentage}\n                onChange={props.onPlayratePercentageChange}\n            />\n        </ControlPaneBox>\n    );\n};\n\nexport default ControlPane;\n","import { Box } from \"@material-ui/core\";\nimport React, { useEffect, useMemo } from \"react\";\nimport ReactPlayer, { ReactPlayerProps } from \"react-player\";\nimport shortid from \"shortid\";\nimport { SingleTrack } from \"../../../../common/ChordModel/tracks/SingleTrack\";\nimport ControlPane from \"../ControlPane\";\nimport { ensureGoogleDriveCacheBusted } from \"../google_drive\";\nimport { PlayerControls } from \"../usePlayerControls\";\n\ninterface SingleTrackPlayerProps {\n    focused: boolean;\n    currentTrack: boolean;\n    playerControls: PlayerControls;\n    track: SingleTrack;\n}\n\nconst SingleTrackPlayer: React.FC<SingleTrackPlayerProps> = (\n    props: SingleTrackPlayerProps\n): JSX.Element => {\n    const trackURL: string = useMemo(\n        () => ensureGoogleDriveCacheBusted(props.track.url, shortid.generate()),\n        [props.track.url]\n    );\n\n    const commonReactPlayerProps: ReactPlayerProps = {\n        ref: props.playerControls.playerRef,\n        playing: props.playerControls.playing,\n        controls: true,\n        playbackRate: props.playerControls.playratePercentage / 100,\n        onPlay: props.playerControls.onPlay,\n        onPause: props.playerControls.onPause,\n        onProgress: props.playerControls.onProgress,\n        progressInterval: 500,\n        style: { minWidth: \"50vw\" },\n        height: \"auto\",\n        config: { file: { forceAudio: true } },\n    };\n\n    useEffect(() => {\n        if (!props.currentTrack && props.playerControls.playing) {\n            props.playerControls.onPause();\n        }\n    }, [props.currentTrack, props.playerControls]);\n\n    return (\n        <Box>\n            <Box>\n                <ReactPlayer {...commonReactPlayerProps} url={trackURL} />\n            </Box>\n            <ControlPane\n                show={props.focused}\n                playing={props.playerControls.playing}\n                sectionLabel={props.playerControls.currentSectionLabel}\n                onTogglePlay={props.playerControls.togglePlay}\n                onJumpBack={props.playerControls.jumpBack}\n                onJumpForward={props.playerControls.jumpForward}\n                onSkipBack={props.playerControls.skipBack}\n                onSkipForward={props.playerControls.skipForward}\n                onGoToBeginning={props.playerControls.goToBeginning}\n                playratePercentage={props.playerControls.playratePercentage}\n                onPlayratePercentageChange={\n                    props.playerControls.onPlayratePercentageChange\n                }\n            />\n        </Box>\n    );\n};\n\nexport default SingleTrackPlayer;\n","let audioCtx: AudioContext | null = null;\n\nexport const getAudioCtx = (): AudioContext => {\n    if (audioCtx === null) {\n        audioCtx = new window.AudioContext();\n    }\n\n    return audioCtx;\n};\n","import {\n    Box,\n    Button as UnstyledButton,\n    Grid,\n    Slider,\n    Theme,\n    Typography,\n} from \"@material-ui/core\";\nimport {\n    blueGrey,\n    grey,\n    lightBlue,\n    lightGreen,\n    pink,\n    purple,\n    yellow,\n} from \"@material-ui/core/colors\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\n\nconst FullSizedBox = withStyles((theme: Theme) => ({\n    root: {\n        width: \"100%\",\n        paddingLeft: theme.spacing(1.5),\n        paddingRight: theme.spacing(1.5),\n    },\n}))(Box);\n\nconst VolumeSlider = withStyles({\n    root: {\n        color: blueGrey[400],\n    },\n})(Slider);\n\nconst withColoredButtonStyle = (color: string) => {\n    return withStyles((theme: Theme) => ({\n        root: {\n            backgroundColor: color,\n            width: \"100%\",\n            height: \"100%\",\n            color: grey[700],\n            padding: theme.spacing(0.5),\n            textTransform: \"none\",\n            \"&:hover\": {\n                opacity: 0.6,\n                backgroundColor: color,\n            },\n        },\n    }));\n};\n\nconst DisabledButton = withColoredButtonStyle(grey[300])(UnstyledButton);\n\nconst ColouredButtons = {\n    white: withColoredButtonStyle(\"white\")(UnstyledButton),\n    pink: withColoredButtonStyle(pink[200])(UnstyledButton),\n    yellow: withColoredButtonStyle(yellow[200])(UnstyledButton),\n    purple: withColoredButtonStyle(purple[100])(UnstyledButton),\n    lightBlue: withColoredButtonStyle(lightBlue[200])(UnstyledButton),\n    lightGreen: withColoredButtonStyle(lightGreen[100])(UnstyledButton),\n};\n\nexport type ControlPaneButtonColour = keyof typeof ColouredButtons;\n\nexport interface StemControl<StemKey extends string> {\n    label: StemKey;\n    buttonColour: ControlPaneButtonColour;\n\n    enabled: boolean;\n    onEnabledChanged: (newEnabled: boolean) => void;\n    volume: number;\n    onVolumeChanged: (newVolume: number) => void;\n}\n\n// T is a stem key, e.g. \"bass\" | \"drums\"\ntype StemTrackControlPaneProps<StemKey extends string> = {\n    stemControls: StemControl<StemKey>[];\n};\n\nconst StemTrackControlPane = <StemKey extends string>(\n    props: StemTrackControlPaneProps<StemKey>\n): JSX.Element => {\n    const makeButton = <StemKey extends string>(\n        stemButton: StemControl<StemKey>\n    ) => {\n        const RenderedButton = stemButton.enabled\n            ? ColouredButtons[stemButton.buttonColour]\n            : DisabledButton;\n\n        const handleClick = () => {\n            stemButton.onEnabledChanged(!stemButton.enabled);\n        };\n\n        const preventClickBubble = (event: React.ChangeEvent<{}>) => {\n            event.preventDefault();\n            event.stopPropagation();\n        };\n\n        const handleVolumeChange = (\n            _event: React.ChangeEvent<{}>,\n            value: number | number[]\n        ) => {\n            if (typeof value !== \"number\") {\n                return;\n            }\n\n            stemButton.onVolumeChanged(value);\n        };\n\n        return (\n            <Grid item xs>\n                <RenderedButton variant=\"contained\" onClick={handleClick}>\n                    <FullSizedBox>\n                        <Typography variant=\"body1\">\n                            {stemButton.label}\n                        </Typography>\n\n                        <Box onClick={preventClickBubble}>\n                            <VolumeSlider\n                                value={stemButton.volume}\n                                onChange={handleVolumeChange}\n                                min={0}\n                                max={200}\n                                step={10}\n                                valueLabelDisplay=\"auto\"\n                            />\n                        </Box>\n                    </FullSizedBox>\n                </RenderedButton>\n            </Grid>\n        );\n    };\n\n    const buttons = props.stemControls.map(makeButton);\n\n    return <Grid container>{buttons}</Grid>;\n};\n\nexport default StemTrackControlPane;\n","import { Box } from \"@material-ui/core\";\nimport audioBufferToWav from \"audiobuffer-to-wav\";\nimport lodash from \"lodash\";\nimport { useSnackbar } from \"notistack\";\nimport React, {\n    ReactEventHandler,\n    SyntheticEvent,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from \"react\";\nimport FilePlayer, { FilePlayerProps } from \"react-player/file\";\nimport * as Tone from \"tone\";\nimport ControlPane from \"../ControlPane\";\nimport { PlayerControls } from \"../usePlayerControls\";\nimport { getAudioCtx } from \"./audioCtx\";\nimport StemTrackControlPane, {\n    ControlPaneButtonColour,\n    StemControl,\n} from \"./StemTrackControlPane\";\n\ninterface StemToneNodes<StemKey extends string> {\n    label: StemKey;\n    playerNode: Tone.GrainPlayer;\n    volumeNode: Tone.Volume;\n    endNode: Tone.Volume;\n}\n\ninterface StemState<StemKey extends string> {\n    key: StemKey;\n    muted: boolean;\n    volumePercentage: number;\n}\n\ntype ToneNodes<StemKey extends string> = StemToneNodes<StemKey>[];\n\ntype PlayerState<StemKey extends string> = {\n    masterVolumePercentage: number;\n    stems: StemState<StemKey>[];\n};\n\nexport interface StemInput<StemKey extends string> {\n    label: StemKey;\n    buttonColour: ControlPaneButtonColour;\n    audioBuffer: AudioBuffer;\n}\n\ninterface LoadedStemTrackPlayerProps<StemKey extends string> {\n    focused: boolean;\n    currentTrack: boolean;\n    stems: StemInput<StemKey>[];\n    playerControls: PlayerControls;\n}\n\nconst createToneNodes = <StemKey extends string>(\n    stem: StemInput<StemKey>\n): StemToneNodes<StemKey> => {\n    const volumeNode = new Tone.Volume();\n    const playerNode = new Tone.GrainPlayer({\n        url: stem.audioBuffer,\n        grainSize: 0.1,\n        overlap: 0.1,\n    }).chain(volumeNode);\n\n    return {\n        label: stem.label,\n        volumeNode: volumeNode,\n        playerNode: playerNode,\n        endNode: volumeNode,\n    };\n};\n\nconst createEmptySongURL = (time: number): string => {\n    const audioCtx = getAudioCtx();\n    const audioBuffer = audioCtx.createBuffer(\n        2,\n        audioCtx.sampleRate * time,\n        audioCtx.sampleRate\n    );\n\n    const arrayBuffer = audioBufferToWav(audioBuffer);\n    const blob = new window.Blob([arrayBuffer]);\n    const songURL = URL.createObjectURL(blob);\n    return songURL;\n};\n\nconst LoadedStemTrackPlayer = <StemKey extends string>(\n    props: LoadedStemTrackPlayerProps<StemKey>\n): JSX.Element => {\n    const { enqueueSnackbar } = useSnackbar();\n\n    const toneNodes: ToneNodes<StemKey> = useMemo(\n        () => props.stems.map(createToneNodes),\n        [props.stems]\n    );\n\n    const initialPlayerState: PlayerState<StemKey> = (() => {\n        const stemStates: StemState<StemKey>[] = props.stems.map(\n            (stem: StemInput<StemKey>) => {\n                return {\n                    key: stem.label,\n                    muted: false,\n                    volumePercentage: 100,\n                };\n            }\n        );\n\n        return {\n            masterVolumePercentage: 100,\n            stems: stemStates,\n        };\n    })();\n\n    const [playerState, setPlayerState] = useState<PlayerState<StemKey>>(\n        initialPlayerState\n    );\n\n    const playerStateRef = useRef(playerState);\n    playerStateRef.current = playerState;\n\n    const silentURL: string = useMemo(() => {\n        if (props.stems.length === 0) {\n            return \"\";\n        }\n\n        return createEmptySongURL(props.stems[0].audioBuffer.duration);\n    }, [props.stems]);\n\n    const handleMasterVolumeChange: ReactEventHandler<HTMLAudioElement> = (\n        event: SyntheticEvent<HTMLAudioElement>\n    ) => {\n        // need to use ref, seems like changing this doesn't cause a rerender in react player\n        const newPlayerState = lodash.cloneDeep(playerStateRef.current);\n        newPlayerState.masterVolumePercentage =\n            event.currentTarget.volume * 100;\n        setPlayerState(newPlayerState);\n    };\n\n    const commonReactPlayerProps: FilePlayerProps = {\n        ref: props.playerControls.playerRef,\n        playing: props.playerControls.playing,\n        controls: true,\n        volume: playerState.masterVolumePercentage / 100,\n        playbackRate: props.playerControls.playratePercentage / 100,\n        onPlay: props.playerControls.onPlay,\n        onPause: props.playerControls.onPause,\n        onProgress: props.playerControls.onProgress,\n        progressInterval: 500,\n        style: { minWidth: \"50vw\" },\n        height: \"auto\",\n        config: {\n            forceAudio: true,\n            attributes: {\n                onVolumeChange: handleMasterVolumeChange,\n            },\n        },\n    };\n\n    // check the integrity of the loaded tracks - they should all be the same length\n    // otherwise there could be a loading error\n    useEffect(() => {\n        let minDuration: number | null = null;\n        let maxDuration: number | null = null;\n\n        for (const stem of props.stems) {\n            const buffer = stem.audioBuffer;\n            if (minDuration === null || buffer.duration < minDuration) {\n                minDuration = buffer.duration;\n            }\n\n            if (maxDuration === null || buffer.duration > maxDuration) {\n                maxDuration = buffer.duration;\n            }\n        }\n\n        if (maxDuration === null || minDuration === null) {\n            return;\n        }\n\n        if (maxDuration - minDuration > 1) {\n            enqueueSnackbar(\n                \"Mismatch in length of tracks loaded, try refreshing\",\n                { variant: \"warning\" }\n            );\n        }\n    }, [enqueueSnackbar, props.stems]);\n\n    // synchronize the time control and tone transport\n    useEffect(() => {\n        // sync the play state\n        if (\n            props.playerControls.playing &&\n            Tone.Transport.state !== \"started\"\n        ) {\n            Tone.Transport.start();\n        } else if (\n            !props.playerControls.playing &&\n            Tone.Transport.state !== \"paused\" &&\n            Tone.Transport.state !== \"stopped\"\n        ) {\n            Tone.Transport.pause();\n        }\n\n        const playrate = props.playerControls.playratePercentage / 100;\n\n        // Tone transport doesn't observe slowed down time, only each individual node plays the sound back slower\n        // e.g. if a 10s clip is played at 50% speed, then Tone transport will finish playing it from 0s to 20s\n        // so to compare player time and Tone transport time, it needs to be scaled against the playrate\n        const adjustedToneTime = Tone.Transport.seconds * playrate;\n\n        // sync the time\n        if (Math.abs(props.playerControls.currentTime - adjustedToneTime) > 1) {\n            Tone.Transport.seconds =\n                props.playerControls.currentTime / playrate;\n        }\n    }, [\n        props.playerControls.playing,\n        props.playerControls.currentTime,\n        props.playerControls.playratePercentage,\n    ]);\n\n    // synchronize player state and track volumes/mutedness\n    useEffect(() => {\n        playerState.stems.forEach(\n            (stemState: StemState<StemKey>, stemIndex: number) => {\n                const nodes = toneNodes[stemIndex];\n\n                const stemVolume =\n                    (stemState.volumePercentage / 100) *\n                    (playerState.masterVolumePercentage / 100);\n\n                // don't set if fraction is 0, log of 0 is undefined\n                if (stemVolume > 0) {\n                    const stemVolumeDecibels = 20 * Math.log10(stemVolume);\n                    nodes.volumeNode.volume.value = stemVolumeDecibels;\n                }\n\n                // mute needs to be set last because it can be overrided by volume\n                nodes.endNode.mute = stemState.muted || stemVolume === 0;\n\n                nodes.playerNode.playbackRate =\n                    props.playerControls.playratePercentage / 100;\n            }\n        );\n    }, [toneNodes, playerState, props.playerControls.playratePercentage]);\n\n    // connect and disconnect nodes from the transport when not in focus\n    // so that other tracks can use the transport\n    useEffect(() => {\n        if (props.currentTrack) {\n            toneNodes.forEach((toneNode: StemToneNodes<StemKey>) => {\n                toneNode.playerNode.sync().start(0);\n                toneNode.endNode.toDestination();\n            });\n\n            return () => {\n                toneNodes.forEach((toneNode: StemToneNodes<StemKey>) => {\n                    toneNode.playerNode.unsync();\n                    toneNode.endNode.disconnect();\n                });\n            };\n        }\n    }, [props.currentTrack, toneNodes]);\n\n    // pause the track when user switches to a different track\n    useEffect(() => {\n        if (!props.currentTrack && props.playerControls.playing) {\n            props.playerControls.onPause();\n        }\n    }, [props.currentTrack, props.playerControls]);\n\n    // cleanup buffer resources when this component goes out of scope\n    useEffect(() => {\n        return () => {\n            toneNodes.forEach((toneNode: StemToneNodes<StemKey>) => {\n                toneNode.volumeNode.dispose();\n                toneNode.playerNode.dispose();\n            });\n        };\n    }, [toneNodes]);\n\n    const stemControlPane = (() => {\n        const makeStemControl = (\n            stemState: StemState<StemKey>,\n            stemIndex: number\n        ): StemControl<StemKey> => {\n            const buttonColour: ControlPaneButtonColour = (() => {\n                const stemInput = props.stems.find(\n                    (value: StemInput<StemKey>) => value.label === stemState.key\n                );\n                if (stemInput === undefined) {\n                    return \"white\";\n                }\n\n                return stemInput.buttonColour;\n            })();\n\n            return {\n                label: stemState.key,\n                buttonColour: buttonColour,\n                enabled: !stemState.muted,\n                onEnabledChanged: (enabled: boolean) => {\n                    const newPlayerState = lodash.cloneDeep(playerState);\n                    newPlayerState.stems[stemIndex].muted = !enabled;\n                    setPlayerState(newPlayerState);\n                },\n                volume: stemState.volumePercentage,\n                onVolumeChanged: (newVolume: number) => {\n                    const newPlayerState = lodash.cloneDeep(playerState);\n                    newPlayerState.stems[\n                        stemIndex\n                    ].volumePercentage = newVolume;\n                    setPlayerState(newPlayerState);\n                },\n            };\n        };\n\n        const stemControls = playerState.stems.map(makeStemControl);\n\n        return <StemTrackControlPane<StemKey> stemControls={stemControls} />;\n    })();\n\n    return (\n        <Box>\n            <Box>\n                <FilePlayer {...commonReactPlayerProps} url={silentURL} />\n            </Box>\n            {stemControlPane}\n            <ControlPane\n                show={props.focused}\n                playing={props.playerControls.playing}\n                sectionLabel={props.playerControls.currentSectionLabel}\n                onTogglePlay={props.playerControls.togglePlay}\n                onJumpBack={props.playerControls.jumpBack}\n                onJumpForward={props.playerControls.jumpForward}\n                onSkipBack={props.playerControls.skipBack}\n                onSkipForward={props.playerControls.skipForward}\n                onGoToBeginning={props.playerControls.goToBeginning}\n                playratePercentage={props.playerControls.playratePercentage}\n                onPlayratePercentageChange={\n                    props.playerControls.onPlayratePercentageChange\n                }\n            />\n        </Box>\n    );\n};\n\nexport default LoadedStemTrackPlayer;\n","import {\n    Box,\n    Button,\n    LinearProgress,\n    Theme,\n    Typography,\n} from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { withStyles } from \"@material-ui/styles\";\nimport ky, { DownloadProgress } from \"ky\";\nimport lodash from \"lodash\";\nimport prettyBytes from \"pretty-bytes\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { StemTrack } from \"../../../../common/ChordModel/tracks/StemTrack\";\nimport { DetailedLoadingFetchState } from \"../../../../common/fetch\";\nimport { mapObject } from \"../../../../common/mapObject\";\nimport { PlayerControls } from \"../usePlayerControls\";\nimport { getAudioCtx } from \"./audioCtx\";\nimport LoadedStemTrackPlayer, { StemInput } from \"./LoadedStemTrackPlayer\";\nimport { ControlPaneButtonColour } from \"./StemTrackControlPane\";\n\nconst PaddedBox = withStyles((theme: Theme) => ({\n    root: {\n        padding: theme.spacing(2),\n        backgroundColor: grey[100],\n    },\n}))(Box);\n\nexport interface StemButtonSpec<StemKey extends string> {\n    label: StemKey;\n    buttonColour: ControlPaneButtonColour;\n}\n\ninterface StemTrackPlayerProps<StemKey extends string> {\n    focused: boolean;\n    currentTrack: boolean;\n\n    track: StemTrack<StemKey>;\n    buttonSpecs: StemButtonSpec<StemKey>[];\n\n    playerControls: PlayerControls;\n}\n\ninterface SingleLoadingProgress {\n    loadedBytes: number;\n    totalBytes: number | \"initial\" | \"unknown\";\n}\n\ntype FetchResult<StemKey extends string> = StemInput<StemKey>[];\ntype LoadingProgress<StemKey extends string> = Record<\n    StemKey,\n    SingleLoadingProgress\n>;\n\nconst StemTrackPlayer = <StemKey extends string>(\n    props: StemTrackPlayerProps<StemKey>\n): JSX.Element => {\n    const [fetchState, setFetchState] = useState<\n        DetailedLoadingFetchState<\n            FetchResult<StemKey>,\n            LoadingProgress<StemKey>\n        >\n    >({\n        state: \"not-started\",\n    });\n\n    const fetchStateRef = useRef(fetchState);\n    fetchStateRef.current = fetchState;\n\n    const fetchAudioBuffer = async (\n        url: string,\n        handleProgress: (progress: DownloadProgress) => void\n    ): Promise<AudioBuffer> => {\n        const response = await ky\n            .get(url, {\n                timeout: false,\n                onDownloadProgress: handleProgress,\n            })\n            .arrayBuffer();\n\n        return await getAudioCtx().decodeAudioData(response);\n    };\n\n    useEffect(() => {\n        type BufferKeyPair = {\n            audioBuffer: AudioBuffer;\n            stemKey: StemKey;\n        };\n\n        const fetchAudioBufferWithProgress = (\n            url: string,\n            stemKey: StemKey\n        ) => {\n            const handleProgress = (progress: DownloadProgress) => {\n                const currentFetchState = fetchStateRef.current;\n                if (currentFetchState.state !== \"loading\") {\n                    return;\n                }\n\n                const newFetchState = lodash.clone(currentFetchState);\n                newFetchState.details[stemKey].loadedBytes =\n                    progress.transferredBytes;\n                newFetchState.details[stemKey].totalBytes =\n                    progress.totalBytes !== 0 ? progress.totalBytes : \"unknown\";\n\n                setFetchState(newFetchState);\n            };\n\n            const audioBufferPromise = fetchAudioBuffer(url, handleProgress);\n\n            return audioBufferPromise.then((audioBuffer: AudioBuffer) => ({\n                audioBuffer: audioBuffer,\n                stemKey: stemKey,\n            }));\n        };\n\n        const loadPlayers = async () => {\n            try {\n                const audioBufferPromises: Promise<BufferKeyPair>[] = [];\n\n                let stemKey: StemKey;\n                for (stemKey in props.track.stem_urls) {\n                    const bufferPromise = fetchAudioBufferWithProgress(\n                        props.track.stem_urls[stemKey],\n                        stemKey\n                    );\n                    audioBufferPromises.push(bufferPromise);\n                }\n\n                const resolvedKeyBuffers = await Promise.all(\n                    audioBufferPromises\n                );\n\n                let encounteredError = false;\n                const stemInputs: StemInput<StemKey>[] = props.buttonSpecs.map(\n                    (buttonSpec: StemButtonSpec<StemKey>) => {\n                        const audioBufferSearch = resolvedKeyBuffers.find(\n                            (value: BufferKeyPair) =>\n                                value.stemKey === buttonSpec.label\n                        );\n\n                        let audioBuffer: AudioBuffer;\n                        if (audioBufferSearch === undefined) {\n                            encounteredError = true;\n\n                            audioBuffer = new AudioBuffer({\n                                length: 0,\n                                sampleRate: 1,\n                            });\n                        } else {\n                            audioBuffer = audioBufferSearch.audioBuffer;\n                        }\n\n                        return {\n                            label: buttonSpec.label,\n                            audioBuffer: audioBuffer,\n                            buttonColour: buttonSpec.buttonColour,\n                        };\n                    }\n                );\n\n                if (encounteredError) {\n                    setFetchState({\n                        state: \"error\",\n                        error: new Error(\n                            \"Could not find stem key in audio buffer array to object mapping\"\n                        ),\n                    });\n                    return;\n                }\n\n                setFetchState({\n                    state: \"loaded\",\n                    item: stemInputs,\n                });\n            } catch (e) {\n                setFetchState({\n                    state: \"error\",\n                    error: e,\n                });\n                return;\n            }\n        };\n\n        if (fetchState.state === \"not-started\") {\n            loadPlayers();\n            setFetchState({\n                state: \"loading\",\n                details: mapObject(\n                    props.track.keyObject(),\n                    (): SingleLoadingProgress => ({\n                        loadedBytes: 0,\n                        totalBytes: \"initial\",\n                    })\n                ),\n            });\n        }\n    }, [fetchState, setFetchState, props.track, props.buttonSpecs]);\n\n    if (fetchState.state === \"not-started\") {\n        return (\n            <PaddedBox>\n                <Typography variant=\"body1\">\n                    Tracks have not started loading...\n                </Typography>\n            </PaddedBox>\n        );\n    }\n\n    if (fetchState.state === \"loading\") {\n        const totalBytes: number | \"unknown\" | \"initial\" = (() => {\n            let total = 0;\n            let stemKey: StemKey;\n            for (stemKey in fetchState.details) {\n                const stemTotal = fetchState.details[stemKey].totalBytes;\n\n                switch (stemTotal) {\n                    case \"unknown\": {\n                        return \"unknown\";\n                    }\n\n                    case \"initial\": {\n                        return \"initial\";\n                    }\n\n                    default: {\n                        total += stemTotal;\n                        break;\n                    }\n                }\n            }\n            return total;\n        })();\n\n        const loadedBytes: number = (() => {\n            let loaded = 0;\n            let stemKey: StemKey;\n            for (stemKey in fetchState.details) {\n                loaded += fetchState.details[stemKey].loadedBytes;\n            }\n            return loaded;\n        })();\n\n        let formattedProgress = prettyBytes(loadedBytes);\n        if (totalBytes !== \"unknown\" && totalBytes !== \"initial\") {\n            formattedProgress += \"/\" + prettyBytes(totalBytes);\n        }\n\n        const progressBar = (() => {\n            if (totalBytes === \"unknown\") {\n                return <LinearProgress />;\n            }\n\n            const percent: number = (() => {\n                if (totalBytes === \"initial\") {\n                    // we don't know everything yet, just conservatively pretend it's out of 100MB\n                    // so the bar won't go backwards\n                    const pretendTotalBytes = 100 * 1000 * 1000;\n                    return (loadedBytes / pretendTotalBytes) * 100;\n                }\n\n                return (loadedBytes / totalBytes) * 100;\n            })();\n\n            return <LinearProgress variant=\"determinate\" value={percent} />;\n        })();\n\n        const label = (() => {\n            if (loadedBytes === totalBytes) {\n                return \"Processing track...\";\n            }\n\n            return \"Loading track...\";\n        })();\n\n        return (\n            <PaddedBox>\n                <Typography variant=\"body1\">\n                    {label}({formattedProgress})\n                </Typography>\n                {progressBar}\n            </PaddedBox>\n        );\n    }\n\n    if (fetchState.state === \"error\") {\n        console.error(fetchState.error);\n        const refresh = () => {\n            setFetchState({ state: \"not-started\" });\n        };\n\n        return (\n            <PaddedBox display=\"flex\" alignItems=\"center\">\n                <Button onClick={refresh}>\n                    <RefreshIcon />\n                </Button>\n                <Typography variant=\"body1\">Failed to load tracks</Typography>\n            </PaddedBox>\n        );\n    }\n\n    return (\n        <LoadedStemTrackPlayer\n            focused={props.focused}\n            currentTrack={props.currentTrack}\n            stems={fetchState.item}\n            playerControls={props.playerControls}\n        />\n    );\n};\n\nexport default StemTrackPlayer;\n","import {\n    Box,\n    Collapse,\n    LinearProgress,\n    Theme,\n    Typography,\n} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport {\n    FiveStemKeys,\n    FourStemKeys,\n    TwoStemKeys,\n} from \"../../common/ChordModel/tracks/StemTrack\";\nimport { Track } from \"../../common/ChordModel/tracks/Track\";\nimport SingleTrackPlayer from \"./internal_player/single/SingleTrackPlayer\";\nimport StemTrackPlayer, {\n    StemButtonSpec,\n} from \"./internal_player/stem/StemTrackPlayer\";\nimport { PlayerControls } from \"./internal_player/usePlayerControls\";\n\nconst PaddedBox = withStyles((theme: Theme) => ({\n    root: {\n        padding: theme.spacing(2),\n        backgroundColor: grey[100],\n    },\n}))(Box);\n\ninterface TrackPlayerProps {\n    focused: boolean;\n    currentTrack: boolean;\n    track: Track;\n    playerControls: PlayerControls;\n}\n\nconst TrackPlayer: React.FC<TrackPlayerProps> = (\n    props: TrackPlayerProps\n): JSX.Element => {\n    const innerPlayer: React.ReactElement = (() => {\n        switch (props.track.track_type) {\n            case \"single\": {\n                return (\n                    <SingleTrackPlayer\n                        focused={props.focused}\n                        currentTrack={props.currentTrack}\n                        track={props.track}\n                        playerControls={props.playerControls}\n                    />\n                );\n            }\n\n            case \"2stems\": {\n                const buttonSpecs: StemButtonSpec<TwoStemKeys>[] = [\n                    {\n                        label: \"vocals\",\n                        buttonColour: \"lightBlue\",\n                    },\n                    {\n                        label: \"accompaniment\",\n                        buttonColour: \"purple\",\n                    },\n                ];\n\n                return (\n                    <StemTrackPlayer\n                        focused={props.focused}\n                        currentTrack={props.currentTrack}\n                        track={props.track}\n                        buttonSpecs={buttonSpecs}\n                        playerControls={props.playerControls}\n                    />\n                );\n            }\n\n            case \"4stems\": {\n                const buttonSpecs: StemButtonSpec<FourStemKeys>[] = [\n                    {\n                        label: \"vocals\",\n                        buttonColour: \"lightBlue\",\n                    },\n                    {\n                        label: \"other\",\n                        buttonColour: \"purple\",\n                    },\n                    {\n                        label: \"bass\",\n                        buttonColour: \"pink\",\n                    },\n                    {\n                        label: \"drums\",\n                        buttonColour: \"yellow\",\n                    },\n                ];\n\n                return (\n                    <StemTrackPlayer\n                        focused={props.focused}\n                        currentTrack={props.currentTrack}\n                        track={props.track}\n                        buttonSpecs={buttonSpecs}\n                        playerControls={props.playerControls}\n                    />\n                );\n            }\n\n            case \"5stems\": {\n                const buttonSpecs: StemButtonSpec<FiveStemKeys>[] = [\n                    {\n                        label: \"vocals\",\n                        buttonColour: \"lightBlue\",\n                    },\n                    {\n                        label: \"other\",\n                        buttonColour: \"purple\",\n                    },\n                    {\n                        label: \"piano\",\n                        buttonColour: \"lightGreen\",\n                    },\n                    {\n                        label: \"bass\",\n                        buttonColour: \"pink\",\n                    },\n                    {\n                        label: \"drums\",\n                        buttonColour: \"yellow\",\n                    },\n                ];\n\n                return (\n                    <StemTrackPlayer\n                        focused={props.focused}\n                        currentTrack={props.currentTrack}\n                        track={props.track}\n                        buttonSpecs={buttonSpecs}\n                        playerControls={props.playerControls}\n                    />\n                );\n            }\n\n            case \"split_2stems\":\n            case \"split_4stems\":\n            case \"split_5stems\": {\n                return (\n                    <PaddedBox>\n                        <Typography variant=\"body1\">\n                            Processing track. Refresh to check progress.\n                        </Typography>\n                        <LinearProgress />\n                    </PaddedBox>\n                );\n            }\n        }\n    })();\n\n    return <Collapse in={props.focused}>{innerPlayer}</Collapse>;\n};\n\nexport default TrackPlayer;\n","import {\n    Box,\n    Button,\n    CircularProgress,\n    Divider,\n    MenuItem,\n    Select as UnstyledSelect,\n    Slide,\n    Theme,\n} from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CollapseDownIcon from \"@material-ui/icons/ExpandMore\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport React, { useEffect } from \"react\";\nimport { Track } from \"../../common/ChordModel/tracks/Track\";\nimport { PlainFn } from \"../../common/PlainFn\";\nimport { useRegisterTopKeyListener } from \"../GlobalKeyListener\";\nimport {\n    roundedCornersStyle,\n    roundedTopCornersStyle,\n    TitleBar,\n    withBottomRightBox,\n} from \"./common\";\nimport {\n    PlayerControls,\n    unfocusedControls,\n} from \"./internal_player/usePlayerControls\";\nimport { TrackListLoad } from \"./TrackListProvider\";\nimport TrackPlayer from \"./TrackPlayer\";\n\nconst FlexBox = withStyles((theme: Theme) => ({\n    root: {\n        display: \"flex\",\n        alignItems: \"center\",\n        margin: theme.spacing(0.5),\n    },\n}))(Box);\n\nconst CenteredBox = withStyles((theme: Theme) => ({\n    root: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        margin: theme.spacing(0.5),\n    },\n}))(Box);\n\nconst TitleBarButton = withStyles((theme: Theme) => ({\n    root: {\n        minWidth: 0,\n        ...roundedCornersStyle(theme),\n    },\n}))(Button);\n\nconst usePaddingLeftStyle = makeStyles((theme: Theme) => ({\n    root: {\n        \"& .MuiSelect-select\": {\n            paddingLeft: theme.spacing(2),\n        },\n    },\n}));\n\nconst Select = withStyles((theme: Theme) => ({\n    root: {\n        minWidth: theme.spacing(30),\n    },\n}))(UnstyledSelect);\n\nconst FullPlayerContainer = withStyles((theme: Theme) => ({\n    root: {\n        backgroundColor: \"white\",\n        ...roundedTopCornersStyle(theme),\n    },\n}))(Box);\n\ninterface MultiTrackPlayerProps {\n    show: boolean;\n\n    tracklistLoad: TrackListLoad;\n    playerControls: PlayerControls;\n\n    currentTrackIndex: number;\n    onSelectCurrentTrack: (index: number) => void;\n\n    onOpenTrackEditDialog?: PlainFn;\n    onMinimize: PlainFn;\n    onRefresh: PlainFn;\n}\n\nconst MultiTrackPlayer: React.FC<MultiTrackPlayerProps> = (\n    props: MultiTrackPlayerProps\n): JSX.Element => {\n    const paddingLeftStyle = usePaddingLeftStyle();\n    const [addTopKeyListener, removeKeyListener] = useRegisterTopKeyListener();\n\n    {\n        const show = props.show;\n        const onMinimize = props.onMinimize;\n        useEffect(() => {\n            if (!show) {\n                return;\n            }\n\n            const handleKey = (event: KeyboardEvent) => {\n                if (event.code !== \"Slash\") {\n                    return;\n                }\n\n                onMinimize();\n                event.preventDefault();\n            };\n\n            addTopKeyListener(handleKey);\n            return () => removeKeyListener(handleKey);\n        }, [addTopKeyListener, removeKeyListener, onMinimize, show]);\n    }\n\n    const trackListEditButton = props.onOpenTrackEditDialog !== undefined && (\n        <TitleBarButton onClick={props.onOpenTrackEditDialog}>\n            <EditIcon />\n        </TitleBarButton>\n    );\n\n    const trackRefreshButton = (\n        <TitleBarButton onClick={props.onRefresh}>\n            <RefreshIcon />\n        </TitleBarButton>\n    );\n\n    const trackChangeHandler = (\n        event: React.ChangeEvent<{\n            name?: string | undefined;\n            value: unknown;\n        }>\n    ) => {\n        const value: unknown = event.target.value;\n        if (typeof value !== \"number\") {\n            console.error(\n                \"Unexpected! Selected value in full size player selector is not a number type\"\n            );\n            return;\n        }\n\n        props.onSelectCurrentTrack(value);\n    };\n\n    const trackListPicker = (() => {\n        const items = (() => {\n            if (props.tracklistLoad.state !== \"loaded\") {\n                return undefined;\n            }\n\n            return props.tracklistLoad.tracklist.tracks.map(\n                (track: Track, index: number) => (\n                    <MenuItem key={`${index}-${track.label}`} value={index}>\n                        {track.label}\n                    </MenuItem>\n                )\n            );\n        })();\n\n        return (\n            <Select\n                className={paddingLeftStyle.root}\n                disableUnderline\n                value={props.currentTrackIndex}\n                onChange={trackChangeHandler}\n            >\n                {items}\n            </Select>\n        );\n    })();\n\n    const titleBar = (\n        <TitleBar>\n            <Box />\n            <FlexBox>\n                {trackRefreshButton}\n                {trackListEditButton}\n                {trackListPicker}\n            </FlexBox>\n            <Box>\n                <TitleBarButton onClick={props.onMinimize}>\n                    <CollapseDownIcon />\n                </TitleBarButton>\n            </Box>\n        </TitleBar>\n    );\n\n    const internalContent: React.ReactNode = (() => {\n        if (props.tracklistLoad.state === \"loading\") {\n            return (\n                <CenteredBox>\n                    <CircularProgress />\n                </CenteredBox>\n            );\n        }\n\n        const makePlayer = (track: Track, index: number) => {\n            const currentTrack = index === props.currentTrackIndex;\n            const focused = currentTrack && props.show;\n            const playerControls = currentTrack\n                ? props.playerControls\n                : unfocusedControls;\n\n            return (\n                <TrackPlayer\n                    key={`${index}-${track.id}`}\n                    focused={focused}\n                    currentTrack={currentTrack}\n                    track={track}\n                    playerControls={playerControls}\n                />\n            );\n        };\n\n        return props.tracklistLoad.tracklist.tracks.map(makePlayer);\n    })();\n\n    return (\n        <Slide in={props.show} direction=\"up\">\n            {withBottomRightBox(\n                <FullPlayerContainer>\n                    {titleBar}\n                    <Divider />\n                    {internalContent}\n                </FullPlayerContainer>\n            )}\n        </Slide>\n    );\n};\n\nexport default MultiTrackPlayer;\n","import React, { useCallback, useState } from \"react\";\nimport shortid from \"shortid\";\nimport { TimeSection } from \"../../common/ChordModel/ChordLine\";\nimport { TrackList } from \"../../common/ChordModel/tracks/TrackList\";\nimport { PlainFn } from \"../../common/PlainFn\";\nimport TrackListEditDialog from \"./dialog/TrackListEditDialog\";\nimport { usePlayerControls } from \"./internal_player/usePlayerControls\";\nimport MicroPlayer from \"./MicroPlayer\";\nimport MultiTrackPlayer from \"./MultiTrackPlayer\";\nimport { TrackListLoad } from \"./TrackListProvider\";\n\ntype PlayerVisibilityState = \"minimized\" | \"full\";\n\ninterface JamStationProps {\n    tracklistLoad: TrackListLoad;\n    timeSections: TimeSection[];\n    onTrackListChanged: (trackList: TrackList) => void;\n    onRefresh: PlainFn;\n    collapsedButtonClassName?: string;\n}\n\ninterface TrackEditDialogState {\n    open: boolean;\n    randomID: string;\n}\n\nconst JamStation: React.FC<JamStationProps> = (\n    props: JamStationProps\n): JSX.Element => {\n    const [playerVisibilityState, setPlayerVisibilityState] = useState<\n        PlayerVisibilityState\n    >(\"minimized\");\n\n    const [trackEditDialogState, setTrackEditDialogState] = useState<\n        TrackEditDialogState\n    >({ open: false, randomID: \"\" });\n\n    // lazy loading - if we just render everything it will also\n    // cause heavy network traffic, don't do it without prompt\n    const [loadPlayers, setLoadPlayers] = useState(false);\n\n    const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\n\n    const playerControls = usePlayerControls(props.timeSections);\n\n    const trackListIsEmpty =\n        props.tracklistLoad.state === \"loaded\" &&\n        props.tracklistLoad.tracklist.tracks.length === 0;\n\n    const collapsedButtonFn = (\n        disabled: boolean,\n        expandFn: () => void,\n        tooltipMessage: string\n    ) => (\n        <MicroPlayer\n            className={props.collapsedButtonClassName}\n            show={playerVisibilityState === \"minimized\"}\n            playersLoaded={loadPlayers}\n            playerControls={playerControls}\n            tooltipMessage={tooltipMessage}\n            disabled={disabled}\n            onClick={expandFn}\n        />\n    );\n\n    const handleTrackListChange = (tracklist: TrackList) => {\n        closeTrackEditDialog();\n        props.onTrackListChanged?.(tracklist);\n    };\n\n    const openTrackEditDialog = () => {\n        setTrackEditDialogState({ open: true, randomID: shortid.generate() });\n    };\n\n    const closeTrackEditDialog = () => {\n        setTrackEditDialogState({ open: false, randomID: \"\" });\n    };\n\n    const trackEditDialog = trackEditDialogState.open && (\n        <TrackListEditDialog\n            key={trackEditDialogState.randomID}\n            open={trackEditDialogState.open}\n            trackListLoad={props.tracklistLoad}\n            onSubmit={handleTrackListChange}\n            onClose={closeTrackEditDialog}\n            onRefresh={props.onRefresh}\n        />\n    );\n\n    const showPlayer = useCallback(() => {\n        if (!loadPlayers) {\n            setLoadPlayers(true);\n        }\n\n        setPlayerVisibilityState(\"full\");\n    }, [loadPlayers, setLoadPlayers, setPlayerVisibilityState]);\n\n    const minimizePlayer = useCallback(() => {\n        setPlayerVisibilityState(\"minimized\");\n    }, [setPlayerVisibilityState]);\n\n    if (trackListIsEmpty) {\n        // prompt the user to add tracks if there is none\n        return (\n            <>\n                {collapsedButtonFn(false, openTrackEditDialog, \"Show Player\")}\n                {trackEditDialog}\n            </>\n        );\n    }\n\n    if (!loadPlayers) {\n        return collapsedButtonFn(false, showPlayer, \"Show Player\");\n    }\n\n    const fullPlayer: false | JSX.Element = loadPlayers && (\n        <MultiTrackPlayer\n            show={playerVisibilityState === \"full\"}\n            tracklistLoad={props.tracklistLoad}\n            playerControls={playerControls}\n            currentTrackIndex={currentTrackIndex}\n            onSelectCurrentTrack={setCurrentTrackIndex}\n            onMinimize={minimizePlayer}\n            onRefresh={props.onRefresh}\n            onOpenTrackEditDialog={openTrackEditDialog}\n        />\n    );\n\n    return (\n        <>\n            {collapsedButtonFn(false, showPlayer, \"Show Player\")}\n            {fullPlayer}\n            {trackEditDialog}\n        </>\n    );\n};\n\nexport default JamStation;\n","import { useSnackbar } from \"notistack\";\nimport ky from \"ky\";\n\ninterface BackendError {\n    code: string;\n    msg: string;\n}\n\nconst validateError = (json: unknown): json is BackendError => {\n    if (typeof json !== \"object\") {\n        return false;\n    }\n\n    if (json === null || json === undefined) {\n        return false;\n    }\n\n    return \"code\" in json && \"msg\" in json;\n};\n\nexport const useErrorMessage = () => {\n    const { enqueueSnackbar } = useSnackbar();\n\n    const showErrorMsg = (msg: string) => {\n        enqueueSnackbar(msg, { variant: \"error\" });\n    };\n\n    return async (unknownError: any) => {\n        const showGenericErrorMsg = () => {\n            console.error(unknownError);\n\n            showErrorMsg(\n                \"An unknown error has occurred - please check the console for more details\"\n            );\n        };\n\n        if (!(unknownError instanceof ky.HTTPError)) {\n            showGenericErrorMsg();\n            return;\n        }\n\n        // cloning the response so that it can continue to be reused\n        const responseClone = unknownError.response.clone();\n        const error: unknown = await responseClone.json();\n\n        if (!validateError(error)) {\n            showGenericErrorMsg();\n            return;\n        }\n\n        console.error(error.msg);\n\n        switch (error.code) {\n            case \"create_song_exists\": {\n                showErrorMsg(\n                    \"Save failed: The song already exists and can't be created again!\"\n                );\n                break;\n            }\n\n            case \"update_song_overwrite\": {\n                showErrorMsg(\n                    \"Autosave failed: This song has been updated recently and saving now will clobber previously saved results. Please try to load the song in another tab and copy your work over to save it\"\n                );\n                break;\n            }\n            case \"song_not_found\": {\n                showErrorMsg(\"Not found: A song of this ID cannot be found\");\n                break;\n            }\n            case \"failed_google_verification\": {\n                showErrorMsg(\n                    \"Google verification failed: Please try to refresh and login again\"\n                );\n                break;\n            }\n\n            case \"get_songs_for_user_not_allowed\": {\n                showErrorMsg(\n                    \"Loading songs failed: You don't have permission to see this user's songs\"\n                );\n                break;\n            }\n\n            case \"update_song_owner_not_allowed\": {\n                showErrorMsg(\n                    \"Autosave failed: You don't have permission to update this user's songs\"\n                );\n                break;\n            }\n\n            case \"update_song_wrong_id\": {\n                showErrorMsg(\n                    \"Autosave failed: There is a mismatch of song IDs. Please refresh and try again\"\n                );\n                break;\n            }\n\n            case \"datastore_error\": {\n                showErrorMsg(\n                    \"The data operation was not successful - please check the console for more details\"\n                );\n                break;\n            }\n\n            default: {\n                showErrorMsg(\n                    \"An unknown error has occurred - please check the console for more details\"\n                );\n                break;\n            }\n        }\n    };\n};\n","import { Either, left, right } from \"fp-ts/lib/Either\";\nimport ky from \"ky\";\nimport { ChordSong } from \"../ChordModel/ChordSong\";\nimport { TrackList } from \"../ChordModel/tracks/TrackList\";\n\nconst backendHost = ((): string => {\n    const localURL = \"http://localhost:5000\";\n\n    if (\n        process.env.NODE_ENV === \"development\" ||\n        process.env.NODE_ENV === \"test\"\n    ) {\n        return localURL;\n    }\n\n    const backendURL: string | undefined = process.env.REACT_APP_BACKEND_URL;\n    if (backendURL === undefined) {\n        console.error(\"Production build doesn't have backend URL set!\");\n        return localURL;\n    }\n\n    return backendURL;\n})();\n\nexport const login = async (\n    authToken: string\n): Promise<Either<Error, unknown>> => {\n    let parsed: unknown;\n\n    try {\n        parsed = await ky\n            .post(`${backendHost}/login`, {\n                headers: {\n                    Authorization: \"Bearer \" + authToken,\n                },\n            })\n            .json();\n    } catch (e) {\n        return left(e);\n    }\n\n    return right(parsed);\n};\n\nexport const getSong = async (\n    songID: string\n): Promise<Either<Error, unknown>> => {\n    let parsed: unknown;\n\n    try {\n        parsed = await ky.get(`${backendHost}/songs/${songID}`).json();\n    } catch (e) {\n        return left(e);\n    }\n\n    return right(parsed);\n};\n\nexport const getTrackList = async (\n    songID: string\n): Promise<Either<Error, unknown>> => {\n    let parsed: unknown;\n\n    try {\n        parsed = await ky\n            .get(`${backendHost}/songs/${songID}/tracklist`, { timeout: false })\n            .json();\n    } catch (e) {\n        return left(e);\n    }\n\n    return right(parsed);\n};\n\nexport const getSongsForUser = async (\n    userID: string,\n    authToken: string\n): Promise<Either<Error, unknown>> => {\n    let parsed: unknown;\n\n    try {\n        parsed = await ky\n            .get(`${backendHost}/users/${userID}/songs`, {\n                headers: {\n                    Authorization: \"Bearer \" + authToken,\n                },\n            })\n            .json();\n    } catch (e) {\n        return left(e);\n    }\n\n    return right(parsed);\n};\n\nexport const createSong = async (\n    song: ChordSong,\n    authToken: string\n): Promise<Either<Error, unknown>> => {\n    let parsed: unknown;\n\n    try {\n        parsed = await ky\n            .post(`${backendHost}/songs`, {\n                json: song,\n                headers: {\n                    Authorization: \"Bearer \" + authToken,\n                },\n            })\n            .json();\n    } catch (e) {\n        return left(e);\n    }\n\n    return right(parsed);\n};\n\nexport const updateSong = async (\n    song: ChordSong,\n    authToken: string\n): Promise<Either<Error, unknown>> => {\n    if (song.isUnsaved()) {\n        return left(\n            new Error(\"A song that hasn't been created can't be updated\")\n        );\n    }\n\n    let parsed: unknown;\n\n    try {\n        parsed = await ky\n            .put(`${backendHost}/songs/${song.id}`, {\n                json: song,\n                headers: {\n                    Authorization: \"Bearer \" + authToken,\n                },\n            })\n            .json();\n    } catch (e) {\n        return left(e);\n    }\n\n    return right(parsed);\n};\n\nexport const updateTrackList = async (\n    tracklist: TrackList,\n    authToken: string\n): Promise<Either<Error, unknown>> => {\n    if (tracklist.song_id === \"\") {\n        return left(new Error(\"No song ID on the tracklist\"));\n    }\n\n    let parsed: unknown;\n\n    try {\n        parsed = await ky\n            .put(`${backendHost}/songs/${tracklist.song_id}/tracklist`, {\n                json: tracklist,\n                headers: {\n                    Authorization: \"Bearer \" + authToken,\n                },\n            })\n            .json();\n    } catch (e) {\n        return left(e);\n    }\n\n    return right(parsed);\n};\n","import * as iots from \"io-ts\";\nimport { SingleTrack, SingleTrackValidator } from \"./SingleTrack\";\nimport { SplitStemTrack, SplitStemTrackValidator } from \"./SplitStemRequest\";\nimport {\n    FiveStemTrack,\n    FiveStemTrackValidator,\n    FourStemTrack,\n    FourStemTrackValidator,\n    TwoStemTrack,\n    TwoStemTrackValidator,\n} from \"./StemTrack\";\n\nexport const TrackValidator = iots.union([\n    SingleTrackValidator,\n    TwoStemTrackValidator,\n    FourStemTrackValidator,\n    FiveStemTrackValidator,\n    SplitStemTrackValidator,\n]);\n\nexport type Track =\n    | SingleTrack\n    | TwoStemTrack\n    | FourStemTrack\n    | FiveStemTrack\n    | SplitStemTrack;\n","import { Either, isLeft, left, right } from \"fp-ts/lib/Either\";\nimport * as iots from \"io-ts\";\nimport { SingleTrack } from \"./SingleTrack\";\nimport { SplitStemTrack } from \"./SplitStemRequest\";\nimport { FiveStemTrack, FourStemTrack, TwoStemTrack } from \"./StemTrack\";\nimport { Track, TrackValidator } from \"./Track\";\n\nconst TrackListValidator = iots.type({\n    song_id: iots.string,\n    tracks: iots.array(TrackValidator),\n});\n\ntype TrackListValidatedFields = iots.TypeOf<typeof TrackListValidator>;\nexport class TrackList implements TrackListValidatedFields {\n    song_id: string;\n    tracks: Track[];\n\n    constructor(songID: string, tracks: Track[]) {\n        this.song_id = songID;\n        this.tracks = tracks;\n    }\n\n    static fromValidatedFields(\n        validatedFields: TrackListValidatedFields\n    ): TrackList {\n        const deserializeTrack = (\n            validatedFields: iots.TypeOf<typeof TrackValidator>\n        ): Track => {\n            switch (validatedFields.track_type) {\n                case \"single\": {\n                    return SingleTrack.fromValidatedFields(validatedFields);\n                }\n\n                case \"2stems\": {\n                    return TwoStemTrack.fromValidatedFields(validatedFields);\n                }\n\n                case \"4stems\": {\n                    return FourStemTrack.fromValidatedFields(validatedFields);\n                }\n\n                case \"5stems\": {\n                    return FiveStemTrack.fromValidatedFields(validatedFields);\n                }\n\n                case \"split_2stems\":\n                case \"split_4stems\":\n                case \"split_5stems\": {\n                    return SplitStemTrack.fromValidatedFields(validatedFields);\n                }\n            }\n        };\n\n        const tracks: Track[] = validatedFields.tracks.map(deserializeTrack);\n        return new TrackList(validatedFields.song_id, tracks);\n    }\n\n    static fromJSONObject(jsonObj: unknown): Either<Error, TrackList> {\n        const validationResult = TrackListValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Song object\"));\n        }\n\n        return right(this.fromValidatedFields(validationResult.right));\n    }\n}\n","import { makeStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport ErrorImg from \"../../assets/img/error.jpeg\";\n\nconst useErrorStyles = makeStyles({\n    root: {\n        objectFit: \"contain\",\n    },\n});\n\nconst ErrorImage: React.FC<{}> = (): JSX.Element => {\n    const errorStyles = useErrorStyles();\n\n    return (\n        <img\n            src={ErrorImg}\n            className={errorStyles.root}\n            alt=\"Song Loading Error\"\n        />\n    );\n};\n\nexport default ErrorImage;\n","import React from \"react\";\n\ninterface LoginResponse {\n    id: string;\n    name: string | null;\n}\n\nexport class User {\n    private googleUser: gapi.auth2.CurrentUser;\n    name: string | null;\n    userID: string;\n    authToken: string;\n\n    constructor(\n        googleUser: gapi.auth2.CurrentUser,\n        userID: string,\n        name: string | null\n    ) {\n        this.googleUser = googleUser;\n        this.userID = userID;\n        this.name = name;\n\n        this.authToken = googleUser.get().getAuthResponse().id_token;\n\n        this.googleUser.listen(() => {\n            this.refreshAuthToken.call(this);\n        });\n    }\n\n    private refreshAuthToken() {\n        this.authToken = this.getNewAuthToken();\n    }\n\n    private getNewAuthToken(): string {\n        const user = this.googleUser.get();\n        return user.getAuthResponse().id_token;\n    }\n}\n\nexport const UserContext = React.createContext<User | null>(null);\n\nexport const deserializeUser = (\n    response: unknown,\n    googleUser: gapi.auth2.CurrentUser\n): User | null => {\n    if (!validateResponse(response)) {\n        return null;\n    }\n\n    return new User(googleUser, response.id, response.name);\n};\n\nconst validateResponse = (response: unknown): response is LoginResponse => {\n    if (typeof response !== \"object\") {\n        return false;\n    }\n\n    if (response === null || response === undefined) {\n        return false;\n    }\n\n    return \"id\" in response && \"name\" in response;\n};\n","import { Either } from \"fp-ts/lib/Either\";\nimport { isLeft } from \"fp-ts/lib/These\";\nimport React, { useState } from \"react\";\nimport { useErrorMessage } from \"../../common/backend/errors\";\nimport { getTrackList, updateTrackList } from \"../../common/backend/requests\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { TrackList } from \"../../common/ChordModel/tracks/TrackList\";\nimport { FetchState } from \"../../common/fetch\";\nimport { PlainFn } from \"../../common/PlainFn\";\nimport ErrorImage from \"../display/ErrorImage\";\nimport { User, UserContext } from \"../user/userContext\";\n\nexport type TrackListChangeHandler = (tracklist: TrackList) => void;\n\ninterface LoadingTrackListState {\n    state: \"loading\";\n}\n\ninterface LoadedTrackListState {\n    state: \"loaded\";\n    tracklist: TrackList;\n}\n\nexport type TrackListLoad = LoadedTrackListState | LoadingTrackListState;\n\ninterface TrackListProviderProps {\n    song: ChordSong;\n    children: (\n        tracklistLoad: TrackListLoad,\n        changeHandler: TrackListChangeHandler,\n        onRefresh: PlainFn\n    ) => JSX.Element;\n}\n\nconst TrackListProvider: React.FC<TrackListProviderProps> = (\n    props: TrackListProviderProps\n): JSX.Element => {\n    const showError = useErrorMessage();\n    const user: User | null = React.useContext(UserContext);\n\n    const [fetchState, setFetchState] = useState<FetchState<TrackList>>({\n        state: \"not-started\",\n    });\n\n    const handleFetchedTracklist = (fetchResult: Either<Error, unknown>) => {\n        if (isLeft(fetchResult)) {\n            setFetchState({ state: \"error\", error: fetchResult.left });\n            return;\n        }\n\n        const result = TrackList.fromJSONObject(fetchResult.right);\n        if (isLeft(result)) {\n            setFetchState({\n                state: \"error\",\n                error: \"Failed to deserialize payload to tracklist\",\n            });\n            return;\n        }\n\n        setFetchState({ state: \"loaded\", item: result.right });\n    };\n\n    const fetchTrackList = async () => {\n        let fetchResult = await getTrackList(props.song.id);\n        handleFetchedTracklist(fetchResult);\n    };\n\n    const handleTrackListChanged = async (tracklist: TrackList) => {\n        if (user === null || !props.song.isOwner(user)) {\n            setFetchState({ state: \"loaded\", item: tracklist });\n            return;\n        }\n\n        const updateResult = await updateTrackList(tracklist, user.authToken);\n        handleFetchedTracklist(updateResult);\n    };\n\n    const refresh = () => setFetchState({ state: \"not-started\" });\n\n    switch (fetchState.state) {\n        case \"not-started\": {\n            setFetchState({ state: \"loading\" });\n            fetchTrackList();\n            return <></>;\n        }\n        case \"error\": {\n            showError(fetchState.error);\n            return <ErrorImage />;\n        }\n        case \"loading\": {\n            return props.children(\n                { state: \"loading\" },\n                handleTrackListChanged,\n                refresh\n            );\n        }\n        case \"loaded\": {\n            return props.children(\n                { state: \"loaded\", tracklist: fetchState.item },\n                handleTrackListChanged,\n                refresh\n            );\n        }\n    }\n};\n\nexport default TrackListProvider;\n","import {\n    ChordLine,\n    ChordLineValidator,\n    ChordLineValidatedFields,\n} from \"../../common/ChordModel/ChordLine\";\nimport * as iots from \"io-ts\";\nimport { Either, right, left, isLeft, parseJSON } from \"fp-ts/lib/Either\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { useSnackbar } from \"notistack\";\nimport { getSelectedLineIDs } from \"./LineSelection\";\n\nconst CopiedChordLinesValidator = iots.type({\n    copiedChordLines: iots.array(ChordLineValidator),\n});\n\ninterface CopiedChordLines {\n    copiedChordLines: ChordLine[];\n}\n\nconst deserializeCopiedChordLines = (\n    jsonStr: string\n): Either<Error, ChordLine[]> | null => {\n    const result: Either<Error, unknown> = parseJSON(\n        jsonStr,\n        () => new Error(\"Failed to parse json string\")\n    );\n\n    if (isLeft(result)) {\n        return result;\n    }\n\n    const jsonObj = result.right as any;\n\n    // if the JSON doesn't contain this field, then it's a JSON copy payload\n    // from somewhere else - don't handle it\n    if (jsonObj.copiedChordLines === undefined) {\n        return null;\n    }\n\n    const validationResult = CopiedChordLinesValidator.decode(jsonObj);\n\n    if (isLeft(validationResult)) {\n        return left(new Error(\"Invalid Chord Lines payload\"));\n    }\n\n    const validatedChordLineObjects = validationResult.right.copiedChordLines;\n    const chordLines: ChordLine[] = validatedChordLineObjects.map(\n        (obj: ChordLineValidatedFields) => {\n            return ChordLine.fromValidatedFields(obj);\n        }\n    );\n\n    return right(chordLines);\n};\n\nconst serializeCopiedChordLines = (chordLines: ChordLine[]): string => {\n    const payload: CopiedChordLines = {\n        copiedChordLines: chordLines,\n    };\n\n    return JSON.stringify(payload);\n};\n\nexport const useLineCopyHandler = (song: ChordSong) => {\n    const { enqueueSnackbar } = useSnackbar();\n\n    return (event: React.ClipboardEvent<HTMLDivElement>): boolean => {\n        const lineIDs: string[] = getSelectedLineIDs();\n        const lines = song.chordLines.filter((line: ChordLine): boolean => {\n            return lineIDs.includes(line.id);\n        });\n\n        if (lines.length === 0) {\n            return false;\n        }\n\n        const serialized = serializeCopiedChordLines(lines);\n        event.clipboardData.setData(\"application/json\", serialized);\n\n        event.preventDefault();\n\n        let copyMsg: string;\n        if (lines.length === 1) {\n            copyMsg = `1 line copied to your clipboard`;\n        } else {\n            copyMsg = `${lines.length} lines copied to your clipboard`;\n        }\n\n        enqueueSnackbar(copyMsg, { variant: \"info\" });\n        return true;\n    };\n};\n\nexport const useLinePasteHandler = (song: ChordSong) => {\n    const { enqueueSnackbar } = useSnackbar();\n\n    return (id: IDable<ChordLine>, jsonStr: string): boolean => {\n        const deserializedCopyResult = deserializeCopiedChordLines(jsonStr);\n        // not actually a Chord Paper line payload, don't handle it\n        if (deserializedCopyResult === null) {\n            return false;\n        }\n\n        if (isLeft(deserializedCopyResult)) {\n            const errorMsg =\n                \"Failed to paste copied lines: \" +\n                deserializedCopyResult.left.message;\n            enqueueSnackbar(errorMsg, { variant: \"error\" });\n            return true;\n        }\n\n        const currLine: ChordLine = song.get(id);\n\n        const copiedLines: ChordLine[] = deserializedCopyResult.right;\n        song.addAfter(id, ...copiedLines);\n\n        // if the line is empty, the user was probably trying to paste into the current line, and not the next\n        // so just remove the current line to simulate that\n        if (currLine.isEmpty()) {\n            song.remove(id);\n        }\n\n        return true;\n    };\n};\n","import React, { useRef } from \"react\";\nimport { createDndContext, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\n// extremely hacky - overriding the implementation of the backend forcibly\n// however React-DND is pretty much unmaintained, so there are few other choices\nexport const HTML5BackendWithCTRLKey = (\n    ...params: Parameters<typeof HTML5Backend>\n) => {\n    const backend = HTML5Backend(...params);\n\n    const welpThingsBroke = () => {\n        console.error(\n            \"----------------------BAD THING HAPPENED----------------------\"\n        );\n        console.error(\"HTML5 Drag and Drop backend changed internally\");\n        console.error(\"Drag and drop is probably broken\");\n        console.error(\n            \"----------------------BAD THING HAPPENED----------------------\"\n        );\n    };\n\n    const untypesafeBackend: any = backend;\n\n    if (\n        untypesafeBackend.handleTopDragEnter === undefined ||\n        untypesafeBackend.handleTopDragEnter === null\n    ) {\n        welpThingsBroke();\n    }\n\n    untypesafeBackend.__original__handleTopDragEnter =\n        untypesafeBackend.handleTopDragEnter;\n\n    untypesafeBackend.handleTopDragEnter = (e: DragEvent) => {\n        untypesafeBackend.__original__handleTopDragEnter(e);\n        untypesafeBackend.altKeyPressed = e.ctrlKey || e.metaKey;\n    };\n\n    if (\n        untypesafeBackend.handleTopDragOver === undefined ||\n        untypesafeBackend.handleTopDragOver === null\n    ) {\n        welpThingsBroke();\n    }\n\n    untypesafeBackend.__original__handleTopDragOver =\n        untypesafeBackend.handleTopDragOver;\n    untypesafeBackend.handleTopDragOver = (e: DragEvent) => {\n        untypesafeBackend.__original__handleTopDragOver(e);\n        untypesafeBackend.altKeyPressed = e.ctrlKey || e.metaKey;\n    };\n\n    return backend;\n};\n\nconst RNDContext = createDndContext(HTML5BackendWithCTRLKey);\n\ninterface DragAndDropProps {\n    children: React.ReactElement | null;\n}\n\nfunction useDNDProviderElement(props: DragAndDropProps) {\n    const manager = useRef(RNDContext);\n\n    if (!props.children) {\n        throw new Error(\"No children provided to DND wrapper\");\n    }\n\n    if (manager.current.dragDropManager === undefined) {\n        throw new Error(\"No DND manager found\");\n    }\n\n    return (\n        <DndProvider manager={manager.current.dragDropManager}>\n            {props.children}\n        </DndProvider>\n    );\n}\n\nconst DragAndDrop: React.FC<DragAndDropProps> = (\n    props: DragAndDropProps\n): JSX.Element => {\n    const DNDElement = useDNDProviderElement(props);\n    return <React.Fragment>{DNDElement}</React.Fragment>;\n};\n\nexport default DragAndDrop;\n","// all possible expression of notes\n// except quarter tunings\n// and double sharps and double flats\nexport enum ChromaticScale {\n    C = \"C\",\n    C_sharp = \"C#\",\n    Db = \"Db\",\n    D = \"D\",\n    D_sharp = \"D#\",\n    Eb = \"Eb\",\n    E = \"E\",\n    Fb = \"Fb\",\n    E_sharp = \"E#\",\n    F = \"F\",\n    F_sharp = \"F#\",\n    Gb = \"Gb\",\n    G = \"G\",\n    G_sharp = \"G#\",\n    Ab = \"Ab\",\n    A = \"A\",\n    A_sharp = \"A#\",\n    Bb = \"Bb\",\n    B = \"B\",\n    Cb = \"Cb\",\n    B_sharp = \"B#\",\n}\n\n// no good way to enumerate all values of an enum in TS\n// and keep type safety. this isn't expected to change so it should be stable\nexport const AllChromaticScale: ChromaticScale[] = [\n    ChromaticScale.C,\n    ChromaticScale.C_sharp,\n    ChromaticScale.Db,\n    ChromaticScale.D,\n    ChromaticScale.D_sharp,\n    ChromaticScale.Eb,\n    ChromaticScale.E,\n    ChromaticScale.Fb,\n    ChromaticScale.E_sharp,\n    ChromaticScale.F,\n    ChromaticScale.F_sharp,\n    ChromaticScale.Gb,\n    ChromaticScale.G,\n    ChromaticScale.G_sharp,\n    ChromaticScale.Ab,\n    ChromaticScale.A,\n    ChromaticScale.A_sharp,\n    ChromaticScale.Bb,\n    ChromaticScale.B,\n    ChromaticScale.Cb,\n    ChromaticScale.B_sharp,\n];\n\n// flattened representation of the 12 note scale\n// everything represented as flats so that I don't have to add any\n// C_sharp like enums\nexport enum NoteClass {\n    C,\n    Db,\n    D,\n    Eb,\n    E,\n    F,\n    Gb,\n    G,\n    Ab,\n    A,\n    Bb,\n    B,\n}\n\nconst noteClassCount = 12;\n\ntype NoteMapping = {\n    [P in ChromaticScale]: NoteClass;\n};\n\nconst mapping: NoteMapping = {\n    // naturals\n    [ChromaticScale.C]: NoteClass.C,\n    [ChromaticScale.D]: NoteClass.D,\n    [ChromaticScale.E]: NoteClass.E,\n    [ChromaticScale.F]: NoteClass.F,\n    [ChromaticScale.G]: NoteClass.G,\n    [ChromaticScale.A]: NoteClass.A,\n    [ChromaticScale.B]: NoteClass.B,\n    // flats\n    [ChromaticScale.Cb]: NoteClass.B,\n    [ChromaticScale.Db]: NoteClass.Db,\n    [ChromaticScale.Eb]: NoteClass.Eb,\n    [ChromaticScale.Fb]: NoteClass.E,\n    [ChromaticScale.Gb]: NoteClass.Gb,\n    [ChromaticScale.Ab]: NoteClass.Ab,\n    [ChromaticScale.Bb]: NoteClass.Bb,\n    // sharps\n    [ChromaticScale.C_sharp]: NoteClass.Db,\n    [ChromaticScale.D_sharp]: NoteClass.Eb,\n    [ChromaticScale.E_sharp]: NoteClass.F,\n    [ChromaticScale.F_sharp]: NoteClass.Gb,\n    [ChromaticScale.G_sharp]: NoteClass.Ab,\n    [ChromaticScale.A_sharp]: NoteClass.Bb,\n    [ChromaticScale.B_sharp]: NoteClass.C,\n};\n\nexport const getNoteClass = (note: ChromaticScale): NoteClass => {\n    return mapping[note];\n};\n\nexport const getDifference = (\n    from: ChromaticScale,\n    to: ChromaticScale\n): number => {\n    const fromNoteClass = getNoteClass(from);\n    const toNoteClass = getNoteClass(to);\n    let diff = toNoteClass - fromNoteClass;\n    if (diff < 0) {\n        diff += noteClassCount;\n    }\n\n    return diff;\n};\n\nexport const moveUpSemitones = (note: NoteClass, moveBy: number): NoteClass => {\n    return (note + moveBy) % noteClassCount;\n};\n","import React, { useState, useContext } from \"react\";\nimport { PlainFn } from \"../../common/PlainFn\";\n\nexport interface InteractionSetter {\n    startInteraction: PlainFn;\n    endInteraction: PlainFn;\n}\n\nconst defaultSetter: InteractionSetter = {\n    startInteraction: () => {},\n    endInteraction: () => {},\n};\n\nexport const InteractionContext = React.createContext<InteractionSetter>(\n    defaultSetter\n);\n\ninterface EditingState {\n    editing: boolean;\n    startEdit: PlainFn;\n    finishEdit: PlainFn;\n}\n\nexport const useEditingState = (): EditingState => {\n    const [editing, setEditing] = useState(false);\n    const { startInteraction, endInteraction } = useContext(InteractionContext);\n\n    const startEdit = () => {\n        setEditing(true);\n        startInteraction();\n    };\n\n    const finishEdit = () => {\n        setEditing(false);\n        endInteraction();\n    };\n\n    return {\n        editing: editing,\n        startEdit: startEdit,\n        finishEdit: finishEdit,\n    };\n};\n","import { Theme } from \"@material-ui/core\";\nimport { CSSProperties } from \"@material-ui/styles\";\n\nexport const spaceClassName = \"LyricTokenSpace\";\nexport const wordClassName = \"LyricTokenWord\";\nexport const firstTokenClassName = \"FirstLyricToken\";\n\nexport const chordTargetClassName = \"ChordTarget\";\nexport const chordSymbolClassName = \"ChordSymbol\";\n\nconst highlightedSpaceStyle = (theme: Theme): CSSProperties => ({\n    backgroundColor: theme.palette.primary.main,\n});\n\nconst highlightedWordStyle = (theme: Theme): CSSProperties => ({\n    color: theme.palette.primary.main,\n});\n\nconst outlineStyle = (theme: Theme): CSSProperties => ({\n    borderStyle: \"solid\",\n    borderColor: theme.palette.primary.main,\n    borderRadius: \"0.3em\",\n    borderWidth: \"0.075em\",\n});\n\nexport interface HighlightChordLyricStyleOptions {\n    outline?: (theme: Theme) => CSSProperties;\n    customLyricClassSelector?: string;\n    customChordTargetClassSelector?: string;\n    customChordSymbolClassSelector?: string;\n}\n\nconst withCustomLyricSelector = (\n    selector: string,\n    options?: HighlightChordLyricStyleOptions\n): string => {\n    if (options?.customLyricClassSelector === undefined) {\n        return selector;\n    }\n\n    return `${selector}.${options.customLyricClassSelector}`;\n};\n\nconst withCustomChordTargetSelector = (\n    selector: string,\n    options?: HighlightChordLyricStyleOptions\n): string => {\n    if (options?.customChordTargetClassSelector === undefined) {\n        return selector;\n    }\n\n    return `${selector}.${options.customChordTargetClassSelector}`;\n};\n\nconst withCustomChordSymbolSelector = (\n    selector: string,\n    options?: HighlightChordLyricStyleOptions\n): string => {\n    if (options?.customChordSymbolClassSelector === undefined) {\n        return selector;\n    }\n\n    return `${selector}.${options.customChordSymbolClassSelector}`;\n};\n\nexport const dragOverChordLyricStyle = (\n    options?: HighlightChordLyricStyleOptions\n) => {\n    return (theme: Theme) => {\n        const highlightedSpace = highlightedSpaceStyle(theme);\n        const highlightedWord = highlightedWordStyle(theme);\n\n        const customOutlineStyles: CSSProperties | undefined =\n            options?.outline !== undefined ? options.outline(theme) : undefined;\n\n        const outline = {\n            ...outlineStyle(theme),\n            ...customOutlineStyles,\n        };\n\n        const spaceClassSelector = withCustomLyricSelector(\n            `.${spaceClassName}`,\n            options\n        );\n        const wordClassSelector = withCustomLyricSelector(\n            `.${wordClassName}`,\n            options\n        );\n\n        const chordSymbolSelector = withCustomChordSymbolSelector(\n            `.${chordSymbolClassName}`,\n            options\n        );\n\n        return {\n            root: {\n                [`& ${spaceClassSelector}`]: highlightedSpace,\n                [`& ${wordClassSelector}`]: highlightedWord,\n                [`& ${chordSymbolSelector}`]: outline,\n            },\n        };\n    };\n};\n\nexport const hoverChordLyricStyle = (\n    options?: HighlightChordLyricStyleOptions\n) => {\n    return (theme: Theme) => {\n        const highlightedSpace = highlightedSpaceStyle(theme);\n        const highlightedWord = highlightedWordStyle(theme);\n\n        const customOutlineStyles: CSSProperties | undefined =\n            options?.outline !== undefined ? options.outline(theme) : undefined;\n\n        const outline = {\n            ...outlineStyle(theme),\n            ...customOutlineStyles,\n        };\n\n        const spaceClassSelector = withCustomLyricSelector(\n            `.${spaceClassName}`,\n            options\n        );\n        const wordClassSelector = withCustomLyricSelector(\n            `.${wordClassName}`,\n            options\n        );\n        const chordTargetSelector = withCustomChordTargetSelector(\n            `.${chordTargetClassName}`,\n            options\n        );\n        const chordSymbolSelector = withCustomChordSymbolSelector(\n            `.${chordSymbolClassName}`,\n            options\n        );\n\n        return {\n            root: {\n                [`& ${chordTargetSelector}:hover ~ ${spaceClassSelector}`]: highlightedSpace,\n                [`& ${chordTargetSelector}:hover ~ * ${spaceClassSelector}`]: highlightedSpace,\n\n                [`& ${chordTargetSelector}:hover ~ ${wordClassSelector}`]: highlightedWord,\n                [`& ${chordTargetSelector}:hover ~ * ${wordClassSelector}`]: highlightedWord,\n\n                [`& ${chordTargetSelector}${chordSymbolSelector}:hover`]: outline,\n                [`& ${chordTargetSelector}:hover ${chordSymbolSelector}`]: outline,\n            },\n        };\n    };\n};\n","import React from \"react\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport Tab, {\n    findTabType,\n    isValidTabValue,\n    lyricTabTypeOfDOMNode,\n    SizedTab,\n} from \"./Tab\";\n\nconst deserializeLyricStr = (\n    lyrics: string,\n    tokenIndex: number,\n    edit: boolean\n): React.ReactElement | string => {\n    if (isValidTabValue(\"serializedStr\", lyrics)) {\n        const tabType = findTabType(\"serializedStr\", lyrics);\n        return <Tab key={tokenIndex} type={tabType.sizedTab} edit={edit} />;\n    }\n\n    return lyrics;\n};\n\nexport const deserializeLyrics = (\n    lyric: Lyric,\n    edit: boolean\n): (React.ReactElement | string)[] => {\n    const nodes: (React.ReactElement | string)[] = [];\n    const tokens: Lyric[] = lyric.tokenize();\n\n    for (let i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        const node: React.ReactElement | string = token.get((lyrics: string) =>\n            deserializeLyricStr(lyrics, i, edit)\n        );\n\n        // merge strings where possible\n        if (\n            typeof node === \"string\" &&\n            nodes.length > 0 &&\n            typeof nodes[nodes.length - 1] === \"string\"\n        ) {\n            nodes[nodes.length - 1] += node;\n        } else {\n            nodes.push(node);\n        }\n    }\n\n    return nodes;\n};\n\nexport const serializeLyrics = (childNodes: NodeListOf<ChildNode>): Lyric => {\n    let serializedLyrics: string = \"\";\n    childNodes.forEach((childNode: ChildNode) => {\n        const sizedTab: SizedTab | null = lyricTabTypeOfDOMNode(childNode);\n\n        if (sizedTab !== null) {\n            const tabType = findTabType(\"sizedTab\", sizedTab);\n            serializedLyrics += tabType.serializedStr;\n        } else {\n            serializedLyrics += childNode.textContent;\n        }\n    });\n\n    return new Lyric(serializedLyrics);\n};\n","import { createStyles, Typography, withStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport {\n    spaceClassName,\n    wordClassName,\n} from \"../edit/HighlightChordLyricStyle\";\nimport { deserializeLyrics } from \"../lyrics/Serialization\";\n\nexport const lyricTypographyVariant: \"h6\" = \"h6\";\n\nexport const lyricTypographyProps = {\n    variant: lyricTypographyVariant,\n    display: \"inline\" as \"inline\",\n};\n\nexport const lyricStyle = createStyles({\n    root: {\n        whiteSpace: \"pre\",\n        wordSpacing: \".15em\",\n        display: \"inline-block\",\n    },\n});\n\nexport const LyricTypography = withStyles(lyricStyle)(Typography);\n\ninterface LyricTypographyProps extends DataTestID {\n    children: Lyric;\n    className?: string;\n}\n\nconst LyricDisplay: React.FC<LyricTypographyProps> = (\n    props: LyricTypographyProps\n): JSX.Element => {\n    const customClassName = props.className ?? \"\";\n\n    const className = clsx({\n        [spaceClassName]: props.children.isEntirelySpace(),\n        [wordClassName]: !props.children.isEntirelySpace(),\n        [customClassName]: props.className !== undefined,\n    });\n\n    return (\n        <LyricTypography\n            {...lyricTypographyProps}\n            className={className}\n            data-testid={props[\"data-testid\"]}\n        >\n            {deserializeLyrics(props.children, false)}\n        </LyricTypography>\n    );\n};\n\nexport default LyricDisplay;\n","import { RootRef } from \"@material-ui/core\";\nimport React from \"react\";\nimport { DropTargetMonitor, useDrop } from \"react-dnd\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\n\nexport const DNDChordType: \"chord\" = \"chord\";\n\nexport interface DNDChord {\n    type: typeof DNDChordType;\n    sourceBlockID: IDable<ChordBlock>;\n    chord: string;\n    handled: boolean;\n}\n\nexport const NewDNDChord = (\n    sourceBlockID: IDable<ChordBlock>,\n    chord: string\n): DNDChord => {\n    return {\n        type: DNDChordType,\n        sourceBlockID: sourceBlockID,\n        chord: chord,\n        handled: false,\n    };\n};\n\ninterface ClassNameable {\n    className?: string;\n}\n\ninterface ChordDropTargetProps {\n    children: (isOver: boolean) => React.ReactElement<ClassNameable>;\n    onDropped: ChordDroppableProps[\"onDropped\"];\n}\n\ninterface DropResult {\n    isOver: boolean;\n}\n\nconst ChordDropTarget: React.FC<ChordDropTargetProps> = (\n    props: ChordDropTargetProps\n) => {\n    const [{ isOver }, dropRef] = useDrop<DNDChord, DNDChord, DropResult>({\n        accept: DNDChordType,\n        drop: (droppedChord: DNDChord, monitor: DropTargetMonitor) => {\n            const dropResult = monitor.getDropResult();\n\n            // the drop effect (i.e. move vs copy) can only be retrieved from the drop result,\n            // which is the object that is returned by this fn (drop), with dropEffect shimmed in\n            //\n            // the drop result is always null the first time and therefore the drop effect cannot be\n            // retrieved on the first interception of the drop event\n            //\n            // this handler is meant to be called twice - the first time where drop result is null\n            // and the second time where drop result is not null, and the drop effect can be found\n            //\n            // this code is coupled with the returned component below, where two nested <ChordDropTarget>s are returned\n            // to induce a valid drop result\n            if (dropResult !== null && !droppedChord.handled) {\n                droppedChord.handled = true;\n                const isCopyAction: boolean = dropResult.dropEffect === \"copy\";\n\n                props.onDropped(\n                    droppedChord.chord,\n                    droppedChord.sourceBlockID,\n                    isCopyAction\n                );\n            }\n\n            return droppedChord;\n        },\n        collect: (monitor: DropTargetMonitor): DropResult => ({\n            isOver: monitor.isOver({ shallow: true }),\n        }),\n    });\n\n    return <RootRef rootRef={dropRef}>{props.children(isOver)}</RootRef>;\n};\n\ninterface ChordDroppableProps {\n    children: React.ReactElement<ClassNameable>;\n    onDropped: (\n        newChord: string,\n        sourceBlockID: IDable<ChordBlock>,\n        copyAction: boolean\n    ) => void;\n    hoverableClassName?: string;\n    dragOverClassName?: string;\n}\n\nconst ChordDroppable: React.FC<ChordDroppableProps> = (\n    props: ChordDroppableProps\n) => {\n    const childrenWithClassname = (\n        isOver: boolean\n    ): React.ReactElement<ClassNameable> => {\n        let childElem: React.ReactElement<ClassNameable> = props.children;\n        const childClassName: string | undefined = isOver\n            ? props.dragOverClassName\n            : props.hoverableClassName;\n\n        if (childClassName !== undefined) {\n            childElem = React.cloneElement(childElem, {\n                className: childClassName,\n            });\n        }\n\n        return childElem;\n    };\n\n    return (\n        // nested drop targets to get a drop result -\n        // see the drop handler in ChordDropTarget for a thorough explanation\n        <ChordDropTarget {...props}>\n            {() => (\n                <ChordDropTarget {...props}>\n                    {childrenWithClassname}\n                </ChordDropTarget>\n            )}\n        </ChordDropTarget>\n    );\n};\n\nexport default ChordDroppable;\n","import { Typography } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { inflateIfEmpty } from \"../../common/Whitespace\";\nimport { lyricTypographyVariant } from \"./Lyric\";\n\nconst ChordTypography = withStyles({\n    root: {\n        whiteSpace: \"pre\",\n        cursor: \"pointer\",\n        fontFamily: \"PoriChord\",\n        userSelect: \"all\",\n    },\n})(Typography);\n\nexport interface ChordSymbolProps {\n    children: string;\n    className?: string;\n}\n\nconst ChordSymbol: React.FC<ChordSymbolProps> = (\n    props: ChordSymbolProps\n): JSX.Element => {\n    const formattedChord = (): string => {\n        let chord = props.children;\n        if (chord.endsWith(\" \")) {\n            return chord;\n        }\n\n        chord = chord + \" \";\n\n        return inflateIfEmpty(chord);\n    };\n\n    return (\n        <ChordTypography\n            variant={lyricTypographyVariant} // keep chords and lyrics the same size\n            display=\"inline\"\n            data-testid=\"ChordSymbol\"\n            className={props.className}\n        >\n            {formattedChord()}\n        </ChordTypography>\n    );\n};\n\nexport default ChordSymbol;\n","import { RootRef } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport ChordSymbol, { ChordSymbolProps } from \"../display/ChordSymbol\";\nimport { NewDNDChord } from \"./ChordDroppable\";\nimport { PlainFn } from \"../../common/PlainFn\";\n\ninterface DraggableChordSymbolProps extends ChordSymbolProps {\n    chordBlockID: IDable<ChordBlock>;\n    onDragged?: PlainFn;\n}\n\nconst DraggableChordSymbol: React.FC<DraggableChordSymbolProps> = (\n    props: DraggableChordSymbolProps\n): JSX.Element => {\n    const [, dragRef] = useDrag({\n        item: NewDNDChord(props.chordBlockID, props.children),\n    });\n\n    return (\n        <RootRef rootRef={dragRef}>\n            <ChordSymbol className={props.className}>\n                {props.children}\n            </ChordSymbol>\n        </RootRef>\n    );\n};\n\nexport default DraggableChordSymbol;\n","import {\n    InputBaseComponentProps,\n    TextField,\n    TextFieldProps,\n    Theme,\n    TypographyVariant,\n    useTheme,\n} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport { CSSProperties, StyledComponentProps } from \"@material-ui/styles\";\nimport React from \"react\";\n\ninterface ControlledTextInputProps extends StyledComponentProps {\n    value: string;\n    onValueChange: (newValue: string) => void;\n    onFinish?: (newValue: string) => void;\n    width?: string;\n    variant: TextFieldProps[\"variant\"];\n    InputProps?: TextFieldProps[\"InputProps\"];\n    inputRef?: TextFieldProps[\"inputRef\"];\n    error?: TextFieldProps[\"error\"];\n    typographyVariant?: TypographyVariant;\n    placeholder?: string;\n    paddingSpacing?: number;\n}\n\nconst ControlledTextInput: React.FC<ControlledTextInputProps> = (\n    props: ControlledTextInputProps\n): JSX.Element => {\n    const theme: Theme = useTheme();\n\n    const updateValue = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => {\n        props.onValueChange(event.target.value);\n    };\n\n    const keyDownHandler = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"Enter\") {\n            finish(props.value);\n        }\n    };\n\n    const finish = (newValue: string) => {\n        props.onFinish?.(newValue);\n    };\n\n    const blurHandler = () => {\n        finish(props.value);\n    };\n\n    const browserInputProps = (() => {\n        let variant: CSSProperties | undefined = undefined;\n        if (props.typographyVariant !== undefined) {\n            variant = theme?.typography?.[props.typographyVariant];\n        }\n\n        const padding: number = (() => {\n            if (props.paddingSpacing === undefined) {\n                return 0;\n            }\n\n            return theme.spacing(props.paddingSpacing);\n        })();\n\n        const fontSize: string | number | undefined = variant?.fontSize;\n\n        const inputProps: InputBaseComponentProps = {\n            style: {\n                padding: padding,\n                fontSize: fontSize,\n                opacity: 1,\n                background: grey[100],\n            },\n            className: props.classes?.root,\n        };\n\n        if (props.width !== undefined && inputProps.style) {\n            inputProps.style.width = props.width;\n        }\n\n        return inputProps;\n    })();\n\n    return (\n        <TextField\n            autoFocus\n            variant={props.variant}\n            inputProps={{\n                \"data-testid\": \"InnerInput\",\n                ...browserInputProps,\n            }}\n            InputProps={props.InputProps}\n            inputRef={props.inputRef}\n            value={props.value}\n            onBlur={blurHandler}\n            onChange={updateValue}\n            onKeyDown={keyDownHandler}\n            placeholder={props.placeholder}\n            error={props.error}\n            fullWidth\n            data-testid=\"TextInput\"\n        />\n    );\n};\n\nexport default ControlledTextInput;\n","import { TextFieldProps, TypographyVariant } from \"@material-ui/core\";\nimport { StyledComponentProps } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport ControlledTextInput from \"./ControlledTextInput\";\n\ninterface TextInputProps extends StyledComponentProps {\n    value: string;\n    onFinish?: (newValue: string) => void;\n    width?: string;\n    typographyVariant?: TypographyVariant;\n    variant: TextFieldProps[\"variant\"];\n}\n\nconst TextInput: React.FC<TextInputProps> = (\n    props: TextInputProps\n): JSX.Element => {\n    const [value, setValue] = useState<string>(props.value);\n\n    return (\n        <ControlledTextInput\n            classes={props.classes}\n            value={value}\n            onValueChange={setValue}\n            variant={props.variant}\n            typographyVariant={props.typographyVariant}\n            width={props.width}\n            onFinish={props.onFinish}\n        />\n    );\n};\n\nexport default TextInput;\n","import { Box, withStyles } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport LyricDisplay, {\n    LyricTypography,\n    lyricTypographyProps,\n} from \"../display/Lyric\";\nimport {\n    chordSymbolClassName,\n    chordTargetClassName,\n    firstTokenClassName,\n} from \"./HighlightChordLyricStyle\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { deserializeLyrics } from \"../lyrics/Serialization\";\n\nconst InvisibleTypography = withStyles({\n    root: {\n        color: \"transparent\",\n        cursor: \"pointer\",\n        userSelect: \"none\",\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        transform: \"translate(0%, -115%)\",\n    },\n})(LyricTypography);\n\ninterface ChordTargetBoxProps {\n    children: React.ReactNode;\n    className?: string;\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => void;\n}\n\nconst ChordTargetBox: React.FC<ChordTargetBoxProps> = (\n    props: ChordTargetBoxProps\n): JSX.Element => {\n    return (\n        <InvisibleTypography\n            {...lyricTypographyProps}\n            onClick={props.onClick}\n            className={props.className}\n            data-testid=\"ChordEditButton\"\n        >\n            {props.children}\n        </InvisibleTypography>\n    );\n};\n\ninterface TokenProps {\n    children: Lyric;\n    index: number;\n    className?: string;\n    invisibleTarget?: { onClick: ChordTargetBoxProps[\"onClick\"] };\n}\n\nconst Token: React.FC<TokenProps> = (props: TokenProps): JSX.Element => {\n    const invisibleTarget = (): JSX.Element | null => {\n        if (props.invisibleTarget === undefined) {\n            return null;\n        }\n\n        const content: React.ReactNode[] = deserializeLyrics(\n            props.children,\n            false\n        );\n\n        return (\n            <ChordTargetBox\n                className={clsx(chordTargetClassName, chordSymbolClassName)}\n                onClick={props.invisibleTarget.onClick}\n            >\n                {content}\n            </ChordTargetBox>\n        );\n    };\n\n    const lyricClassName: string | undefined =\n        props.index === 0 ? firstTokenClassName : undefined;\n\n    const lyricBlock = (\n        <LyricDisplay\n            className={lyricClassName}\n            data-testid={`Token-${props.index}`}\n        >\n            {props.children}\n        </LyricDisplay>\n    );\n\n    return (\n        <Box\n            className={props.className}\n            key={props.index}\n            position=\"relative\"\n            display=\"inline\"\n            data-testid={`TokenBox-${props.index}`}\n        >\n            {invisibleTarget()}\n            {lyricBlock}\n        </Box>\n    );\n};\n\nexport default Token;\n","import { Box, Grid, makeStyles, Theme } from \"@material-ui/core\";\nimport red from \"@material-ui/core/colors/red\";\nimport { withStyles } from \"@material-ui/styles\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { inflatingWhitespace } from \"../../common/Whitespace\";\nimport { lyricTypographyVariant } from \"../display/Lyric\";\nimport ChordDroppable from \"./ChordDroppable\";\nimport DraggableChordSymbol from \"./DraggableChordSymbol\";\nimport {\n    chordTargetClassName,\n    dragOverChordLyricStyle,\n    firstTokenClassName,\n    hoverChordLyricStyle,\n} from \"./HighlightChordLyricStyle\";\nimport { useEditingState } from \"./InteractionContext\";\nimport TextInput from \"./TextInput\";\nimport Token from \"./Token\";\n\nconst chordSymbolClassName = \"ChordSymbol\";\n\nconst blockChordSymbolClassName = \"BlockChordSymbol\";\nconst blockChordTargetClassName = \"BlockChordTarget\";\n\nconst ChordInput = withStyles((theme: Theme) => ({\n    root: {\n        fontFamily: \"PoriChord\",\n        borderBottom: \"solid\",\n        borderBottomColor: theme.palette.primary.main,\n        borderBottomWidth: \"2px\",\n        width: \"4em\",\n    },\n}))(TextInput);\n\nconst useFirstTokenStyle = {\n    dragOver: makeStyles(\n        dragOverChordLyricStyle({\n            outline: (theme: Theme) => ({\n                borderColor: red[300],\n                color: red[300],\n            }),\n            customLyricClassSelector: firstTokenClassName,\n            customChordSymbolClassSelector: blockChordSymbolClassName,\n            customChordTargetClassSelector: blockChordTargetClassName,\n        })\n    ),\n    hoverable: makeStyles(\n        hoverChordLyricStyle({\n            outline: (theme: Theme) => ({\n                color: theme.palette.primary.dark,\n            }),\n            customLyricClassSelector: firstTokenClassName,\n            customChordSymbolClassSelector: blockChordSymbolClassName,\n            customChordTargetClassSelector: blockChordTargetClassName,\n        })\n    ),\n};\n\nconst useNormalTokenStyle = {\n    dragOver: makeStyles(dragOverChordLyricStyle()),\n    hoverable: makeStyles(hoverChordLyricStyle()),\n};\n\nexport interface BlockProps extends DataTestID {\n    chordBlock: ChordBlock;\n    onChordDragAndDrop?: (\n        destinationBlockID: IDable<ChordBlock>,\n        splitIndex: number,\n        newChord: string,\n        sourceBlockID: IDable<ChordBlock>,\n        copyAction: boolean\n    ) => void;\n    onChordChange?: (id: IDable<ChordBlock>, newChord: string) => void;\n    onBlockSplit?: (id: IDable<ChordBlock>, splitIndex: number) => void;\n}\n\nconst Block: React.FC<BlockProps> = (props: BlockProps): JSX.Element => {\n    const { editing, startEdit, finishEdit } = useEditingState();\n\n    let lyricTokens: Lyric[] = props.chordBlock.lyricTokens;\n\n    if (lyricTokens.length === 0) {\n        lyricTokens = [new Lyric(inflatingWhitespace())];\n    }\n\n    const firstTokenStyle = {\n        hoverable: useFirstTokenStyle.hoverable(),\n        dragOver: useFirstTokenStyle.dragOver(),\n    };\n\n    const normalTokenStyle = {\n        hoverable: useNormalTokenStyle.hoverable(),\n        dragOver: useNormalTokenStyle.dragOver(),\n    };\n\n    const invisibleTargetForFirstToken: boolean =\n        props.chordBlock.chord === \"\" && !editing;\n\n    const clickHandler: (\n        tokenIndex: number\n    ) => (event: React.MouseEvent<HTMLSpanElement>) => void = (\n        tokenIndex: number\n    ) => {\n        return (event: React.MouseEvent<HTMLSpanElement>) => {\n            // block splitting happens after the first token\n            // as first token is already aligned with the current chord\n            if (tokenIndex !== 0 && props.onBlockSplit) {\n                props.onBlockSplit(props.chordBlock, tokenIndex);\n            }\n\n            startEdit();\n\n            event.stopPropagation();\n        };\n    };\n\n    const handleDragged = () => {\n        props.onChordChange?.(props.chordBlock, \"\");\n    };\n\n    const dropHandler = (tokenIndex: number) => {\n        return (\n            newChord: string,\n            sourceBlockID: IDable<ChordBlock>,\n            copyAction: boolean\n        ) => {\n            props.onChordDragAndDrop?.(\n                props.chordBlock,\n                tokenIndex,\n                newChord,\n                sourceBlockID,\n                copyAction\n            );\n        };\n    };\n\n    const endEdit = (newChord: string) => {\n        props.onChordChange?.(props.chordBlock, newChord);\n\n        finishEdit();\n    };\n\n    const lyricBlock = (lyric: Lyric, index: number): React.ReactElement => {\n        // every above lyric target above after the first should get its own highlightable outline chord target box\n        // the first one will depend if it has a chord above it.\n        // if it does not, then treat it the same as all other tokens\n        // if it does, then don't let it be highlightable, defer it to the chord row for highlighting\n        const hasInvisibleTarget = index > 0 || invisibleTargetForFirstToken;\n\n        const invisibleTargetOption = hasInvisibleTarget\n            ? {\n                  onClick: clickHandler(index),\n              }\n            : undefined;\n\n        return (\n            <ChordDroppable\n                key={index}\n                onDropped={dropHandler(index)}\n                hoverableClassName={normalTokenStyle.hoverable.root}\n                dragOverClassName={normalTokenStyle.dragOver.root}\n            >\n                <Token index={index} invisibleTarget={invisibleTargetOption}>\n                    {lyric}\n                </Token>\n            </ChordDroppable>\n        );\n    };\n\n    const lyricBlocks = lyricTokens.map((lyricToken: Lyric, index: number) =>\n        lyricBlock(lyricToken, index)\n    );\n\n    const chordRow = (): JSX.Element => {\n        if (editing) {\n            return (\n                <Box data-testid=\"ChordEdit\">\n                    <ChordInput\n                        value={props.chordBlock.chord}\n                        variant=\"filled\"\n                        typographyVariant={lyricTypographyVariant}\n                        onFinish={endEdit}\n                    />\n                </Box>\n            );\n        }\n\n        return (\n            <DraggableChordSymbol\n                chordBlockID={props.chordBlock}\n                onDragged={handleDragged}\n                className={clsx(\n                    chordSymbolClassName,\n                    blockChordSymbolClassName\n                )}\n            >\n                {props.chordBlock.chord}\n            </DraggableChordSymbol>\n        );\n    };\n\n    return (\n        <Box display=\"inline-block\">\n            <ChordDroppable\n                onDropped={dropHandler(0)}\n                hoverableClassName={firstTokenStyle.hoverable.root}\n                dragOverClassName={firstTokenStyle.dragOver.root}\n            >\n                <Grid\n                    container\n                    direction=\"column\"\n                    data-testid={props[\"data-testid\"]}\n                >\n                    <Grid\n                        className={clsx(\n                            chordTargetClassName,\n                            blockChordTargetClassName\n                        )}\n                        onClick={clickHandler(0)}\n                        item\n                    >\n                        {chordRow()}\n                    </Grid>\n                    <Grid item data-testid=\"Lyric\">\n                        {lyricBlocks}\n                    </Grid>\n                </Grid>\n            </ChordDroppable>\n        </Box>\n    );\n};\n\nexport default Block;\n","import {\n    Button as UnstyledButton,\n    ButtonGroup,\n    Theme,\n    Tooltip as UnstyledTooltip,\n    withStyles,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { DataTestID } from \"../../common/DataTestID\";\n\nconst Button = withStyles((theme: Theme) => ({\n    contained: {\n        backgroundColor: \"transparent\",\n        \"&:hover\": {\n            backgroundColor: theme.palette.primary.dark,\n        },\n    },\n}))(UnstyledButton);\n\nconst Tooltip = withStyles({\n    tooltip: {\n        padding: 0,\n        background: \"transparent\",\n        margin: 0,\n    },\n})(UnstyledTooltip);\n\nexport interface MenuItem extends DataTestID {\n    icon: React.ReactElement;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport interface WithHoverMenuProps {\n    children: React.ReactElement;\n    menuItems: MenuItem[];\n}\n\nconst WithHoverMenu: React.FC<WithHoverMenuProps> = (\n    props: WithHoverMenuProps\n): JSX.Element => {\n    const hoverMenu = (\n        <ButtonGroup orientation=\"vertical\" variant=\"text\">\n            {props.menuItems.map((menuItem: MenuItem, index: number) => {\n                return (\n                    <Button\n                        key={index}\n                        onClick={menuItem.onClick}\n                        data-testid={menuItem[\"data-testid\"]}\n                    >\n                        {menuItem.icon}\n                    </Button>\n                );\n            })}\n        </ButtonGroup>\n    );\n\n    return (\n        <Tooltip placement=\"right\" title={hoverMenu} interactive>\n            {props.children}\n        </Tooltip>\n    );\n};\n\nexport default WithHoverMenu;\n","export const contentEditableElement = (\n    contentEditableRef: React.RefObject<HTMLSpanElement>\n): HTMLSpanElement => {\n    if (contentEditableRef.current === null) {\n        throw new Error(\"unexpected for ref to be null\");\n    }\n\n    return contentEditableRef.current;\n};\n\nexport const selectionRange = (\n    ref: React.RefObject<HTMLSpanElement>\n): Range | null => {\n    const node = contentEditableElement(ref);\n\n    const selection = window.getSelection();\n    if (selection === null || selection.rangeCount === 0) {\n        return null;\n    }\n\n    const range = selection.getRangeAt(0);\n    if (\n        range === null ||\n        !node.contains(range.startContainer) ||\n        !node.contains(range.endContainer)\n    ) {\n        return null;\n    }\n\n    return range;\n};\n\nexport const isSelectionAtBeginning = (\n    ref: React.RefObject<HTMLSpanElement>\n): boolean => {\n    const range: Range | null = selectionRange(ref);\n    if (range === null) {\n        return false;\n    }\n\n    if (!range.collapsed) {\n        return false;\n    }\n\n    const elem = contentEditableElement(ref);\n    if (range.startContainer === elem && range.startOffset === 0) {\n        return true;\n    }\n\n    if (elem.firstChild !== null) {\n        if (\n            range.startContainer === elem.firstChild &&\n            range.startOffset === 0\n        ) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nexport const splitContentBySelection = (\n    ref: React.RefObject<HTMLSpanElement>\n): [Range, Range] => {\n    const currentRange: Range | null = selectionRange(ref);\n    const elem = contentEditableElement(ref);\n\n    const beforeRange: Range = document.createRange();\n    const afterRange: Range = document.createRange();\n\n    if (currentRange !== null) {\n        beforeRange.setStart(elem, 0);\n        beforeRange.setEnd(\n            currentRange.startContainer,\n            currentRange.startOffset\n        );\n        afterRange.setStart(currentRange.endContainer, currentRange.endOffset);\n        afterRange.setEnd(elem, elem.childNodes.length);\n    } else {\n        beforeRange.selectNodeContents(elem);\n        afterRange.setStart(beforeRange.endContainer, beforeRange.endOffset);\n        afterRange.setEnd(beforeRange.endContainer, beforeRange.endOffset);\n    }\n\n    return [beforeRange, afterRange];\n};\n\nexport const insertNodeAtSelection = (\n    ref: React.RefObject<HTMLSpanElement>,\n    node: Node\n): boolean => {\n    const elem = contentEditableElement(ref);\n    const range = selectionRange(ref);\n    if (range === null) {\n        return false;\n    }\n\n    range.deleteContents();\n    range.insertNode(node);\n    range.collapse(false);\n    elem.normalize();\n    return true;\n};\n\nexport const childIndex = (parent: Node, child: Node): number | null => {\n    const childNodes = parent.childNodes;\n    for (let i = 0; i < childNodes.length; i++) {\n        if (child === childNodes.item(i)) {\n            return i;\n        }\n    }\n\n    return null;\n};\n\nexport const nodeBeforeSelection = (\n    ref: React.RefObject<HTMLSpanElement>\n): Node | null => {\n    const elem = contentEditableElement(ref);\n    const range = selectionRange(ref);\n    if (range === null) {\n        return null;\n    }\n\n    let targetNodeIndex: number;\n    if (range.startContainer === elem) {\n        if (range.startOffset === 0) {\n            return null;\n        }\n\n        targetNodeIndex = range.startOffset - 1;\n    } else {\n        // we'd like to step outside of the childnode\n        // startOffset of 0 is the only condition we are looking for\n        if (range.startOffset !== 0) {\n            return null;\n        }\n\n        const currNodeIndex = childIndex(elem, range.startContainer);\n        if (currNodeIndex === null || currNodeIndex === 0) {\n            return null;\n        }\n\n        targetNodeIndex = currNodeIndex - 1;\n    }\n\n    return elem.childNodes.item(targetNodeIndex);\n};\n\nexport const nodeAfterSelection = (\n    ref: React.RefObject<HTMLSpanElement>\n): Node | null => {\n    const elem = contentEditableElement(ref);\n    const range = selectionRange(ref);\n    if (range === null) {\n        return null;\n    }\n\n    const childCount = elem.childNodes.length;\n    let targetNodeIndex: number;\n    if (range.endContainer === elem) {\n        if (range.endOffset === childCount) {\n            return null;\n        }\n\n        targetNodeIndex = range.endOffset;\n    } else {\n        if (range.endContainer.nodeType === range.endContainer.TEXT_NODE) {\n            const textNode = range.endContainer as Text;\n            if (range.endOffset !== textNode.length) {\n                return null;\n            }\n        }\n\n        const currNodeIndex = childIndex(elem, range.endContainer);\n        if (currNodeIndex === null || currNodeIndex === childCount) {\n            return null;\n        }\n\n        targetNodeIndex = currNodeIndex + 1;\n    }\n\n    return elem.childNodes.item(targetNodeIndex);\n};\n","import { PlainFn } from \"../../../common/PlainFn\";\nimport {\n    DomLyricTabFn,\n    lyricTabTypeOfDOMNode,\n    SizedTab,\n    useDomLyricTab,\n} from \"../../lyrics/Tab\";\nimport {\n    childIndex,\n    contentEditableElement,\n    insertNodeAtSelection,\n    isSelectionAtBeginning,\n    nodeAfterSelection,\n    nodeBeforeSelection,\n    selectionRange,\n} from \"./SelectionUtils\";\n\ntype ContentEditableElement = HTMLSpanElement;\ntype HandlerFn = (\n    event: React.KeyboardEvent<ContentEditableElement>\n) => boolean;\n\nconst enterHandler = (callback: PlainFn): HandlerFn => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        if (event.key !== \"Enter\") {\n            return false;\n        }\n\n        callback();\n        return true;\n    };\n};\n\nconst specialBackspaceHandler = (\n    ref: React.RefObject<ContentEditableElement>,\n    callback: PlainFn\n): HandlerFn => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        const specialBackspace: boolean =\n            event.key === \"Backspace\" && (event.metaKey || event.ctrlKey);\n        if (!specialBackspace) {\n            return false;\n        }\n\n        if (!isSelectionAtBeginning(ref)) {\n            return false;\n        }\n\n        callback();\n        return true;\n    };\n};\n\nconst specialEnterHandler = (\n    ref: React.RefObject<ContentEditableElement>,\n    callback: (splitIndex: number) => void\n): HandlerFn => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        const specialEnter: boolean =\n            event.key === \"Enter\" && (event.metaKey || event.ctrlKey);\n        if (!specialEnter) {\n            return false;\n        }\n\n        const range = selectionRange(ref);\n        if (range === null) {\n            return false;\n        }\n\n        callback(range.startOffset);\n\n        return true;\n    };\n};\n\nconst tabHandler = (\n    ref: React.RefObject<ContentEditableElement>,\n    domLyricTab: DomLyricTabFn\n): HandlerFn => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        let sizedTab: SizedTab;\n\n        if (event.key === \"Tab\" && !event.shiftKey) {\n            sizedTab = SizedTab.MediumTab;\n        } else if (event.key === \"Tab\" && event.shiftKey) {\n            sizedTab = SizedTab.LargeTab;\n        } else if (event.key === \" \" && event.shiftKey) {\n            sizedTab = SizedTab.SmallTab;\n        } else {\n            return false;\n        }\n\n        const domNode = domLyricTab(sizedTab);\n        return insertNodeAtSelection(ref, domNode);\n    };\n};\n\nconst specialStylingKeysHandler = (): HandlerFn => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        if (!event.metaKey && !event.ctrlKey) {\n            return false;\n        }\n\n        // prevent bold, underline, or italics commands\n        return (\n            event.key === \"b\" ||\n            event.key === \"B\" ||\n            event.key === \"u\" ||\n            event.key === \"U\" ||\n            event.key === \"i\" ||\n            event.key === \"I\"\n        );\n    };\n};\n\nconst backspaceHandler = (ref: React.RefObject<ContentEditableElement>) => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        if (event.key !== \"Backspace\") {\n            return false;\n        }\n\n        const node: Node | null = nodeBeforeSelection(ref);\n\n        if (node === null || lyricTabTypeOfDOMNode(node) === null) {\n            return false;\n        }\n\n        const parent = node.parentElement;\n        if (parent === null) {\n            return false;\n        }\n\n        parent.removeChild(node);\n        return true;\n    };\n};\n\nconst directionKeyHandler = (ref: React.RefObject<ContentEditableElement>) => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        const elem = contentEditableElement(ref);\n        const selection = window.getSelection();\n\n        if (selection === null) {\n            return false;\n        }\n\n        if (event.shiftKey || event.metaKey || event.ctrlKey) {\n            return false;\n        }\n\n        if (event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\") {\n            return false;\n        }\n\n        let nodeIndex: number;\n\n        if (event.key === \"ArrowLeft\") {\n            const node: Node | null = nodeBeforeSelection(ref);\n            if (node === null || lyricTabTypeOfDOMNode(node) === null) {\n                return false;\n            }\n\n            const childNodeIndex = childIndex(elem, node);\n            if (childNodeIndex === null) {\n                console.error(\n                    \"Unexpected - node cannot be found inside contenteditable element\"\n                );\n                return false;\n            }\n\n            // navigate to before this node by setting the selection offset to this node index\n\n            nodeIndex = childNodeIndex;\n        } else {\n            // ArrowRight\n            const node: Node | null = nodeAfterSelection(ref);\n            if (node === null || lyricTabTypeOfDOMNode(node) === null) {\n                return false;\n            }\n\n            const childNodeIndex = childIndex(elem, node);\n            if (childNodeIndex === null) {\n                console.error(\n                    \"Unexpected - node cannot be found inside contenteditable element\"\n                );\n                return false;\n            }\n\n            // navigate to before this node by setting the selection offset to this node index\n            nodeIndex = childNodeIndex + 1;\n        }\n\n        selection.setBaseAndExtent(elem, nodeIndex, elem, nodeIndex);\n\n        return true;\n    };\n};\n\nexport interface KeyDownHandlerProps {\n    contentEditableRef: React.RefObject<ContentEditableElement>;\n    enterCallback: PlainFn;\n    specialBackspaceCallback: PlainFn;\n    specialEnterCallback: (splitIndex: number) => void;\n}\n\nexport const useKeyDownHandler = (props: KeyDownHandlerProps) => {\n    const domLyricTab = useDomLyricTab();\n\n    const handlers: HandlerFn[] = [\n        specialEnterHandler(\n            props.contentEditableRef,\n            props.specialEnterCallback\n        ),\n        specialBackspaceHandler(\n            props.contentEditableRef,\n            props.specialBackspaceCallback\n        ),\n        tabHandler(props.contentEditableRef, domLyricTab),\n        enterHandler(props.enterCallback),\n        backspaceHandler(props.contentEditableRef),\n        directionKeyHandler(props.contentEditableRef),\n        specialStylingKeysHandler(),\n    ];\n\n    return (event: React.KeyboardEvent<ContentEditableElement>) => {\n        for (const handler of handlers) {\n            const handled: boolean = handler(event);\n            if (handled) {\n                event.preventDefault();\n                return;\n            }\n        }\n    };\n};\n","import { Lyric } from \"../../../common/ChordModel/Lyric\";\nimport { serializeLyrics } from \"../../lyrics/Serialization\";\nimport {\n    insertNodeAtSelection,\n    splitContentBySelection,\n} from \"./SelectionUtils\";\n\ntype HandlerFn = (event: React.ClipboardEvent<HTMLDivElement>) => boolean;\n\nconst serializedLyricsFromRange = (range: Range): Lyric => {\n    const documentFragment = range.cloneContents();\n    return serializeLyrics(documentFragment.childNodes);\n};\n\nconst composeMultilinePaste = (\n    ref: React.RefObject<HTMLSpanElement>,\n    pasteContent: string[]\n): [Lyric, Lyric[]] => {\n    const [beforeSelection, afterSelection] = splitContentBySelection(ref);\n    const serializedLyricsForThisLine: Lyric = serializedLyricsFromRange(\n        beforeSelection\n    );\n    serializedLyricsForThisLine.append(pasteContent[0]);\n\n    const newPasteLines = pasteContent.slice(1);\n    const remainingSerializedLyrics: Lyric[] = newPasteLines.map(\n        (line: string): Lyric => {\n            return new Lyric(line);\n        }\n    );\n\n    const lastIndex = remainingSerializedLyrics.length - 1;\n    remainingSerializedLyrics[lastIndex].append(\n        serializedLyricsFromRange(afterSelection)\n    );\n\n    return [serializedLyricsForThisLine, remainingSerializedLyrics];\n};\n\nconst handlePlainTextPaste = (\n    ref: React.RefObject<HTMLSpanElement>,\n    callback: (firstLine: Lyric, restOfLines: Lyric[]) => void\n): HandlerFn => {\n    return (event: React.ClipboardEvent<HTMLDivElement>): boolean => {\n        const payload = event.clipboardData.getData(\"text/plain\");\n\n        if (payload === \"\") {\n            return false;\n        }\n\n        // handling both Windows + Mac\n        let linesOfText: string[] = payload.split(\"\\r\\n\");\n        linesOfText = linesOfText.flatMap((line: string) => line.split(\"\\n\"));\n\n        if (linesOfText.length === 0) {\n            return false;\n        }\n\n        if (linesOfText.length === 1) {\n            return insertNodeAtSelection(\n                ref,\n                document.createTextNode(linesOfText[0])\n            );\n        }\n\n        const [newValue, newPasteLines] = composeMultilinePaste(\n            ref,\n            linesOfText\n        );\n\n        callback(newValue, newPasteLines);\n\n        return true;\n    };\n};\n\nconst handleJSONPaste = (callback: (payload: string) => boolean): HandlerFn => {\n    return (event: React.ClipboardEvent<HTMLDivElement>): boolean => {\n        const payload = event.clipboardData.getData(\"application/json\");\n\n        if (payload === \"\") {\n            return false;\n        }\n\n        return callback(payload);\n    };\n};\n\nexport interface PasteHandlerProps {\n    contentEditableRef: React.RefObject<HTMLSpanElement>;\n    pastePlainTextCallback: (firstLine: Lyric, restOfLines: Lyric[]) => void;\n    pasteJSONCallback: (payload: string) => boolean;\n}\n\nexport const usePasteHandler = (props: PasteHandlerProps) => {\n    const handlers: HandlerFn[] = [\n        handleJSONPaste(props.pasteJSONCallback),\n        handlePlainTextPaste(\n            props.contentEditableRef,\n            props.pastePlainTextCallback\n        ),\n    ];\n\n    return (event: React.ClipboardEvent<HTMLDivElement>) => {\n        for (const handler of handlers) {\n            const handled: boolean = handler(event);\n            if (handled) {\n                event.preventDefault();\n                return;\n            }\n        }\n    };\n};\n","import { useEffect } from \"react\";\nimport { lyricTabTypeOfDOMNode } from \"../../lyrics/Tab\";\nimport { contentEditableElement } from \"./SelectionUtils\";\n\ntype HandlerFn = (selection: Selection) => boolean;\n\nexport const useFocusAndPlaceCaretEffect = (\n    ref: React.RefObject<HTMLSpanElement>\n): void => {\n    useEffect(() => {\n        const elem = contentEditableElement(ref);\n        elem.focus();\n\n        const selection = window.getSelection();\n        if (selection === null) {\n            return;\n        }\n\n        const newRange = document.createRange();\n        newRange.selectNodeContents(elem);\n        newRange.collapse(false);\n\n        selection.removeAllRanges();\n        selection.addRange(newRange);\n    });\n};\n\nconst handleSelectOpaqueBlock = (selection: Selection): boolean => {\n    //todo, handle non collapsed selections\n    if (!selection.isCollapsed) {\n        return false;\n    }\n\n    const range = selection.getRangeAt(0);\n    // not embedded in a non contenteditable\n    if (lyricTabTypeOfDOMNode(range.endContainer) === null) {\n        return false;\n    }\n\n    range.setStartAfter(range.endContainer);\n    range.setEndAfter(range.endContainer);\n    range.collapse(true);\n    return true;\n};\n\nconst handlers: HandlerFn[] = [handleSelectOpaqueBlock];\n\nconst handleSelectionChange = (event: Event) => {\n    const selection = document.getSelection();\n    if (selection === null || selection.rangeCount !== 1) {\n        return;\n    }\n\n    for (const handler of handlers) {\n        const handled = handler(selection);\n        if (handled) {\n            event.preventDefault();\n            return;\n        }\n    }\n};\n\nexport const useSelectionChangeEffect = () => {\n    useEffect(() => {\n        document.addEventListener(\"selectionchange\", handleSelectionChange);\n\n        return () =>\n            document.removeEventListener(\n                \"selectionchange\",\n                handleSelectionChange\n            );\n    });\n};\n","import { makeStyles, Typography, TypographyVariant } from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport { StyledComponentProps, withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { Lyric } from \"../../../common/ChordModel/Lyric\";\nimport { PlainFn } from \"../../../common/PlainFn\";\nimport { deserializeLyrics, serializeLyrics } from \"../../lyrics/Serialization\";\nimport { contentEditableElement } from \"./SelectionUtils\";\nimport { KeyDownHandlerProps, useKeyDownHandler } from \"./useKeyHandler\";\nimport { PasteHandlerProps, usePasteHandler } from \"./usePasteHandler\";\nimport {\n    useFocusAndPlaceCaretEffect,\n    useSelectionChangeEffect,\n} from \"./useSelectionHandler\";\n\nconst InputTypography = withStyles({\n    root: {\n        width: \"100%\",\n        backgroundColor: grey[200],\n        whiteSpace: \"pre\",\n        display: \"inline-block\",\n    },\n})(Typography);\n\nconst useContentEditableStyle = makeStyles({\n    root: {\n        display: \"inline-block\",\n        width: \"100%\",\n        pointerEvents: \"auto\",\n        userSelect: \"text\",\n        outline: \"none\",\n        wordSpacing: \".15em\",\n        // this prevent the span height from collapsing if there's no content\n        \"&:empty:before\": {\n            content: '\"\\\\a0\"',\n        },\n    },\n});\n\ninterface LyricInputProps extends StyledComponentProps {\n    children: Lyric;\n    onFinish: (newValue: Lyric) => void;\n    onSpecialBackspace: PlainFn;\n    onSpecialEnter: (splitIndex: number) => void;\n    onLyricOverflow: (overflowContent: Lyric[]) => void;\n    onJSONPaste: (jsonStr: string) => boolean;\n    variant?: TypographyVariant;\n}\n\nconst LyricInput: React.FC<LyricInputProps> = (\n    props: LyricInputProps\n): JSX.Element => {\n    const contentEditableRef: React.RefObject<HTMLSpanElement> = React.createRef();\n\n    const value = (): Lyric => {\n        const elem = contentEditableElement(contentEditableRef);\n        if (elem.textContent === null) {\n            return new Lyric(\"\");\n        }\n\n        return serializeLyrics(elem.childNodes);\n    };\n\n    const finish = (newValue: Lyric) => {\n        props.onFinish(newValue);\n    };\n\n    const keyDownHandlerProps: KeyDownHandlerProps = {\n        contentEditableRef: contentEditableRef,\n        enterCallback: () => {\n            finish(value());\n        },\n        specialBackspaceCallback: () => {\n            props.onSpecialBackspace();\n        },\n        specialEnterCallback: (splitIndex: number) => {\n            finish(value());\n            props.onSpecialEnter(splitIndex);\n        },\n    };\n\n    const handleKeyDown = useKeyDownHandler(keyDownHandlerProps);\n\n    const pasteHandlerProps: PasteHandlerProps = {\n        contentEditableRef: contentEditableRef,\n        pasteJSONCallback: (payload: string): boolean => {\n            const handled = props.onJSONPaste(payload);\n            if (handled) {\n                finish(value());\n            }\n            return handled;\n        },\n        pastePlainTextCallback: (firstLine: Lyric, restOfLines: Lyric[]) => {\n            finish(firstLine);\n            props.onLyricOverflow(restOfLines);\n        },\n    };\n\n    const handlePaste = usePasteHandler(pasteHandlerProps);\n\n    const handleBlur = () => {\n        finish(value());\n    };\n\n    const contentEditableStyle = useContentEditableStyle();\n    const lyricContent = deserializeLyrics(props.children, true);\n\n    useFocusAndPlaceCaretEffect(contentEditableRef);\n    useSelectionChangeEffect();\n\n    return (\n        <InputTypography\n            classes={props.classes}\n            variant={props.variant}\n            display=\"inline\"\n            data-testid=\"LyricInput\"\n        >\n            <span\n                contentEditable\n                className={contentEditableStyle.root}\n                ref={contentEditableRef}\n                data-testid=\"InnerInput\"\n                onBlur={handleBlur}\n                onKeyDown={handleKeyDown}\n                onPaste={handlePaste}\n                suppressContentEditableWarning\n            >\n                {lyricContent}\n            </span>\n        </InputTypography>\n    );\n};\n\nexport default LyricInput;\n","import { Box, Theme, withStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { PlainFn } from \"../../common/PlainFn\";\nimport { lyricStyle, lyricTypographyVariant } from \"../display/Lyric\";\nimport { useEditingState } from \"./InteractionContext\";\nimport UnstyledLyricInput from \"./lyric_input/LyricInput\";\n\nconst LyricInput = withStyles((theme: Theme) => ({\n    root: {\n        ...lyricStyle.root,\n        borderBottom: \"solid\",\n        borderBottomColor: theme.palette.secondary.main,\n        borderBottomWidth: \"2px\",\n    },\n}))(UnstyledLyricInput);\n\ninterface WithLyricInputProps {\n    children: (handleEdit: PlainFn) => React.ReactElement;\n    chordLine: ChordLine;\n    onChangeLine?: (id: IDable<ChordLine>) => void;\n    onLyricOverflow?: (id: IDable<ChordLine>, overflowLyric: Lyric[]) => void;\n    onJSONPaste?: (id: IDable<ChordLine>, jsonStr: string) => boolean;\n    onMergeWithPreviousLine?: (id: IDable<ChordLine>) => boolean;\n    onSplitLine?: (id: IDable<ChordLine>, splitIndex: number) => boolean;\n}\n\n// this component is inherently quite coupled with Line & friends\n// however, this is a good opportunity to separate concerns and organize functionality\nconst WithLyricInput: React.FC<WithLyricInputProps> = (\n    props: WithLyricInputProps\n): JSX.Element => {\n    const { editing, startEdit, finishEdit } = useEditingState();\n\n    const handlers = {\n        lyricEdit: (newLyrics: Lyric) => {\n            finishEdit();\n\n            props.chordLine.replaceLyrics(newLyrics);\n            props.onChangeLine?.(props.chordLine);\n        },\n        pasteOverflow: (overflowContent: Lyric[]) => {\n            if (props.onLyricOverflow) {\n                props.onLyricOverflow(props.chordLine, overflowContent);\n                finishEdit();\n            }\n        },\n        jsonPaste: (jsonStr: string): boolean => {\n            if (props.onJSONPaste === undefined) {\n                return false;\n            }\n\n            return props.onJSONPaste(props.chordLine, jsonStr);\n        },\n        specialBackspace: () => {\n            if (props.onMergeWithPreviousLine) {\n                const handledAndStopEditing = props.onMergeWithPreviousLine(\n                    props.chordLine\n                );\n                if (handledAndStopEditing) {\n                    finishEdit();\n                }\n            }\n        },\n        specialEnter: (splitIndex: number) => {\n            if (props.onSplitLine) {\n                const handled = props.onSplitLine(props.chordLine, splitIndex);\n                if (handled) {\n                    finishEdit();\n                }\n            }\n        },\n    };\n\n    const lineElement: React.ReactElement = props.children(startEdit);\n\n    if (!editing) {\n        return lineElement;\n    }\n\n    // using a css trick to overlay the lyrics edit input over\n    // the noneditable lyrics line so chords are still showing\n    return (\n        <>\n            {lineElement}\n            <Box position=\"absolute\" left=\"0\" bottom=\"2px\" width=\"100%\">\n                <LyricInput\n                    variant={lyricTypographyVariant}\n                    onFinish={handlers.lyricEdit}\n                    onJSONPaste={handlers.jsonPaste}\n                    onLyricOverflow={handlers.pasteOverflow}\n                    onSpecialBackspace={handlers.specialBackspace}\n                    onSpecialEnter={handlers.specialEnter}\n                >\n                    {props.chordLine.lyrics}\n                </LyricInput>\n            </Box>\n        </>\n    );\n};\n\nexport default WithLyricInput;\n","import { createStyles } from \"@material-ui/core\";\nimport blueGrey from \"@material-ui/core/colors/blueGrey\";\n\nexport const sectionLabelStyle = createStyles({\n    root: {\n        borderColor: blueGrey[500],\n        borderStyle: \"solid\",\n        borderRadius: \"0.3em\",\n        borderWidth: \"0.075em\",\n        color: blueGrey[500],\n        display: \"inline-block\",\n    },\n});\n\nexport const sectionTypographyVariant: \"body2\" = \"body2\";\n","import { Box, Typography, TypographyProps } from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { inflateIfEmpty } from \"../../common/Whitespace\";\nimport TextInput from \"./TextInput\";\nimport { PlainFn } from \"../../common/PlainFn\";\n\nexport interface EditControl {\n    editing: boolean;\n    onStartEdit: PlainFn;\n    onEndEdit: PlainFn;\n}\n\ninterface EditableTypographyProps extends DataTestID, TypographyProps {\n    children?: never;\n    value: string;\n    // provide this if you want to provide explicit control over the editability\n    // of the field. this means the parent must manage this component's editing state\n    editControl?: EditControl;\n\n    onValueChange?: (newValue: string) => void;\n    placeholder?: string;\n}\n\nconst PlaceholderTypography = withStyles({\n    root: {\n        color: grey[400],\n    },\n})(Typography);\n\nconst EditableTypography: React.FC<EditableTypographyProps> = (\n    props: EditableTypographyProps\n): JSX.Element => {\n    const [editingState, setEditingState] = useState(false);\n\n    const editing: boolean =\n        props.editControl !== undefined\n            ? props.editControl.editing\n            : editingState;\n\n    const startEdit = () => {\n        if (props.editControl !== undefined) {\n            props.editControl.onStartEdit();\n        } else {\n            setEditingState(true);\n        }\n    };\n\n    const finishEdit = (newValue: string) => {\n        if (props.editControl !== undefined) {\n            props.editControl.onEndEdit();\n        } else {\n            setEditingState(false);\n        }\n\n        if (props.onValueChange) {\n            props.onValueChange(newValue);\n        }\n    };\n\n    const nonEditableLine = (): React.ReactElement => {\n        const {\n            value,\n            placeholder,\n            onValueChange,\n            editControl,\n            ...typographyProps\n        } = props;\n\n        if (props.value === \"\" && props.placeholder !== undefined) {\n            return (\n                <PlaceholderTypography {...typographyProps} onClick={startEdit}>\n                    {props.placeholder}\n                </PlaceholderTypography>\n            );\n        }\n\n        return (\n            <Typography {...typographyProps} onClick={startEdit}>\n                {inflateIfEmpty(props.value)}\n            </Typography>\n        );\n    };\n\n    const editableLine = (): React.ReactElement => {\n        if (props.variant === \"inherit\" || props.variant === \"srOnly\") {\n            throw new Error(\"can't have these variant types\");\n        }\n\n        return (\n            <TextInput\n                value={props.value}\n                variant=\"filled\"\n                typographyVariant={props.variant}\n                onFinish={finishEdit}\n                data-testid={\"EditableLine\"}\n            />\n        );\n    };\n\n    const elem: React.ReactElement = editing\n        ? editableLine()\n        : nonEditableLine();\n\n    return <Box>{elem}</Box>;\n};\n\nexport default EditableTypography;\n","import { IconButton, InputAdornment, Theme } from \"@material-ui/core\";\nimport SlowMotionVideoIcon from \"@material-ui/icons/SlowMotionVideo\";\nimport { StyledComponentProps, withStyles } from \"@material-ui/styles\";\nimport { Duration } from \"luxon\";\nimport React, { useContext, useRef, useState } from \"react\";\nimport { PlayerTimeContext } from \"../PlayerTimeContext\";\nimport { widthOfString } from \"../track_player/common\";\nimport UnstyledControlledTextInput from \"./ControlledTextInput\";\n\ninterface TimeInputProps extends StyledComponentProps {\n    seconds: number | null;\n    onFinish?: (newSeconds: number | null) => void;\n}\n\nconst ControlledTextInput = withStyles((theme: Theme) => ({\n    root: {\n        textAlign: \"right\",\n        width: widthOfString(theme, \"body1\", \"00:00\"),\n    },\n}))(UnstyledControlledTextInput);\n\nconst TimeInput: React.FC<TimeInputProps> = (\n    props: TimeInputProps\n): JSX.Element => {\n    const secondsToString = (seconds: number | null): string => {\n        if (seconds === null) {\n            return \"\";\n        }\n\n        const duration = Duration.fromMillis(seconds * 1000);\n        return duration.toFormat(\"mss\");\n    };\n\n    const initialValue: string = secondsToString(props.seconds);\n    const [value, setValue] = useState<string>(initialValue);\n    const inputBoxRef = useRef<any>(null); // pretty awful but this is the type from TextFieldProps\n\n    const getPlayerTimeRef = useContext(PlayerTimeContext);\n\n    const decomposeTimeString = (timeString: string): [number, number] => {\n        const numericValue = Number(timeString);\n\n        const secondsPart = numericValue % 100;\n        const minutesPart = Math.floor(numericValue / 100);\n        return [minutesPart, secondsPart];\n    };\n\n    const validateTimeValue = (time: string): boolean => {\n        if (time === \"\") {\n            return true;\n        }\n\n        const [minutesPart, secondsPart] = decomposeTimeString(time);\n\n        if (isNaN(minutesPart) || isNaN(secondsPart)) {\n            return false;\n        }\n\n        if (secondsPart > 59 || secondsPart < 0) {\n            return false;\n        }\n\n        return true;\n    };\n\n    const sanitizeValue = (newTime: string): string => {\n        let sanitizedValue = newTime.replaceAll(/\\D/g, \"\");\n\n        if (sanitizedValue === \"0\") {\n            return \"000\";\n        }\n\n        if (sanitizedValue === \"00\") {\n            return \"\";\n        }\n\n        sanitizedValue = sanitizedValue.replace(/^0+/, \"\");\n        return sanitizedValue;\n    };\n\n    const handleValueChange = (newTime: string): void => {\n        setValue(sanitizeValue(newTime));\n    };\n\n    const finish = (newTime: string) => {\n        if (newTime === \"\") {\n            props.onFinish?.(null);\n            return;\n        }\n\n        if (!validateTimeValue(newTime)) {\n            return;\n        }\n\n        const [minutes, seconds] = decomposeTimeString(newTime);\n\n        props.onFinish?.(60 * minutes + seconds);\n    };\n\n    const handleCurrentTimeButton = () => {\n        const currentGetPlayerTime = getPlayerTimeRef.current;\n        if (currentGetPlayerTime === null) {\n            return;\n        }\n\n        const playerTimeSeconds: number = currentGetPlayerTime();\n        const newValue = secondsToString(playerTimeSeconds);\n        setValue(newValue);\n        finish(newValue);\n\n        // put the focus back into the input box\n        if (\n            inputBoxRef.current !== null &&\n            inputBoxRef.current.focus !== undefined &&\n            inputBoxRef.current.focus !== null\n        ) {\n            inputBoxRef.current.focus();\n        }\n    };\n\n    const buttonAdornment = (\n        <InputAdornment position=\"start\">\n            <IconButton edge=\"start\" onClick={handleCurrentTimeButton}>\n                <SlowMotionVideoIcon />\n            </IconButton>\n        </InputAdornment>\n    );\n\n    const formatValue = (timeString: string): string => {\n        if (timeString === \"\") {\n            return \"\";\n        }\n\n        if (timeString.length === 1) {\n            return \"0:0\" + timeString;\n        }\n\n        if (timeString.length === 2) {\n            return \"0:\" + timeString;\n        }\n\n        const colonIndex = timeString.length - 2;\n        const minutesPart = timeString.substring(0, colonIndex);\n        const secondsPart = timeString.substring(colonIndex);\n        return minutesPart + \":\" + secondsPart;\n    };\n\n    const formattedValue = formatValue(value);\n    const error = !validateTimeValue(value);\n\n    return (\n        <ControlledTextInput\n            placeholder=\"0:00\"\n            value={formattedValue}\n            onValueChange={handleValueChange}\n            variant=\"standard\"\n            typographyVariant=\"body1\"\n            onFinish={() => finish(value)}\n            paddingSpacing={0.5}\n            error={error}\n            InputProps={{\n                startAdornment: buttonAdornment,\n                disableUnderline: !error,\n            }}\n            inputRef={inputBoxRef}\n        />\n    );\n};\n\nexport default TimeInput;\n","import { Box, Theme, Tooltip as UnstyledTooltip } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { PlainFn } from \"../../common/PlainFn\";\nimport {\n    sectionLabelStyle,\n    sectionTypographyVariant,\n} from \"../display/SectionLabel\";\nimport UnstyledEditableTypography, { EditControl } from \"./EditableTypography\";\nimport { useEditingState } from \"./InteractionContext\";\nimport TimeInput from \"./TimeInput\";\n\nconst EditableTypography = withStyles(sectionLabelStyle)(\n    UnstyledEditableTypography\n);\n\nconst Tooltip = withStyles((theme: Theme) => ({\n    tooltip: {\n        background: \"white\",\n        boxShadow: theme.shadows[2],\n    },\n}))(UnstyledTooltip);\n\nexport interface MenuItem extends DataTestID {\n    icon: React.ReactElement;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport interface WithSectionProps {\n    chordLine: ChordLine;\n    children: (editLabel: PlainFn) => React.ReactElement;\n    onChange?: (id: IDable<ChordLine>) => void;\n}\n\nconst WithSection: React.FC<WithSectionProps> = (\n    props: WithSectionProps\n): JSX.Element => {\n    const { editing, startEdit, finishEdit } = useEditingState();\n\n    const editControl: EditControl = {\n        editing: editing,\n        onStartEdit: startEdit,\n        onEndEdit: finishEdit,\n    };\n\n    const handleLabelChange = (newValue: string) => {\n        const changed = props.chordLine.setSectionName(newValue);\n\n        if (changed) {\n            props.onChange?.(props.chordLine);\n        }\n    };\n\n    const handleTimeChange = (newValue: number | null) => {\n        const changed = props.chordLine.setSectionTime(newValue);\n\n        if (changed) {\n            props.onChange?.(props.chordLine);\n        }\n    };\n\n    const childElement: React.ReactElement = props.children(startEdit);\n    const section = props.chordLine.section;\n\n    if (!editing && section === undefined) {\n        return childElement;\n    }\n\n    const label: string = section?.name ?? \"\";\n\n    const timeInput = (() => {\n        const time: number | null =\n            section?.type === \"time\" ? section.time : null;\n\n        return <TimeInput seconds={time} onFinish={handleTimeChange} />;\n    })();\n\n    // prevent tooltip from stealing focus from the editable textfield\n    const disableTooltipFocus = editing;\n\n    return (\n        <>\n            <Box>\n                <Tooltip\n                    arrow\n                    placement=\"left\"\n                    interactive\n                    title={timeInput}\n                    disableFocusListener={disableTooltipFocus}\n                >\n                    <span>\n                        <EditableTypography\n                            value={label}\n                            variant={sectionTypographyVariant}\n                            data-testid=\"EditLabel\"\n                            editControl={editControl}\n                            onValueChange={handleLabelChange}\n                        />\n                    </span>\n                </Tooltip>\n            </Box>\n            {childElement}\n        </>\n    );\n};\n\nexport default WithSection;\n","import { Box, Slide, withStyles } from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport red from \"@material-ui/core/colors/red\";\nimport UnstyledBackspaceIcon from \"@material-ui/icons/Backspace\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubbleOutline\";\nimport React, { useState } from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { PlainFn } from \"../../common/PlainFn\";\nimport Block, { BlockProps } from \"./Block\";\nimport WithHoverMenu, { MenuItem } from \"./WithHoverMenu\";\nimport WithLyricInput from \"./WithLyricInput\";\nimport WithSection from \"./WithSection\";\n\nconst AtomicSelectionBox = withStyles({\n    root: {\n        userSelect: \"all\",\n    },\n})(Box);\n\nconst BackspaceIcon = withStyles({\n    root: {\n        color: red[300],\n    },\n})(UnstyledBackspaceIcon);\n\nconst HighlightableBox = withStyles({\n    root: {\n        \"&:hover\": {\n            backgroundColor: grey[100],\n        },\n    },\n})(Box);\n\ninterface LineProps extends DataTestID {\n    chordLine: ChordLine;\n    \"data-lineid\": string;\n    onChangeLine?: (id: IDable<ChordLine>) => void;\n    onRemoveLine?: (id: IDable<ChordLine>) => void;\n    onLyricOverflow?: (\n        id: IDable<ChordLine>,\n        overflowLyricContent: Lyric[]\n    ) => void;\n    onJSONPaste?: (id: IDable<ChordLine>, jsonStr: string) => boolean;\n    onMergeWithPreviousLine?: (id: IDable<ChordLine>) => boolean;\n    onSplitLine?: (id: IDable<ChordLine>, splitIndex: number) => boolean;\n    onChordDragAndDrop?: BlockProps[\"onChordDragAndDrop\"];\n}\n\nconst Line: React.FC<LineProps> = (props: LineProps): JSX.Element => {\n    const [removed, setRemoved] = useState(false);\n    const removalTime = 250;\n\n    const handlers = {\n        chordChange: (id: IDable<ChordBlock>, newChord: string) => {\n            props.chordLine.setChord(id, newChord);\n            props.onChangeLine?.(props.chordLine);\n        },\n        blockSplit: (id: IDable<ChordBlock>, splitIndex: number) => {\n            props.chordLine.splitBlock(id, splitIndex);\n            props.onChangeLine?.(props.chordLine);\n        },\n        remove: () => {\n            if (removed) {\n                return;\n            }\n\n            setRemoved(true);\n\n            if (props.onRemoveLine) {\n                setTimeout(() => {\n                    if (props.onRemoveLine) {\n                        props.onRemoveLine(props.chordLine);\n                    }\n                }, removalTime);\n            }\n        },\n    };\n\n    let chordBlocks: ChordBlock[] = props.chordLine.chordBlocks;\n    if (chordBlocks.length === 0) {\n        chordBlocks = [\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"\"),\n            }),\n        ];\n    }\n\n    const blocks: React.ReactElement[] = chordBlocks.map(\n        (chordBlock: ChordBlock, index: number) => (\n            <Block\n                key={chordBlock.id}\n                chordBlock={chordBlock}\n                onChordDragAndDrop={props.onChordDragAndDrop}\n                onChordChange={handlers.chordChange}\n                onBlockSplit={handlers.blockSplit}\n                data-testid={`Block-${index}`}\n            ></Block>\n        )\n    );\n\n    const basicLine = (startEdit: PlainFn) => (\n        <HighlightableBox data-testid={\"NoneditableLine\"} onClick={startEdit}>\n            {blocks}\n        </HighlightableBox>\n    );\n\n    const withHoverMenu = (startEdit: PlainFn, menuItems: MenuItem[]) => (\n        <WithHoverMenu menuItems={menuItems}>\n            {basicLine(startEdit)}\n        </WithHoverMenu>\n    );\n\n    const withLyricInput = (menuItems: MenuItem[]) => (\n        <WithLyricInput\n            chordLine={props.chordLine}\n            onChangeLine={props.onChangeLine}\n            onJSONPaste={props.onJSONPaste}\n            onMergeWithPreviousLine={props.onMergeWithPreviousLine}\n            onSplitLine={props.onSplitLine}\n            onLyricOverflow={props.onLyricOverflow}\n        >\n            {(startEdit: PlainFn) => withHoverMenu(startEdit, menuItems)}\n        </WithLyricInput>\n    );\n\n    const withSection = (\n        <WithSection chordLine={props.chordLine} onChange={props.onChangeLine}>\n            {(editLabel: PlainFn) => {\n                const menuItems: MenuItem[] = [\n                    {\n                        onClick: editLabel,\n                        icon: <ChatBubbleIcon />,\n                        \"data-testid\": \"EditLabel\",\n                    },\n                    {\n                        onClick: handlers.remove,\n                        icon: <BackspaceIcon />,\n                        \"data-testid\": \"RemoveButton\",\n                    },\n                ];\n\n                return withLyricInput(menuItems);\n            }}\n        </WithSection>\n    );\n\n    const lineContent: React.ReactElement = withSection;\n    const yeetDirection = removed ? \"up\" : \"down\";\n\n    return (\n        <Slide direction={yeetDirection} in={!removed} timeout={removalTime}>\n            <AtomicSelectionBox>\n                <Box\n                    borderBottom={1}\n                    width=\"100%\"\n                    position=\"relative\"\n                    data-lineid={props[\"data-lineid\"]}\n                    data-testid={props[\"data-testid\"]}\n                >\n                    {lineContent}\n                </Box>\n            </AtomicSelectionBox>\n        </Slide>\n    );\n};\n\nexport default Line;\n","import {\n    Button,\n    Divider as UnstyledDivider,\n    Grid,\n    Theme,\n    Tooltip as UnstyledTooltip,\n} from \"@material-ui/core\";\nimport UnstyledAddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport { useTheme, withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { DataTestID } from \"../../common/DataTestID\";\nimport { PlainFn } from \"../../common/PlainFn\";\n\nconst HighlightableGrid = withStyles({\n    root: {\n        \"&:hover .MuiDivider-root\": {\n            backgroundColor: \"rgba(0, 0, 0, 0.25)\",\n        },\n    },\n})(Grid);\n\nconst Tooltip = withStyles({\n    tooltip: {\n        padding: 0,\n        background: \"transparent\",\n        margin: 0,\n    },\n})(UnstyledTooltip);\n\nconst Divider = withStyles({\n    root: {\n        width: \"100%\",\n        backgroundColor: \"transparent\",\n    },\n})(UnstyledDivider);\n\nconst AddCircleOutlineIcon = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.secondary.light,\n    },\n}))(UnstyledAddCircleOutlineIcon);\n\ninterface NewLineProps extends DataTestID {\n    onAdd?: PlainFn;\n}\n\nconst NewLine: React.FC<NewLineProps> = (props: NewLineProps): JSX.Element => {\n    const theme: Theme = useTheme();\n\n    const hoverMenu = (): React.ReactElement => {\n        return (\n            <Button data-testid={\"AddButton\"} onClick={props.onAdd}>\n                <AddCircleOutlineIcon />\n            </Button>\n        );\n    };\n\n    return (\n        <Tooltip title={hoverMenu()} interactive placement=\"right\">\n            <HighlightableGrid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                onClick={props.onAdd}\n                data-testid={props[\"data-testid\"]}\n                style={{\n                    minHeight: theme.spacing(3),\n                }}\n            >\n                <Divider />\n            </HighlightableGrid>\n        </Tooltip>\n    );\n};\n\nexport default NewLine;\n","import {\n    Grid,\n    makeStyles,\n    Paper as UnstyledPaper,\n    withStyles,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { useLineCopyHandler, useLinePasteHandler } from \"./CopyAndPaste\";\nimport DragAndDrop from \"./DragAndDrop\";\nimport { InteractionContext, InteractionSetter } from \"./InteractionContext\";\nimport Line from \"./Line\";\nimport NewLine from \"./NewLine\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { useBatchLineDelete } from \"./BatchDelete\";\n\nconst useUninteractiveStyle = makeStyles({\n    root: {\n        pointerEvents: \"none\",\n    },\n});\n\nconst Paper = withStyles({\n    root: {\n        width: \"auto\",\n    },\n})(UnstyledPaper);\n\ninterface ChordPaperBodyProps {\n    song: ChordSong;\n    onSongChanged?: (updatedSong: ChordSong) => void;\n}\n\nconst ChordPaperBody: React.FC<ChordPaperBodyProps> = (\n    props: ChordPaperBodyProps\n): React.ReactElement => {\n    const [interacting, setInteracting] = useState(false);\n    const handleCopy = useLineCopyHandler(props.song);\n    const handleLinePaste = useLinePasteHandler(props.song);\n    const handleBatchLineDelete = useBatchLineDelete(props.song);\n\n    const interactionContextValue: InteractionSetter = {\n        startInteraction: () => {\n            setTimeout(() => {\n                setInteracting(true);\n            });\n        },\n        endInteraction: () => {\n            setTimeout(() => {\n                setInteracting(false);\n            });\n        },\n    };\n\n    const uninteractiveStyle = useUninteractiveStyle();\n\n    const handleAddLineToTop = () => {\n        const newLine: ChordLine = new ChordLine();\n        props.song.addBeginning(newLine);\n        notifySongChanged();\n    };\n\n    const handleAddLine = (id: IDable<ChordLine>) => {\n        const newLine: ChordLine = new ChordLine();\n        props.song.addAfter(id, newLine);\n        notifySongChanged();\n    };\n\n    const handleRemoveLine = (id: IDable<ChordLine>) => {\n        props.song.remove(id);\n        notifySongChanged();\n    };\n\n    const handleChangeLine = (id: IDable<ChordLine>) => {\n        notifySongChanged();\n    };\n\n    const handleLyricOverflow = (\n        id: IDable<ChordLine>,\n        overflowContent: Lyric[]\n    ) => {\n        const newChordLines = overflowContent.map((newLyricLine: Lyric) =>\n            ChordLine.fromLyrics(newLyricLine)\n        );\n        props.song.addAfter(id, ...newChordLines);\n        notifySongChanged();\n    };\n\n    const handleJSONPaste = (\n        id: IDable<ChordLine>,\n        jsonStr: string\n    ): boolean => {\n        const handled = handleLinePaste(id, jsonStr);\n        if (!handled) {\n            return false;\n        }\n\n        notifySongChanged();\n        return true;\n    };\n\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        const handled = handleBatchLineDelete(event);\n        if (!handled) {\n            return false;\n        }\n\n        notifySongChanged();\n        return true;\n    };\n\n    const mergeWithPreviousLine = (id: IDable<ChordLine>): boolean => {\n        const didMerge = props.song.mergeLineWithPrevious(id);\n\n        if (didMerge) {\n            notifySongChanged();\n            return true;\n        }\n\n        return false;\n    };\n\n    const splitLine = (id: IDable<ChordLine>, splitIndex: number): boolean => {\n        const didSplit = props.song.splitLine(id, splitIndex);\n\n        if (didSplit) {\n            notifySongChanged();\n            return true;\n        }\n\n        return false;\n    };\n\n    const notifySongChanged = () => {\n        props.onSongChanged?.(props.song);\n    };\n\n    const handleChordDND = (\n        destinationBlockID: IDable<ChordBlock>,\n        splitIndex: number,\n        newChord: string,\n        sourceBlockID: IDable<ChordBlock>,\n        copyAction: boolean\n    ) => {\n        const [sourceLine, sourceBlock] = props.song.findLineAndBlock(\n            sourceBlockID\n        );\n\n        const moveAction = !copyAction;\n        if (moveAction) {\n            // clearing the source block first allows handling of when the chord\n            // is dropped onto another token in the same block without special cases\n            sourceBlock.chord = \"\";\n        }\n\n        const [destinationLine, destinationBlock] = props.song.findLineAndBlock(\n            destinationBlockID\n        );\n\n        if (splitIndex !== 0) {\n            destinationLine.splitBlock(destinationBlockID, splitIndex);\n        }\n\n        destinationBlock.chord = newChord;\n\n        sourceLine.normalizeBlocks();\n        destinationLine.normalizeBlocks();\n\n        notifySongChanged();\n    };\n\n    const lines = () => {\n        const lines = props.song.chordLines.flatMap(\n            (line: ChordLine, index: number) => {\n                const addLineBelow = () => {\n                    handleAddLine(line);\n                };\n\n                return [\n                    <Line\n                        key={line.id}\n                        chordLine={line}\n                        data-lineid={line.id}\n                        onRemoveLine={handleRemoveLine}\n                        onChangeLine={handleChangeLine}\n                        onJSONPaste={handleJSONPaste}\n                        onLyricOverflow={handleLyricOverflow}\n                        onSplitLine={splitLine}\n                        onMergeWithPreviousLine={mergeWithPreviousLine}\n                        onChordDragAndDrop={handleChordDND}\n                        data-testid={`Line-${index}`}\n                    />,\n                    <NewLine\n                        key={\"NewLine-\" + line.id}\n                        onAdd={addLineBelow}\n                        data-testid={`NewLine-${index}`}\n                    />,\n                ];\n            }\n        );\n\n        const firstNewLine = (\n            <NewLine\n                key={\"NewLine-Top\"}\n                onAdd={handleAddLineToTop}\n                data-testid={\"NewLine-Top\"}\n            />\n        );\n        lines.splice(0, 0, firstNewLine);\n\n        return lines;\n    };\n\n    // prevent other interactions if currently interacting\n    const allowInteraction: boolean = !interacting;\n    const paperClassName = allowInteraction\n        ? undefined\n        : uninteractiveStyle.root;\n\n    return (\n        <DragAndDrop>\n            <InteractionContext.Provider value={interactionContextValue}>\n                <Paper\n                    onKeyDown={allowInteraction ? handleKeyDown : undefined}\n                    onCopy={allowInteraction ? handleCopy : undefined}\n                    className={paperClassName}\n                    elevation={0}\n                    tabIndex={0}\n                >\n                    <Grid container justify=\"center\">\n                        <Grid item xs={10}>\n                            {lines()}\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </InteractionContext.Provider>\n        </DragAndDrop>\n    );\n};\n\nexport default ChordPaperBody;\n","import { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { IDable } from \"../../common/ChordModel/Collection\";\nimport { getSelectedLineIDs } from \"./LineSelection\";\n\nexport const useBatchLineDelete = (song: ChordSong) => {\n    return (event: React.KeyboardEvent<HTMLDivElement>): boolean => {\n        if (event.key !== \"Backspace\") {\n            return false;\n        }\n\n        const lineIDs: string[] = getSelectedLineIDs();\n        if (lineIDs.length === 0) {\n            return false;\n        }\n\n        const lineIDables: IDable<ChordLine>[] = lineIDs.map((id: string) => ({\n            type: \"ChordLine\",\n            id: id,\n        }));\n\n        song.removeMultiple(lineIDables);\n        event.preventDefault();\n\n        return true;\n    };\n};\n","import {\n    StyledComponentProps,\n    Typography as UnstyledTypography,\n} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { DateTime, Duration } from \"luxon\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Typography = withStyles({\n    root: {\n        color: grey[600],\n    },\n})(UnstyledTypography);\n\ninterface LastSavedAtProps extends StyledComponentProps {\n    lastSaved: Date;\n}\n\nconst LastSavedAt: React.FC<LastSavedAtProps> = (\n    props: LastSavedAtProps\n): JSX.Element => {\n    const [, setLastRefreshed] = useState<Date>(new Date());\n\n    const timeDescription = (): string => {\n        const lastSaved = DateTime.fromJSDate(props.lastSaved);\n        const sinceSaved: Duration = lastSaved.diffNow();\n\n        const daysSinceSaved: number = sinceSaved.as(\"day\");\n        if (daysSinceSaved <= -1) {\n            return lastSaved.toLocaleString(DateTime.DATETIME_MED);\n        }\n\n        const secondsSinceSaved: number = lastSaved.diffNow().as(\"second\");\n        if (secondsSinceSaved >= -1) {\n            return \"just now\";\n        }\n\n        const relativeDescription = lastSaved.toRelative();\n        if (relativeDescription === null) {\n            return \"WHAT IS HAPPENING? CONTACT YOUR DEV\";\n        }\n\n        return relativeDescription;\n    };\n\n    useEffect(() => {\n        const interval = setInterval(() => setLastRefreshed(new Date()), 30000);\n        return () => clearInterval(interval);\n    }, [setLastRefreshed]);\n\n    return (\n        <Typography\n            classes={props.classes}\n            variant=\"caption\"\n        >{`Last Saved: ${timeDescription()}`}</Typography>\n    );\n};\n\nexport default LastSavedAt;\n","import { Box, Grid, Theme, Typography } from \"@material-ui/core\";\nimport { useTheme, withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport UnstyledLastSavedAt from \"../display/LastSavedAt\";\nimport EditableTypography from \"./EditableTypography\";\n\nconst LastSavedAt = withStyles((theme: Theme) => ({\n    root: {\n        position: \"absolute\",\n        top: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n}))(UnstyledLastSavedAt);\n\ninterface HeaderProps {\n    song: ChordSong;\n    onSongChanged?: (updatedSong: ChordSong) => void;\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps): JSX.Element => {\n    const theme: Theme = useTheme();\n\n    const notifySongChanged = (): void => {\n        if (props.onSongChanged) {\n            props.onSongChanged(props.song);\n        }\n    };\n\n    const updateTitleHandler = (newTitle: string) => {\n        props.song.title = newTitle;\n        notifySongChanged();\n    };\n\n    const updateComposeHandler = (newComposer: string) => {\n        props.song.composedBy = newComposer;\n        notifySongChanged();\n    };\n\n    const updatePerformerHandler = (newPerformer: string) => {\n        props.song.performedBy = newPerformer;\n        notifySongChanged();\n    };\n\n    const title = (\n        <Box paddingBottom={theme.spacing(0.5)}>\n            <EditableTypography\n                value={props.song.title}\n                variant=\"h4\"\n                align=\"center\"\n                data-testid=\"SongTitle\"\n                placeholder=\"Song Title\"\n                onValueChange={updateTitleHandler}\n            />\n        </Box>\n    );\n\n    const lastSavedAt: React.ReactNode =\n        props.song.lastSavedAt === null ? null : (\n            <LastSavedAt lastSaved={props.song.lastSavedAt} />\n        );\n\n    const details = (\n        <Grid container justify=\"center\">\n            <Grid container item xs={6} justify=\"center\">\n                <Grid item>\n                    <Typography display=\"block\" variant=\"caption\">\n                        Composed by:{\" \"}\n                    </Typography>\n\n                    <EditableTypography\n                        value={props.song.composedBy}\n                        display=\"block\"\n                        variant=\"caption\"\n                        placeholder=\"Stock Aitken Waterman\"\n                        onValueChange={updateComposeHandler}\n                        data-testid=\"ComposedBy\"\n                    />\n                </Grid>\n            </Grid>\n            <Grid container item xs={6} justify=\"center\">\n                <Grid item>\n                    <Typography display=\"inline\" variant=\"caption\">\n                        Performed by:{\" \"}\n                    </Typography>\n\n                    <EditableTypography\n                        value={props.song.performedBy}\n                        variant=\"caption\"\n                        placeholder=\"Rick Astley\"\n                        onValueChange={updatePerformerHandler}\n                        data-testid=\"PerformedBy\"\n                    />\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n\n    return (\n        <Box\n            paddingTop={theme.spacing(1)}\n            paddingLeft={theme.spacing(0.5)}\n            paddingRight={theme.spacing(0.5)}\n            data-testid=\"Header\"\n        >\n            {lastSavedAt}\n            {title}\n            {details}\n        </Box>\n    );\n};\n\nexport default Header;\n","import { isLeft } from \"fp-ts/lib/Either\";\nimport { ProviderContext } from \"notistack\";\nimport { ChordSong } from \"../../../common/ChordModel/ChordSong\";\n\ntype EnqueueSnackbarType = ProviderContext[\"enqueueSnackbar\"];\n\nconst createFilePickerHandler = (\n    onLoad: (song: ChordSong) => void,\n    enqueueSnackbar: EnqueueSnackbarType\n) => {\n    return function (this: HTMLInputElement) {\n        const fileList = this.files;\n        if (fileList === null) {\n            return;\n        }\n\n        if (fileList.length > 1) {\n            enqueueSnackbar(\"Multiple files selected, only one file expected\", {\n                variant: \"error\",\n            });\n            return;\n        }\n\n        const file = fileList.item(0);\n        if (file === null) {\n            enqueueSnackbar(\"Could not retrieve file from file dialog\", {\n                variant: \"error\",\n            });\n            return;\n        }\n\n        const fileReader = new FileReader();\n        fileReader.onload = (ev: ProgressEvent<FileReader>) => {\n            if (\n                ev.target === null ||\n                ev.target.result === null ||\n                ev.target.result instanceof ArrayBuffer\n            ) {\n                return;\n            }\n\n            const results = ChordSong.deserialize(ev.target.result);\n            if (isLeft(results)) {\n                enqueueSnackbar(\n                    \"Can't load file, Song file failed validation\",\n                    {\n                        variant: \"error\",\n                    }\n                );\n                return;\n            }\n\n            onLoad(results.right);\n        };\n\n        fileReader.readAsText(file);\n    };\n};\n\nexport const useLoadMenuAction = (\n    onLoad: (song: ChordSong) => void,\n    enqueueSnackbar: EnqueueSnackbarType\n) => {\n    return () => {\n        const inputElem: HTMLInputElement = document.createElement(\"input\");\n        inputElem.type = \"file\";\n\n        const filePickerHandler = createFilePickerHandler(\n            onLoad,\n            enqueueSnackbar\n        );\n        inputElem.addEventListener(\"change\", filePickerHandler);\n\n        inputElem.click();\n    };\n};\n","import { isLeft } from \"fp-ts/lib/Either\";\nimport isOnline from \"is-online\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { Prompt, useHistory } from \"react-router\";\nimport { useErrorMessage } from \"../common/backend/errors\";\nimport { updateSong } from \"../common/backend/requests\";\nimport { ChordSong } from \"../common/ChordModel/ChordSong\";\nimport { SongIDModePath } from \"../common/paths\";\nimport { User, UserContext } from \"./user/userContext\";\n\ninterface SongProps {\n    song: ChordSong;\n    onSongChanged?: (song: ChordSong) => void;\n}\n\nexport const withCloud = <P extends SongProps>(\n    OriginalComponent: React.FC<P>\n): React.FC<P> => {\n    return (props: P): JSX.Element => {\n        const user: User | null = React.useContext(UserContext);\n        const showError = useErrorMessage();\n        const { enqueueSnackbar } = useSnackbar();\n        const dirtyRef = useRef(false);\n        const history = useHistory();\n\n        const handleSongChanged = (song: ChordSong) => {\n            dirtyRef.current = true;\n            props.onSongChanged?.(song);\n        };\n\n        const shouldSave = useCallback(\n            (song: ChordSong): boolean => {\n                return (\n                    dirtyRef.current && !song.isUnsaved() && song.isOwner(user)\n                );\n            },\n            [user]\n        );\n\n        useEffect(() => {\n            const unloadMessageFn = (event: Event) => {\n                if (shouldSave(props.song)) {\n                    event.preventDefault();\n                    event.returnValue = true;\n                }\n            };\n\n            window.addEventListener(\"beforeunload\", unloadMessageFn);\n\n            return () =>\n                window.removeEventListener(\"beforeunload\", unloadMessageFn);\n        }, [props.song, shouldSave]);\n\n        useEffect(() => {\n            const handleError = async (error: Error | string) => {\n                if (typeof error === \"string\") {\n                    enqueueSnackbar(error, { variant: \"error\" });\n                } else {\n                    await showError(error);\n                }\n                // set dirty back to true to try again later\n                dirtyRef.current = true;\n            };\n\n            const saveIfChanged = async (song: ChordSong) => {\n                if (user === null) {\n                    return;\n                }\n\n                if (!(await isOnline())) {\n                    return;\n                }\n\n                if (!shouldSave(song)) {\n                    return;\n                }\n\n                await save(user, song);\n            };\n\n            const save = async (user: User, song: ChordSong) => {\n                const result = await updateSong(song, user.authToken);\n                if (isLeft(result)) {\n                    await handleError(result.left);\n                    return;\n                }\n\n                dirtyRef.current = false;\n\n                const deserializeResult = ChordSong.fromJSONObject(\n                    result.right\n                );\n                if (isLeft(deserializeResult)) {\n                    await handleError(\n                        \"Song results from backend can't be deserialized\"\n                    );\n                    return;\n                }\n\n                song.lastSavedAt = deserializeResult.right.lastSavedAt;\n                props.onSongChanged?.(song);\n            };\n\n            const interval = setInterval(\n                () => saveIfChanged(props.song),\n                10000\n            );\n            return () => clearInterval(interval);\n        }, [props, user, enqueueSnackbar, showError, dirtyRef, shouldSave]);\n\n        // https://github.com/microsoft/TypeScript/issues/35858\n        const originalComponentProps = {\n            ...props,\n            onSongChanged: handleSongChanged,\n        } as P;\n\n        const showLeavingPrompt = () => {\n            if (\n                shouldSave(props.song) &&\n                SongIDModePath.isEditMode(history.location.pathname)\n            ) {\n                return \"This page is asking you to confirm that you want to leave - data you have entered may not be saved.\";\n            }\n\n            return true;\n        };\n\n        return (\n            <>\n                <Prompt message={showLeavingPrompt} />\n                <OriginalComponent {...originalComponentProps} />\n            </>\n        );\n    };\n};\n","import { NoteClass, ChromaticScale } from \"./MusicNotes\";\n\nexport interface Key {\n    Center: ChromaticScale;\n    [NoteClass.C]: ChromaticScale.C | ChromaticScale.B_sharp;\n    [NoteClass.Db]: ChromaticScale.Db | ChromaticScale.C_sharp;\n    [NoteClass.D]: ChromaticScale.D;\n    [NoteClass.Eb]: ChromaticScale.Eb | ChromaticScale.D_sharp;\n    [NoteClass.E]: ChromaticScale.E | ChromaticScale.Fb;\n    [NoteClass.F]: ChromaticScale.F | ChromaticScale.E_sharp;\n    [NoteClass.Gb]: ChromaticScale.Gb | ChromaticScale.F_sharp;\n    [NoteClass.G]: ChromaticScale.G;\n    [NoteClass.Ab]: ChromaticScale.Ab | ChromaticScale.G_sharp;\n    [NoteClass.A]: ChromaticScale.A;\n    [NoteClass.Bb]: ChromaticScale.Bb | ChromaticScale.A_sharp;\n    [NoteClass.B]: ChromaticScale.B | ChromaticScale.Cb;\n}\n\nconst UnusableKeys = {\n    // omitting B#, E#, and Fb\n    // these set of keys are unusable\n    [ChromaticScale.B_sharp]: null,\n    [ChromaticScale.E_sharp]: null,\n    [ChromaticScale.Fb]: null,\n};\n\ntype UsableKeyCollection = {\n    [ChromaticScale.C]: Key;\n    [ChromaticScale.C_sharp]: Key;\n    [ChromaticScale.Db]: Key;\n    [ChromaticScale.D]: Key;\n    [ChromaticScale.D_sharp]: Key;\n    [ChromaticScale.Eb]: Key;\n    [ChromaticScale.E]: Key;\n    [ChromaticScale.F]: Key;\n    [ChromaticScale.F_sharp]: Key;\n    [ChromaticScale.Gb]: Key;\n    [ChromaticScale.G]: Key;\n    [ChromaticScale.G_sharp]: Key;\n    [ChromaticScale.Ab]: Key;\n    [ChromaticScale.A]: Key;\n    [ChromaticScale.A_sharp]: Key;\n    [ChromaticScale.Bb]: Key;\n    [ChromaticScale.B]: Key;\n    [ChromaticScale.Cb]: Key;\n};\n\nexport const UsableKeys: UsableKeyCollection = {\n    // all keys are expressed as 1, b2, 2, b3, 3, 4, #4, 5, b6, 6, b7, 7\n    // since all accidentals are expressed as borrowing from another mode\n    // this collection is valid for all modes except locrian\n    //\n    // exception when note has to be expressed as double sharp/flat, then it is just\n    // the unqualified enharmonic for readability (e.g. b2 in Ab is Bbb, but we'll just write it as A since that's less complicated)\n\n    [ChromaticScale.C]: {\n        Center: ChromaticScale.C,\n        [NoteClass.C]: ChromaticScale.C,\n        [NoteClass.Db]: ChromaticScale.Db,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.Eb,\n        [NoteClass.E]: ChromaticScale.E,\n        [NoteClass.F]: ChromaticScale.F,\n        [NoteClass.Gb]: ChromaticScale.F_sharp,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.Ab,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.Bb,\n        [NoteClass.B]: ChromaticScale.B,\n    },\n    [ChromaticScale.C_sharp]: {\n        Center: ChromaticScale.C_sharp,\n        [NoteClass.Db]: ChromaticScale.C_sharp,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.D_sharp,\n        [NoteClass.E]: ChromaticScale.E,\n        [NoteClass.F]: ChromaticScale.E_sharp,\n        [NoteClass.Gb]: ChromaticScale.F_sharp,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.G_sharp,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.A_sharp,\n        [NoteClass.B]: ChromaticScale.B,\n        [NoteClass.C]: ChromaticScale.B_sharp,\n    },\n    [ChromaticScale.Db]: {\n        Center: ChromaticScale.Db,\n        [NoteClass.Db]: ChromaticScale.Db,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.Eb,\n        [NoteClass.E]: ChromaticScale.Fb,\n        [NoteClass.F]: ChromaticScale.F,\n        [NoteClass.Gb]: ChromaticScale.Gb,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.Ab,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.Bb,\n        [NoteClass.B]: ChromaticScale.Cb,\n        [NoteClass.C]: ChromaticScale.C,\n    },\n    [ChromaticScale.D]: {\n        Center: ChromaticScale.D,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.Eb,\n        [NoteClass.E]: ChromaticScale.E,\n        [NoteClass.F]: ChromaticScale.F,\n        [NoteClass.Gb]: ChromaticScale.F_sharp,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.G_sharp,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.Bb,\n        [NoteClass.B]: ChromaticScale.B,\n        [NoteClass.C]: ChromaticScale.C,\n        [NoteClass.Db]: ChromaticScale.C_sharp,\n    },\n    [ChromaticScale.D_sharp]: {\n        Center: ChromaticScale.D_sharp,\n        [NoteClass.Eb]: ChromaticScale.D_sharp,\n        [NoteClass.E]: ChromaticScale.E,\n        [NoteClass.F]: ChromaticScale.E_sharp,\n        [NoteClass.Gb]: ChromaticScale.F_sharp,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.G_sharp,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.A_sharp,\n        [NoteClass.B]: ChromaticScale.B,\n        [NoteClass.C]: ChromaticScale.B_sharp,\n        [NoteClass.Db]: ChromaticScale.C_sharp,\n        [NoteClass.D]: ChromaticScale.D,\n    },\n    [ChromaticScale.Eb]: {\n        Center: ChromaticScale.Eb,\n        [NoteClass.Eb]: ChromaticScale.Eb,\n        [NoteClass.E]: ChromaticScale.Fb,\n        [NoteClass.F]: ChromaticScale.F,\n        [NoteClass.Gb]: ChromaticScale.Gb,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.Ab,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.Bb,\n        [NoteClass.B]: ChromaticScale.Cb,\n        [NoteClass.C]: ChromaticScale.C,\n        [NoteClass.Db]: ChromaticScale.Db,\n        [NoteClass.D]: ChromaticScale.D,\n    },\n    [ChromaticScale.E]: {\n        Center: ChromaticScale.E,\n        [NoteClass.E]: ChromaticScale.E,\n        [NoteClass.F]: ChromaticScale.F,\n        [NoteClass.Gb]: ChromaticScale.F_sharp,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.G_sharp,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.A_sharp,\n        [NoteClass.B]: ChromaticScale.B,\n        [NoteClass.C]: ChromaticScale.C,\n        [NoteClass.Db]: ChromaticScale.C_sharp,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.D_sharp,\n    },\n    [ChromaticScale.F]: {\n        Center: ChromaticScale.F,\n        [NoteClass.F]: ChromaticScale.F,\n        [NoteClass.Gb]: ChromaticScale.Gb,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.Ab,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.Bb,\n        [NoteClass.B]: ChromaticScale.B,\n        [NoteClass.C]: ChromaticScale.C,\n        [NoteClass.Db]: ChromaticScale.Db,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.Eb,\n        [NoteClass.E]: ChromaticScale.E,\n    },\n    [ChromaticScale.F_sharp]: {\n        Center: ChromaticScale.F_sharp,\n        [NoteClass.Gb]: ChromaticScale.F_sharp,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.G_sharp,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.A_sharp,\n        [NoteClass.B]: ChromaticScale.B,\n        [NoteClass.C]: ChromaticScale.B_sharp,\n        [NoteClass.Db]: ChromaticScale.C_sharp,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.D_sharp,\n        [NoteClass.E]: ChromaticScale.E,\n        [NoteClass.F]: ChromaticScale.E_sharp,\n    },\n    [ChromaticScale.Gb]: {\n        Center: ChromaticScale.Gb,\n        [NoteClass.Gb]: ChromaticScale.Gb,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.Ab,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.Bb,\n        [NoteClass.B]: ChromaticScale.Cb,\n        [NoteClass.C]: ChromaticScale.C,\n        [NoteClass.Db]: ChromaticScale.Db,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.Eb,\n        [NoteClass.E]: ChromaticScale.Fb,\n        [NoteClass.F]: ChromaticScale.F,\n    },\n    [ChromaticScale.G]: {\n        Center: ChromaticScale.G,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.Ab,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.Bb,\n        [NoteClass.B]: ChromaticScale.B,\n        [NoteClass.C]: ChromaticScale.C,\n        [NoteClass.Db]: ChromaticScale.C_sharp,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.Eb,\n        [NoteClass.E]: ChromaticScale.E,\n        [NoteClass.F]: ChromaticScale.F,\n        [NoteClass.Gb]: ChromaticScale.F_sharp,\n    },\n    [ChromaticScale.G_sharp]: {\n        Center: ChromaticScale.G_sharp,\n        [NoteClass.Ab]: ChromaticScale.G_sharp,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.A_sharp,\n        [NoteClass.B]: ChromaticScale.B,\n        [NoteClass.C]: ChromaticScale.B_sharp,\n        [NoteClass.Db]: ChromaticScale.C_sharp,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.D_sharp,\n        [NoteClass.E]: ChromaticScale.E,\n        [NoteClass.F]: ChromaticScale.E_sharp,\n        [NoteClass.Gb]: ChromaticScale.F_sharp,\n        [NoteClass.G]: ChromaticScale.G,\n    },\n    [ChromaticScale.Ab]: {\n        Center: ChromaticScale.Ab,\n        [NoteClass.Ab]: ChromaticScale.Ab,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.Bb,\n        [NoteClass.B]: ChromaticScale.Cb,\n        [NoteClass.C]: ChromaticScale.C,\n        [NoteClass.Db]: ChromaticScale.Db,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.Eb,\n        [NoteClass.E]: ChromaticScale.Fb,\n        [NoteClass.F]: ChromaticScale.F,\n        [NoteClass.Gb]: ChromaticScale.Gb,\n        [NoteClass.G]: ChromaticScale.G,\n    },\n    [ChromaticScale.A]: {\n        Center: ChromaticScale.A,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.Bb,\n        [NoteClass.B]: ChromaticScale.B,\n        [NoteClass.C]: ChromaticScale.C,\n        [NoteClass.Db]: ChromaticScale.C_sharp,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.D_sharp,\n        [NoteClass.E]: ChromaticScale.E,\n        [NoteClass.F]: ChromaticScale.F,\n        [NoteClass.Gb]: ChromaticScale.F_sharp,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.G_sharp,\n    },\n    [ChromaticScale.A_sharp]: {\n        Center: ChromaticScale.A_sharp,\n        [NoteClass.Bb]: ChromaticScale.A_sharp,\n        [NoteClass.B]: ChromaticScale.B,\n        [NoteClass.C]: ChromaticScale.B_sharp,\n        [NoteClass.Db]: ChromaticScale.C_sharp,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.D_sharp,\n        [NoteClass.E]: ChromaticScale.E,\n        [NoteClass.F]: ChromaticScale.E_sharp,\n        [NoteClass.Gb]: ChromaticScale.F_sharp,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.G_sharp,\n        [NoteClass.A]: ChromaticScale.A,\n    },\n    [ChromaticScale.Bb]: {\n        Center: ChromaticScale.Bb,\n        [NoteClass.Bb]: ChromaticScale.Bb,\n        [NoteClass.B]: ChromaticScale.Cb,\n        [NoteClass.C]: ChromaticScale.C,\n        [NoteClass.Db]: ChromaticScale.Db,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.Eb,\n        [NoteClass.E]: ChromaticScale.E,\n        [NoteClass.F]: ChromaticScale.F,\n        [NoteClass.Gb]: ChromaticScale.Gb,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.Ab,\n        [NoteClass.A]: ChromaticScale.A,\n    },\n    [ChromaticScale.B]: {\n        Center: ChromaticScale.B,\n        [NoteClass.B]: ChromaticScale.B,\n        [NoteClass.C]: ChromaticScale.C,\n        [NoteClass.Db]: ChromaticScale.C_sharp,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.D_sharp,\n        [NoteClass.E]: ChromaticScale.E,\n        [NoteClass.F]: ChromaticScale.E_sharp,\n        [NoteClass.Gb]: ChromaticScale.F_sharp,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.G_sharp,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.A_sharp,\n    },\n    [ChromaticScale.Cb]: {\n        Center: ChromaticScale.Cb,\n        [NoteClass.B]: ChromaticScale.Cb,\n        [NoteClass.C]: ChromaticScale.C,\n        [NoteClass.Db]: ChromaticScale.Db,\n        [NoteClass.D]: ChromaticScale.D,\n        [NoteClass.Eb]: ChromaticScale.Eb,\n        [NoteClass.E]: ChromaticScale.Fb,\n        [NoteClass.F]: ChromaticScale.F,\n        [NoteClass.Gb]: ChromaticScale.Gb,\n        [NoteClass.G]: ChromaticScale.G,\n        [NoteClass.Ab]: ChromaticScale.Ab,\n        [NoteClass.A]: ChromaticScale.A,\n        [NoteClass.Bb]: ChromaticScale.Bb,\n    },\n};\n\n// sanity check to make sure all keys are covered\n// not for actual usage, but to make sure it compiles\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst allKeys: {\n    [P in ChromaticScale]: Key | null;\n} = {\n    ...UsableKeys,\n    ...UnusableKeys,\n};\n\nconst {\n    [ChromaticScale.D_sharp]: _a1,\n    [ChromaticScale.A_sharp]: _a2,\n    [ChromaticScale.G_sharp]: _a3,\n    ...UsableMajorKeys\n} = UsableKeys;\nexport const MajorKeys = UsableMajorKeys;\n\nexport const isMajorKey = (\n    key: ChromaticScale\n): key is keyof typeof MajorKeys => {\n    return key in MajorKeys;\n};\n\nconst {\n    [ChromaticScale.Db]: _b1,\n    [ChromaticScale.Gb]: _b2,\n    [ChromaticScale.Cb]: _b3,\n    ...UsableMinorKeys\n} = UsableKeys;\nexport const MinorKeys = UsableMinorKeys;\n\nexport const isMinorKey = (\n    key: ChromaticScale\n): key is keyof typeof MinorKeys => {\n    return key in MinorKeys;\n};\n","import { Key } from \"./Keys\";\nimport {\n    ChromaticScale,\n    getDifference,\n    getNoteClass,\n    moveUpSemitones,\n    AllChromaticScale,\n} from \"./MusicNotes\";\nimport { ChordSong } from \"../ChordModel/ChordSong\";\n\nconst transposeNote = (\n    note: ChromaticScale,\n    fromKey: Key,\n    toKey: Key\n): ChromaticScale => {\n    const difference = getDifference(fromKey.Center, toKey.Center);\n    const originalNoteClass = getNoteClass(note);\n    const transposedNoteClass = moveUpSemitones(originalNoteClass, difference);\n    return toKey[transposedNoteClass];\n};\n\nconst transposeSymbol = (symbol: string, fromKey: Key, toKey: Key): string => {\n    const matchingNotes: ChromaticScale[] = [];\n\n    for (const scaleNote of AllChromaticScale) {\n        if (symbol.startsWith(scaleNote)) {\n            matchingNotes.push(scaleNote);\n        }\n    }\n\n    if (matchingNotes.length === 0) {\n        return symbol;\n    }\n\n    let matchingNote: ChromaticScale = matchingNotes[0];\n    for (const note of matchingNotes) {\n        // use the longest matching note as the root\n        // e.g. in C#7, C# is a better match than C\n        if (note.length > matchingNote.length) {\n            matchingNote = note;\n        }\n    }\n\n    const transposedNote = transposeNote(matchingNote, fromKey, toKey);\n    return symbol.replace(matchingNote, transposedNote);\n};\n\nconst transposeChord = (chord: string, fromKey: Key, toKey: Key): string => {\n    let bass: string | null = null;\n    let baseChord: string = chord;\n    if (chord.includes(\"/\")) {\n        const tokens = chord.split(\"/\");\n        baseChord = tokens[0];\n        // we don't expect more than one slash, but just to be careful\n        const remainingTokens = tokens.slice(1);\n        bass = remainingTokens.join(\"/\");\n    }\n\n    baseChord = transposeSymbol(baseChord, fromKey, toKey);\n    if (bass === null) {\n        return baseChord;\n    }\n\n    bass = transposeSymbol(bass, fromKey, toKey);\n    return baseChord + \"/\" + bass;\n};\n\nexport const transposeSong = (\n    song: ChordSong,\n    fromKey: Key,\n    toKey: Key\n): ChordSong => {\n    for (const line of song.chordLines) {\n        for (const block of line.chordBlocks) {\n            if (block.chord === \"\") {\n                continue;\n            }\n\n            block.chord = transposeChord(block.chord, fromKey, toKey);\n        }\n    }\n\n    return song;\n};\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControl as UnstyledFormControl,\n    FormControlLabel,\n    Grid,\n    InputLabel,\n    MenuItem,\n    Radio,\n    RadioGroup,\n    Select as UnstyledSelect,\n    Theme,\n} from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { ChordSong } from \"../../../common/ChordModel/ChordSong\";\nimport { PlainFn } from \"../../../common/PlainFn\";\nimport {\n    isMajorKey,\n    isMinorKey,\n    MajorKeys,\n    MinorKeys,\n} from \"../../../common/transpose/Keys\";\nimport { ChromaticScale } from \"../../../common/transpose/MusicNotes\";\nimport { transposeSong } from \"../../../common/transpose/Transpose\";\n\ninterface TransposeMenuProps {\n    open: boolean;\n    song: ChordSong;\n    onClose: PlainFn;\n    onSongChanged: (song: ChordSong) => void;\n}\n\nconst FormControl = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(2),\n        display: \"flex\",\n    },\n}))(UnstyledFormControl);\n\nconst Select = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(0.5),\n    },\n}))(UnstyledSelect);\n\ninterface MajorKeySelection {\n    type: \"major\";\n    originalKey: keyof typeof MajorKeys;\n    transposedKey: keyof typeof MajorKeys;\n}\n\ninterface MinorKeySelection {\n    type: \"minor\";\n    originalKey: keyof typeof MinorKeys;\n    transposedKey: keyof typeof MinorKeys;\n}\n\ntype KeySelection = MajorKeySelection | MinorKeySelection;\n\nconst TransposeMenu: React.FC<TransposeMenuProps> = (\n    props: TransposeMenuProps\n): JSX.Element => {\n    const [keySelection, setKeySelection] = useState<KeySelection>({\n        type: \"major\",\n        originalKey: ChromaticScale.C,\n        transposedKey: ChromaticScale.C,\n    });\n\n    const handleModalityChange = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ) => {\n        switch (event.target.value) {\n            case \"major\": {\n                const newKeySelection: MajorKeySelection = {\n                    type: \"major\",\n                    originalKey: isMajorKey(keySelection.originalKey)\n                        ? keySelection.originalKey\n                        : ChromaticScale.C,\n                    transposedKey: isMajorKey(keySelection.transposedKey)\n                        ? keySelection.transposedKey\n                        : ChromaticScale.C,\n                };\n\n                setKeySelection(newKeySelection);\n                break;\n            }\n            case \"minor\": {\n                const newKeySelection: MinorKeySelection = {\n                    type: \"minor\",\n                    originalKey: isMinorKey(keySelection.originalKey)\n                        ? keySelection.originalKey\n                        : ChromaticScale.C,\n                    transposedKey: isMinorKey(keySelection.transposedKey)\n                        ? keySelection.transposedKey\n                        : ChromaticScale.C,\n                };\n\n                setKeySelection(newKeySelection);\n                break;\n            }\n            default: {\n                throw new Error(\"Only major or minor is expected\");\n            }\n        }\n    };\n\n    const keySelectChangeHandler = (\n        changedField: \"originalKey\" | \"transposedKey\"\n    ): ((event: React.ChangeEvent<{ value: unknown }>) => void) => {\n        return (event: React.ChangeEvent<{ value: unknown }>) => {\n            const newSelectValue = event.target.value as ChromaticScale;\n            const newKeySelection = { ...keySelection };\n\n            switch (newKeySelection.type) {\n                case \"major\":\n                    if (!isMajorKey(newSelectValue)) {\n                        throw new Error(\n                            \"Unexpected: Selection is not a major key\"\n                        );\n                    }\n                    newKeySelection[changedField] = newSelectValue;\n                    break;\n                case \"minor\":\n                    if (!isMinorKey(newSelectValue)) {\n                        throw new Error(\n                            \"Unexpected: Selection is not a minor key\"\n                        );\n                    }\n                    newKeySelection[changedField] = newSelectValue;\n                    break;\n            }\n\n            setKeySelection(newKeySelection);\n        };\n    };\n\n    const handleTransposeAction = (): void => {\n        const fromKey =\n            keySelection.type === \"major\"\n                ? MajorKeys[keySelection.originalKey]\n                : MinorKeys[keySelection.originalKey];\n        const toKey =\n            keySelection.type === \"major\"\n                ? MajorKeys[keySelection.transposedKey]\n                : MinorKeys[keySelection.transposedKey];\n\n        transposeSong(props.song, fromKey, toKey);\n        props.onSongChanged(props.song);\n        props.onClose();\n    };\n\n    const createKeySelect = (\n        id: string,\n        currentKey: ChromaticScale,\n        changeHandler: (event: React.ChangeEvent<{ value: unknown }>) => void\n    ) => {\n        const keyCollection =\n            keySelection.type === \"major\" ? MajorKeys : MinorKeys;\n        const menuItems: React.ReactElement[] = [];\n\n        for (const keyName in keyCollection) {\n            menuItems.push(<MenuItem value={keyName}>{keyName}</MenuItem>);\n        }\n\n        return (\n            <Select id={id} value={currentKey} onChange={changeHandler}>\n                {menuItems}\n            </Select>\n        );\n    };\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>Transpose Key</DialogTitle>\n            <DialogContent>\n                <Grid container>\n                    <Grid item>\n                        <FormControl>\n                            <RadioGroup\n                                value={keySelection.type}\n                                onChange={handleModalityChange}\n                            >\n                                <FormControlLabel\n                                    value=\"major\"\n                                    control={<Radio />}\n                                    label=\"Major\"\n                                />\n                                <FormControlLabel\n                                    value=\"minor\"\n                                    control={<Radio />}\n                                    label=\"Minor\"\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                    </Grid>\n                    <Grid item>\n                        <FormControl>\n                            <InputLabel htmlFor=\"original-key\">\n                                Original Key\n                            </InputLabel>\n                            {createKeySelect(\n                                \"original-key\",\n                                keySelection.originalKey,\n                                keySelectChangeHandler(\"originalKey\")\n                            )}\n                        </FormControl>\n                        <FormControl>\n                            <InputLabel htmlFor=\"transposed-key\">\n                                Transposed Key\n                            </InputLabel>\n                            {createKeySelect(\n                                \"transposed-key\",\n                                keySelection.transposedKey,\n                                keySelectChangeHandler(\"transposedKey\")\n                            )}\n                        </FormControl>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose}>Cancel</Button>\n                <Button onClick={handleTransposeAction}>Transpose</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default TransposeMenu;\n","import { Theme } from \"@material-ui/core\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport TransposeIcon from \"@material-ui/icons/ImportExport\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport PlayIcon from \"@material-ui/icons/PlayArrow\";\nimport ForkIcon from \"@material-ui/icons/CallSplit\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport {\n    SpeedDial as UnstyledSpeedDial,\n    SpeedDialAction,\n} from \"@material-ui/lab\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport useKonamiCode from \"react-use-konami\";\nimport { ChordSong } from \"../../../common/ChordModel/ChordSong\";\nimport { PlainFn } from \"../../../common/PlainFn\";\nimport { User, UserContext } from \"../../user/userContext\";\nimport { useCloudCreateSong } from \"./cloudSave\";\nimport { useLoadMenuAction } from \"./load\";\nimport { useSaveMenuAction } from \"./save\";\nimport TransposeMenu from \"./TransposeMenu\";\n\ninterface ChordPaperMenuProps {\n    song: ChordSong;\n    onSongChanged: (song: ChordSong) => void;\n    onPlay?: PlainFn;\n}\n\nconst SpeedDial = withStyles((theme: Theme) => ({\n    root: {\n        position: \"fixed\",\n        top: theme.spacing(3),\n        right: theme.spacing(2),\n    },\n}))(UnstyledSpeedDial);\n\nconst ChordPaperMenu: React.FC<ChordPaperMenuProps> = (\n    props: ChordPaperMenuProps\n): JSX.Element => {\n    const developmentEnv = process.env.NODE_ENV === \"development\";\n    const [open, setOpen] = useState(false);\n    const [transposeMenuOpen, setTransposeMenuOpen] = useState(false);\n    const [offlineMode, setOfflineMode] = useState(developmentEnv);\n    const { enqueueSnackbar } = useSnackbar();\n\n    const user = React.useContext(UserContext);\n    const loadAction = useLoadMenuAction(props.onSongChanged, enqueueSnackbar);\n    const saveAction = useSaveMenuAction(props.song);\n    const cloudSaveAction = useCloudCreateSong();\n\n    const openMenu = () => {\n        setOpen(true);\n    };\n\n    const closeMenu = () => {\n        setOpen(false);\n    };\n\n    const forkSong = (song: ChordSong, user: User) => {\n        const songClone = song.deepClone();\n        cloudSaveAction(songClone, user);\n    };\n\n    useKonamiCode(() => {\n        setOfflineMode(true);\n        enqueueSnackbar(\"Local save and load buttons are enabled!\", {\n            variant: \"info\",\n        });\n    });\n\n    if (transposeMenuOpen) {\n        return (\n            <TransposeMenu\n                song={props.song}\n                open\n                onClose={() => {\n                    setTransposeMenuOpen(false);\n                }}\n                onSongChanged={props.onSongChanged}\n            ></TransposeMenu>\n        );\n    }\n\n    return (\n        <SpeedDial\n            icon={<MoreVertIcon />}\n            open={open}\n            onOpen={openMenu}\n            onClose={closeMenu}\n            direction=\"down\"\n            ariaLabel=\"SpeedDial\"\n        >\n            <SpeedDialAction\n                icon={<PlayIcon />}\n                tooltipTitle=\"Play Mode\"\n                onClick={props.onPlay}\n            />\n\n            {!props.song.isUnsaved() && user !== null && (\n                <SpeedDialAction\n                    icon={<ForkIcon />}\n                    tooltipTitle=\"Fork\"\n                    onClick={() => forkSong(props.song, user)}\n                />\n            )}\n\n            {props.song.isUnsaved() && user !== null && (\n                <SpeedDialAction\n                    icon={<CloudUploadIcon />}\n                    tooltipTitle=\"Save to Cloud\"\n                    onClick={() => cloudSaveAction(props.song, user)}\n                />\n            )}\n\n            <SpeedDialAction\n                icon={<TransposeIcon />}\n                tooltipTitle=\"Transpose\"\n                onClick={() => {\n                    setTransposeMenuOpen(true);\n                }}\n            />\n\n            {offlineMode && (\n                <SpeedDialAction\n                    icon={<SaveIcon />}\n                    tooltipTitle=\"Save to computer\"\n                    onClick={saveAction}\n                />\n            )}\n\n            {offlineMode && (\n                <SpeedDialAction\n                    icon={<FolderOpenIcon />}\n                    tooltipTitle=\"Load from computer\"\n                    onClick={loadAction}\n                />\n            )}\n        </SpeedDial>\n    );\n};\n\nexport default ChordPaperMenu;\n","import { ChordSong } from \"../../../common/ChordModel/ChordSong\";\nexport const useSaveMenuAction = (song: ChordSong) => {\n    return () => {\n        const jsonStr = JSON.stringify(song.deepClone());\n\n        const blob = new Blob([jsonStr], {\n            type: \"application/json\",\n        });\n        const objectURL = URL.createObjectURL(blob);\n\n        const anchor = document.createElement(\"a\");\n\n        anchor.download = \"chord_paper_song.json\";\n        if (song.title !== \"\") {\n            anchor.download = song.title + \".json\";\n        }\n        anchor.href = objectURL;\n        anchor.click();\n\n        URL.revokeObjectURL(objectURL);\n    };\n};\n","import { isLeft } from \"fp-ts/lib/These\";\nimport { useSnackbar } from \"notistack\";\nimport { useHistory } from \"react-router-dom\";\nimport { useErrorMessage } from \"../../../common/backend/errors\";\nimport { createSong } from \"../../../common/backend/requests\";\nimport { ChordSong } from \"../../../common/ChordModel/ChordSong\";\nimport { songPath } from \"../../../common/paths\";\nimport { User } from \"../../user/userContext\";\n\nexport const useCloudCreateSong = () => {\n    const { enqueueSnackbar } = useSnackbar();\n    const showError = useErrorMessage();\n    const history = useHistory();\n\n    const createNewSong = async (song: ChordSong, user: User) => {\n        song.owner = user.userID;\n\n        const createResult = await createSong(song, user.authToken);\n\n        if (isLeft(createResult)) {\n            await showError(createResult.left);\n            return;\n        }\n\n        let deserializeResult = ChordSong.fromJSONObject(createResult.right);\n\n        if (isLeft(deserializeResult)) {\n            console.error(\"Backend response does not match song format\");\n            console.log(createResult.right);\n            enqueueSnackbar(\n                \"A failure happened. Check console for more error details\",\n                { variant: \"error\" }\n            );\n            return;\n        }\n\n        const deserializedSong = deserializeResult.right;\n        history.push(\n            songPath.withID(deserializedSong.id).withMode(\"edit\").URL()\n        );\n    };\n\n    return async (song: ChordSong, user: User) => {\n        if (song.isUnsaved()) {\n            await createNewSong(song, user);\n        }\n    };\n};\n","import { Paper, Theme, withStyles } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { PlainFn } from \"../../common/PlainFn\";\nimport PlayerTimeProvider from \"../PlayerTimeContext\";\nimport JamStation from \"../track_player/JamStation\";\nimport TrackListProvider, {\n    TrackListChangeHandler,\n    TrackListLoad,\n} from \"../track_player/TrackListProvider\";\nimport ChordPaperBody from \"./ChordPaperBody\";\nimport Header from \"./Header\";\nimport ChordPaperMenu from \"./menu/ChordPaperMenu\";\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        position: \"relative\",\n        margin: theme.spacing(5),\n        minHeight: theme.spacing(92),\n        minWidth: theme.spacing(92),\n    },\n}))(Paper);\n\nconst useWhiteStyle = makeStyles({\n    root: {\n        backgroundColor: \"white\",\n    },\n});\n\ninterface ChordPaperProps {\n    song: ChordSong;\n    onSongChanged?: (song: ChordSong) => void;\n    onPlay?: PlainFn;\n}\n\nconst ChordPaper: React.FC<ChordPaperProps> = (\n    props: ChordPaperProps\n): JSX.Element => {\n    const whiteStyle = useWhiteStyle();\n\n    const songChangeHandler = (song: ChordSong) => {\n        props.onSongChanged?.(song);\n    };\n\n    const trackPlayer: React.ReactNode = (() => {\n        if (props.song.isUnsaved()) {\n            return null;\n        }\n\n        return (\n            <TrackListProvider song={props.song}>\n                {(\n                    tracklistLoad: TrackListLoad,\n                    changeHandler: TrackListChangeHandler,\n                    onRefresh: PlainFn\n                ) => (\n                    <JamStation\n                        collapsedButtonClassName={whiteStyle.root}\n                        timeSections={props.song.timeSections}\n                        tracklistLoad={tracklistLoad}\n                        onTrackListChanged={changeHandler}\n                        onRefresh={onRefresh}\n                    />\n                )}\n            </TrackListProvider>\n        );\n    })();\n\n    return (\n        <PlayerTimeProvider>\n            <Helmet>\n                <title>\n                    {props.song.metadata.title !== \"\"\n                        ? props.song.metadata.title\n                        : \"New Song\"}\n                </title>\n            </Helmet>\n            <RootPaper elevation={3} data-testid=\"ChordPaper\">\n                <Header\n                    data-testid={\"Header\"}\n                    song={props.song}\n                    onSongChanged={songChangeHandler}\n                />\n                <ChordPaperBody\n                    song={props.song}\n                    onSongChanged={songChangeHandler}\n                />\n                <ChordPaperMenu\n                    song={props.song}\n                    onSongChanged={songChangeHandler}\n                    onPlay={props.onPlay}\n                />\n                {trackPlayer}\n            </RootPaper>\n        </PlayerTimeProvider>\n    );\n};\n\nexport default ChordPaper;\n","const scrollBackwardsKeys: string[] = [\n    \"ArrowUp\",\n    \"ArrowLeft\",\n    \"Backspace\",\n    \"ShiftLeft\",\n];\n\nexport const isScrollBackwardsKey = (code: string): boolean => {\n    for (let backwardsKey of scrollBackwardsKeys) {\n        if (backwardsKey === code) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nexport const scrollForwardKeys: string[] = [\n    \"KeyA\",\n    \"KeyB\",\n    \"KeyC\",\n    \"KeyD\",\n    \"KeyE\",\n    \"KeyF\",\n    \"KeyG\",\n    \"KeyH\",\n    \"KeyI\",\n    \"KeyJ\",\n    \"KeyK\",\n    \"KeyL\",\n    \"KeyM\",\n    \"KeyN\",\n    \"KeyO\",\n    \"KeyP\",\n    \"KeyQ\",\n    \"KeyR\",\n    \"KeyS\",\n    \"KeyT\",\n    \"KeyU\",\n    \"KeyV\",\n    \"KeyW\",\n    \"KeyX\",\n    \"KeyY\",\n    \"KeyZ\",\n    \"Digit1\",\n    \"Digit2\",\n    \"Digit3\",\n    \"Digit4\",\n    \"Digit5\",\n    \"Digit6\",\n    \"Digit7\",\n    \"Digit8\",\n    \"Digit9\",\n    \"Digit0\",\n    \"Space\",\n    \"Enter\",\n    \"ArrowDown\",\n    \"ArrowRight\",\n    \"Comma\",\n    \"Period\",\n    \"Slash\",\n    \"Backslash\",\n    \"Semicolon\",\n    \"Quote\",\n    \"Backquote\",\n    \"Tab\",\n    \"ShiftRight\",\n    \"Equal\",\n    \"BracketLeft\",\n    \"BracketRight\",\n];\n\nexport const isScrollForwardsKey = (code: string): boolean => {\n    for (let forwardsKey of scrollForwardKeys) {\n        if (forwardsKey === code) {\n            return true;\n        }\n    }\n\n    return false;\n};\n","import { Box, Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport ChordSymbol from \"../display/ChordSymbol\";\nimport LyricTypography from \"../display/Lyric\";\n\ninterface PlayBlockProps {\n    block: ChordBlock;\n}\n\nconst PlayBlock: React.FC<PlayBlockProps> = (\n    props: PlayBlockProps\n): JSX.Element => {\n    return (\n        <Box display=\"inline-block\">\n            <Grid container direction=\"column\" component=\"span\">\n                <Grid item>\n                    <ChordSymbol>{props.block.chord}</ChordSymbol>\n                </Grid>\n                <Grid item>\n                    <LyricTypography data-testid=\"lyric\">\n                        {props.block.lyric}\n                    </LyricTypography>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default PlayBlock;\n","import { Box, Typography, Theme } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport PlayBlock from \"./PlayBlock\";\nimport { withStyles } from \"@material-ui/styles\";\nimport {\n    sectionLabelStyle,\n    sectionTypographyVariant,\n} from \"../display/SectionLabel\";\n\nconst LabelTypography = withStyles(sectionLabelStyle)(Typography);\nconst TopMarginBox = withStyles((theme: Theme) => ({\n    root: {\n        marginTop: theme.spacing(1),\n    },\n}))(Box);\n\ninterface PlayLineProps {\n    chordLine: ChordLine;\n}\n\nconst PlayLine: React.FC<PlayLineProps> = (\n    props: PlayLineProps\n): JSX.Element => {\n    let lineComponent: React.ReactElement = (\n        <Box>\n            {props.chordLine.chordBlocks.map((block: ChordBlock) => (\n                <PlayBlock block={block} key={block.id}></PlayBlock>\n            ))}\n        </Box>\n    );\n\n    const label = props.chordLine.section?.name;\n    if (label !== undefined && label !== \"\") {\n        const labelElement = (\n            <TopMarginBox>\n                <LabelTypography variant={sectionTypographyVariant}>\n                    {label}\n                </LabelTypography>\n            </TopMarginBox>\n        );\n\n        lineComponent = (\n            <Box>\n                {labelElement}\n                {lineComponent}\n            </Box>\n        );\n    }\n\n    return lineComponent;\n};\n\nexport default PlayLine;\n","import { Box, Paper, RootRef } from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { useWindowWidth } from \"@react-hook/window-size\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { useRegisterKeyListener } from \"../GlobalKeyListener\";\nimport { isScrollBackwardsKey, isScrollForwardsKey } from \"./keyMap\";\nimport PlayLine from \"./PlayLine\";\n\nexport interface DisplaySettings {\n    numberOfColumnsPerPage: number;\n    fontSize: number;\n    columnMargin: number;\n    scrollType: \"page\" | \"column\";\n}\n\ninterface PlayContentProps {\n    song: ChordSong;\n    displaySettings: DisplaySettings;\n}\n\nconst PlayContent: React.FC<PlayContentProps> = (\n    props: PlayContentProps\n): JSX.Element => {\n    const ref = React.useRef<HTMLElement>();\n    const [numberOfEmptyColumns, setNumberOfEmptyColumns] = useState<number>(0);\n    const [addKeyListener, removeKeyListener] = useRegisterKeyListener();\n\n    const numberOfColumnsPerPage =\n        props.displaySettings.numberOfColumnsPerPage >= 1\n            ? props.displaySettings.numberOfColumnsPerPage\n            : 1;\n    const columnMargin =\n        props.displaySettings.columnMargin >= 0\n            ? props.displaySettings.columnMargin\n            : 0;\n\n    const windowWidth = useWindowWidth();\n    const columnWidth = windowWidth / numberOfColumnsPerPage;\n    const snapThreshold = columnWidth / 2;\n\n    const scrollPage = useCallback(\n        (forward: boolean) => {\n            const currentPos = window.scrollX;\n            const delta: number = (() => {\n                const scrollDelta =\n                    props.displaySettings.scrollType === \"column\"\n                        ? columnWidth\n                        : windowWidth;\n                return forward ? scrollDelta : -scrollDelta;\n            })();\n\n            let nextPos = currentPos + delta;\n\n            const distanceFromLastColumn = nextPos % columnWidth;\n\n            if (distanceFromLastColumn < snapThreshold) {\n                nextPos -= distanceFromLastColumn;\n            } else {\n                const remainingDistance = columnWidth - distanceFromLastColumn;\n                nextPos += remainingDistance;\n            }\n\n            window.scrollTo({\n                left: nextPos,\n                top: 0,\n                behavior: \"smooth\",\n            });\n        },\n        [\n            columnWidth,\n            windowWidth,\n            snapThreshold,\n            props.displaySettings.scrollType,\n        ]\n    );\n\n    const scrollForward = useCallback(() => scrollPage(true), [scrollPage]);\n    const scrollBackward = useCallback(() => scrollPage(false), [scrollPage]);\n\n    const handleClick = (\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n        const handlers: ((\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => boolean)[] = [handleLeftClick, handleRightClick];\n\n        for (const handler of handlers) {\n            const handled: boolean = handler(event);\n            if (handled) {\n                event.preventDefault();\n                return;\n            }\n        }\n    };\n\n    const handleLeftClick = (\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ): boolean => {\n        // left click\n        if (event.button !== 0) {\n            return false;\n        }\n\n        scrollForward();\n\n        // returning false not prevent default\n        // preventing default would prevent clicking back into the main body to get focus\n        return false;\n    };\n\n    const handleRightClick = (\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ): boolean => {\n        // right click\n        if (event.button !== 2) {\n            return false;\n        }\n\n        scrollBackward();\n        return true;\n    };\n\n    // sorry, preventing context menu from showing up to make the right mouse click\n    // experience less annoying\n    const cancelContextMenu = (\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n        event.preventDefault();\n    };\n\n    const ColumnedPaper = withStyles({\n        root: {\n            columnGap: \"0px\",\n            columnRuleWidth: \"2px\",\n            columnRuleStyle: \"solid\",\n            columnRuleColor: grey[300],\n            columns: numberOfColumnsPerPage,\n            height: \"100vh\",\n            width: \"100%\",\n        },\n    })(Paper);\n\n    // using margins instead of column-gap, CSS columns force the rightmost column\n    // up against the edge of the viewport and doesn't strictly respect column width\n    //\n    // making 0 gap columns with margins makes the math a lot simpler for each column\n    const MarginBox = withStyles({\n        root: {\n            marginLeft: `${columnMargin}px`,\n            marginRight: `${columnMargin}px`,\n        },\n    })(Box);\n\n    const lines = props.song.chordLines.map((chordLine: ChordLine) => {\n        return <PlayLine chordLine={chordLine} key={chordLine.id} />;\n    });\n\n    const FullHeightBox = withStyles({\n        root: {\n            height: \"100vh\",\n            pageBreakInside: \"avoid\",\n        },\n    })(Box);\n\n    const emptyColumns: React.ReactElement[] = (() => {\n        if (numberOfEmptyColumns === null) {\n            return [];\n        }\n\n        const cols: React.ReactElement[] = [];\n\n        for (let i = 0; i < numberOfEmptyColumns; i++) {\n            cols.push(\n                <FullHeightBox key={`empty-column-${i}`}>\n                    <div />\n                </FullHeightBox>\n            );\n        }\n\n        return cols;\n    })();\n\n    useEffect(() => {\n        ref.current?.focus();\n    });\n\n    useEffect(() => {\n        const handleKey = (event: KeyboardEvent) => {\n            if (isScrollBackwardsKey(event.code)) {\n                scrollBackward();\n                event.preventDefault();\n                return;\n            }\n\n            if (isScrollForwardsKey(event.code)) {\n                scrollForward();\n                event.preventDefault();\n                return;\n            }\n        };\n\n        addKeyListener(handleKey);\n\n        return () => removeKeyListener(handleKey);\n    }, [scrollBackward, scrollForward, addKeyListener, removeKeyListener]);\n\n    useEffect(() => {\n        // add some empty columns to the end of the song\n        // so that each \"page scroll\" navigation ends evenly\n        // e.g. if a 3 column page is divided as 5 columns: a | b | c | d | e\n        // then the user will see\n        // page 1: a | b | c\n        // page 2: c | d | e\n        // this will add a div to the end so that it will look like\n        // page 1: a | b | c\n        // page 2: d | e | [empty]\n\n        const numberOfRenderedColumns = Math.round(\n            document.body.scrollWidth / columnWidth\n        );\n\n        const numberOfColumnsInLastPage: number =\n            numberOfRenderedColumns % numberOfColumnsPerPage;\n\n        if (numberOfColumnsInLastPage !== 0) {\n            let nextNumberOfEmptyColumns =\n                numberOfColumnsPerPage -\n                numberOfColumnsInLastPage +\n                numberOfEmptyColumns;\n\n            nextNumberOfEmptyColumns =\n                nextNumberOfEmptyColumns % numberOfColumnsPerPage;\n\n            setNumberOfEmptyColumns(nextNumberOfEmptyColumns);\n        }\n    }, [\n        numberOfColumnsPerPage,\n        columnWidth,\n        numberOfEmptyColumns,\n        setNumberOfEmptyColumns,\n        props,\n    ]);\n\n    return (\n        <RootRef rootRef={ref}>\n            <ColumnedPaper\n                onMouseDown={handleClick}\n                onContextMenu={cancelContextMenu}\n            >\n                <MarginBox>{lines}</MarginBox>\n                {emptyColumns}\n            </ColumnedPaper>\n        </RootRef>\n    );\n};\n\nexport default PlayContent;\n","import {\n    Box as UnstyledBox,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControl,\n    FormControlLabel,\n    FormLabel as UnstyledFormLabel,\n    InputAdornment,\n    Radio,\n    RadioGroup,\n    TextField,\n    TextFieldProps as TextFieldPropsWithVariant,\n    Theme,\n    Typography,\n} from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { Either, isLeft, left, right } from \"fp-ts/lib/Either\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport { PlainFn } from \"../../common/PlainFn\";\nimport { isWhitespace } from \"../../common/Whitespace\";\nimport { DisplaySettings } from \"./PlayContent\";\n\nconst Box = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(1),\n    },\n}))(UnstyledBox);\n\nconst FormLabel = withStyles((theme: Theme) => ({\n    root: {\n        fontSize: \"0.75rem\",\n    },\n}))(UnstyledFormLabel);\n\nconst RadioLabelTypography = withStyles((theme: Theme) => ({\n    root: {\n        fontSize: \"0.75rem\",\n    },\n}))(Typography);\n\ntype TextFieldProps = Omit<Partial<TextFieldPropsWithVariant>, \"variant\">;\n\ninterface DialogInput {\n    numberOfColumns: string;\n    fontSize: string;\n    columnMargin: string;\n    scrollType: DisplaySettings[\"scrollType\"];\n}\n\ntype TextInputFieldKeys = keyof Omit<DialogInput, \"scrollType\">;\n\ninterface InputFieldSpecification {\n    label: string;\n    field: TextInputFieldKeys;\n    adornment: string | null;\n    validationErrorPropsFn: (strValue: string) => Either<Error, number>;\n}\n\ninterface DisplaySettingsDialogProps {\n    open: boolean;\n    onClose?: PlainFn;\n    defaultSettings: DisplaySettings;\n    onSubmit?: (displaySettings: DisplaySettings) => void;\n}\n\nconst DisplaySettingsDialog: React.FC<DisplaySettingsDialogProps> = (\n    props: DisplaySettingsDialogProps\n): JSX.Element => {\n    const [settings, setSettings] = useState<DialogInput>({\n        numberOfColumns: props.defaultSettings.numberOfColumnsPerPage.toString(),\n        fontSize: props.defaultSettings.fontSize.toString(),\n        columnMargin: props.defaultSettings.columnMargin.toString(),\n        scrollType: props.defaultSettings.scrollType,\n    });\n\n    const validateNumber = (strValue: string): Either<Error, number> => {\n        if (strValue === \"\" || isWhitespace(strValue)) {\n            return left(new Error(\"A value is required\"));\n        }\n\n        const convertedNumber = Number(strValue);\n        if (isNaN(convertedNumber)) {\n            return left(new Error(\"Only numbers are allowed\"));\n        }\n\n        if (convertedNumber <= 0) {\n            return left(new Error(\"Only positive numbers are allowed\"));\n        }\n\n        return right(convertedNumber);\n    };\n\n    const validateInt = (strValue: string): Either<Error, number> => {\n        const result = validateNumber(strValue);\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const convertedNumber = result.right;\n\n        const convertedInteger = Math.floor(convertedNumber);\n        if (convertedNumber !== convertedInteger) {\n            return left(new Error(\"Only integers are allowed\"));\n        }\n\n        return right(convertedInteger);\n    };\n\n    const validatedSettings = (): Either<Error, DisplaySettings> => {\n        const numberOfColumnsResults = validateInt(settings.numberOfColumns);\n        const fontSizeResults = validateNumber(settings.fontSize);\n        const columnMarginResults = validateNumber(settings.columnMargin);\n\n        if (isLeft(numberOfColumnsResults)) {\n            return numberOfColumnsResults;\n        }\n\n        if (isLeft(fontSizeResults)) {\n            return fontSizeResults;\n        }\n\n        if (isLeft(columnMarginResults)) {\n            return columnMarginResults;\n        }\n\n        const displaySettings: DisplaySettings = {\n            numberOfColumnsPerPage: numberOfColumnsResults.right,\n            fontSize: fontSizeResults.right,\n            columnMargin: columnMarginResults.right,\n            scrollType: settings.scrollType,\n        };\n\n        return right(displaySettings);\n    };\n\n    const hasValidationErrors = (): boolean => {\n        return isLeft(validatedSettings());\n    };\n\n    const handleSubmit = () => {\n        const settings = validatedSettings();\n\n        if (isLeft(settings)) {\n            return;\n        }\n\n        props.onSubmit?.({\n            numberOfColumnsPerPage: settings.right.numberOfColumnsPerPage,\n            fontSize: settings.right.fontSize,\n            columnMargin: settings.right.columnMargin,\n            scrollType: settings.right.scrollType,\n        });\n    };\n\n    const textSettingChangeHandler = (field: TextInputFieldKeys) => {\n        return (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n            const newValue = event.target.value;\n            const newSettings: DialogInput = { ...settings };\n            newSettings[field] = newValue;\n            setSettings(newSettings);\n        };\n    };\n\n    const validationErrorProps = (\n        result: Either<Error, number>\n    ): TextFieldProps => {\n        return {\n            error: isLeft(result) ? true : undefined,\n            helperText: isLeft(result) ? result.left.message : undefined,\n        };\n    };\n\n    const inputSpecs: InputFieldSpecification[] = [\n        {\n            label: \"number of columns\",\n            field: \"numberOfColumns\",\n            adornment: null,\n            validationErrorPropsFn: (val: string) => validateInt(val),\n        },\n        {\n            label: \"font size\",\n            field: \"fontSize\",\n            adornment: \"px\",\n            validationErrorPropsFn: (val: string) => validateNumber(val),\n        },\n        {\n            label: \"column margin\",\n            field: \"columnMargin\",\n            adornment: \"px\",\n            validationErrorPropsFn: (val: string) => validateNumber(val),\n        },\n    ];\n\n    const makeInput = (spec: InputFieldSpecification) => {\n        const textFieldProps: TextFieldProps = {\n            label: spec.label,\n            defaultValue: settings[spec.field],\n            onChange: textSettingChangeHandler(spec.field),\n            ...validationErrorProps(\n                spec.validationErrorPropsFn(settings[spec.field])\n            ),\n        };\n\n        if (spec.adornment !== null) {\n            textFieldProps.InputProps = {\n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        {spec.adornment}\n                    </InputAdornment>\n                ),\n            };\n        }\n\n        return (\n            <Box>\n                <TextField {...textFieldProps} />\n            </Box>\n        );\n    };\n\n    const scrollTypeToggle = (() => {\n        const handleScrollTypeChange = (\n            _event: React.ChangeEvent<HTMLInputElement>,\n            value: string\n        ) => {\n            if (value !== \"page\" && value !== \"column\") {\n                console.error(\n                    \"Display dialog - scroll type: Received an invalid radio value\"\n                );\n                return;\n            }\n\n            setSettings({\n                ...settings,\n                scrollType: value,\n            });\n        };\n\n        return (\n            <Box>\n                <FormControl component=\"fieldset\">\n                    <FormLabel>scroll type</FormLabel>\n                    <RadioGroup\n                        value={settings.scrollType}\n                        onChange={handleScrollTypeChange}\n                    >\n                        <FormControlLabel\n                            value=\"column\"\n                            control={<Radio size=\"small\" />}\n                            label={\n                                <RadioLabelTypography>\n                                    scroll by column\n                                </RadioLabelTypography>\n                            }\n                        />\n                        <FormControlLabel\n                            value=\"page\"\n                            control={<Radio size=\"small\" />}\n                            label={\n                                <RadioLabelTypography>\n                                    scroll by page\n                                </RadioLabelTypography>\n                            }\n                        />\n                    </RadioGroup>\n                </FormControl>\n            </Box>\n        );\n    })();\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>Display Settings</DialogTitle>\n            <DialogContent>\n                {scrollTypeToggle}\n\n                {inputSpecs.map((spec: InputFieldSpecification) =>\n                    makeInput(spec)\n                )}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose}>Cancel</Button>\n                <Button disabled={hasValidationErrors()} onClick={handleSubmit}>\n                    OK\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default DisplaySettingsDialog;\n","import { Theme } from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport UnstyledMoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport TuneIcon from \"@material-ui/icons/Tune\";\nimport {\n    SpeedDial as UnstyledSpeedDial,\n    SpeedDialAction,\n} from \"@material-ui/lab\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { PlainFn } from \"../../common/PlainFn\";\nimport DisplaySettingsDialog from \"./DisplaySettingsDialog\";\nimport { DisplaySettings } from \"./PlayContent\";\n\ninterface PlayMenuProps {\n    displaySettings: DisplaySettings;\n    onDisplaySettingsChange?: (displaySettings: DisplaySettings) => void;\n\n    onExit?: PlainFn;\n}\n\nconst MenuIcon = withStyles({\n    root: {\n        backgroundColor: \"transparent\",\n    },\n})(UnstyledMoreVertIcon);\n\nconst SpeedDial = withStyles((theme: Theme) => ({\n    root: {\n        position: \"fixed\",\n        top: theme.spacing(3),\n        right: theme.spacing(2),\n        \"& .MuiSpeedDial-fab\": {\n            backgroundColor: \"transparent\",\n            color: grey[500],\n        },\n    },\n}))(UnstyledSpeedDial);\n\nconst PlayMenu: React.FC<PlayMenuProps> = (\n    props: PlayMenuProps\n): JSX.Element => {\n    const [open, setOpen] = useState(false);\n    const [displaySettingsOpen, setDisplaySettingsOpen] = useState(false);\n\n    const openMenu = () => {\n        setOpen(true);\n    };\n\n    const closeMenu = () => {\n        setOpen(false);\n    };\n\n    const handleExit = (\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n        props.onExit?.();\n        event.stopPropagation();\n    };\n\n    // returning this instead of shoving it in the same fragment because\n    // returning speed dial in a fragment somehow causes some layout changes\n    if (displaySettingsOpen) {\n        const handleDisplaySettingsChange = (settings: DisplaySettings) => {\n            props.onDisplaySettingsChange?.(settings);\n            setDisplaySettingsOpen(false);\n        };\n\n        return (\n            <DisplaySettingsDialog\n                open\n                onClose={() => setDisplaySettingsOpen(false)}\n                defaultSettings={props.displaySettings}\n                onSubmit={handleDisplaySettingsChange}\n            />\n        );\n    }\n\n    return (\n        <SpeedDial\n            icon={<MenuIcon />}\n            direction=\"down\"\n            open={open}\n            onOpen={openMenu}\n            onClose={closeMenu}\n            ariaLabel=\"SpeedDial\"\n            FabProps={{\n                color: \"inherit\",\n            }}\n        >\n            <SpeedDialAction\n                icon={<TuneIcon />}\n                tooltipTitle=\"Display Settings\"\n                onMouseDownCapture={() => setDisplaySettingsOpen(true)}\n            />\n            <SpeedDialAction\n                icon={<ExitToAppIcon />}\n                tooltipTitle=\"Exit Play Mode\"\n                onMouseDownCapture={handleExit}\n            />\n        </SpeedDial>\n    );\n};\n\nexport default PlayMenu;\n","import { createMuiTheme, Theme, ThemeProvider } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { PlainFn } from \"../../common/PlainFn\";\nimport JamStation from \"../track_player/JamStation\";\nimport TrackListProvider, {\n    TrackListChangeHandler,\n    TrackListLoad,\n} from \"../track_player/TrackListProvider\";\nimport PlayContent, { DisplaySettings } from \"./PlayContent\";\nimport PlayMenu from \"./PlayMenu\";\n\nconst useTransparentStyle = makeStyles({\n    root: {\n        backgroundColor: \"transparent\",\n    },\n});\n\ninterface PlayProps {\n    song: ChordSong;\n    onEdit?: PlainFn;\n}\n\nconst Play: React.FC<PlayProps> = (props: PlayProps): JSX.Element => {\n    const [displaySettings, setDisplaySettings] = useState<DisplaySettings>({\n        numberOfColumnsPerPage: 2,\n        fontSize: 14,\n        columnMargin: 20,\n        scrollType: \"column\",\n    });\n\n    const transparentStyle = useTransparentStyle();\n\n    const playTheme = (theme: Theme): Theme => {\n        return createMuiTheme({\n            ...theme,\n            typography: {\n                fontFamily: theme.typography.fontFamily,\n                fontWeightRegular: theme.typography.fontWeightRegular,\n                fontSize: displaySettings.fontSize,\n            },\n        });\n    };\n\n    const trackPlayer: React.ReactNode = (() => {\n        if (props.song.isUnsaved()) {\n            return null;\n        }\n\n        return (\n            <TrackListProvider song={props.song}>\n                {(\n                    tracklistLoad: TrackListLoad,\n                    onChange: TrackListChangeHandler,\n                    onRefresh: PlainFn\n                ) => (\n                    <JamStation\n                        collapsedButtonClassName={transparentStyle.root}\n                        timeSections={props.song.timeSections}\n                        tracklistLoad={tracklistLoad}\n                        onTrackListChanged={onChange}\n                        onRefresh={onRefresh}\n                    />\n                )}\n            </TrackListProvider>\n        );\n    })();\n\n    return (\n        <>\n            <Helmet>\n                <title>\n                    {props.song.metadata.title !== \"\"\n                        ? props.song.metadata.title\n                        : \"New Song\"}\n                </title>\n            </Helmet>\n            <PlayMenu\n                displaySettings={displaySettings}\n                onDisplaySettingsChange={setDisplaySettings}\n                onExit={props.onEdit}\n            />\n            <ThemeProvider theme={playTheme}>\n                <PlayContent\n                    song={props.song}\n                    displaySettings={displaySettings}\n                />\n            </ThemeProvider>\n            {trackPlayer}\n        </>\n    );\n};\n\nexport default Play;\n","import React from \"react\";\nimport { Redirect, Route, useHistory } from \"react-router-dom\";\nimport { ChordSong } from \"../common/ChordModel/ChordSong\";\nimport { MultiFC, transformToFC } from \"../common/FunctionalComponent\";\nimport ChordPaper from \"./edit/ChordPaper\";\nimport { DemoPath, SongIDPath } from \"../common/paths\";\nimport Play from \"./play/Play\";\n\ninterface SongRouterProps {\n    path: SongIDPath | DemoPath;\n    song: ChordSong;\n    onSongChanged?: (song: ChordSong) => void;\n}\n\nconst SongRouter: MultiFC<SongRouterProps> = (\n    props: SongRouterProps\n): JSX.Element[] => {\n    const history = useHistory();\n\n    const editPath = props.path.withMode(\"edit\");\n    const playPath = props.path.withMode(\"play\");\n\n    const switchToEdit = () => {\n        history.push(editPath.URL());\n    };\n\n    const switchToPlay = () => {\n        history.push(playPath.URL());\n    };\n\n    return [\n        <Route key={props.path.URL()} path={props.path.URL()} exact>\n            <Redirect to={editPath.URL()} />,\n        </Route>,\n        <Route key={editPath.URL()} path={editPath.URL()}>\n            <ChordPaper\n                song={props.song}\n                onSongChanged={props.onSongChanged}\n                onPlay={switchToPlay}\n            />\n        </Route>,\n        <Route key={playPath.URL()} path={playPath.URL()}>\n            <Play song={props.song} onEdit={switchToEdit} />\n        </Route>,\n    ];\n};\n\nexport default transformToFC(SongRouter);\n","import React, { useState } from \"react\";\nimport { ChordSong } from \"../common/ChordModel/ChordSong\";\n\ninterface SongProps {\n    song: ChordSong;\n    onSongChanged?: (song: ChordSong) => void;\n}\n\nexport const withSongContext = <P extends SongProps>(\n    OriginalComponent: React.FC<P>\n): React.FC<P> => {\n    return (props: P): JSX.Element => {\n        const [song, setSong] = useState<ChordSong>(props.song);\n\n        const handleSongChanged = (song: ChordSong) => {\n            setSong(song.clone());\n            props.onSongChanged?.(song);\n        };\n\n        const { song: throwawaySong, ...propsWithoutInitialSong } = props;\n\n        // https://github.com/microsoft/TypeScript/issues/35858\n        const originalComponentProps = {\n            ...propsWithoutInitialSong,\n            song: song,\n            onSongChanged: handleSongChanged,\n        } as P;\n\n        return <OriginalComponent {...originalComponentProps} />;\n    };\n};\n","import { Either, isLeft } from \"fp-ts/lib/Either\";\nimport React from \"react\";\nimport NeverGonnaGiveYouPlasticLove from \"../assets/songs/never_gonna_give_you_up_plastic_love.json\";\nimport { ChordSong } from \"../common/ChordModel/ChordSong\";\nimport ErrorPage from \"./display/ErrorPage\";\nimport { demoPath } from \"../common/paths\";\nimport SongRouter from \"./SongRouter\";\nimport { withSongContext } from \"./WithSongContext\";\n\nconst DemoSong = withSongContext(SongRouter);\n\nconst Demo: React.FC<{}> = (): JSX.Element => {\n    const loadSongResults: Either<Error, ChordSong> = ChordSong.fromJSONObject(\n        NeverGonnaGiveYouPlasticLove\n    );\n\n    if (isLeft(loadSongResults)) {\n        return <ErrorPage />;\n    }\n\n    const song = loadSongResults.right;\n\n    return <DemoSong path={demoPath} song={song} />;\n};\n\nexport default Demo;\n","import {\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    LinearProgress,\n    List,\n    ListItem,\n    ListItemText,\n    Typography,\n} from \"@material-ui/core\";\nimport { isLeft } from \"fp-ts/lib/Either\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useErrorMessage } from \"../common/backend/errors\";\nimport { getSongsForUser } from \"../common/backend/requests\";\nimport { SongSummary } from \"../common/ChordModel/ChordSong\";\nimport { FetchState } from \"../common/fetch\";\nimport { songPath } from \"../common/paths\";\nimport { PlainFn } from \"../common/PlainFn\";\nimport ErrorImage from \"./display/ErrorImage\";\nimport { UserContext } from \"./user/userContext\";\n\ninterface LoadSongsDialogProps {\n    open: boolean;\n    onClose?: PlainFn;\n}\n\nconst LoadSongDialog: React.FC<LoadSongsDialogProps> = (\n    props: LoadSongsDialogProps\n): JSX.Element => {\n    const [fetchState, setFetchState] = useState<FetchState<SongSummary[]>>({\n        state: \"not-started\",\n    });\n    const showError = useErrorMessage();\n    const user = React.useContext(UserContext);\n    const history = useHistory();\n\n    const wrapInDialog = (contents: React.ReactNode): React.ReactElement => {\n        return (\n            <Dialog open={props.open} onClose={props.onClose} fullWidth>\n                <DialogTitle>Load Songs</DialogTitle>\n                <DialogContent>{contents}</DialogContent>\n            </Dialog>\n        );\n    };\n\n    if (user === null) {\n        return wrapInDialog(\n            <Typography>\n                You must be logged in to load a song graahhhhh *foams at mouth*\n            </Typography>\n        );\n    }\n\n    const summarySortFn = (a: SongSummary, b: SongSummary): number => {\n        if (a.lastSavedAt === b.lastSavedAt) {\n            return 0;\n        }\n\n        // sort in reverse order - most recently saved should come first\n        if (a.lastSavedAt === null) {\n            return 1;\n        }\n\n        if (b.lastSavedAt === null) {\n            return -1;\n        }\n\n        return a.lastSavedAt < b.lastSavedAt ? 1 : -1;\n    };\n\n    const loadSummaries = async () => {\n        const result = await getSongsForUser(user.userID, user.authToken);\n        if (isLeft(result)) {\n            setFetchState({ state: \"error\", error: result.left });\n            return;\n        }\n\n        const summariesResult = SongSummary.fromJSONList(result.right);\n        if (isLeft(summariesResult)) {\n            setFetchState({ state: \"error\", error: summariesResult.left });\n            return;\n        }\n\n        const summaries = summariesResult.right;\n        summaries.sort(summarySortFn);\n\n        setFetchState({ state: \"loaded\", item: summaries });\n    };\n\n    const summaryListItem = (summary: SongSummary): React.ReactElement => {\n        const songLink = songPath.withID(summary.id);\n\n        const navigateToSong = () => {\n            history.push(songLink.URL());\n            props.onClose?.();\n        };\n\n        const detailElement = (\n            detail: string,\n            label: string\n        ): React.ReactNode => {\n            if (detail === \"\") {\n                return null;\n            }\n\n            return (\n                <Typography\n                    key={`${summary.id}-${label}`}\n                    display=\"block\"\n                    variant=\"caption\"\n                >\n                    {`${label}: ${detail}`}\n                </Typography>\n            );\n        };\n\n        const details = (\n            <>\n                {detailElement(summary.metadata.performedBy, \"Performed by\")}\n                {detailElement(summary.metadata.composedBy, \"Composed by\")}\n                {summary.lastSavedAt !== null && (\n                    <Typography\n                        key={`${summary.id}-lastSavedAt`}\n                        display=\"block\"\n                        variant=\"caption\"\n                    >\n                        {`Last Saved At: ${summary.lastSavedAt.toLocaleString()}`}\n                    </Typography>\n                )}\n            </>\n        );\n\n        const title =\n            summary.metadata.title !== \"\"\n                ? summary.metadata.title\n                : \"(Untitled)\";\n\n        return (\n            <>\n                <ListItem key={summary.id} button onClick={navigateToSong}>\n                    <ListItemText\n                        primary={title}\n                        primaryTypographyProps={{\n                            key: `${summary.id}-primary`,\n                        }}\n                        secondary={details}\n                        secondaryTypographyProps={{\n                            key: `${summary.id}-seccondary`,\n                        }}\n                    />\n                </ListItem>\n                <Divider key={`${summary.id}-divider`} />\n            </>\n        );\n    };\n\n    const summaryCards = (summaries: SongSummary[]): React.ReactElement => {\n        if (summaries.length === 0) {\n            return (\n                <Typography>\n                    You don't have any songs saved. GET TO IT\n                </Typography>\n            );\n        }\n\n        return <List>{summaries.map(summaryListItem)}</List>;\n    };\n\n    switch (fetchState.state) {\n        case \"not-started\": {\n            setFetchState({ state: \"loading\" });\n            loadSummaries();\n            return <></>;\n        }\n        case \"error\": {\n            showError(fetchState.error);\n            return wrapInDialog(<ErrorImage />);\n        }\n        case \"loading\": {\n            return wrapInDialog(<LinearProgress />);\n        }\n        case \"loaded\": {\n            return wrapInDialog(summaryCards(fetchState.item));\n        }\n    }\n};\n\nexport default LoadSongDialog;\n","import {\n    Badge as UnstyledBadge,\n    Paper,\n    Theme,\n    withStyles,\n} from \"@material-ui/core\";\nimport UnstyledCheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport React, { useState } from \"react\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport ChordPaperBody from \"../edit/ChordPaperBody\";\n\nconst CheckCircleIcon = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.success.main,\n    },\n}))(UnstyledCheckCircleIcon);\n\nconst Badge = withStyles({\n    root: {\n        display: \"inherit\",\n    },\n})(UnstyledBadge);\n\ninterface PlaygroundProps {\n    initialSong: ChordSong;\n    expectedSong?: ChordSong;\n}\n\nconst Playground: React.FC<PlaygroundProps> = (\n    props: PlaygroundProps\n): JSX.Element => {\n    const [song, setSong] = useState<ChordSong>(props.initialSong);\n    const [finish, setFinish] = useState(false);\n\n    const songChangeHandler = (updatedSong: ChordSong) => {\n        setSong(updatedSong.clone());\n        checkExpected(updatedSong);\n    };\n\n    const checkExpected = (updatedSong: ChordSong) => {\n        // don't undo the green check if it's already been passing\n        if (finish) {\n            return;\n        }\n\n        if (\n            props.expectedSong !== undefined &&\n            props.expectedSong.contentEquals(updatedSong)\n        ) {\n            setFinish(true);\n        }\n    };\n\n    return (\n        <Badge badgeContent={<CheckCircleIcon />} invisible={!finish}>\n            <Paper elevation={1}>\n                <ChordPaperBody song={song} onSongChanged={songChangeHandler} />\n            </Paper>\n        </Badge>\n    );\n};\n\nexport default Playground;\n","import { Theme, Typography } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { inflatingWhitespace } from \"../../common/Whitespace\";\nexport const LyricsTypography = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.secondary.light,\n    },\n}))(Typography);\n\nexport const ChordTypography = withStyles((theme: Theme) => ({\n    root: {\n        color: theme.palette.primary.main,\n    },\n}))(Typography);\n\nexport const LineBreak = () => {\n    return <Typography>{inflatingWhitespace()}</Typography>;\n};\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport Playground from \"./Playground\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { LineBreak, LyricsTypography, ChordTypography } from \"./Common\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\n\nconst AddChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly appear?\"),\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly \"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"appear?\"),\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Adding Chords</Typography>\n            <LineBreak />\n            <Typography>\n                Add a chord by hovering above a word, and clicking the outlined\n                box. Let's add{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography> back\n                above{\" \"}\n                <LyricsTypography display=\"inline\">appear</LyricsTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default AddChord;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst AddLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly ap-\"),\n            }),\n            new ChordBlock({\n                chord: \"B7sus4\",\n                lyric: new Lyric(\"pear?\"),\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly ap-\"),\n            }),\n            new ChordBlock({\n                chord: \"B7sus4\",\n                lyric: new Lyric(\"pear?\"),\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"Every time you are near\"),\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Adding New Lines</Typography>\n            <LineBreak />\n            <Typography>\n                You can add more lines by hovering below (or above) and existing\n                line, and clicking the gray line or the add icon to the right.\n            </Typography>\n            <Typography>Let's add a line, and change the lyrics to:</Typography>\n            <LyricsTypography>Why do birds suddenly ap-pear?</LyricsTypography>\n            <LyricsTypography>Every time you are near</LyricsTypography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default AddLine;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport Playground from \"./Playground\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { LineBreak, LyricsTypography, ChordTypography } from \"./Common\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\n\nconst ChordPositioning: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly \"),\n            }),\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"appear?\"),\n            }),\n        ]),\n    ]);\n\n    const example = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly\"),\n            }),\n            new ChordBlock({\n                chord: \"F#7\",\n                lyric: new Lyric(\" ap-\"),\n            }),\n            new ChordBlock({\n                chord: \"B7sus4\",\n                lyric: new Lyric(\"pear?\"),\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly\"),\n            }),\n            new ChordBlock({\n                chord: \"F#7\",\n                lyric: new Lyric(\" ap-\"),\n            }),\n            new ChordBlock({\n                chord: \"B7sus4\",\n                lyric: new Lyric(\"pear?\"),\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Chord Positioning</Typography>\n            <LineBreak />\n            <Typography>\n                Sometimes you want to emphasize a chord landing on a specific\n                syllable or between words. Without the overhead of standard\n                notation, we can do this by breaking up lyrics and annotating\n                spaces.\n            </Typography>\n            <LineBreak />\n\n            <Typography>Let's change the lyrics to:</Typography>\n            <LyricsTypography>Why do birds suddenly ap-pear?</LyricsTypography>\n            <Typography>\n                And add a tab after the{\" \"}\n                <LyricsTypography display=\"inline\">?</LyricsTypography>\n            </Typography>\n            <Typography>\n                Then add the chord{\" \"}\n                <ChordTypography display=\"inline\">F#7</ChordTypography> to the\n                space before{\" \"}\n                <LyricsTypography display=\"inline\">ap-</LyricsTypography>\n            </Typography>\n            <Typography>\n                Add the chord{\" \"}\n                <ChordTypography display=\"inline\">B7sus4</ChordTypography> to{\" \"}\n                <LyricsTypography display=\"inline\">pear</LyricsTypography>\n            </Typography>\n            <Typography>\n                Add the chord{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography> to the\n                tabbed space after{\" \"}\n            </Typography>\n            <Typography>It should look like this:</Typography>\n            <Playground initialSong={example} />\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default ChordPositioning;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst CopyAndPaste: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"But I'm a \"),\n            }),\n            new ChordBlock({\n                chord: \"G\",\n                lyric: new Lyric(\"creep, I'm a \"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"weirdo\"),\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"What the hell am doing \"),\n            }),\n            new ChordBlock({\n                chord: \"C\",\n                lyric: new Lyric(\"here? I don't be-\"),\n            }),\n            new ChordBlock({\n                chord: \"Cm\",\n                lyric: new Lyric(\"long here\"),\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"I don't care if it \"),\n            }),\n            new ChordBlock({\n                chord: \"G\",\n                lyric: new Lyric(\"hurts, I wanna have con-\"),\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"trol\") }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"I want a perfect \"),\n            }),\n            new ChordBlock({\n                chord: \"C\",\n                lyric: new Lyric(\"body, I want a perfect \"),\n            }),\n            new ChordBlock({ chord: \"Cm\", lyric: new Lyric(\"soul\") }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"I want you to \"),\n            }),\n            new ChordBlock({\n                chord: \"G\",\n                lyric: new Lyric(\"notice when I'm not a-\"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"round\"),\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"You're so fucking \"),\n            }),\n            new ChordBlock({\n                chord: \"C\",\n                lyric: new Lyric(\"special, I wish I was \"),\n            }),\n            new ChordBlock({\n                chord: \"Cm\",\n                lyric: new Lyric(\"special\"),\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"But I'm a \"),\n            }),\n            new ChordBlock({\n                chord: \"G\",\n                lyric: new Lyric(\"creep, I'm a \"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"weirdo\"),\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"What the hell am doing \"),\n            }),\n            new ChordBlock({\n                chord: \"C\",\n                lyric: new Lyric(\"here? I don't be-\"),\n            }),\n            new ChordBlock({\n                chord: \"Cm\",\n                lyric: new Lyric(\"long here\"),\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"I don't care if it \"),\n            }),\n            new ChordBlock({\n                chord: \"G\",\n                lyric: new Lyric(\"hurts, I wanna have con-\"),\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"trol\") }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"I want a perfect \"),\n            }),\n            new ChordBlock({\n                chord: \"C\",\n                lyric: new Lyric(\"body, I want a perfect \"),\n            }),\n            new ChordBlock({ chord: \"Cm\", lyric: new Lyric(\"soul\") }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"I want you to \"),\n            }),\n            new ChordBlock({\n                chord: \"G\",\n                lyric: new Lyric(\"notice when I'm not a-\"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"round\"),\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"You're so fucking \"),\n            }),\n            new ChordBlock({\n                chord: \"C\",\n                lyric: new Lyric(\"special, I wish I was \"),\n            }),\n            new ChordBlock({\n                chord: \"Cm\",\n                lyric: new Lyric(\"special\"),\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"But I'm a \"),\n            }),\n            new ChordBlock({\n                chord: \"G\",\n                lyric: new Lyric(\"creep, I'm a \"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"weirdo\"),\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"What the hell am doing \"),\n            }),\n            new ChordBlock({\n                chord: \"C\",\n                lyric: new Lyric(\"here? I don't be-\"),\n            }),\n            new ChordBlock({\n                chord: \"Cm\",\n                lyric: new Lyric(\"long here\"),\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Copying and Pasting Lines</Typography>\n            <LineBreak />\n            <Typography>\n                Sometimes you want to just repeat what's on the page without\n                entering it all over again - choruses with the same lyrics,\n                repeating instrumental sections. You can do this by copying and\n                pasting entire lines that you've already written out.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                The easiest way to copy is to drag down from some empty space on\n                the left of the line you wish to start copying from, then\n                pressing (CTRL or CMD) + C, or right click {\"->\"} copy.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                To paste, click to edit a lyric line, and press (CTRL or CMD) +\n                V, or right click {\"->\"} paste.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Note that there's no partial copy - if any part of the line is\n                selected during the copy, the whole line is copied.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                If you have trouble selecting a line, try dragging your cursor\n                starting further left and above the line.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Let's try copying and pasting the repeated chorus:\n            </Typography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                But I'm a creep, I'm a weirdo\n            </LyricsTypography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                What the hell am I doing here? I don't belong here.\n            </LyricsTypography>\n            <LineBreak />\n            <Typography>\n                Copy those two lines, add a new line at the bottom, and paste it\n                there.\n            </Typography>\n\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default CopyAndPaste;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { ChordTypography, LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst DragAndDropChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds \"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"suddenly appear?\"),\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly \"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"appear?\"),\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Dragging and Dropping Chords</Typography>\n            <LineBreak />\n            <Typography>\n                It's also possible to drag and drop chords onto different parts\n                of the line when its initial placement wasn't quite correct.\n                Just drag a chord and drop it to the space above or on another\n                lyric.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                If you hold CTRL or CMD while dragging and dropping, the chord\n                will be copied instead of moved over.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Let's move the{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography> above{\" \"}\n                <LyricsTypography display=\"inline\">suddenly</LyricsTypography>{\" \"}\n                to above{\" \"}\n                <LyricsTypography display=\"inline\">appear</LyricsTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default DragAndDropChord;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { ChordTypography, LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst EditChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly \"),\n            }),\n            new ChordBlock({\n                chord: \"Bm\",\n                lyric: new Lyric(\"appear?\"),\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly \"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"appear?\"),\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Editing Chords</Typography>\n            <LineBreak />\n            <Typography>\n                Click on a chord to change it, then press enter to commit your\n                changes. Let's change the chord above{\" \"}\n                <LyricsTypography display=\"inline\">appear</LyricsTypography>{\" \"}\n                from <ChordTypography display=\"inline\">Bm</ChordTypography> to{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default EditChord;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst EditLyrics: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly \"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"appear?\"),\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why oh why do birds suddenly \"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"appear?\"),\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Editing Lyrics</Typography>\n            <LineBreak />\n            <Typography>\n                You can edit the lyrics by clicking anywhere along the lyrics.\n                Finish editing lyrics by pressing enter or clicking outside the\n                text edit box. Chord Paper will move chords along with lyrics\n                when you edit them. Let's change the lyrics to:\n            </Typography>\n            <LyricsTypography>\n                Why oh why do birds suddenly appear?\n            </LyricsTypography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default EditLyrics;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { ChordTypography, LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst Instrumental: React.FC<{}> = (): JSX.Element => {\n    const tabExample = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"Bm\", lyric: new Lyric(\"\\ue200\") }),\n            new ChordBlock({ chord: \"A\", lyric: new Lyric(\"\\ue200\") }),\n            new ChordBlock({ chord: \"E\", lyric: new Lyric(\"\\ue400\") }),\n        ]),\n    ]);\n\n    const initialSong = new ChordSong();\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({ chord: \"Bm\", lyric: new Lyric(\"\\ue200\") }),\n            new ChordBlock({ chord: \"A\", lyric: new Lyric(\"\\ue200\") }),\n            new ChordBlock({ chord: \"E\", lyric: new Lyric(\"\\ue400\") }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Instrumental Sections</Typography>\n            <LineBreak />\n            <Typography>\n                In addition to putting chords over lyrics, you can also put them\n                in the spaces between lyrics. When there are no lyrics around\n                the harmony, you can use tabs to create spacing in the lyrics\n                for placing chords.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                You can do this by hitting{\" \"}\n                <LyricsTypography display=\"inline\">tab</LyricsTypography> when\n                editting lyrics, for a normal sized tab, or{\" \"}\n                <LyricsTypography display=\"inline\">\n                    SHIFT + space\n                </LyricsTypography>{\" \"}\n                for a small sized tab, or{\" \"}\n                <LyricsTypography display=\"inline\">\n                    SHIFT + tab\n                </LyricsTypography>{\" \"}\n                for a large sized tab.\n            </Typography>\n            <Playground initialSong={tabExample} />\n            <LineBreak />\n            <Typography>\n                Let's replicate the example from above using{\" \"}\n                <LyricsTypography display=\"inline\">tab</LyricsTypography>s.\n                Start by editing the lyrics. Insert two normal sized tabs with\n                the <LyricsTypography display=\"inline\">tab</LyricsTypography>{\" \"}\n                key, and a large sized tab using{\" \"}\n                <LyricsTypography display=\"inline\">\n                    SHIFT + tab\n                </LyricsTypography>{\" \"}\n                key. Then add{\" \"}\n                <ChordTypography display=\"inline\">Bm</ChordTypography>,{\" \"}\n                <ChordTypography display=\"inline\">A</ChordTypography>,{\" \"}\n                <ChordTypography display=\"inline\">E</ChordTypography>,{\" \"}\n                respectively to each tab.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default Instrumental;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { LineBreak } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst MergeLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds\"),\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"suddenly \"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"appear?\"),\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly \"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"appear?\"),\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Merging Lines</Typography>\n            <LineBreak />\n            <Typography>\n                Sometimes the lyrics that we paste in is not the division we\n                want. Let's merge the two lines. Click into the second line,\n                move the cursor to the beginning of the line, and press\n            </Typography>\n            <Typography>\n                (CTRL+Backspace : Windows | CMD+Backspace : Mac)\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default MergeLine;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst PasteLyrics: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly ap-\"),\n            }),\n            new ChordBlock({\n                chord: \"B7sus4\",\n                lyric: new Lyric(\"pear?\"),\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n        ]),\n        new ChordLine(),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly ap-\"),\n            }),\n            new ChordBlock({\n                chord: \"B7sus4\",\n                lyric: new Lyric(\"pear?\"),\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"Every time you are near\"),\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"Just like me, they long to be\"),\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"Close to you\"),\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Pasting Lyrics</Typography>\n            <LineBreak />\n            <Typography>\n                It would be annoying to have to type out the lyrics. But we can\n                paste it in! Copy these lyrics, click into the second line, and\n                paste:\n            </Typography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                Every time you are near\n            </LyricsTypography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                Just like me, they long to be\n            </LyricsTypography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                Close to you\n            </LyricsTypography>\n\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default PasteLyrics;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { ChordTypography, LineBreak } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst RemoveChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly \"),\n            }),\n            new ChordBlock({\n                chord: \"B7\",\n                lyric: new Lyric(\"appear?\"),\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly appear?\"),\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Removing Chords</Typography>\n            <LineBreak />\n            <Typography>\n                Simply remove all the chord text when editing to clear the\n                chord. Let's remove the{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default RemoveChord;\n","import { Typography, withStyles } from \"@material-ui/core\";\nimport red from \"@material-ui/core/colors/red\";\nimport UnstyledBackspaceIcon from \"@material-ui/icons/Backspace\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { LineBreak } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst BackspaceIcon = withStyles({\n    root: {\n        color: red[300],\n    },\n})(UnstyledBackspaceIcon);\n\nconst RemoveLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly ap-\"),\n            }),\n            new ChordBlock({\n                chord: \"B7sus4\",\n                lyric: new Lyric(\"pear?\"),\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"Every time you are near\"),\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly ap-\"),\n            }),\n            new ChordBlock({\n                chord: \"B7sus4\",\n                lyric: new Lyric(\"pear?\"),\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Removing Lines</Typography>\n            <LineBreak />\n            <Typography>\n                Similarly, you can remove a line by hovering over the line, and\n                clicking the <BackspaceIcon /> icon to the right. Let's remove\n                the second line of lyrics.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default RemoveLine;\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { LineBreak } from \"./Common\";\n\nconst Header = () => {\n    return <Typography variant=\"h5\">Learning Chord Paper</Typography>;\n};\n\nconst Preamble = () => {\n    return (\n        <>\n            <Typography>\n                Chord Paper aims to be as intuitive and handy as possible, but\n                there could still be features that aren't obvious as we work out\n                the kinks. Let's walk through the basics together by making some\n                changes to chords and lyrics!\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Since Chord Paper is still in early stages, some of these could\n                change in the future.\n            </Typography>\n        </>\n    );\n};\n\nconst Starting: React.FC<{}> = (): JSX.Element => {\n    return (\n        <>\n            <Header />\n            <LineBreak />\n            <Preamble />\n        </>\n    );\n};\n\nexport default Starting;\n","import { Typography, withStyles } from \"@material-ui/core\";\nimport ChatBubbleIcon from \"@material-ui/icons/ChatBubbleOutline\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { sectionLabelStyle } from \"../display/SectionLabel\";\nimport { LineBreak } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst LabelTypography = withStyles(sectionLabelStyle)(Typography);\n\nconst Labels: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"C^\",\n                lyric: new Lyric(\"Why do birds suddenly ap-\"),\n            }),\n            new ChordBlock({\n                chord: \"B7sus4\",\n                lyric: new Lyric(\"pear?\"),\n            }),\n            new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"Every time you are near\"),\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine(\n            [\n                new ChordBlock({\n                    chord: \"C^\",\n                    lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                }),\n                new ChordBlock({\n                    chord: \"B7sus4\",\n                    lyric: new Lyric(\"pear?\"),\n                }),\n                new ChordBlock({\n                    chord: \"B7\",\n                    lyric: new Lyric(\"\\ue200\"),\n                }),\n            ],\n            {\n                type: \"label\",\n                name: \"Verse\",\n            }\n        ),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"Every time you are near\"),\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Labels</Typography>\n            <LineBreak />\n            <Typography>\n                It's common to label sections to navigate easily within the\n                song. For example, some common labels are \"Verse\", \"Chorus\",\n                \"Bridge\", or more simplified markers like \"A\", \"B\", etc.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Add a label to a line by hovering over the line, and then\n                clicking the <ChatBubbleIcon /> icon to insert a label for that\n                line. Let's add{\" \"}\n                <LabelTypography display=\"inline\">Verse</LabelTypography> to the\n                first line.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default Labels;\n","import { Fab as UnstyledFab, Paper, Theme } from \"@material-ui/core\";\nimport UnstyledPlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { Link, Route } from \"react-router-dom\";\nimport ErrorPage from \"./display/ErrorPage\";\nimport AddChord from \"./tutorial/AddChord\";\nimport AddLine from \"./tutorial/AddLine\";\nimport ChordPositioning from \"./tutorial/ChordPositioning\";\nimport CopyAndPaste from \"./tutorial/CopyAndPaste\";\nimport DragAndDropChord from \"./tutorial/DragAndDropChord\";\nimport EditChord from \"./tutorial/EditChord\";\nimport EditLyrics from \"./tutorial/EditLyrics\";\nimport Instrumental from \"./tutorial/Instrumental\";\nimport MergeLine from \"./tutorial/MergeLine\";\nimport PasteLyrics from \"./tutorial/PasteLyrics\";\nimport RemoveChord from \"./tutorial/RemoveChord\";\nimport RemoveLine from \"./tutorial/RemoveLine\";\nimport Starting from \"./tutorial/Start\";\nimport Labels from \"./tutorial/Labels\";\nimport PlayMode from \"./tutorial/PlayMode\";\nimport SplitLine from \"./tutorial/SplitLine\";\nimport Saving from \"./tutorial/Saving\";\n\ntype ExerciseEntry = {\n    title: string;\n    route: string;\n    component: React.FC<{}>;\n};\n\nexport type ExerciseRoute = {\n    title: string;\n    route: string;\n};\n\nconst allExercises: ExerciseEntry[] = [\n    {\n        title: \"Starting\",\n        route: \"/learn/start\",\n        component: Starting,\n    },\n    {\n        title: \"Edit a Chord\",\n        route: \"/learn/edit_chord\",\n        component: EditChord,\n    },\n    {\n        title: \"Remove a Chord\",\n        route: \"/learn/remove_chord\",\n        component: RemoveChord,\n    },\n    {\n        title: \"Add a Chord\",\n        route: \"/learn/add_chord\",\n        component: AddChord,\n    },\n    {\n        title: \"Drag and Drop Chords\",\n        route: \"/learn/drag_and_drop_chord\",\n        component: DragAndDropChord,\n    },\n    {\n        title: \"Edit Lyrics\",\n        route: \"/learn/edit_lyrics\",\n        component: EditLyrics,\n    },\n    {\n        title: \"Instrumentals\",\n        route: \"/learn/instrumentals\",\n        component: Instrumental,\n    },\n    {\n        title: \"Chord Positioning\",\n        route: \"/learn/chord_positioning\",\n        component: ChordPositioning,\n    },\n    {\n        title: \"Adding New Line\",\n        route: \"/learn/add_line\",\n        component: AddLine,\n    },\n    {\n        title: \"Removing a Line\",\n        route: \"/learn/remove_line\",\n        component: RemoveLine,\n    },\n    {\n        title: \"Pasting Lyrics\",\n        route: \"/learn/paste_lyrics\",\n        component: PasteLyrics,\n    },\n    {\n        title: \"Merging Lines\",\n        route: \"/learn/merge_lines\",\n        component: MergeLine,\n    },\n    {\n        title: \"Splitting Lines\",\n        route: \"/learn/split_lines\",\n        component: SplitLine,\n    },\n    {\n        title: \"Copying and Pasting Lines\",\n        route: \"/learn/copy_and_paste\",\n        component: CopyAndPaste,\n    },\n    {\n        title: \"Labels\",\n        route: \"/learn/labels\",\n        component: Labels,\n    },\n    {\n        title: \"Play Mode\",\n        route: \"/learn/play_mode\",\n        component: PlayMode,\n    },\n    {\n        title: \"Saving and Loading\",\n        route: \"/learn/saving\",\n        component: Saving,\n    },\n];\n\nexport const allExerciseRoutes = (): ExerciseRoute[] => {\n    return allExercises.map((entry: ExerciseEntry) => ({\n        title: entry.title,\n        route: entry.route,\n    }));\n};\n\nconst PlayArrowIcon = withStyles({\n    root: {\n        color: \"white\",\n    },\n})(UnstyledPlayArrowIcon);\n\nconst RootPaper = withStyles((theme: Theme) => ({\n    root: {\n        marginTop: theme.spacing(5),\n        marginBottom: theme.spacing(5),\n        padding: theme.spacing(5),\n        minHeight: theme.spacing(46),\n        width: theme.spacing(92),\n        position: \"relative\",\n    },\n}))(Paper);\n\nconst Fab = withStyles((theme: Theme) => ({\n    root: {\n        position: \"absolute\",\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    },\n}))(UnstyledFab);\n\ninterface TutorialProps {\n    route: string;\n}\n\nexport const TutorialSwitches = (): React.ReactElement[] => {\n    return allExercises.map((exerciseEntry: ExerciseEntry) => (\n        <Route key={exerciseEntry.route} exact path={exerciseEntry.route}>\n            <Tutorial route={exerciseEntry.route} />\n        </Route>\n    ));\n};\n\nconst Tutorial: React.FC<TutorialProps> = (\n    props: TutorialProps\n): JSX.Element => {\n    const matchEntry = (entry: ExerciseEntry): boolean => {\n        return entry.route === props.route;\n    };\n\n    const exerciseEntry: ExerciseEntry | undefined = allExercises.find(\n        matchEntry\n    );\n\n    if (exerciseEntry === undefined) {\n        return <ErrorPage />;\n    }\n\n    const exerciseIndex = allExercises.findIndex(matchEntry);\n\n    let nextButton: React.ReactElement | null = null;\n\n    if (exerciseIndex < allExercises.length - 1) {\n        const nextExercise = allExercises[exerciseIndex + 1];\n        nextButton = (\n            <Link to={nextExercise.route}>\n                <Fab color=\"primary\">\n                    <PlayArrowIcon />\n                </Fab>\n            </Link>\n        );\n    }\n\n    return (\n        <RootPaper>\n            <exerciseEntry.component />\n            {nextButton}\n        </RootPaper>\n    );\n};\n","import { Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { ChordBlock } from \"../../common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"../../common/ChordModel/ChordLine\";\nimport { ChordSong } from \"../../common/ChordModel/ChordSong\";\nimport { Lyric } from \"../../common/ChordModel/Lyric\";\nimport { LineBreak, LyricsTypography } from \"./Common\";\nimport Playground from \"./Playground\";\n\nconst SplitLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\n                    \"Why do birds suddenly appear? Every time you are near\"\n                ),\n            }),\n        ]),\n    ]);\n\n    const expectedSong = new ChordSong([\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"Why do birds suddenly appear? \"),\n            }),\n        ]),\n        new ChordLine([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"Every time you are near\"),\n            }),\n        ]),\n    ]);\n\n    return (\n        <>\n            <Typography variant=\"h6\">Splitting Lines</Typography>\n            <LineBreak />\n            <Typography>\n                Similarly, we can split lines that may be too long for our chart\n                into two lines. Move the cursor to where you want the line to\n                split, and press\n            </Typography>\n            <Typography>(CTRL+Enter : Windows | CMD+Enter : Mac)</Typography>\n            <LineBreak />\n            <Typography>\n                Right now, chords won't move to the subsequent line - only\n                lyrics will. This can be worked around by dragging and dropping\n                chords after until the feature is cleaned up.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Let's break the one long line of lyrics up, so that it looks\n                like:\n            </Typography>\n            <LyricsTypography>Why do birds suddenly appear?</LyricsTypography>\n            <LyricsTypography>Every time you are near</LyricsTypography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default SplitLine;\n","import { Typography } from \"@material-ui/core\";\nimport PlayIcon from \"@material-ui/icons/PlayArrow\";\nimport React from \"react\";\nimport { LineBreak } from \"./Common\";\n\nconst PlayMode: React.FC<{}> = (): JSX.Element => {\n    return (\n        <>\n            <Typography variant=\"h6\">Play Mode</Typography>\n            <LineBreak />\n            <Typography>\n                Play mode is where you focus on playing the song rather than\n                writing or transcribing it. The chords and lyrics are laid out\n                for ease of reading while playing through.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                To go forward a page, left click anywhere on the page, or tap\n                any button except the buttons that go back a page.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                To go back a page, right click anywhere on the page, or tap\n                left, up, or backspace.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Try this by going into your own song or the demo song, hovering\n                over the menu icon on the bottom right, and clicking the{\" \"}\n                <PlayIcon /> icon.\n            </Typography>\n        </>\n    );\n};\n\nexport default PlayMode;\n","import { Typography } from \"@material-ui/core\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport React from \"react\";\nimport { LineBreak } from \"./Common\";\n\nconst Saving: React.FC<{}> = (): JSX.Element => {\n    return (\n        <>\n            <Typography variant=\"h6\">Saving and Loading</Typography>\n            <LineBreak />\n            <Typography>\n                You can save and load your songs if you have logged in. When you\n                want to save your song to the cloud, hover to the bottom right\n                menu and click <CloudUploadIcon /> to commit the song. After the\n                song is saved once, it will continue to save any changes\n                automatically.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                If you don't want to sign in or save your songs to the cloud, I\n                get it. You can also reveal (offline) Save and Load menu icons\n                in the bottom right menu by entering the Konami code to save and\n                load the files striaght to your computer.\n            </Typography>\n        </>\n    );\n};\n\nexport default Saving;\n","import {\n    Grid,\n    Paper as UnstyledPaper,\n    StyledComponentProps,\n    Theme,\n    Typography as UnstyledTypography,\n} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport { isLeft } from \"fp-ts/lib/These\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport SigninIcon from \"../../assets/img/google_signin.svg\";\nimport { useErrorMessage } from \"../../common/backend/errors\";\nimport { login } from \"../../common/backend/requests\";\nimport { deserializeUser, User, UserContext } from \"./userContext\";\n\nconst Paper = withStyles({\n    root: {\n        width: \"100%\",\n        cursor: \"pointer\",\n    },\n})(UnstyledPaper);\n\nconst Typography = withStyles((theme: Theme) => ({\n    root: {\n        margin: theme.spacing(2),\n        color: grey[600],\n    },\n}))(UnstyledTypography);\n\nconst googleSignInID = \"google-sign-in\";\nconst googleClientID =\n    \"650853277550-ta69qbfcvdl6tb5ogtnh2d07ae9rcdlf.apps.googleusercontent.com\";\n\nconst useSigninStyles = makeStyles({\n    root: {\n        display: \"inline-block\",\n        objectFit: \"contain\",\n    },\n});\n\ninterface LoginProps extends StyledComponentProps {\n    onUserChanged: (user: User) => void;\n}\n\nconst Login: React.FC<LoginProps> = (props: LoginProps): JSX.Element => {\n    const [gapiLoaded, setGapiLoaded] = useState<boolean>(false);\n    const { enqueueSnackbar } = useSnackbar();\n    const showError = useErrorMessage();\n    const signinStyles = useSigninStyles();\n    const user: User | null = React.useContext(UserContext);\n\n    const userNotSignedIn = (user: User | null): user is null => {\n        return user === null;\n    };\n\n    useEffect(() => {\n        if (gapiLoaded) {\n            return;\n        }\n\n        if (window[\"gapi\"] !== undefined) {\n            setGapiLoaded(true);\n        } else {\n            enqueueSnackbar(\"gapi is not loaded, working offline only\", {\n                variant: \"error\",\n            });\n        }\n    }, [gapiLoaded, enqueueSnackbar]);\n\n    useEffect(() => {\n        if (!gapiLoaded) {\n            return;\n        }\n\n        gapi.load(\"auth2\", () => {\n            const handleGoogleLogin = async (\n                currentUser: gapi.auth2.CurrentUser\n            ) => {\n                const idToken: string = currentUser.get().getAuthResponse()\n                    .id_token;\n\n                let loginResult = await login(idToken);\n\n                if (isLeft(loginResult)) {\n                    await showError(loginResult.left);\n\n                    return;\n                }\n\n                const parsedUser = deserializeUser(\n                    loginResult.right,\n                    currentUser\n                );\n\n                if (parsedUser === null) {\n                    console.error(\n                        \"JSON payload is not a user\",\n                        loginResult.right\n                    );\n                    enqueueSnackbar(\n                        \"Failed to login to backend. Check console for more error details\",\n                        { variant: \"error\" }\n                    );\n\n                    return;\n                }\n\n                props.onUserChanged(parsedUser);\n            };\n\n            if (!userNotSignedIn(user)) {\n                return;\n            }\n\n            const handleAuthInit = (authClient: gapi.auth2.GoogleAuth) => {\n                authClient.attachClickHandler(\n                    document.getElementById(googleSignInID),\n                    {},\n                    () => handleGoogleLogin(authClient.currentUser),\n                    (failureReason: string) => {\n                        console.error(\n                            \"Failed to login to Google\",\n                            failureReason\n                        );\n                    }\n                );\n\n                if (authClient.isSignedIn.get()) {\n                    handleGoogleLogin(authClient.currentUser);\n                }\n            };\n\n            gapi.auth2\n                .init({\n                    client_id: googleClientID,\n                    scope: \"profile email\",\n                })\n                .then(handleAuthInit);\n        });\n    }, [enqueueSnackbar, user, props, gapiLoaded, showError]);\n\n    if (!gapiLoaded) {\n        return <div></div>;\n    }\n\n    const userDescription = (user: User | null): string => {\n        if (userNotSignedIn(user)) {\n            return \"Sign In\";\n        }\n\n        if (user.name === null) {\n            return \"You Logged In But Who Are You???\";\n        }\n\n        return user.name;\n    };\n\n    return (\n        <Paper id={googleSignInID} classes={props.classes}>\n            <Grid container alignItems=\"center\" justify=\"center\">\n                <Grid item>\n                    <img\n                        src={SigninIcon}\n                        alt=\"Google Signin\"\n                        className={signinStyles.root}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"h6\" display=\"inline\">\n                        {userDescription(user)}\n                    </Typography>\n                </Grid>\n            </Grid>\n        </Paper>\n    );\n};\n\nexport default Login;\n","import {\n    Collapse,\n    Divider,\n    Drawer as UnstyledDrawer,\n    Grid,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Paper,\n    Theme,\n    Typography,\n} from \"@material-ui/core\";\nimport grey from \"@material-ui/core/colors/grey\";\nimport UnstyledCloseIcon from \"@material-ui/icons/Close\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport FreeBreakfastIcon from \"@material-ui/icons/FreeBreakfast\";\nimport LibraryMusicIcon from \"@material-ui/icons/LibraryMusic\";\nimport UnstyledMenuIcon from \"@material-ui/icons/Menu\";\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\nimport PetsIcon from \"@material-ui/icons/Pets\";\nimport StoreIcon from \"@material-ui/icons/Store\";\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { demoPath, songPath } from \"../common/paths\";\nimport LoadSongDialog from \"./LoadSongDialog\";\nimport { allExerciseRoutes, ExerciseRoute } from \"./Tutorial\";\nimport Login from \"./user/Login\";\nimport { User, UserContext } from \"./user/userContext\";\n\nconst withPointerStyle = withStyles({\n    root: {\n        cursor: \"pointer\",\n    },\n});\n\nconst MenuIcon = withPointerStyle(UnstyledMenuIcon);\nconst CloseIcon = withPointerStyle(UnstyledCloseIcon);\n\nconst Drawer = withStyles({\n    root: {\n        display: \"flex\",\n        flexDirection: \"column\",\n    },\n})(UnstyledDrawer);\n\nconst VerticalGridItem = withStyles({\n    root: {\n        maxWidth: \"none\",\n    },\n})(Grid);\n\nconst TitleGrid = withStyles((theme: Theme) => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n}))(Grid);\n\nconst TitleName = withStyles({\n    root: {\n        color: grey[600],\n    },\n})(Typography);\n\nconst CollapsedMenuSurface = withStyles({\n    root: {\n        minWidth: \"24px\",\n        height: \"100vh\",\n    },\n})(Paper);\n\nconst FullHeightGrid = withStyles({\n    root: {\n        height: \"100%\",\n        width: \"100%\",\n    },\n})(Grid);\n\nconst useFillerStyle = makeStyles({\n    root: {\n        flexGrow: 1,\n    },\n});\n\ninterface SideMenuProps {\n    onUserChanged: (user: User) => void;\n}\n\nconst SideMenu: React.FC<SideMenuProps> = (\n    props: SideMenuProps\n): JSX.Element => {\n    const user = React.useContext(UserContext);\n    const [expanded, setExpanded] = useState(false);\n    const [showLoadSongsDialog, setShowLoadSongsDialog] = useState(false);\n\n    const [learnSubmenuOpen, setLearnSubMenuOpen] = useState(false);\n    const fillerStyle = useFillerStyle();\n\n    const typographyProps = {\n        variant: \"h6\" as \"h6\",\n    };\n\n    const learnClickHandler = () => {\n        setLearnSubMenuOpen(!learnSubmenuOpen);\n    };\n\n    const tutorialMenu = () => {\n        const exerciseLinks = allExerciseRoutes().map(\n            (exerciseRoute: ExerciseRoute) => {\n                return (\n                    <Link\n                        key={exerciseRoute.route}\n                        to={exerciseRoute.route}\n                        style={linkStyle}\n                    >\n                        <ListItem button>\n                            <ListItemText inset primary={exerciseRoute.title} />\n                        </ListItem>\n                    </Link>\n                );\n            }\n        );\n\n        return (\n            <>\n                <ListItem key=\"Learn\" button onClick={learnClickHandler}>\n                    <ListItemIcon>\n                        <FreeBreakfastIcon />\n                    </ListItemIcon>\n                    <ListItemText\n                        primary=\"Learn\"\n                        primaryTypographyProps={typographyProps}\n                    />\n                    {learnSubmenuOpen ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                </ListItem>\n                <Collapse in={learnSubmenuOpen} timeout=\"auto\">\n                    <List>{exerciseLinks}</List>\n                </Collapse>\n            </>\n        );\n    };\n\n    const linkStyle = {\n        textDecoration: \"none\",\n        color: \"inherit\",\n    };\n\n    const collapsedMenu = (\n        <Drawer variant=\"persistent\" open={!expanded} anchor=\"left\">\n            <CollapsedMenuSurface>\n                <FullHeightGrid\n                    container\n                    direction=\"column\"\n                    alignContent=\"center\"\n                >\n                    <VerticalGridItem item xs={1}></VerticalGridItem>\n                    <VerticalGridItem item xs={1}>\n                        <MenuIcon onClick={() => setExpanded(true)} />\n                    </VerticalGridItem>\n                    <VerticalGridItem item xs={10}></VerticalGridItem>\n                </FullHeightGrid>\n            </CollapsedMenuSurface>\n        </Drawer>\n    );\n\n    const expandedMenu = (\n        <Drawer variant=\"persistent\" open={expanded} anchor=\"left\">\n            <TitleGrid container alignItems=\"center\" justify=\"space-between\">\n                <Grid item>\n                    <Link\n                        to=\"/\"\n                        style={linkStyle}\n                        data-testid=\"Menu-TitleButton\"\n                    >\n                        <TitleName variant=\"h5\" display=\"inline\">\n                            Chord Paper\n                        </TitleName>\n                    </Link>\n                </Grid>\n                <Grid item>\n                    <CloseIcon onClick={() => setExpanded(false)} />\n                </Grid>\n            </TitleGrid>\n\n            <Divider />\n            <List>\n                <Link\n                    key={songPath.URL()}\n                    to={songPath.URL()}\n                    style={linkStyle}\n                    data-testid=\"Menu-HomeButton\"\n                >\n                    <ListItem key=\"New Song\" button>\n                        <ListItemIcon>\n                            <MusicNoteIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"New Song\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n                {user !== null && (\n                    <ListItem\n                        key=\"Load Song\"\n                        button\n                        onClick={(event: unknown) =>\n                            setShowLoadSongsDialog(true)\n                        }\n                    >\n                        <ListItemIcon>\n                            <LibraryMusicIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"Load Song\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                )}\n                <Link\n                    key={demoPath.URL()}\n                    to={demoPath.URL()}\n                    style={linkStyle}\n                    data-testid=\"Menu-DemoButton\"\n                >\n                    <ListItem key=\"Demo\" button>\n                        <ListItemIcon>\n                            <StoreIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"Demo\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n                {tutorialMenu()}\n                <Link\n                    key=\"/about\"\n                    to=\"/about\"\n                    style={linkStyle}\n                    data-testid=\"Menu-AboutButton\"\n                >\n                    <ListItem key=\"About\" button>\n                        <ListItemIcon>\n                            <PetsIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"About\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n            </List>\n            <div className={fillerStyle.root} />\n            <Login onUserChanged={props.onUserChanged} />\n        </Drawer>\n    );\n\n    return (\n        <>\n            {collapsedMenu}\n            {expandedMenu}\n            {showLoadSongsDialog && (\n                <LoadSongDialog\n                    open\n                    onClose={() => setShowLoadSongsDialog(false)}\n                />\n            )}\n        </>\n    );\n};\n\nexport default SideMenu;\n","import CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { isLeft } from \"fp-ts/lib/These\";\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useErrorMessage } from \"../common/backend/errors\";\nimport { getSong } from \"../common/backend/requests\";\nimport { ChordSong } from \"../common/ChordModel/ChordSong\";\nimport { FetchState } from \"../common/fetch\";\nimport ErrorImage from \"./display/ErrorImage\";\n\ninterface IDParams {\n    id: string;\n}\n\ninterface InternalFetcherProps {\n    id: string;\n    children: (song: ChordSong) => JSX.Element;\n}\n\nconst InternalFetcher: React.FC<InternalFetcherProps> = (\n    props: InternalFetcherProps\n): JSX.Element => {\n    const showError = useErrorMessage();\n    const [fetchState, setFetchState] = useState<FetchState<ChordSong>>({\n        state: \"not-started\",\n    });\n\n    const fetchSong = async () => {\n        let fetchResult = await getSong(props.id);\n\n        if (isLeft(fetchResult)) {\n            setFetchState({ state: \"error\", error: fetchResult.left });\n            return;\n        }\n\n        const result = ChordSong.fromJSONObject(fetchResult.right);\n        if (isLeft(result)) {\n            setFetchState({\n                state: \"error\",\n                error: \"Failed to deserialize payload to song\",\n            });\n            return;\n        }\n\n        setFetchState({ state: \"loaded\", item: result.right });\n    };\n\n    switch (fetchState.state) {\n        case \"not-started\": {\n            setFetchState({ state: \"loading\" });\n            fetchSong();\n            return <></>;\n        }\n        case \"error\": {\n            showError(fetchState.error);\n            return <ErrorImage />;\n        }\n        case \"loading\": {\n            return <CircularProgress size={200} thickness={1} />;\n        }\n        case \"loaded\": {\n            return props.children(fetchState.item);\n        }\n    }\n};\n\ninterface SongFetcherProps {\n    children: (song: ChordSong) => JSX.Element;\n}\n\nconst SongFetcher: React.FC<SongFetcherProps> = (\n    props: SongFetcherProps\n): JSX.Element => {\n    const { id } = useParams<IDParams>();\n\n    // setting a key to force React to discard the component when the ID changes\n    // so that it does not reuse old fetch state\n    return (\n        <InternalFetcher key={id} id={id}>\n            {props.children}\n        </InternalFetcher>\n    );\n};\n\nexport default SongFetcher;\n","import React from \"react\";\nimport { Typography, Theme } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nconst PaddedTypography = withStyles((theme: Theme) => ({\n    root: {\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        padding: theme.spacing(1),\n        color: grey[600],\n    },\n}))(Typography);\n\nconst Version: React.FC<{}> = (): JSX.Element => {\n    const version: string = process.env.REACT_APP_VERSION ?? \"dev-build\";\n\n    return <PaddedTypography variant=\"subtitle2\">{version}</PaddedTypography>;\n};\n\nexport default Version;\n","import {\n    createMuiTheme,\n    Grid,\n    PaletteColorOptions,\n    Theme,\n    ThemeProvider,\n} from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { SnackbarProvider as UnstyledSnackbarProvider } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\nimport {\n    HashRouter,\n    Redirect,\n    Route,\n    Switch,\n    useLocation,\n} from \"react-router-dom\";\nimport Background from \"./assets/img/symphony.png\";\nimport { ChordSong } from \"./common/ChordModel/ChordSong\";\nimport About from \"./components/about/About\";\nimport Demo from \"./components/Demo\";\nimport {\n    aboutPath,\n    DemoModePath,\n    demoPath,\n    newSongPath,\n    rootPath,\n    SongIDModePath,\n    songPath,\n} from \"./common/paths\";\n\nimport SideMenu from \"./components/SideMenu\";\nimport SongFetcher from \"./components/SongFetcher\";\nimport SongRouter from \"./components/SongRouter\";\nimport { TutorialSwitches } from \"./components/Tutorial\";\nimport { User, UserContext } from \"./components/user/userContext\";\nimport Version from \"./components/Version\";\nimport { withSongContext } from \"./components/WithSongContext\";\nimport { withCloud } from \"./components/WithCloud\";\nimport GlobalKeyListenerProvider from \"./components/GlobalKeyListener\";\n\nconst createTheme = (): Theme => {\n    const lightBlue: PaletteColorOptions = {\n        main: \"#4fc3f7\",\n        light: \"#8bf6ff\",\n        dark: \"#0093c4\",\n        contrastText: \"#000000\",\n    };\n\n    const purple: PaletteColorOptions = {\n        main: \"#844ffc\",\n        light: \"#bb7eff\",\n        dark: \"#4a1fc8\",\n        contrastText: \"#ffffff\",\n    };\n\n    const green: PaletteColorOptions = {\n        main: \"#00c853\",\n        light: \"#5efc82\",\n        dark: \"#009624\",\n        contrastText: \"#000000\",\n    };\n\n    return createMuiTheme({\n        palette: {\n            primary: lightBlue,\n            secondary: purple,\n            success: green,\n        },\n        typography: {\n            fontFamily: \"Merriweather\",\n            fontWeightRegular: 300,\n        },\n    });\n};\n\nconst theme: Theme = createTheme();\n\nconst SnackbarProvider = withStyles((theme: Theme) => ({\n    variantSuccess: {\n        backgroundColor: theme.palette.success.main,\n    },\n}))(UnstyledSnackbarProvider);\n\nconst AppLayout = withStyles({\n    root: {\n        backgroundImage: `url(${Background})`,\n        minHeight: \"100vh\",\n    },\n})(Grid);\n\nconst MainSong = withSongContext(withCloud(SongRouter));\n\nconst AppContent: React.FC<{}> = (): JSX.Element => {\n    const [user, setUser] = useState<User | null>(null);\n\n    const handleUserChanged = (newUser: User) => setUser(newUser);\n\n    const location = useLocation();\n    const loadSongPath = songPath.withID(\":id\");\n\n    const isFullScreen =\n        SongIDModePath.isPlayMode(location.pathname) ||\n        DemoModePath.isPlayMode(location.pathname);\n\n    const routes = (\n        <Switch>\n            <Redirect from={rootPath.URL()} to={newSongPath.URL()} exact />\n\n            <Route key={newSongPath.URL()} path={newSongPath.URL()}>\n                <MainSong song={new ChordSong()} path={newSongPath} />\n            </Route>\n\n            <Route key={loadSongPath.URL()} path={loadSongPath.URL()}>\n                <SongFetcher>\n                    {(song: ChordSong) => (\n                        <MainSong\n                            song={song}\n                            path={loadSongPath.parent().withID(song.id)}\n                        />\n                    )}\n                </SongFetcher>\n            </Route>\n\n            <Route key={demoPath.URL()} path={demoPath.URL()}>\n                <Demo />\n            </Route>\n\n            {TutorialSwitches()}\n            <Route key={aboutPath.URL()} path={aboutPath.URL()} exact>\n                <About />\n            </Route>\n            <Redirect to={rootPath.URL()} />\n        </Switch>\n    );\n\n    return (\n        <UserContext.Provider value={user}>\n            {!isFullScreen && <SideMenu onUserChanged={handleUserChanged} />}\n            <AppLayout container>\n                <Grid item container justify=\"center\">\n                    {routes}\n                </Grid>\n            </AppLayout>\n            <Version />\n        </UserContext.Provider>\n    );\n};\n\nfunction App() {\n    return (\n        <HelmetProvider>\n            <ThemeProvider theme={theme}>\n                <Helmet\n                    titleTemplate=\"%s - Chord Paper\"\n                    defaultTitle=\"Chord Paper\"\n                />\n                <SnackbarProvider>\n                    <HashRouter>\n                        <GlobalKeyListenerProvider>\n                            <AppContent />\n                        </GlobalKeyListenerProvider>\n                    </HashRouter>\n                </SnackbarProvider>\n            </ThemeProvider>\n        </HelmetProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}