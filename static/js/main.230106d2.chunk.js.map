{"version":3,"sources":["components/lyrics/Tab.tsx","common/Whitespace.ts","common/ChordModel/Lyric.ts","common/ChordModel/ChordBlock.ts","common/ChordModel/Collection.ts","common/ChordModel/ChordLinePatcher.ts","common/ChordModel/ChordLine.ts","common/mapObject.ts","common/music/foundation/assert.ts","common/music/foundation/Distance.ts","common/music/foundation/Note.ts","common/music/foundation/Interval.ts","common/music/foundation/NoteIntervalConversion.ts","common/music/transpose/Transpose.ts","common/ChordModel/ChordSong.ts","common/paths.ts","components/edit/LineSelection.ts","assets/img/symphony.png","common/backend/errors.ts","common/backend/requests.ts","components/display/OneTimeErrorNotification.tsx","common/PlainFn.ts","components/user/userContext.ts","components/LoadSongDialog.tsx","components/display/ErrorPage.tsx","components/tutorial/Common.tsx","components/PlayerTimeContext.tsx","components/PlayerSectionContext.tsx","common/ChordModel/Section.ts","components/display/LineWithSectionHighlight.tsx","components/display/SectionHighlight.tsx","components/edit/BatchDelete.ts","components/edit/CopyAndPaste.ts","components/edit/InteractionContext.ts","components/edit/HighlightableBlockStyle.ts","components/lyrics/Serialization.tsx","components/display/Lyric.tsx","components/display/ChordSymbol.tsx","components/edit/block-dnd/common.ts","components/edit/block-dnd/useChordDrop.ts","components/edit/block-dnd/ChordlessTokenDroppable.tsx","components/edit/block-dnd/ChordTokenDroppable.tsx","components/edit/block-dnd/DraggableChordSymbol.tsx","components/edit/block-dnd/useChordTokenDragState.ts","components/edit/ControlledTextInput.tsx","components/edit/TextInput.tsx","components/edit/Token.tsx","components/edit/Block.tsx","components/edit/StyledTooltip.tsx","components/edit/LineWithHoverMenu.tsx","components/edit/lyric_input/SelectionUtils.ts","components/edit/lyric_input/useKeyHandler.ts","components/edit/lyric_input/usePasteHandler.ts","components/edit/lyric_input/useSelectionHandler.ts","components/edit/lyric_input/LyricInput.tsx","components/edit/LineWithLyricInput.tsx","components/display/SectionLabel.ts","components/edit/EditableTypography.tsx","components/track_player/common.tsx","components/edit/TimeInput.tsx","components/edit/LineWithSection.tsx","components/edit/Line.tsx","components/edit/NewLine.tsx","components/edit/Undo.ts","components/GlobalKeyListener.tsx","components/edit/ChordPaperBody.tsx","components/edit/menu/cloudSave.tsx","components/reducer/reducer.ts","components/tutorial/Playground.tsx","components/tutorial/TutorialComponent.ts","components/tutorial/AddChord.tsx","components/tutorial/AddLine.tsx","components/tutorial/ChordPositioning.tsx","components/tutorial/CopyAndPaste.tsx","components/tutorial/DragAndDropChord.tsx","components/tutorial/EditChord.tsx","components/tutorial/EditLyrics.tsx","components/tutorial/Instrumental.tsx","components/tutorial/Labels.tsx","components/icons/ABLoopIcon.tsx","components/icons/makeTextIcon.tsx","components/icons/AIcon.tsx","components/icons/BeginningIcon.tsx","components/icons/BIcon.tsx","components/icons/FlatIcon.tsx","components/icons/FlatSharpIcon.tsx","components/icons/ForwardIcon.tsx","components/icons/MetronomeIcon.tsx","components/icons/Plus5Icon.tsx","components/icons/SharpIcon.tsx","components/track_player/internal_player/ControlButton.tsx","components/track_player/internal_player/ControlGroup.tsx","components/track_player/internal_player/advanced_controls/TempoControl.tsx","components/track_player/internal_player/advanced_controls/TransposeControl.tsx","components/track_player/internal_player/advanced_controls/ABLoopControl.tsx","components/track_player/internal_player/advanced_controls/AdvancedControls.tsx","components/track_player/internal_player/TransportControl.tsx","components/track_player/internal_player/ControlPane.tsx","components/track_player/internal_player/stem/StemTrackControlPane.tsx","components/tutorial/TrackPlayer.tsx","components/tutorial/Login.tsx","components/tutorial/MergeLine.tsx","components/tutorial/PasteLyrics.tsx","components/tutorial/PlayMode.tsx","components/tutorial/RemoveChord.tsx","components/tutorial/RemoveLine.tsx","components/tutorial/RemoveMultipleLines.tsx","components/tutorial/SplitLine.tsx","components/tutorial/Start.tsx","components/tutorial/TimeLabels.tsx","components/Tutorial.tsx","assets/img/google_signin.svg","components/user/Login.tsx","components/SideMenu.tsx","components/Version.tsx","components/display/CenteredLayoutWithMenu.tsx","components/about/About.tsx","components/display/OneTimeMobileNotification.tsx","components/edit/DragAndDrop.tsx","common/music/scale/Scale.ts","components/guitar/FretSelector.tsx","common/music/guitar/Fretboard.ts","common/music/guitar/Scale.ts","components/guitar/ScaleChart.tsx","components/guitar/MenuSelectableScaleChart.tsx","components/guitar/ScaleSelection.tsx","components/guitar/GuitarDemo.tsx","components/WithSongContext.tsx","assets/img/error.jpeg","components/display/ErrorImage.tsx","components/loading/LoadingSpinner.tsx","components/loading/FullScreenLoading.tsx","components/SongFetcher.tsx","components/display/KeyInfo.tsx","components/display/LastSavedAt.tsx","components/edit/Header.tsx","components/edit/menu/load.ts","components/edit/menu/TransposeMenu.tsx","components/edit/menu/ChordPaperMenu.tsx","components/edit/menu/save.ts","components/loading/LoadingRender.tsx","common/ChordModel/tracks/BaseTrack.ts","common/ChordModel/tracks/SingleTrack.ts","common/ChordModel/tracks/SplitStemRequest.ts","common/ChordModel/tracks/StemTrack.ts","components/track_player/dialog/error.ts","components/track_player/dialog/LabelField.tsx","components/track_player/internal_player/google_drive.ts","components/track_player/dialog/URLField.tsx","components/track_player/dialog/SingleTrackRow.tsx","components/track_player/dialog/SplitStemTrackRow.tsx","components/track_player/dialog/StemTrackRow.tsx","components/track_player/dialog/TrackListEditDialog.tsx","components/track_player/internal_player/ABLoop.ts","components/track_player/internal_player/usePlayerControls.ts","components/track_player/MicroPlayer.tsx","components/track_player/internal_player/reactPlayerProps.ts","components/track_player/internal_player/single/SingleTrackPlayer.tsx","components/track_player/internal_player/stem/audioCtx.ts","components/track_player/internal_player/stem/LoadedStemTrackPlayer.tsx","components/track_player/internal_player/stem/StemTrackPlayer.tsx","components/track_player/LoadingSplitStemTrackView.tsx","common/ChordModel/tracks/Track.ts","common/ChordModel/tracks/TrackList.ts","components/track_player/providers/useTracklistFetch.ts","components/track_player/TrackPlayer.tsx","components/track_player/providers/useTrackFetch.ts","components/track_player/MultiTrackPlayer.tsx","components/track_player/JamStation.tsx","components/track_player/providers/TrackListProvider.tsx","components/edit/ChordPaper.tsx","components/display/CenteredLayout.tsx","components/play/common/PlayBlock.tsx","components/play/common/PlayLine.tsx","components/play/common/keyMap.ts","components/play/common/useNavigateKeys.ts","components/play/page/PagePlayContent.tsx","components/play/common/BasePlayMenu.tsx","components/play/page/DisplaySettingsDialog.tsx","components/play/page/PagePlayMenu.tsx","components/play/page/PagePlayView.tsx","components/play/scroll/colourBorderContext.tsx","components/play/scroll/ColourBorderBox.tsx","components/play/scroll/useInPageView.ts","components/play/scroll/ScrollablePlayLine.tsx","components/play/scroll/useScrollable.ts","components/play/scroll/ScrollPlayContent.tsx","components/play/scroll/ScrollPlayMenu.tsx","components/play/scroll/ScrollPlayView.tsx","components/play/Play.tsx","components/SongRouter.tsx","App.tsx","components/useCloud.tsx","serviceWorker.ts","index.tsx"],"names":["SizedTab","dataAttributeTabName","allTabTypes","sizedTab","SmallTab","serializedStr","MediumTab","LargeTab","findTabType","attrName","attr","tabType","find","undefined","Error","isValidTabValue","lyricTabTypeOfDOMNode","node","HTMLElement","tagName","toLowerCase","dataAttribute","dataset","makePlainSizeStyle","size","display","width","makeEditingSizeStyle","plainStyle","backgroundColor","blueGrey","content","plainTabClassNames","cx","css","editableTabClassNames","Tab","props","tabStyles","edit","type","className","contentEditable","isWhitespace","s","test","inflateIfEmpty","value","LyricValidator","iots","serializedLyric","tokenizationRegex","regex","RegExp","Lyric","serializedLyrics","this","transformFn","matches","match","List","lyricsArr","map","rawStr","other","isEntirelySpace","arr","joinChar","container","join","validatedFields","ChordBlockValidator","chord","lyric","DefaultRecord","id","RecordConstructor","Record","ChordBlock","params","record","isChordBlockRecord","shortid","generate","maybeNew","key","newRecord","set","new","updater","update","plainObject","toJS","lodash","omit","tokenize","splitIndex","tokens","lyricTokens","prevBlockLyricTokens","slice","thisBlockLyricTokens","lyricString","get","prevBlockLyrics","thisBlockLyrics","isEqual","isEmpty","length","isRecord","unionLyric","fromValidatedFields","jsonStr","result","parseJSON","isLeft","jsonObj","right","validationResult","decode","left","CollectionMethods","elements","getAtIndex","updateCollection","collection","replace","remove","removeMultiple","updateAll","addBeginning","addAfter","Collection","list","isList","of","toJSON","toArray","transformer","newList","indexOf","ids","index","withMutations","i","wrappedUpdater","idable","indexOfBefore","newElem","splice","idables","forEach","delete","removeCount","newItems","replacer","item","findIndex","elem","differ","dmp","DiffMatchPatch","diffTimeout","matchThreshold","rawStringGetter","lyrics","ChordLineIterator","chordLine","currBlockIndex","currCharIndex","blockBuffer","prependLyrics","chordBlocks","getElementAtIndex","currentBlock","currentRawLyrics","charAt","skipChar","currentChar","nextChar","insertChar","atBlockBoundary","prevBlockIndex","deleteChar","updateAllElements","block","normalizeBlocks","orphanTab","replaceChordLineLyrics","newLyrics","currRawLyrics","newRawLyrics","diffs","diff_main","diff_cleanupSemanticLossless","iterator","diff","diffOperation","diffChar","DiffOperation","DIFF_EQUAL","skip","DIFF_INSERT","insert","DIFF_DELETE","addTabsToOrphanedBlocks","newBlocks","push","removeOrphanedBlocksWithNoChords","finish","requiredFields","LabelSectionValidator","name","TimestampedSectionValidator","time","SectionValidator","optionalFields","label","section","ChordLineValidator","ChordLine","isChordLineRecord","blocks","chordBlock","newChord","replaceElement","newName","removeSectionName","newTime","removeSectionTime","splitByTokenIndex","newPrevBlock","newCurrBlock","nextLine","totalLyricLength","remainingChars","lyricLength","splitCharIndex","blockIndex","blocksOfCurrLine","transform","blocksOfNextLine","splitByCharIndex","firstHalfBlock","secondHalfBlock","remainingBlocks","hasLastBlock","lastIndex","append","blocksAreEqual","otherBlock","contentEquals","chordBlockElems","sectionFromLabel","mapObjectKey","source","mapObject","_value","dest","hasOwnProperty","oldValue","assertFound","checkWholeNumber","val","modulo","base","asSemitone","AllNotes","C","Cb","D","Db","E","Eb","F","Fb","G","Gb","A","Ab","B","Bb","AllNoteLetters","ChromaticNotes","getNoteLetter","note","letter","includes","NoteUtility","chromaticNoteIndex","noteLetter","noteLetterIndex","enharmonics","noteNameIndex","semitones","targetNoteIndex","otherNote","otherNoteIndex","semitonesBetween","degree","targetNoteLetterIndex","otherNoteName","otherNoteNameIndex","NoteUtilities","IntervalUtility","interval","naturalInterval","unqualifiedInterval","naturalIntervalToSemitone","isInterval","minor","augmented","doubleAugmented","tripleAugmented","diminished","doubleDiminished","unqualified","naturalIntervalToDegree","findNaturalIntervalByDegree","naturalIntervals","minorIntervals","b1","b2","b3","b4","b5","b6","b7","augmentedIntervals","doubleAugmentedIntervals","tripleAugmentedIntervals","diminishedIntervals","bb1","bb2","bb3","bb4","bb5","bb6","bb7","doubleDiminishedIntervals","bbb2","bbb3","bbb5","bbb6","bbb7","AllIntervals","checkIntervalType","intervalSet","alteredInterval","intervalToNote","rootNote","intervalProperties","noteProperties","enharmonicTargetNotes","semitonesUp","targetNoteName","noteNameFrom","targetNote","noteToInterval","rootNoteProperties","naturalSemitone","semitoneDifference","findInterval","degreesBetween","IntervalToNote","intervalsToNotesOfRootNote","NoteToInterval","notesToIntervalsOfRootNote","transposeSymbol","symbol","fromKey","toKey","matchingNotes","startsWith","matchingNote","transposedNote","transposeNote","transposeSong","song","transposeBlock","bass","baseChord","split","transposeChord","line","RequiredMetadataValidator","title","composedBy","performedBy","NoteValidator","OptionalMetadataValidator","originalKey","currentKey","MetadataValidator","SongSummaryTypes","owner","lastSavedAt","DateFromISOString","metadata","SongSummaryValidator","ListSongSummaryValidator","SongSummary","fields","jsonList","songSummaryList","ChordSongValidator","ChordSong","isChordSongRecord","lines","allSections","currentSection","chordLines","timestampedSections","lineID","newTitle","newPerformedBy","newComposedBy","user","userID","currIndex","mergeLines","prevLine","currLine","appendLineToPrev","lastBlockIndex","updateElement","addSpaceToEndOfLine","newCurrLine","linesAreEqual","otherLine","blockID","newSong","isFirstTransposition","keyMismatch","newOriginalKey","sections","prevSectionName","prevTime","chordLineValidatedFields","parse","JSON","stringify","fromJSONObject","lyricLines","lyricLine","fromLyrics","RootPath","root","URL","AboutPath","GuitarDemoPath","SongPath","SongIDPath","withNew","EditSongPath","PlaySongPath","path","mode","baseURL","DemoPath","TutorialPath","lesson","RangePosition","BackendErrorValidator","msg","code","error_details","parseRequestError","unknownError","a","ky","HTTPError","responseClone","response","clone","json","jsonError","decodeResult","decodeErrorMsg","toString","console","error","TimeoutError","getErrorMessageForUser","backendError","useErrorSnackbar","enqueueSnackbar","useSnackbar","showErrorMsg","variant","requestError","userErrorMsg","backendHost","backendURL","process","authHeader","authToken","headers","Authorization","login","post","parsed","parsedError","getSong","songID","getTrackList","timeout","getSongsForUser","createSong","updateSong","isUnsaved","put","deleteSong","updateTrackList","tracklist","song_id","BoxWithMargin","styled","Box","theme","marginTop","spacing","marginBottom","OneTimeErrorNotification","useState","open","setOpen","useEffect","isRight","errorMsg","feedbackLink","Link","href","target","rel","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","componentDescription","noopFn","User","currentGoogleUser","googleUser","getAuthResponse","id_token","getBasicProfile","getName","listen","refreshAuthToken","call","getNewAuthToken","UserContext","React","createContext","SetUserContext","validateResponse","LoadSongDialog","state","fetchState","setFetchState","useContext","history","useHistory","wrapInDialog","contents","fullWidth","Typography","summaries","summarySortFn","b","loadSummaries","summariesResult","fromJSONList","message","sort","summaryListItem","summary","songLink","withID","detailElement","detail","details","toLocaleString","Fragment","ListItem","button","onClick","ListItemText","primary","primaryTypographyProps","secondary","secondaryTypographyProps","Divider","LinearProgress","RootPaper","Paper","margin","padding","minHeight","minWidth","position","ErrorPage","Grid","xs","LyricsTypography","color","palette","light","ChordTypography","main","LineBreak","nullContextRef","current","PlayerTimeContext","PlayerTimeProvider","getPlayerTimeRef","useRef","Provider","children","PlayerSectionContext","PlayerSectionProvider","sectionsRef","setCurrentSection","maybeSetNewSection","useCallback","currentTime","getPlayerTime","nowTimestampedSection","sectionItemAtCurrentTime","candidateSection","timestampedSection","findSectionAtTime","intervalID","setInterval","clearInterval","SmoothTransitionBox","transition","LineWithSectionHighlight","currentSectionItem","sectionID","sx","style","alpha","dark","backgroundColorStyle","top","borderTopLeftRadius","borderTopRightRadius","topLineStyle","bottom","borderBottomLeftRadius","borderBottomRightRadius","bottomLineStyle","makeSection","sectionLines","lineElementFn","isTop","isBottom","normalizeNodeBoundary","offset","getPositionForNode","MIDDLE","offsetFromParent","findOffsetForNode","END","parentNode","nodeType","Node","TEXT_NODE","START","nodeValue","getPositionForTextNode","ELEMENT_NODE","childNodes","getPositionForElementNode","nodes","getSelectedLineIDs","selection","window","getSelection","rangeCount","range","wideRange","document","createRange","firstRange","getRangeAt","setStart","startContainer","startOffset","setEnd","endContainer","endOffset","rangeIndex","compareBoundaryPoints","Range","START_TO_START","END_TO_END","getWideSelectionBoundary","normalizeRange","lineElements","querySelectorAll","lineIDs","lineElementIndex","lineElement","intersectsNode","getAttribute","handleBatchLineDelete","event","songDispatch","lineIDStrs","CopiedChordLinesValidator","copiedChordLines","useLineCopyHandler","filter","copyMsg","serialized","payload","forCopying","serializeCopiedChordLines","clipboardData","setData","preventDefault","defaultSetter","startInteraction","endInteraction","InteractionContext","useEditingState","editing","setEditing","startEdit","finishEdit","spaceClassName","wordClassName","firstTokenClassName","chordTargetClassName","chordSymbolClassName","highlightedSpaceStyle","borderRadius","highlightedWordStyle","outlineStyle","borderStyle","borderColor","borderWidth","makeHighlightableBlockStyles","options","dragOverStyleForTheme","dragOverChordLyricStyle","hoverStyleForTheme","hoverChordLyricStyle","useTheme","dragOverStyle","hoverStyle","dragOver","hoverable","withCustomLyricSelector","selector","customLyricClassSelector","withCustomChordSymbolSelector","customChordSymbolClassSelector","highlightedSpace","highlightedWord","customOutlineStyles","dragOverOutline","outline","spaceClassSelector","wordClassSelector","chordSymbolSelector","hoverOutline","chordTargetSelector","customChordTargetClassSelector","withCustomChordTargetSelector","deserializeLyrics","token","tokenIndex","deserializeLyricStr","serializeLyrics","childNode","textContent","lyricTypographyVariant","lyricTypographyProps","lyricStyle","whiteSpace","wordSpacing","LyricTypography","LyricDisplay","customClassName","isEntirelySpaceOrTab","cursor","fontFamily","userSelect","ChordSymbol","forwardRef","ref","endsWith","formattedChord","DNDChordType","useChordDrop","useDrop","accept","drop","collect","monitor","isOver","shallow","ChordlessTokenDroppable","dropRef","childClassName","dragOverClassName","hoverableClassName","childElement","cloneElement","ChordTokenDroppable","onDragOver","DraggableChordSymbol","sourceBlockID","useDrag","chordBlockID","end","maybeDropResult","dropResult","getDropResult","onDrop","destinationBlockID","dropType","dropEffect","dragRef","combinedRefCallback","chordSymbolRef","reducer","action","isDraggingOver","ControlledTextInput","newValue","onFinish","browserInputProps","typographyVariant","typography","inputProps","paddingSpacing","fontSize","opacity","TextField","autoFocus","spellCheck","InputProps","inputRef","onBlur","onChange","onValueChange","onKeyDown","placeholder","TextInput","setValue","InvisibleTypography","ChordTargetBox","Token","lyricClassName","lyricBlock","invisibleTarget","blockChordSymbolClassName","blockChordTargetClassName","rowHeight","ChordInput","height","inputBaseClasses","input","useFirstTokenStyle","red","useNormalTokenStyle","Block","chordTokenStyle","chordlessTokenStyle","useReducer","dragOverState","dispatch","getValue","handlers","useChordTokenDragState","gridClassName","onChordDragOver","onLyricDragOver","whitespaceLyric","clickHandler","onBlockSplit","stopPropagation","endEdit","onChordChange","makeChordlessToken","invisibleTargetOption","firstLyricToken","subsequentLyricTokens","firstLyricBlock","lyricBlocks","lyricToken","unshift","verticalAlign","direction","makeStyledTooltipMenu","styleInput","Tooltip","classes","popper","styles","zIndex","tooltipClasses","tooltip","HoverMenuButton","Button","grey","TransparentTooltip","LineWithHoverMenu","buttons","menuItems","icon","menuContents","ButtonGroup","orientation","placement","contentEditableElement","contentEditableRef","selectionRange","contains","insertNodeAtSelection","deleteContents","insertNode","collapse","normalize","childIndex","parent","child","nodeBeforeSelection","targetNodeIndex","currNodeIndex","specialBackspaceHandler","callback","metaKey","ctrlKey","collapsed","firstChild","isSelectionAtBeginning","specialEnterHandler","getSelectionStartOffset","tabHandler","domLyricTab","shiftKey","domNode","directionKeyHandler","nodeIndex","childNodeIndex","childCount","textNode","nodeAfterSelection","setBaseAndExtent","useKeyDownHandler","sizeType","createElement","specialEnterCallback","specialBackspaceCallback","enterCallback","parentElement","removeChild","handler","serializedLyricsFromRange","documentFragment","cloneContents","composeMultilinePaste","pasteContent","currentRange","beforeRange","afterRange","selectNodeContents","splitContentBySelection","beforeSelection","afterSelection","serializedLyricsForThisLine","remainingSerializedLyrics","lastLyric","handlePlainTextPaste","getData","linesOfText","flatMap","createTextNode","newPasteLines","isCollapsed","setStartAfter","setEndAfter","handleSelectionChange","InputTypography","contentEditableStyle","pointerEvents","LyricInput","createRef","handleKeyDown","onSpecialBackspace","onSpecialEnter","handlePaste","pasteJSONCallback","pastePlainTextCallback","usePasteHandler","onJSONPaste","canHandle","executePaste","firstLine","restOfLines","onLyricOverflow","lyricContent","focus","newRange","removeAllRanges","addRange","addEventListener","removeEventListener","onPaste","suppressContentEditableWarning","UnstyledLyricInput","borderBottom","borderBottomColor","borderBottomWidth","LineWithLyricInput","useMemo","lyricEdit","newLyric","lyricPasteOverflow","overflowContent","insertionLineID","overflowLyrics","jsonPaste","deserializedCopyResult","obj","deserializeCopiedChordLines","insertLineID","copiedLines","specialBackspace","latterLineID","specialEnter","sectionLabelStyle","sectionTypographyVariant","PlaceholderTypography","EditableTypography","editingState","setEditingState","editControl","onStartEdit","onEndEdit","editableLine","typographyProps","nonEditableLine","roundedTopCornersStyle","roundedCornersStyle","controlPaneStyle","alignItems","widthOfString","phattestString","font","canvasContext","getContext","measurement","measureText","greyTextColour","BottomRightBox","withBottomRightBox","boxShadow","TitleBar","justifyContent","UnstyledControlledTextInput","textAlign","TimeInput","secondsToString","seconds","Duration","fromMillis","toFormat","initialValue","inputBoxRef","decomposeTimeString","timeString","numericValue","Number","secondsPart","Math","floor","validateTimeValue","minutesPart","isNaN","minutes","buttonAdornment","InputAdornment","IconButton","edge","onMouseDown","playerTimeSeconds","currentGetPlayerTime","formattedValue","colonIndex","substring","formatValue","FormControl","sanitizedValue","replaceAll","sanitizeValue","endAdornment","disableUnderline","UnstyledEditableTypography","background","shadows","LineWithSection","handleLabelChange","handleTimeChange","timeInput","disableTooltipFocus","arrow","disableFocusListener","AtomicSelectionBox","BackspaceIcon","UnstyledBackspaceIcon","DimmedOnHoverBox","backgroundImage","overflow","textOverflow","Line","removing","setRemoving","chordChange","blockSplit","startRemove","basicLine","withLyricInput","withHoverMenu","lineContent","editLabel","yeetDirection","Slide","in","onExited","memo","ColourOnHoverGrid","UnstyledDivider","AddCircleOutlineIcon","UnstyledAddCircleOutlineIcon","NewLine","handleAddLine","menuItem","handleUndoRedo","isSpecialKey","GlobalKeyListenerContext","useRegisterKeyListener","useRegisterTopKeyListener","GlobalKeyListenerProvider","keyListeners","wrapListener","listener","isContentEditable","defaultPrevented","stopImmediatePropagation","wrappedListener","original","wrapped","entry","removeAll","addAll","uninteractiveSx","UnstyledPaper","ChordPaperBody","interacting","setInteracting","handleCopy","addKeyListener","removeKeyListener","interactionContextValue","setTimeout","allowInteraction","makeLineElement","timeSectionedChordLines","firstNewLine","paperSx","onCopy","elevation","tabIndex","useCloudCreateSong","showError","createNewSong","ownedSong","createResult","deserializeResult","log","deserializedSong","pathWithID","editPath","withEditMode","createNewSongIfUnsaved","ChordPaperStateConstructor","undoStack","currentSongIndex","getCurrentSong","currentSong","chordSongReducer","hooks","chordSongReducerWithoutUndo","blowAwayRedoStack","removeElement","splitLine","mergeLineWithPrevious","removeMultipleElements","replaceLyrics","newChordLines","newLyricLine","setChord","splitBlock","sourceLine","findLineWithBlock","destinationLine","sameLine","syncSameLines","newLine","validation","setSectionTime","updateTime","setSectionName","updateName","validateTimestampedSections","modifyMode","transpose","transposeKey","fork","cloudSaveAction","useChordSongReducer","initialSong","reducerWithChangeCallback","newState","initialState","CheckCircleIcon","UnstyledCheckCircleIcon","success","Badge","UnstyledBadge","Playground","setFinish","expectedSong","badgeContent","invisible","convertToTutorialComponent","fc","tutorialComponent","example","variantMapping","body1","tabExample","LabelTypography","ABLoopIcon","SvgIcon","d","makeRobotoIcon","textIconContent","makeTextIcon","makePressStartIcon","dominantBaseLine","x","y","BeginningIcon","ForwardIcon","MetronomeIcon","UnstyledButton","makeControlButton","tooltipMsg","preventKeyInvocation","onKeyUp","ControlButton","Play","Pause","JumpBack","JumpForward","SkipBack","SkipForward","Beginning","DecreaseTempo","IncreaseTempo","TempoMenu","ABLoopMenu","TransposeMenu","FlatSharpIcon","TransposeDown","FlatIcon","TransposeUp","SharpIcon","CloseMenu","SetPointA","AIcon","ClearPointA","SetPointB","BIcon","ClearPointB","EnableDefaultLoop","Plus5Icon","DisableDefaultLoop","ControlGroupBox","alignContent","flexShrink","flexGrow","VerticalMiddleDivider","marginLeft","marginRight","ControlGroup","realContents","isEdge","dividers","edgeDivider","divider","flexItem","TempoBox","PercentageDisplay","TempoControl","tempoPercentage","round","percentageDisplay","decreaseDisabled","increaseDisabled","onTempoChange","disabled","TransposeBox","TransposeDisplay","TransposeControl","tempo","transposeLevel","transposeText","onTransposeChange","ToggleButton","UnstyledToggleButton","border","ABLoopControl","abLoop","isPointASet","timeA","isPointBSet","isDefaultLoop","timeB","isDefaultLoopSet","showBButton","getTime","setNewLoop","newABLoop","newMode","isSet","ensureMode","onABLoopChange","setMode","checkErrorAndSetNewLoop","newABLoopResult","clearPointB","clearB","clearDefaultLoop","setAButton","setA","aButton","clearA","setBButton","setB","bButton","enableDefaultLoopButton","setDefaultLoop","defaultLoopButton","Collapse","ToggleButtonGroup","_event","changedMode","exclusive","FirstPage","Repeat","menuOrder","AdvancedControls","currentMenu","setCurrentMenu","transposeMenu","controls","level","tempoMenu","percentage","abLoopMenu","showCloseButton","closeButton","menus","makeCollapsibleMenu","menuType","menu","showControl","control","showIconButton","menuElements","collapsibleMenuElements","concat","TransportControl","addTopKeyListener","show","handleKey","transport","togglePlay","skipBack","jumpBack","skipForward","jumpForward","playPauseButton","playing","goToBeginning","enabled","RightJustifiedControlBox","ControlPaneBox","buttonHeight","flexWrap","maxHeight","ControlPane","FullSizedBox","paddingLeft","paddingRight","VolumeSlider","Slider","colouredButton","textTransform","DisabledButton","ColouredButtons","white","pink","yellow","purple","lightBlue","lightGreen","StemTrackControlPane","stemControls","stemButton","RenderedButton","buttonColour","onEnabledChanged","volume","onVolumeChanged","min","max","step","valueLabelDisplay","SmallControlPaneBox","makeStemControl","trackPlayerRoute","getRouteForTutorialComponent","TrackPlayer","to","Header","Preamble","TimeSetter","allExercises","route","component","Starting","EditChord","RemoveChord","AddChord","DragAndDropChord","EditLyrics","Instrumental","ChordPositioning","AddLine","RemoveLine","PasteLyrics","RemoveMultipleLines","MergeLine","SplitLine","CopyAndPaste","Labels","TimeLabels","PlayMode","Login","matchingExercise","exercise","PlayArrowIcon","UnstyledPlayArrowIcon","Fab","UnstyledFab","SingleTutorialScreen","SingleTutorial","matchEntry","exerciseEntry","exerciseIndex","nextButton","nextExercise","transformToFC","exact","UnstyledTypography","Paragraph","googleSignInID","gapiLoaded","setGapiLoaded","dialogError","setDialogError","snackbarError","setSnackbarError","userNotSignedIn","gapi","load","handleLoginError","loginError","authClient","reqError","shouldDisplayDialog","onUserChanged","signOut","handleGoogleLogin","currentUser","idToken","loginResult","parsedUser","auth2","init","client_id","scope","then","attachClickHandler","getElementById","failureReason","isSignedIn","userDescription","errorDialog","loginTutorialRoute","LoginTutorial","signupLink","Alert","severity","AlertTitle","src","SigninIcon","alt","objectFit","pointerStyle","MenuIcon","UnstyledMenuIcon","CloseIcon","UnstyledCloseIcon","Drawer","UnstyledDrawer","flexDirection","VerticalGridItem","maxWidth","CollapsedSideMenu","anchor","SideMenu","expanded","setExpanded","showLoadSongsDialog","setShowLoadSongsDialog","learnSubmenuOpen","setLearnSubMenuOpen","learnClickHandler","linkStyle","textDecoration","fillerBox","collapsedMenu","expandedMenu","rootURL","ListItemIcon","exerciseLinks","exerciseRoute","inset","tutorialMenu","PaddedTypography","Version","version","AppLayout","Background","CenteredLayoutWithMenu","menuElement","About","AboutScreen","OneTimeMobileNotification","HTML5BackendWithCTRLKey","backend","HTML5Backend","welpThingsBroke","untypesafeBackend","handleTopDragEnter","__original__handleTopDragEnter","e","altKeyPressed","altKey","handleTopDragOver","__original__handleTopDragOver","DragAndDrop","DndProvider","ScaleTypes","Lydian","importance","Ionian","Mixolydian","Dorian","Aeolian","Phrygian","Locrian","Dominant","buildScale","keyCenter","scaleName","scaleNotes","scaleInterval","center","notes","AllScales","buildScaleCollection","ScaleUtility","scale","FretSelector","InputLabelProps","shrink","startingFret","parseInt","onStartingFretChanged","AllStringNames","highE","FretboardClass","noteMap","buildString","endingFret","stringName","fretboardView","frets","fret","baseNote","fretmap","noteUtility","maxFrets","nextNotes","Fretboard","getLabelText","scaleNote","labelType","ChartBox","stringNameMap","convertScaleViewToFingers","scaleView","fingers","stringNumber","fretLabels","fretLabel","fretNumber","labelColour","shape","Shape","SQUARE","CIRCLE","text","labelText","ScaleChart","elemRef","prevSVGuitarChord","guitarScaleView","fretboardLabels","notePositions","getPositions","generateGuitarScaleView","svguitarChord","SVGuitarChord","barres","scaleLabel","configure","fretLabelPosition","FretLabelPosition","LEFT","draw","SVGTextElement","pos","baseVal","numberOfItems","getItem","getPos","setAttribute","refProps","MarginBox","MenuSelectableScaleChart","setLabel","initialStartingFret","setStartingFret","AllScaleValues","allOptions","ScaleSelection","filterOptions","createFilterOptions","matchFrom","copiedScaleOptions","cloneDeep","Autocomplete","multiple","getOptionLabel","scaleValue","renderInput","scales","onSelection","SwiperCore","use","Navigation","Pagination","OriginalComponent","GuitarDemo","setScales","firstRowSwiperRef","secondRowSwiperRef","makeSlide","selectableScale","secondRow","firstRowSwiper","firstRowSlides","slidesPerView","navigation","loop","onSlideChange","swiper","secondRowSlideIndex","realIndex","slideToLoop","onSwiper","secondRowSwiper","secondRowSlides","initialSlide","ErrorImage","ErrorImg","LoadingSpinner","CircularProgress","thickness","FullScreenLoading","Modal","InternalFetcher","fetchSong","fetchResult","SongFetcher","useParams","KeyInfo","LastSavedAt","Date","setLastRefreshed","lastSaved","DateTime","fromJSDate","diffNow","as","DATE_MED","relativeDescription","toRelative","timeDescription","UnstyledLastSavedAt","UnstyledKeyInfo","TitleBox","paddingBottom","HeaderBox","paddingTop","align","keyInfo","newComposer","newPerformer","useLoadMenuAction","onLoad","inputElem","filePickerHandler","fileList","files","file","fileReader","FileReader","onload","ev","ArrayBuffer","results","deserialize","readAsText","createFilePickerHandler","click","UnstyledFormControl","Select","UnstyledSelect","transposedKey","keySelection","setKeySelection","setModifyMode","keySelectChangeHandler","changedField","newSelectValue","newKeySelection","createKeySelect","changeHandler","keyName","MenuItem","modifyModeSwitch","Switch","checked","modifyModeControl","FormControlLabel","labelPlacement","FormHelperText","DialogActions","SpeedDial","UnstyledSpeedDial","ChordPaperMenu","transposeMenuOpen","setTransposeMenuOpen","offlineMode","setOfflineMode","loadAction","loadedSong","saveAction","blob","Blob","objectURL","createObjectURL","download","revokeObjectURL","shouldShowDialog","setShouldShowDialog","closeDialog","deleteAction","deleteResult","newURL","deleteDialog","useCloudDeleteSongDialog","showDeleteDialog","useKonamiCode","onOpen","ariaLabel","SpeedDialAction","tooltipTitle","onPlay","songClone","forkSong","isOwner","LoadingRender","initialRender","setInitialRender","timerID","clearTimeout","validateValue","trim","BaseTrackValidator","SingleTrackValidator","track_type","url","SingleTrack","SplitStemTrackValidator","original_url","job_status","job_status_message","job_status_debug_log","job_progress","SplitStemTrack","splitType","originalURL","jobStatus","jobStatusMessage","jobProgress","jobStatusDebugLog","defaultLabel","makeStemTrackValidator","emptyKeyMap","trackType","stringTypes","stem_urls","StemTrack","stems_urls","TwoStemEmptyObject","accompaniment","vocals","TwoStemTrackValidator","TwoStemTrack","newLabel","FourStemEmptyObject","drums","FourStemTrackValidator","FourStemTrack","FiveStemEmptyObject","piano","FiveStemTrackValidator","FiveStemTrack","textFieldValidation","validValue","helperText","LabelField","googleDriveExportLinkRegex","googleDriveViewerLinkRegex","ensureGoogleDriveCacheBusted","randID","isGoogleDriveExportLink","URLField","convertViewLinkToExportLink","RowContainer","SingleTrackRow","track","updatedTrack","onRemove","SplitStemTrackRow","currentlyProcessing","urlLabelText","StemTrackRow","stemURLFields","stemKey","fieldLabel","urlFieldLabels","rows","createSubsequentRows","FlexBox","justifyItems","InlineBlockBox","UnstyledBox","AddNewRowBox","LoadedTrackListEditDialog","initialTrackList","trackList","tracks","setTrackList","setVersion","addTrackMenuElement","setAddTrackMenuElement","bumpVersion","cloneTrackList","handleAddTrackMenu","currentTarget","handleCloseAddTrackMenu","handleAddSingleTrack","handleAddTrack","handleAddTwoStemTrack","handleAddFourStemTrack","handleAddFiveStemTrack","handleAddSplitStemTrack","newTrackRequest","newTrack","appendTrack","removeTrack","hasError","validate","trackChangeHandler","updateTrack","trackListInputs","rowKey","showAddTrackMenu","anchorEl","body2","onSubmit","TrackListEditDialog","internalContent","trackListLoad","onRefresh","ABLoop","loopLength","newTimeA","newLoop","setAWithoutCheck","isInvalid","newTimeB","setBWithoutCheck","timestamp","unfocusedControls","playerRef","_current","newCurrent","getCurrentTime","onProgress","onPause","empty","getSection","MicroPlayer","tempJumpIcon","setTempJumpIcon","playersLoaded","tooltipMessage","makeBasePlayerProps","playerControls","playbackRate","progressInterval","filePlayerStyle","SingleTrackPlayer","trackURL","reactPlayerProps","basePlayerProps","config","forceAudio","attributes","makeReactPlayerProps","isCurrentTrack","focused","audioCtx","getAudioCtx","AudioContext","createToneNodes","stem","volumeNode","Tone","playerNode","audioBuffer","grainSize","overlap","chain","endNode","LoadedStemTrackPlayer","toneNodes","stems","initialPlayerState","masterVolumePercentage","masterPitchShift","muted","volumePercentage","playerState","setPlayerState","playerStateRef","silentURL","createBuffer","sampleRate","arrayBuffer","audioBufferToWav","createEmptySongURL","duration","filePlayerProps","onVolumeChange","makeFilePlayerProps","newPlayerState","refreshTrackFn","minDuration","maxDuration","buffer","start","pause","tempoValue","adjustedToneTime","abs","stemState","stemIndex","stemVolume","stemVolumeDecibels","log10","mute","_stemState","detune","currentTrack","toneNode","sync","toDestination","unsync","disconnect","dispose","stemInput","newVolume","stemControlPane","handlePitchShift","newPitchShift","transposeControl","PaddedBox","StemTrackPlayer","fetchStateRef","fetchAudioBuffer","handleProgress","onDownloadProgress","decodeAudioData","fetchAudioBufferWithProgress","progress","currentFetchState","newFetchState","loadedBytes","transferredBytes","totalBytes","loadPlayers","audioBufferPromises","bufferPromise","Promise","all","resolvedKeyBuffers","encounteredError","stemInputs","buttonSpecs","buttonSpec","audioBufferSearch","AudioBuffer","keyObject","total","stemTotal","loaded","formattedProgress","prettyBytes","progressBar","percent","LoadingSplitStemTrackView","TrackValidator","TrackListValidator","TrackList","useTracklistFetch","tracklistID","refresh","useDebouncedCallback","handleFetchedTracklist","fetchTrackList","updateTracklist","userAuthToken","updateResult","trackID","tracklistLoad","useTrackFetch","trackLoad","LoadedTrackPlayer","innerPlayer","TitleBarButton","paddingLeftStyle","FullPlayerContainer","transportControlsWidth","MultiTrackPlayer","onMinimize","trackListEditButton","onOpenTrackEditDialog","trackRefreshButton","onSelectCurrentTrack","trackListPicker","items","currentTrackIndex","MenuProps","disableScrollLock","titleBar","JamStation","playerVisibilityState","setPlayerVisibilityState","randomID","trackEditDialogState","setTrackEditDialogState","setLoadPlayers","setCurrentTrackIndex","setPlaying","currentTimeRef","setABLoop","setTempoPercentage","seekTo","handlePlayState","handlePauseState","outOfSyncWorkaround","nextSeekTime","currentURL","YouTubePlayer","canPlay","seekTime","pauseAction","playAction","togglePlayAction","jumpBackAction","jumpForwardAction","goToBeginningAction","skipBackButtonAction","previousSection","skipBackButton","skipForwardButton","findNextSectionIndex","sectionIndex","currentSectionIndex","nextSectionIndex","nextSectionToSkipTo","nextSection","nextNextSectionIndex","handleABLoop","playedSeconds","isPlayable","isOutsideLoop","tempoControl","abLoopControl","transportActions","usePlayerControls","trackListIsEmpty","collapsedButtonFn","expandFn","collapsedButtonSx","openTrackEditDialog","closeTrackEditDialog","trackEditDialog","onTrackListChanged","showPlayer","minimizePlayer","fullPlayer","TrackListProvider","handleTrackListChanged","ChordPaper","trackPlayer","ChordPaperScreen","CenteredLayout","PlayBlock","TopMarginBox","PlayLine","lineComponent","labelElement","isControlCommand","navigateBackwardsKeys","navigateForwardKeys","useThrottledNavigate","navigateFn","useThrottledCallback","leading","trailing","useNavigationKeys","navigateForward","navigateBackward","throttledNavigateBackward","throttledNavigateForward","isNavigateBackwardsKey","isNavigateForwardsKey","PagePlayContent","numberOfEmptyColumns","setNumberOfEmptyColumns","numberOfColumnsPerPage","displaySettings","columnMargin","windowWidth","useWindowWidth","columnWidth","snapThreshold","scrollbarHeight","useScrollbarSize","flipPage","nextPos","scrollX","scrollDelta","flipType","distanceFromLastColumn","scrollTo","behavior","viewportHeightWithoutScrollbar","ColumnedPaper","columnGap","columnRuleWidth","columnRuleStyle","columnRuleColor","columns","FullHeightBox","pageBreakInside","emptyColumns","cols","numberOfColumnsInLastPage","body","scrollWidth","nextNumberOfEmptyColumns","UnstyledMoreVertIcon","BasePlayMenu","FabProps","onMouseDownCapture","onExit","FormLabel","UnstyledFormLabel","RadioLabelTypography","DisplaySettingsDialog","numberOfColumns","defaultSettings","settings","setSettings","validateNumber","strValue","convertedNumber","validateInt","convertedInteger","validatedSettings","numberOfColumnsResults","fontSizeResults","columnMarginResults","inputSpecs","field","adornment","validationErrorPropsFn","makeInput","spec","textFieldProps","defaultValue","newSettings","flipTypeToggle","RadioGroup","PagePlayMenu","displaySettingsOpen","setDisplaySettingsOpen","onDisplaySettingsChange","onScrollView","PagePlayView","setDisplaySettings","onEditMode","ThemeProvider","createTheme","fontWeightRegular","ColourBorderContext","getBorderColour","rotateBorderColour","colourStyleMap","blue","ColourBorderProvider","currentColourRef","rotateColour","getColour","colourContext","ColourBorderBox","colourBorderStyle","currentColour","useColourBorders","containerStyle","highlight","useInPageView","useInView","threshold","rootMargin","topMarginPercentage","bottomMarginPercentage","inViewRef","inView","inViewCache","inViewChanged","isInViewFnCallback","ScrollablePlayLine","currentPageInViewRef","isInCurrentViewFnCallback","previousPageInViewRef","isInPreviousViewFnCallback","scrollRef","scrollFnCallback","scrollIntoView","useScrollable","captureRef","colourBorder","ScrollPlayContent","makeViewportLine","viewportLine","isInCurrentView","isInPreviousView","scrollInView","setIsInCurrentView","setIsInPreviousView","setScrollInView","inViewFn","scrollFn","lineRefs","viewportLines","makeViewportLines","nextScrollLine","setNextScrollLine","previousScrollLine","setPreviousScrollLine","findNextScrollLine","latestInViewLine","lineRef","hasSection","findPreviousScrollLine","setCachedSections","maybeNextScrollLine","maybePreviousScrollLine","handleViewportChange","maxWait","makePlayLine","ScrollPlayContentWithColourProvider","ScrollPlayMenu","onPageView","ScrollPlayView","PlayScreen","pageViewPath","withPageView","scrollViewPath","withScrollView","playPath","withPlayMode","contrastText","green","createMuiTheme","components","MuiButton","styleOverrides","snackbarSuccessClassName","MainSong","SongRouter","dirtyRef","_song","shouldSave","handleError","save","saveIfChanged","isOnline","unloadMessageFn","returnValue","isEditMode","location","pathname","useCloud","onSongChange","useSave","unsavedPrompt","propsWithoutInitialSong","originalComponentProps","AppContent","setUser","loadSongPath","routes","from","Tutorial","newUser","App","titleTemplate","defaultTitle","variantSuccess","GlobalKeyListener","Boolean","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.230106d2.chunk.js","sourcesContent":["import { css, cx } from \"@emotion/css\";\nimport { blueGrey } from \"@mui/material/colors\";\nimport React from \"react\";\n\n// for data attribute\nexport const dataSetTabName = \"lyrictabtype\";\nexport const dataAttributeTabName: \"data-lyrictabtype\" = \"data-lyrictabtype\";\n\nexport enum SizedTab {\n    SmallTab,\n    MediumTab,\n    LargeTab,\n}\n\nexport interface LyricTabType {\n    sizedTab: SizedTab;\n    serializedStr: \"\\ue100\" | \"\\ue200\" | \"\\ue400\";\n    [dataAttributeTabName]: \"1\" | \"2\" | \"4\";\n}\n\nexport const allTabTypes: LyricTabType[] = [\n    {\n        sizedTab: SizedTab.SmallTab,\n        serializedStr: \"\\ue100\",\n        [dataAttributeTabName]: \"1\",\n    },\n    {\n        sizedTab: SizedTab.MediumTab,\n        serializedStr: \"\\ue200\",\n        [dataAttributeTabName]: \"2\",\n    },\n    {\n        sizedTab: SizedTab.LargeTab,\n        serializedStr: \"\\ue400\",\n        [dataAttributeTabName]: \"4\",\n    },\n];\n\nexport const findTabType = <T extends keyof LyricTabType>(\n    attrName: T,\n    attr: LyricTabType[T]\n): LyricTabType => {\n    const tabType: LyricTabType | undefined = allTabTypes.find(\n        (tabType: LyricTabType) => tabType[attrName] === attr\n    );\n\n    if (tabType === undefined) {\n        throw new Error(`Unexpectedly can't find tab type by ${attrName}`);\n    }\n\n    return tabType;\n};\n\nexport const isValidTabValue = <T extends keyof LyricTabType>(\n    attrName: T,\n    attr: any\n): attr is LyricTabType[T] => {\n    const tabType: LyricTabType | undefined = allTabTypes.find(\n        (tabType: LyricTabType) => tabType[attrName] === attr\n    );\n\n    return tabType !== undefined;\n};\n\nexport const lyricTabTypeOfDOMNode = (node: Node): SizedTab | null => {\n    if (node instanceof HTMLElement && node.tagName.toLowerCase() === \"span\") {\n        const dataAttribute = node.dataset[dataSetTabName];\n\n        if (isValidTabValue(dataAttributeTabName, dataAttribute)) {\n            const tabType = findTabType(dataAttributeTabName, dataAttribute);\n            return tabType.sizedTab;\n        }\n    }\n\n    return null;\n};\n\nconst sizeBasis = 1.5;\n\nconst makePlainSizeStyle = (size: number) => {\n    return {\n        display: \"inline-block\",\n        width: `${sizeBasis * size}em`,\n    };\n};\n\nconst makeEditingSizeStyle = (size: number) => {\n    const plainStyle = makePlainSizeStyle(size);\n\n    return {\n        backgroundColor: blueGrey[100],\n        \"&:before\": {\n            content: '\"\\\\a0\"',\n        },\n        ...plainStyle,\n    };\n};\n\nconst plainTabClassNames = {\n    [SizedTab.SmallTab]: cx(css(makePlainSizeStyle(1))),\n    [SizedTab.MediumTab]: cx(css(makePlainSizeStyle(2))),\n    [SizedTab.LargeTab]: cx(css(makePlainSizeStyle(4))),\n};\n\nconst editableTabClassNames = {\n    [SizedTab.SmallTab]: cx(css(makeEditingSizeStyle(1))),\n    [SizedTab.MediumTab]: cx(css(makeEditingSizeStyle(2))),\n    [SizedTab.LargeTab]: cx(css(makeEditingSizeStyle(4))),\n};\n\nexport type DomLyricTabFn = (sizeType: SizedTab) => Node;\n\nexport const useDomLyricTab = (): DomLyricTabFn => {\n    return (sizeType: SizedTab): Node => {\n        const node = document.createElement(\"span\");\n        node.className = editableTabClassNames[sizeType];\n        node.contentEditable = \"false\";\n\n        const tabType = findTabType(\"sizedTab\", sizeType);\n        node.dataset[dataSetTabName] = tabType[dataAttributeTabName];\n\n        return node;\n    };\n};\n\ninterface TabProps {\n    type: SizedTab;\n    edit: boolean;\n}\n\nconst Tab: React.FC<TabProps> = (props: TabProps): JSX.Element => {\n    const tabStyles = props.edit ? editableTabClassNames : plainTabClassNames;\n    const tabType = findTabType(\"sizedTab\", props.type);\n\n    return (\n        <span\n            className={tabStyles[props.type]}\n            contentEditable=\"false\"\n            data-lyrictabtype={tabType[dataAttributeTabName]}\n        ></span>\n    );\n};\n\nexport default Tab;\n","export const isWhitespace = (s: string): boolean => {\n    return /^\\s+$/.test(s);\n};\n\nexport const inflatingWhitespace = (): string => {\n    return \"\\u00A0\";\n};\n\nexport const inflateIfEmpty = (value: string) => {\n    if (isWhitespace(value)) {\n        return inflatingWhitespace();\n    }\n\n    return value;\n};\n","import { List } from \"immutable\";\nimport * as iots from \"io-ts\";\nimport { allTabTypes, isValidTabValue } from \"components/lyrics/Tab\";\nimport { isWhitespace } from \"common/Whitespace\";\n\nexport const LyricValidator = iots.type({\n    serializedLyric: iots.string,\n});\n\nexport type LyricValidatedFields = iots.TypeOf<typeof LyricValidator>;\n\nconst tokenizationRegex: RegExp = ((): RegExp => {\n    let regex = \"\";\n    // add the regex for each special tab \"character\"\n    for (const tabType of allTabTypes) {\n        regex += `(${tabType.serializedStr})|`;\n    }\n\n    // match each word (with apostrophe inclusive for words like I'm)\n    // and all other non-words\n    regex += `(\\\\w|')+|[^w]`;\n    regex = `(${regex})`;\n\n    return new RegExp(regex, \"g\");\n})();\n\nexport class Lyric {\n    private readonly serializedLyric: string;\n\n    constructor(serializedLyrics: string) {\n        this.serializedLyric = serializedLyrics;\n    }\n\n    get<T>(transformFn: (serializedLyrics: string) => T): T {\n        return transformFn(this.serializedLyric);\n    }\n\n    tokenize(): List<Lyric> {\n        const matches = this.serializedLyric.match(tokenizationRegex);\n        if (matches === null) {\n            return List();\n        }\n\n        const lyricsArr = matches.map((rawStr: string) => new Lyric(rawStr));\n        return List(lyricsArr);\n    }\n\n    append(other: Lyric | string): Lyric {\n        if (typeof other === \"string\") {\n            return new Lyric(this.serializedLyric + other);\n        } else {\n            return new Lyric(this.serializedLyric + other.serializedLyric);\n        }\n    }\n\n    isEmpty(): boolean {\n        return this.serializedLyric === \"\";\n    }\n\n    isEntirelySpaceOrTab(): boolean {\n        return (\n            this.isEntirelySpace() ||\n            isValidTabValue(\"serializedStr\", this.serializedLyric)\n        );\n    }\n\n    isEntirelySpace(): boolean {\n        return isWhitespace(this.serializedLyric);\n    }\n\n    isEqual(other: Lyric): boolean {\n        return this.serializedLyric === other.serializedLyric;\n    }\n\n    static join(arr: List<Lyric>, joinChar: string): Lyric {\n        const rawLyricStrs: List<string> = arr.map((container: Lyric) => {\n            return container.serializedLyric;\n        });\n\n        return new Lyric(rawLyricStrs.join(joinChar));\n    }\n\n    static fromValidatedFields(validatedFields: LyricValidatedFields): Lyric {\n        return new Lyric(validatedFields.serializedLyric);\n    }\n}\n","import { Either, isLeft, left, parseJSON, right } from \"fp-ts/lib/Either\";\nimport * as iots from \"io-ts\";\nimport lodash from \"lodash\";\nimport shortid from \"shortid\";\nimport { IDable } from \"common/ChordModel/Collection\";\nimport { Lyric, LyricValidator } from \"common/ChordModel/Lyric\";\nimport { List, Record } from \"immutable\";\n\ninterface ChordBlockConstructorParams {\n    chord: string;\n    lyric: Lyric;\n}\n\nexport const ChordBlockValidator = iots.type({\n    chord: iots.string,\n    lyric: LyricValidator,\n    type: iots.literal(\"ChordBlock\"),\n});\n\nexport type ChordBlockValidatedFields = iots.TypeOf<typeof ChordBlockValidator>;\n\ntype RecordType = {\n    id: string;\n    chord: string;\n    lyric: Lyric;\n    type: \"ChordBlock\";\n};\n\nconst DefaultRecord: RecordType = {\n    id: \"\",\n    chord: \"\",\n    lyric: new Lyric(\"\"),\n    type: \"ChordBlock\" as \"ChordBlock\",\n};\n\nconst RecordConstructor = Record(DefaultRecord);\ntype ChordBlockRecord = ReturnType<typeof RecordConstructor>;\n\nexport class ChordBlock implements IDable<ChordBlock> {\n    readonly record: ChordBlockRecord;\n\n    constructor(params: ChordBlockConstructorParams | ChordBlockRecord) {\n        if (ChordBlock.isChordBlockRecord(params)) {\n            this.record = params;\n            return;\n        }\n\n        let { chord, lyric } = params;\n\n        this.record = new RecordConstructor({\n            id: shortid.generate(),\n            chord: chord,\n            lyric: lyric,\n            type: \"ChordBlock\",\n        });\n    }\n\n    static isChordBlockRecord(\n        params: ChordBlockConstructorParams | ChordBlockRecord\n    ): params is ChordBlockRecord {\n        return Record.isRecord(params);\n    }\n\n    get id(): string {\n        return this.record.id;\n    }\n\n    get lyric(): Lyric {\n        return this.record.lyric;\n    }\n\n    get chord(): string {\n        return this.record.chord;\n    }\n\n    get type(): \"ChordBlock\" {\n        return this.record.type;\n    }\n\n    private new(maybeNew: ChordBlockRecord): ChordBlock {\n        if (maybeNew === this.record) {\n            return this;\n        }\n\n        return new ChordBlock(maybeNew);\n    }\n\n    set<K extends keyof RecordType>(key: K, value: RecordType[K]): ChordBlock {\n        const newRecord = this.record.set(key, value);\n        return this.new(newRecord);\n    }\n\n    update<K extends keyof RecordType>(\n        key: K,\n        updater: (value: RecordType[K]) => RecordType[K]\n    ): ChordBlock {\n        const newRecord = this.record.update(key, updater);\n        return this.new(newRecord);\n    }\n\n    toJSON(): object {\n        const plainObject = this.record.toJS();\n        return lodash.omit(plainObject, \"id\");\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordBlockValidatedFields\n    ): ChordBlock {\n        const unionLyric = validatedFields.lyric;\n        const serializedLyric = Lyric.fromValidatedFields(unionLyric);\n\n        return new ChordBlock({\n            chord: validatedFields.chord,\n            lyric: serializedLyric,\n        });\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordBlock> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordBlockValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Block object\"));\n        }\n\n        const unionLyric = validationResult.right.lyric;\n        const serializedLyric = Lyric.fromValidatedFields(unionLyric);\n\n        return right(\n            new ChordBlock({\n                chord: validationResult.right.chord,\n                lyric: serializedLyric,\n            })\n        );\n    }\n\n    get lyricTokens(): List<Lyric> {\n        return this.lyric.tokenize();\n    }\n\n    // splits a block, and returns the block before\n    // e.g.\n    // {id:\"A\", chord: \"B7\", lyric:\"my dear we're\"}\n    // splitBlock(4) =>\n    // {id:\"B\", chord: \"B7\", lyric:\"my dear \"}\n    // {id:\"A\", chord: \"\", \"we're\"}\n    splitByTokenIndex(splitIndex: number): [ChordBlock, ChordBlock] {\n        if (splitIndex === 0) {\n            throw new Error(\"Split index can't be zero\");\n        }\n\n        const tokens = this.lyricTokens;\n        const prevBlockLyricTokens = tokens.slice(0, splitIndex);\n        const thisBlockLyricTokens = tokens.slice(splitIndex);\n\n        const prevBlock: ChordBlock = new ChordBlock({\n            chord: this.chord,\n            lyric: Lyric.join(prevBlockLyricTokens, \"\"),\n        });\n\n        const newCurrBlock: ChordBlock = this.set(\"chord\", \"\").set(\n            \"lyric\",\n            Lyric.join(thisBlockLyricTokens, \"\")\n        );\n\n        return [prevBlock, newCurrBlock];\n    }\n\n    splitByCharIndex(splitIndex: number): [ChordBlock, ChordBlock] {\n        if (splitIndex === 0) {\n            return [new ChordBlock({ chord: \"\", lyric: new Lyric(\"\") }), this];\n        }\n\n        const lyricString: string = this.lyric.get((s: string) => s);\n        const prevBlockLyrics: Lyric = new Lyric(\n            lyricString.slice(0, splitIndex)\n        );\n        const thisBlockLyrics: Lyric = new Lyric(lyricString.slice(splitIndex));\n\n        const prevBlock: ChordBlock = new ChordBlock({\n            chord: this.chord,\n            lyric: prevBlockLyrics,\n        });\n\n        const newCurrBlock = this.set(\"chord\", \"\").set(\n            \"lyric\",\n            thisBlockLyrics\n        );\n\n        return [prevBlock, newCurrBlock];\n    }\n\n    contentEquals(other: ChordBlock): boolean {\n        return this.chord === other.chord && this.lyric.isEqual(other.lyric);\n    }\n\n    isEmpty(): boolean {\n        return this.chord === \"\" && this.lyric.isEmpty();\n    }\n\n    lyricLength(): number {\n        const lyricString = this.lyric.get((s: string) => s);\n        return lyricString.length;\n    }\n}\n","import { List } from \"immutable\";\n\n// use the name of the class the ID is describing for T\n// e.g. IDable<Person>\nexport interface IDable<T extends IDable<T>> {\n    readonly id: string;\n    readonly type: T[\"type\"];\n}\n\nexport abstract class CollectionMethods<\n    B extends CollectionMethods<B, T>,\n    T extends IDable<T>\n> {\n    protected abstract get elements(): Collection<T>;\n\n    abstract updateCollection(\n        updater: (collection: Collection<T>) => Collection<T>\n    ): B;\n\n    getElement(\n        ...params: Parameters<Collection<T>[\"get\"]>\n    ): ReturnType<Collection<T>[\"get\"]> {\n        return this.elements.get(...params);\n    }\n\n    getElementAtIndex(\n        ...params: Parameters<Collection<T>[\"getAtIndex\"]>\n    ): ReturnType<Collection<T>[\"getAtIndex\"]> {\n        return this.elements.getAtIndex(...params);\n    }\n\n    setElement(...params: Parameters<Collection<T>[\"set\"]>): B {\n        return this.updateCollection((collection) => collection.set(...params));\n    }\n\n    replaceElement(...params: Parameters<Collection<T>[\"replace\"]>): B {\n        return this.updateCollection((collection) =>\n            collection.replace(...params)\n        );\n    }\n\n    removeElement(...params: Parameters<Collection<T>[\"remove\"]>): B {\n        return this.updateCollection((collection) =>\n            collection.remove(...params)\n        );\n    }\n\n    removeMultipleElements(\n        ...params: Parameters<Collection<T>[\"removeMultiple\"]>\n    ): B {\n        return this.updateCollection((collection) =>\n            collection.removeMultiple(...params)\n        );\n    }\n\n    updateElement(...params: Parameters<Collection<T>[\"update\"]>): B {\n        return this.updateCollection((collection) =>\n            collection.update(...params)\n        );\n    }\n\n    updateAllElements(...params: Parameters<Collection<T>[\"updateAll\"]>): B {\n        return this.updateCollection((collection) =>\n            collection.updateAll(...params)\n        );\n    }\n\n    addBeginning(...params: Parameters<Collection<T>[\"addBeginning\"]>): B {\n        return this.updateCollection((collection) =>\n            collection.addBeginning(...params)\n        );\n    }\n\n    addAfter(...params: Parameters<Collection<T>[\"addAfter\"]>): B {\n        return this.updateCollection((collection) =>\n            collection.addAfter(...params)\n        );\n    }\n}\n\nexport class Collection<T extends IDable<T>> {\n    readonly list: List<T>;\n\n    constructor(elements?: T[] | List<T>) {\n        if (elements === undefined) {\n            this.list = List();\n            return;\n        }\n\n        if (List.isList(elements)) {\n            this.list = elements;\n        } else {\n            this.list = List.of(...elements);\n        }\n    }\n\n    toJSON(): object {\n        return this.list.toJSON();\n    }\n\n    private new(maybeNew: List<T>): Collection<T> {\n        if (maybeNew === this.list) {\n            return this;\n        }\n\n        return new Collection(maybeNew);\n    }\n\n    get length(): number {\n        return this.list.size;\n    }\n\n    toArray(): Array<T> {\n        return this.list.toArray();\n    }\n\n    transform(transformer: (list: List<T>) => List<T>): Collection<T> {\n        const newList = transformer(this.list);\n        return this.new(newList);\n    }\n\n    static indexOf<S extends IDable<S>>(list: List<S>, id: string): number {\n        const index = list.findIndex((elem: S) => elem.id === id);\n\n        if (index < 0) {\n            throw new Error(\"Can't find element inside collection\");\n        }\n\n        return index;\n    }\n\n    indexOf(id: string): number {\n        return Collection.indexOf(this.list, id);\n    }\n\n    multiIndexOf(ids: string[]): number[] {\n        return ids.map(this.indexOf);\n    }\n\n    set(...params: Parameters<List<T>[\"set\"]>): Collection<T> {\n        const newList = this.list.set(...params);\n        return this.new(newList);\n    }\n\n    update(index: number, updater: (value: T) => T): Collection<T> {\n        const wrappedUpdater = (value: T | undefined): T => {\n            if (value === undefined) {\n                throw new Error(\"Can't have undefined indices\");\n            }\n\n            return updater(value);\n        };\n\n        const newList = this.list.update(index, wrappedUpdater);\n        return this.new(newList);\n    }\n\n    updateAll(updater: (value: T, index: number) => T): Collection<T> {\n        const wrappedUpdater = (value: T | undefined, index: number): T => {\n            if (value === undefined) {\n                throw new Error(\"Can't have undefined indices\");\n            }\n\n            return updater(value, index);\n        };\n\n        const newList = this.list.withMutations((list) => {\n            for (let i = 0; i < list.size; i++) {\n                list.update(\n                    i,\n                    (value: T | undefined): T => wrappedUpdater(value, i)\n                );\n            }\n        });\n\n        return this.new(newList);\n    }\n\n    // adds a element after the specified id\n    addAfter(idable: IDable<T>, ...newElem: T[]): Collection<T> {\n        const indexOfBefore = this.indexOf(idable.id);\n        const newList = this.list.splice(indexOfBefore + 1, 0, ...newElem);\n        return this.new(newList);\n    }\n\n    addBeginning(...newElem: T[]): Collection<T> {\n        const newList = this.list.splice(0, 0, ...newElem);\n        return this.new(newList);\n    }\n\n    remove(idable: IDable<T>): Collection<T> {\n        const index = this.indexOf(idable.id);\n        const newList = this.list.splice(index, 1);\n        return this.new(newList);\n    }\n\n    removeMultiple(idables: IDable<T>[]): Collection<T> {\n        let list = this.list;\n\n        idables.forEach((idable: IDable<T>) => {\n            const index = Collection.indexOf(list, idable.id);\n            list = list.delete(index);\n        });\n\n        return this.new(list);\n    }\n\n    splice(\n        idable: IDable<T>,\n        removeCount: number,\n        ...newItems: T[]\n    ): Collection<T> {\n        const index = this.indexOf(idable.id);\n        const newList = this.list.splice(index, removeCount, ...newItems);\n        return this.new(newList);\n    }\n\n    replace(idable: IDable<T>, replacer: (item: T) => T): Collection<T> {\n        const index = this.indexOf(idable.id);\n        const updater = (item: T | undefined): T => {\n            if (item === undefined) {\n                throw new Error(\n                    \"Item can't be undefined because index is valid\"\n                );\n            }\n\n            return replacer(item);\n        };\n\n        const newList = this.list.update(index, updater);\n        return this.new(newList);\n    }\n\n    forEach(...params: Parameters<List<T>[\"forEach\"]>): void {\n        this.list.forEach(...params);\n    }\n\n    get(idable: IDable<T>): T {\n        const index = this.indexOf(idable.id);\n        const item = this.list.get(index);\n        if (item === undefined) {\n            throw new Error(\"Index found but item not in list\");\n        }\n\n        return item;\n    }\n\n    getAtIndex(index: number): T {\n        const item = this.list.get(index);\n        if (item === undefined) {\n            throw new Error(\"Item not in list\");\n        }\n\n        return item;\n    }\n}\n","import { DiffMatchPatch, DiffOperation } from \"diff-match-patch-typescript\";\nimport { findTabType, SizedTab } from \"components/lyrics/Tab\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { Collection } from \"common/ChordModel/Collection\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\n\nconst differ: DiffMatchPatch = (() => {\n    const dmp = new DiffMatchPatch();\n    dmp.diffTimeout = 0;\n    dmp.matchThreshold = 0;\n    return dmp;\n})();\n\n// we know what we're doing here - the raw serialized string is to be compared\nconst rawStringGetter = (lyrics: string) => lyrics;\n\nclass ChordLineIterator {\n    private chordLine: ChordLine;\n    private currBlockIndex: number;\n    private currCharIndex: number;\n    private blockBuffer: string[];\n    private prependLyrics: string;\n\n    constructor(chordLine: ChordLine) {\n        this.chordLine = chordLine;\n\n        this.currBlockIndex = 0;\n        this.currCharIndex = 0;\n\n        this.blockBuffer = chordLine.chordBlocks.list.map(() => \"\").toArray();\n        this.prependLyrics = \"\";\n    }\n\n    private atBlockBoundary(): boolean {\n        return this.currCharIndex === 0;\n    }\n\n    private currentBlock(): ChordBlock {\n        return this.chordLine.getElementAtIndex(this.currBlockIndex);\n    }\n\n    private currentRawLyrics(): string {\n        return this.currentBlock().lyric.get(rawStringGetter);\n    }\n\n    private currentChar(): string {\n        return this.currentRawLyrics().charAt(this.currCharIndex);\n    }\n\n    private nextChar(): void {\n        this.currCharIndex += 1;\n\n        if (this.currCharIndex >= this.currentRawLyrics().length) {\n            this.currBlockIndex += 1;\n            this.currCharIndex = 0;\n        }\n    }\n\n    skip(skipChar: string): void {\n        if (this.currentChar() !== skipChar) {\n            throw new Error(\"Mismatched characters when skipping\");\n        }\n\n        this.blockBuffer[this.currBlockIndex] += skipChar;\n\n        this.nextChar();\n    }\n\n    insert(insertChar: string): void {\n        if (!this.atBlockBoundary()) {\n            this.blockBuffer[this.currBlockIndex] += insertChar;\n        } else {\n            // bias towards inserting at the end of the previous block if between two blocks\n            // since chords are aligned to the beginning of the block, we don't want to shift the lyrics\n            // inside a block unnecessarily\n            const prevBlockIndex = this.currBlockIndex - 1;\n            if (prevBlockIndex >= 0) {\n                this.blockBuffer[prevBlockIndex] += insertChar;\n            } else {\n                this.prependLyrics += insertChar;\n            }\n        }\n    }\n\n    delete(deleteChar: string): void {\n        if (this.currentChar() !== deleteChar) {\n            throw new Error(\"Mismatched characters when deleting\");\n        }\n\n        this.nextChar();\n    }\n\n    finish(): ChordLine {\n        this.chordLine = this.chordLine.updateAllElements((block, index) => {\n            const lyric = new Lyric(this.blockBuffer[index]);\n            return block.set(\"lyric\", lyric);\n        });\n\n        if (this.prependLyrics !== \"\") {\n            this.chordLine = this.chordLine.addBeginning(\n                new ChordBlock({\n                    chord: \"\",\n                    lyric: new Lyric(this.prependLyrics),\n                })\n            );\n        }\n\n        return this.chordLine.normalizeBlocks();\n    }\n}\n\nconst removeOrphanedBlocksWithNoChords = (chordLine: ChordLine): ChordLine => {\n    const newBlocks: ChordBlock[] = [];\n\n    for (const block of chordLine.chordBlocks.toArray()) {\n        if (!block.lyric.isEmpty() || block.chord !== \"\") {\n            newBlocks.push(block);\n        }\n    }\n\n    return chordLine.updateCollection(() => new Collection(newBlocks));\n};\n\nconst orphanTab: string = findTabType(\n    \"sizedTab\",\n    SizedTab.SmallTab\n).serializedStr;\n\nconst addTabsToOrphanedBlocks = (chordLine: ChordLine): ChordLine => {\n    const orphanTabBlockIfEmpty = (block: ChordBlock): ChordBlock => {\n        if (!block.lyric.isEmpty()) {\n            return block;\n        }\n\n        return block.set(\"lyric\", new Lyric(orphanTab));\n    };\n\n    return chordLine.updateAllElements(orphanTabBlockIfEmpty);\n};\n\nexport const replaceChordLineLyrics = (\n    chordLine: ChordLine,\n    newLyrics: Lyric\n): ChordLine => {\n    const currRawLyrics = chordLine.lyrics.get(rawStringGetter);\n    const newRawLyrics = newLyrics.get(rawStringGetter);\n\n    const diffs = differ.diff_main(currRawLyrics, newRawLyrics);\n    differ.diff_cleanupSemanticLossless(diffs);\n\n    const iterator = new ChordLineIterator(chordLine);\n\n    for (const diff of diffs) {\n        const diffOperation = diff[0];\n        for (const diffChar of diff[1]) {\n            switch (diffOperation) {\n                case DiffOperation.DIFF_EQUAL: {\n                    iterator.skip(diffChar);\n                    break;\n                }\n                case DiffOperation.DIFF_INSERT: {\n                    iterator.insert(diffChar);\n                    break;\n                }\n                case DiffOperation.DIFF_DELETE: {\n                    iterator.delete(diffChar);\n                    break;\n                }\n            }\n        }\n    }\n\n    chordLine = iterator.finish();\n\n    chordLine = removeOrphanedBlocksWithNoChords(chordLine);\n    chordLine = addTabsToOrphanedBlocks(chordLine);\n    return chordLine;\n};\n","import { Either, isLeft, left, parseJSON, right } from \"fp-ts/lib/Either\";\nimport * as iots from \"io-ts\";\nimport lodash from \"lodash\";\nimport shortid from \"shortid\";\nimport {\n    ChordBlock,\n    ChordBlockValidatedFields,\n    ChordBlockValidator,\n} from \"common/ChordModel/ChordBlock\";\nimport { replaceChordLineLyrics } from \"common/ChordModel/ChordLinePatcher\";\nimport {\n    Collection,\n    CollectionMethods,\n    IDable,\n} from \"common/ChordModel/Collection\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { List, Record } from \"immutable\";\n\nconst requiredFields = iots.type({\n    elements: iots.array(ChordBlockValidator),\n    type: iots.literal(\"ChordLine\"),\n});\n\nconst LabelSectionValidator = iots.type({\n    type: iots.literal(\"label\"),\n    name: iots.string,\n});\n\nconst TimestampedSectionValidator = iots.type({\n    type: iots.literal(\"time\"),\n    name: iots.string,\n    time: iots.number,\n});\n\nconst SectionValidator = iots.union([\n    LabelSectionValidator,\n    TimestampedSectionValidator,\n]);\n\nconst optionalFields = iots.partial({\n    label: iots.string,\n    section: SectionValidator,\n});\n\nexport const ChordLineValidator = iots.intersection([\n    requiredFields,\n    optionalFields,\n]);\n\ntype LineIDForSection = { lineID: string };\n\nexport type LabelSection = iots.TypeOf<typeof LabelSectionValidator> &\n    LineIDForSection;\n\nexport type TimestampedSection = iots.TypeOf<\n    typeof TimestampedSectionValidator\n> &\n    LineIDForSection;\n\nexport type Section = iots.TypeOf<typeof SectionValidator>;\nexport type ChordLineValidatedFields = iots.TypeOf<typeof ChordLineValidator>;\n\ntype RecordType = {\n    id: string;\n    section?: Section;\n    elements: Collection<ChordBlock>;\n    type: \"ChordLine\";\n};\n\nconst DefaultRecord: RecordType = {\n    id: \"\",\n    section: undefined,\n    elements: new Collection<ChordBlock>(),\n    type: \"ChordLine\",\n};\n\nconst RecordConstructor = Record(DefaultRecord);\ntype ChordLineRecord = ReturnType<typeof RecordConstructor>;\n\ntype ConstructorParams = {\n    blocks?: Collection<ChordBlock> | ChordBlock[];\n    section?: Section;\n};\n\nexport class ChordLine\n    extends CollectionMethods<ChordLine, ChordBlock>\n    implements IDable<ChordLine>\n{\n    readonly record: ChordLineRecord;\n\n    constructor(params: ConstructorParams | ChordLineRecord) {\n        super();\n\n        if (ChordLine.isChordLineRecord(params)) {\n            this.record = params as ChordLineRecord;\n            return;\n        }\n\n        let elements: Collection<ChordBlock>;\n\n        if (params.blocks === undefined) {\n            elements = new Collection([\n                new ChordBlock({ chord: \"\", lyric: new Lyric(\"\") }),\n            ]);\n        } else {\n            if (params.blocks instanceof Collection) {\n                elements = params.blocks;\n            } else {\n                elements = new Collection(params.blocks);\n            }\n        }\n\n        this.record = RecordConstructor({\n            id: shortid.generate(),\n            type: \"ChordLine\",\n            section: params.section,\n            elements: elements,\n        });\n    }\n\n    static isChordLineRecord(\n        params: ConstructorParams | ChordLineRecord\n    ): params is ChordLineRecord {\n        return Record.isRecord(params);\n    }\n\n    toJSON(): object {\n        const plainObject = this.record.toJSON();\n        return lodash.omit(plainObject, \"id\");\n    }\n\n    // for copying purposes, the section is usually not\n    // intended to be pasted elsewhere\n    forCopying(): ChordLine {\n        return this.set(\"section\", undefined);\n    }\n\n    private new(maybeNew: ChordLineRecord): ChordLine {\n        if (maybeNew === this.record) {\n            return this;\n        }\n\n        return new ChordLine(maybeNew);\n    }\n\n    get id(): string {\n        return this.record.id;\n    }\n\n    get type(): \"ChordLine\" {\n        return this.record.type;\n    }\n\n    get section(): Section | undefined {\n        return this.record.section;\n    }\n\n    protected get elements(): Collection<ChordBlock> {\n        return this.record.elements;\n    }\n\n    updateCollection(\n        updater: (collection: Collection<ChordBlock>) => Collection<ChordBlock>\n    ): ChordLine {\n        return this.update(\"elements\", updater);\n    }\n\n    set<K extends keyof RecordType>(key: K, value: RecordType[K]): ChordLine {\n        const newRecord = this.record.set(key, value);\n        return this.new(newRecord);\n    }\n\n    update<K extends keyof RecordType>(\n        key: K,\n        updater: (value: RecordType[K]) => RecordType[K]\n    ): ChordLine {\n        const newRecord = this.record.update(key, updater);\n        return this.new(newRecord);\n    }\n\n    static sectionFromLabel(label?: string): Section | undefined {\n        if (label === undefined) {\n            return undefined;\n        }\n\n        return {\n            type: \"label\",\n            name: label,\n        };\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordLineValidatedFields\n    ): ChordLine {\n        const chordBlockElems: ChordBlock[] = validatedFields.elements.map(\n            (value: ChordBlockValidatedFields) => {\n                return ChordBlock.fromValidatedFields(value);\n            }\n        );\n\n        let section: Section | undefined = validatedFields.section;\n        if (section === undefined) {\n            section = this.sectionFromLabel(validatedFields.label);\n        }\n\n        return new ChordLine({\n            blocks: new Collection(chordBlockElems),\n            section: section,\n        });\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordLine> {\n        const result: Either<Error, unknown> = parseJSON(\n            jsonStr,\n            () => new Error(\"Failed to parse json string\")\n        );\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const jsonObj = result.right;\n        const validationResult = ChordLineValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Line object\"));\n        }\n\n        return right(this.fromValidatedFields(validationResult.right));\n    }\n\n    static fromLyrics(lyrics: Lyric): ChordLine {\n        const block = new ChordBlock({\n            chord: \"\",\n            lyric: lyrics,\n        });\n\n        return new ChordLine({\n            blocks: new Collection([block]),\n        });\n    }\n\n    get chordBlocks(): Collection<ChordBlock> {\n        return this.elements;\n    }\n\n    get lyrics(): Lyric {\n        const lyricTokens: List<Lyric> = this.chordBlocks.list.map(\n            (chordBlock: ChordBlock): Lyric => chordBlock.lyric\n        );\n\n        return Lyric.join(lyricTokens, \"\");\n    }\n\n    replaceLyrics(newLyrics: Lyric): ChordLine {\n        if (this.lyrics.isEqual(newLyrics)) {\n            return this;\n        }\n\n        return replaceChordLineLyrics(this, newLyrics);\n    }\n\n    setChord(idable: IDable<ChordBlock>, newChord: string): ChordLine {\n        const newChordLine = this.replaceElement(idable, (block) => {\n            return block.set(\"chord\", newChord);\n        });\n\n        return newChordLine.normalizeBlocks();\n    }\n\n    removeSectionName(): [ChordLine, boolean] {\n        if (this.section === undefined) {\n            return [this, false];\n        }\n\n        return [this.set(\"section\", undefined), true];\n    }\n\n    setSectionName(newName: string): [ChordLine, boolean] {\n        if (newName === \"\") {\n            return this.removeSectionName();\n        }\n\n        if (this.section === undefined) {\n            return [\n                this.set(\"section\", {\n                    type: \"label\",\n                    name: newName,\n                }),\n                true,\n            ];\n        }\n\n        const withUpdatedSection = this.update(\n            \"section\",\n            (section: Section | undefined): Section => {\n                if (section === undefined) {\n                    throw new Error(\"Impossible\");\n                }\n\n                return {\n                    ...section,\n                    name: newName,\n                };\n            }\n        );\n\n        return [withUpdatedSection, true];\n    }\n\n    removeSectionTime(): [ChordLine, boolean] {\n        if (this.section === undefined) {\n            return [this, false];\n        }\n\n        return [\n            this.set(\"section\", {\n                type: \"label\",\n                name: this.section.name,\n            }),\n            true,\n        ];\n    }\n\n    setSectionTime(newTime: number | null): [ChordLine, boolean] {\n        if (newTime === null) {\n            return this.removeSectionTime();\n        }\n\n        const name = this.section !== undefined ? this.section.name : \"\";\n\n        return [\n            this.set(\"section\", {\n                type: \"time\",\n                name: name,\n                time: newTime,\n            }),\n            true,\n        ];\n    }\n\n    splitBlock(idable: IDable<ChordBlock>, splitIndex: number): ChordLine {\n        const block = this.elements.get(idable);\n\n        const [newPrevBlock, newCurrBlock] =\n            block.splitByTokenIndex(splitIndex);\n\n        return this.updateCollection((elements) => {\n            return elements.splice(idable, 1, newPrevBlock, newCurrBlock);\n        });\n    }\n\n    splitByCharIndex(splitIndex: number): [ChordLine, ChordLine] {\n        const splitAtBeginning = splitIndex === 0;\n        if (splitAtBeginning) {\n            const nextLine = new ChordLine({\n                blocks: this.chordBlocks,\n            });\n\n            const newCurrLine = this.updateCollection(\n                () =>\n                    new Collection([\n                        new ChordBlock({ chord: \"\", lyric: new Lyric(\"\") }),\n                    ])\n            );\n\n            return [newCurrLine, nextLine];\n        }\n\n        const totalLyricLength = this.lyrics.get((s: string) => s).length;\n        const splitAtEnd = splitIndex >= totalLyricLength;\n        if (splitAtEnd) {\n            return [this, new ChordLine({})];\n        }\n\n        // split in the middle otherwise\n\n        const [splitCharIndex, blockIndex] = (() => {\n            let remainingChars = splitIndex;\n\n            for (let i = 0; i < this.elements.length; i++) {\n                const block = this.elements.getAtIndex(i);\n                const lyricLength = block.lyricLength();\n\n                if (remainingChars - lyricLength >= 0) {\n                    remainingChars -= lyricLength;\n                    continue;\n                }\n\n                return [remainingChars, i];\n            }\n\n            throw new Error(\n                \"Unexpected: shouldn't have walked this many characters\"\n            );\n        })();\n\n        let blocksOfCurrLine = this.elements.transform((list) =>\n            list.slice(0, blockIndex)\n        );\n        let blocksOfNextLine = new Collection<ChordBlock>();\n        if (splitCharIndex > 0) {\n            const block = this.elements.getAtIndex(blockIndex);\n\n            const [firstHalfBlock, secondHalfBlock] =\n                block.splitByCharIndex(splitCharIndex);\n\n            blocksOfCurrLine = blocksOfCurrLine.transform((list) =>\n                list.push(firstHalfBlock)\n            );\n            blocksOfNextLine = blocksOfNextLine.transform((list) =>\n                list.push(secondHalfBlock)\n            );\n\n            const remainingBlocks = this.elements.transform((list) =>\n                list.slice(blockIndex + 1)\n            );\n            blocksOfNextLine = blocksOfNextLine.transform((list) =>\n                list.push(...remainingBlocks.toArray())\n            );\n        } else {\n            blocksOfNextLine = this.elements.transform((list) =>\n                list.slice(blockIndex)\n            );\n        }\n\n        const newCurrLine = this.set(\"elements\", blocksOfCurrLine);\n        const nextLine = new ChordLine({ blocks: blocksOfNextLine });\n\n        return [newCurrLine, nextLine];\n    }\n\n    // passes through every block to ensure that blocks without chords exist (except for the first)\n    normalizeBlocks(): ChordLine {\n        const newBlocks: ChordBlock[] = [];\n\n        this.elements.forEach((block: ChordBlock) => {\n            const hasLastBlock = newBlocks.length > 0;\n            const shouldMergeWithLastBlock = block.chord === \"\" && hasLastBlock;\n\n            if (shouldMergeWithLastBlock) {\n                const lastIndex = newBlocks.length - 1;\n                newBlocks[lastIndex] = newBlocks[lastIndex].update(\n                    \"lyric\",\n                    (lyric: Lyric) => {\n                        return lyric.append(block.lyric);\n                    }\n                );\n            } else {\n                newBlocks.push(block);\n            }\n        });\n\n        // avoid rejiggering the data if it's a no-op\n        if (newBlocks.length === this.elements.length) {\n            return this;\n        }\n\n        return this.set(\"elements\", new Collection(newBlocks));\n    }\n\n    contentEquals(other: ChordLine): boolean {\n        if (this.chordBlocks.length !== other.chordBlocks.length) {\n            return false;\n        }\n\n        if (!lodash.isEqual(this.section, other.section)) {\n            return false;\n        }\n\n        let blocksAreEqual = true;\n        this.chordBlocks.forEach(\n            (block: ChordBlock, index: number): void | false => {\n                const otherBlock = other.chordBlocks.getAtIndex(index);\n                if (!block.contentEquals(otherBlock)) {\n                    blocksAreEqual = false;\n                    return false;\n                }\n            }\n        );\n\n        return blocksAreEqual;\n    }\n\n    isEmpty(): boolean {\n        if (this.chordBlocks.length > 1) {\n            return false;\n        }\n\n        if (this.chordBlocks.length === 0) {\n            return true;\n        }\n\n        return this.chordBlocks.getAtIndex(0).isEmpty();\n    }\n\n    hasSection(): boolean {\n        return this.section !== undefined;\n    }\n}\n","type ValueOf<T> = T[keyof T];\n\ntype Dest<T, U> = {\n    [P in keyof T]: U;\n};\n\nexport function mapObjectKey<T extends object, U>(\n    source: T,\n    transformFn: (key: keyof T) => U\n): {\n    [P in keyof T]: U; // ugly to inline this, but this allows the type hints in VS Code to be more explicit\n} {\n    return mapObject(\n        source,\n        (_value: ValueOf<T>, key: keyof T): U => transformFn(key)\n    );\n}\nexport function mapObject<T extends object, U>(\n    source: T,\n    transformFn: (value: ValueOf<T>, key: keyof T) => U\n): {\n    [P in keyof T]: U; // ugly to inline this, but this allows the type hints in VS Code to be more explicit\n} {\n    const dest = {} as Dest<T, U>;\n    for (const key in source) {\n        if (source.hasOwnProperty(key)) {\n            const oldValue = source[key];\n            dest[key] = transformFn(oldValue, key);\n        }\n    }\n    return dest;\n}\n","export const assertFound = (index: number) => {\n    if (index === -1) {\n        throw new Error(\"Thing that should be found is not found\");\n    }\n};\n","// all possible distances in semitones for any interval or any 2 notes (modulo 12)\nexport type Semitone = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;\n\n// 0 indexed degrees\n// all possible distances in numbers for any interval\n// e.g. a 7th has a distance of 6 (7 - 1)\n// this also doubles as the note name difference\n// as a \"second\", e.g. C to D, necessarily implies that the lettering must change\nexport type Degree = 0 | 1 | 2 | 3 | 4 | 5 | 6;\n\nconst checkWholeNumber = (val: number) => {\n    if (val % 1 !== 0) {\n        throw new Error(\"input isn't a whole number!\");\n    }\n};\n\nconst modulo = (val: number, base: number): number => {\n    return ((val % base) + base) % base;\n};\n\nexport const asSemitone = (val: number): Semitone => {\n    checkWholeNumber(val);\n    return modulo(val, 12) as Semitone;\n};\n\nexport const asDegree = (val: number): Degree => {\n    checkWholeNumber(val);\n    return modulo(val, 7) as Degree;\n};\n","import { mapObjectKey } from \"common/mapObject\";\nimport { assertFound } from \"common/music/foundation/assert\";\nimport { asDegree, asSemitone, Degree, Semitone } from \"common/music/foundation/Distance\";\n\ntype NaturalNote = \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"A\" | \"B\";\n\ntype FlatNote = `${NaturalNote}b`;\ntype SharpNote = `${NaturalNote}#`;\nexport type Note = NaturalNote | FlatNote | SharpNote;\nexport type NoteLetter = NaturalNote;\n\nexport const AllNotes: Record<Note, undefined> = {\n    C: undefined,\n    Cb: undefined,\n    \"C#\": undefined,\n    D: undefined,\n    Db: undefined,\n    \"D#\": undefined,\n    E: undefined,\n    Eb: undefined,\n    \"E#\": undefined,\n    F: undefined,\n    Fb: undefined,\n    \"F#\": undefined,\n    G: undefined,\n    Gb: undefined,\n    \"G#\": undefined,\n    A: undefined,\n    Ab: undefined,\n    \"A#\": undefined,\n    B: undefined,\n    Bb: undefined,\n    \"B#\": undefined,\n};\n\nexport const AllNoteLetters: NoteLetter[] = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n\nexport const ChromaticNotes: Note[][] = [\n    [\"C\", \"B#\"],\n    [\"Db\", \"C#\"],\n    [\"D\"],\n    [\"Eb\", \"D#\"],\n    [\"E\", \"Fb\"],\n    [\"F\", \"E#\"],\n    [\"Gb\", \"F#\"],\n    [\"G\"],\n    [\"Ab\", \"G#\"],\n    [\"A\"],\n    [\"Bb\", \"A#\"],\n    [\"B\", \"Cb\"],\n];\n\nexport const getNoteLetter = (note: Note): NoteLetter => {\n    const letter = note.charAt(0) as NoteLetter;\n    if (!AllNoteLetters.includes(letter)) {\n        throw new Error(\"Note letter reduction function failed\");\n    }\n\n    return letter;\n};\n\nexport class NoteUtility {\n    private note: Note;\n    private chromaticNoteIndex: number;\n    private noteLetter: NoteLetter;\n    private noteLetterIndex: number;\n\n    constructor(note: Note) {\n        this.note = note;\n        const chromaticNoteIndex = ChromaticNotes.findIndex(\n            (enharmonics: Note[]) => enharmonics.includes(this.note)\n        );\n        assertFound(chromaticNoteIndex);\n        this.chromaticNoteIndex = chromaticNoteIndex;\n\n        this.noteLetter = getNoteLetter(note);\n\n        const noteNameIndex = AllNoteLetters.findIndex(\n            (elem: NoteLetter) => elem === this.noteLetter\n        );\n        assertFound(noteNameIndex);\n        this.noteLetterIndex = noteNameIndex;\n    }\n\n    // returns enharmonic notes from some semitones above\n    // e.g. 3 semitones from C is [D#, Eb]\n    semitonesUp(semitones: Semitone): Note[] {\n        const targetNoteIndex =\n            (this.chromaticNoteIndex + semitones) % ChromaticNotes.length;\n\n        return ChromaticNotes[targetNoteIndex];\n    }\n\n    // returns the amount of semitones between this note and the other\n    // e.g. between C and Fb is 4 semitones\n    semitonesBetween(otherNote: Note): Semitone {\n        const otherNoteIndex = ChromaticNotes.findIndex((enharmonics: Note[]) =>\n            enharmonics.includes(otherNote)\n        );\n        assertFound(otherNoteIndex);\n\n        return asSemitone(otherNoteIndex - this.chromaticNoteIndex);\n    }\n\n    // returns whether this note and the other note is enharmonic\n    // e.g. returns true for C# and Db, true for F and F, false for G and A\n    isEnharmonicTo(otherNote: Note): boolean {\n        return this.semitonesBetween(otherNote) === 0;\n    }\n\n    // returns the note name x many degrees above the current note name\n    // e.g. 2 degrees above Cb is E, 2 degrees above B is D, etc.\n    noteNameFrom(degree: Degree): NoteLetter {\n        const targetNoteLetterIndex =\n            (this.noteLetterIndex + degree) % AllNoteLetters.length;\n        return AllNoteLetters[targetNoteLetterIndex];\n    }\n\n    // returns the unqualified degree between notes\n    // e.g. between C and D is a second\n    // but between Cb and D# is also a second\n    degreesBetween(otherNote: Note): Degree {\n        const otherNoteName = getNoteLetter(otherNote);\n        const otherNoteNameIndex = AllNoteLetters.findIndex(\n            (elem: NoteLetter) => elem === otherNoteName\n        );\n        assertFound(otherNoteNameIndex);\n\n        return asDegree(otherNoteNameIndex - this.noteLetterIndex);\n    }\n}\n\nexport const NoteUtilities: Record<Note, NoteUtility> = mapObjectKey(\n    AllNotes,\n    (note: Note) => new NoteUtility(note)\n);\n","import { mapObjectKey } from \"common/mapObject\";\nimport { asSemitone, Degree, Semitone } from \"common/music/foundation/Distance\";\n\ntype NaturalInterval = \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\";\n// a bit of a difference in nomenclature here\n// in traditional music theory\n// minor 2 is 2 with semitone down, and dim 2 is 2 with 2 semitones down\n// minor 1 doesn't exist, but dim 1 is 1 with half step down\n// we're going go treat perfect intervals like 1, 4, 5 like they could be 'minor'ed\n// and diminished is 2 semitones down\ntype MinorInterval = `b${NaturalInterval}`;\ntype AugmentedInterval = `#${NaturalInterval}`;\ntype DoubleAugmentedInterval = `##${NaturalInterval}`;\ntype TripleAugmentedInterval = `###${\"4\"}`;\ntype DiminishedInterval = `bb${NaturalInterval}`;\ntype DoubleDiminishedInterval = `bbb${Exclude<NaturalInterval, \"1\" | \"4\">}`;\n\nexport type Interval =\n    | NaturalInterval\n    | MinorInterval\n    | AugmentedInterval\n    | DoubleAugmentedInterval\n    | TripleAugmentedInterval\n    | DiminishedInterval\n    | DoubleDiminishedInterval;\n\nexport class IntervalUtility {\n    interval: Interval;\n\n    constructor(interval: Interval) {\n        this.interval = interval;\n    }\n\n    get semitones(): Semitone {\n        const naturalInterval = unqualifiedInterval(this.interval);\n        let semitones = naturalIntervalToSemitone[naturalInterval];\n\n        if (isInterval.minor(this.interval)) {\n            semitones -= 1;\n        } else if (isInterval.augmented(this.interval)) {\n            semitones += 1;\n        } else if (isInterval.doubleAugmented(this.interval)) {\n            semitones += 2;\n        } else if (isInterval.tripleAugmented(this.interval)) {\n            semitones += 3;\n        } else if (isInterval.diminished(this.interval)) {\n            semitones -= 2;\n        } else if (isInterval.doubleDiminished(this.interval)) {\n            semitones -= 3;\n        }\n\n        return asSemitone(semitones);\n    }\n\n    get degree(): Degree {\n        const unqualified = unqualifiedInterval(this.interval);\n        return naturalIntervalToDegree[unqualified];\n    }\n}\n\nexport const findInterval = (semitones: Semitone, degree: Degree): Interval => {\n    const naturalInterval = findNaturalIntervalByDegree(degree);\n    const naturalSemitone = naturalIntervalToSemitone[naturalInterval];\n    const semitoneDifference = asSemitone(semitones - naturalSemitone);\n\n    if (semitoneDifference === asSemitone(0)) {\n        return naturalInterval;\n    }\n\n    if (semitoneDifference === asSemitone(1)) {\n        return `#${naturalInterval}`;\n    }\n\n    if (semitoneDifference === asSemitone(2)) {\n        return `##${naturalInterval}`;\n    }\n\n    if (naturalInterval === \"4\" && semitoneDifference === asSemitone(3)) {\n        return `###${naturalInterval}`;\n    }\n\n    if (semitoneDifference === asSemitone(-1)) {\n        return `b${naturalInterval}`;\n    }\n\n    if (semitoneDifference === asSemitone(-2)) {\n        return `bb${naturalInterval}`;\n    }\n\n    if (\n        (naturalInterval === \"2\" ||\n            naturalInterval === \"3\" ||\n            naturalInterval === \"5\" ||\n            naturalInterval === \"6\" ||\n            naturalInterval === \"7\") &&\n        semitoneDifference === asSemitone(-3)\n    ) {\n        return `bbb${naturalInterval}`;\n    }\n\n    throw new Error(\"No matching interval for semitone and number distance\");\n};\n\nconst naturalIntervalToSemitone: Record<NaturalInterval, Semitone> = {\n    \"1\": 0,\n    \"2\": 2,\n    \"3\": 4,\n    \"4\": 5,\n    \"5\": 7,\n    \"6\": 9,\n    \"7\": 11,\n};\n\nconst findNaturalIntervalByDegree = (degree: Degree): NaturalInterval => {\n    let naturalInterval: NaturalInterval;\n    for (naturalInterval in naturalIntervalToDegree) {\n        if (naturalIntervalToDegree[naturalInterval] === degree) {\n            return naturalInterval;\n        }\n    }\n\n    throw new Error(\"Invalid number distance passed in\");\n};\n\nconst naturalIntervalToDegree: Record<NaturalInterval, Degree> = {\n    \"1\": 0,\n    \"2\": 1,\n    \"3\": 2,\n    \"4\": 3,\n    \"5\": 4,\n    \"6\": 5,\n    \"7\": 6,\n};\n\nconst naturalIntervals: Record<NaturalInterval, undefined> = {\n    \"1\": undefined,\n    \"2\": undefined,\n    \"3\": undefined,\n    \"4\": undefined,\n    \"5\": undefined,\n    \"6\": undefined,\n    \"7\": undefined,\n};\n\nconst minorIntervals: Record<MinorInterval, undefined> = {\n    b1: undefined,\n    b2: undefined,\n    b3: undefined,\n    b4: undefined,\n    b5: undefined,\n    b6: undefined,\n    b7: undefined,\n};\n\nconst augmentedIntervals: Record<AugmentedInterval, undefined> = {\n    \"#1\": undefined,\n    \"#2\": undefined,\n    \"#3\": undefined,\n    \"#4\": undefined,\n    \"#5\": undefined,\n    \"#6\": undefined,\n    \"#7\": undefined,\n};\n\nconst doubleAugmentedIntervals: Record<DoubleAugmentedInterval, undefined> = {\n    \"##1\": undefined,\n    \"##2\": undefined,\n    \"##3\": undefined,\n    \"##4\": undefined,\n    \"##5\": undefined,\n    \"##6\": undefined,\n    \"##7\": undefined,\n};\n\nconst tripleAugmentedIntervals: Record<TripleAugmentedInterval, undefined> = {\n    \"###4\": undefined,\n};\n\nconst diminishedIntervals: Record<DiminishedInterval, undefined> = {\n    bb1: undefined,\n    bb2: undefined,\n    bb3: undefined,\n    bb4: undefined,\n    bb5: undefined,\n    bb6: undefined,\n    bb7: undefined,\n};\n\nconst doubleDiminishedIntervals: Record<DoubleDiminishedInterval, undefined> = {\n    bbb2: undefined,\n    bbb3: undefined,\n    bbb5: undefined,\n    bbb6: undefined,\n    bbb7: undefined,\n};\n\nexport const AllIntervals: Record<Interval, undefined> = {\n    ...naturalIntervals,\n    ...minorIntervals,\n    ...augmentedIntervals,\n    ...diminishedIntervals,\n    ...doubleAugmentedIntervals,\n    ...doubleDiminishedIntervals,\n    ...tripleAugmentedIntervals,\n};\n\nexport const IntervalUtilities: Record<Interval, IntervalUtility> =\n    mapObjectKey(\n        AllIntervals,\n        (interval: Interval) => new IntervalUtility(interval)\n    );\n\nconst unqualifiedInterval = (interval: Interval): NaturalInterval => {\n    return interval.charAt(interval.length - 1) as NaturalInterval;\n};\n\nconst checkIntervalType = <T extends Interval>(\n    interval: Interval,\n    intervalSet: Record<T, undefined>\n): interval is T => {\n    for (const alteredInterval in intervalSet) {\n        if (alteredInterval === interval) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst isInterval = {\n    minor: (interval: Interval): interval is MinorInterval =>\n        checkIntervalType(interval, minorIntervals),\n\n    augmented: (interval: Interval): interval is AugmentedInterval =>\n        checkIntervalType(interval, augmentedIntervals),\n\n    diminished: (interval: Interval): interval is DiminishedInterval =>\n        checkIntervalType(interval, diminishedIntervals),\n\n    doubleAugmented: (\n        interval: Interval\n    ): interval is DoubleAugmentedInterval =>\n        checkIntervalType(interval, doubleAugmentedIntervals),\n\n    doubleDiminished: (\n        interval: Interval\n    ): interval is DoubleDiminishedInterval =>\n        checkIntervalType(interval, doubleDiminishedIntervals),\n\n    tripleAugmented: (\n        interval: Interval\n    ): interval is TripleAugmentedInterval =>\n        checkIntervalType(interval, tripleAugmentedIntervals),\n};\n","// generating all intervals for all notes\n\nimport { mapObjectKey } from \"common/mapObject\";\nimport {\n    AllIntervals,\n    findInterval,\n    Interval,\n    IntervalUtility,\n} from \"common/music/foundation/Interval\";\nimport {\n    NoteUtilities,\n    AllNotes,\n    getNoteLetter,\n    Note,\n    NoteLetter,\n} from \"common/music/foundation/Note\";\n\ntype IntervalToNoteMapping = Record<Interval, Note>;\ntype NoteToIntervalMapping = Record<Note, Interval>;\n\nconst intervalsToNotesOfRootNote = (rootNote: Note): IntervalToNoteMapping => {\n    return mapObjectKey(AllIntervals, (interval: Interval) =>\n        intervalToNote(rootNote, interval)\n    );\n};\n\nconst intervalToNote = (rootNote: Note, interval: Interval): Note => {\n    const intervalProperties = new IntervalUtility(interval);\n    const semitones = intervalProperties.semitones;\n    const degree = intervalProperties.degree;\n\n    const noteProperties = NoteUtilities[rootNote];\n    const enharmonicTargetNotes: Note[] = noteProperties.semitonesUp(semitones);\n    const targetNoteName: NoteLetter = noteProperties.noteNameFrom(degree);\n\n    for (const targetNote of enharmonicTargetNotes) {\n        if (getNoteLetter(targetNote) === targetNoteName) {\n            return targetNote;\n        }\n    }\n\n    return enharmonicTargetNotes[0];\n};\n\nconst notesToIntervalsOfRootNote = (rootNote: Note): NoteToIntervalMapping => {\n    return mapObjectKey(AllNotes, (note: Note) =>\n        noteToInterval(rootNote, note)\n    );\n};\n\nconst noteToInterval = (rootNote: Note, otherNote: Note): Interval => {\n    const rootNoteProperties = NoteUtilities[rootNote];\n\n    const semitones = rootNoteProperties.semitonesBetween(otherNote);\n    const degrees = rootNoteProperties.degreesBetween(otherNote);\n\n    return findInterval(semitones, degrees);\n};\n\nexport const IntervalToNote: Record<Note, IntervalToNoteMapping> = mapObjectKey(\n    AllNotes,\n    (rootNote: Note) => intervalsToNotesOfRootNote(rootNote)\n);\n\nexport const NoteToInterval: Record<Note, NoteToIntervalMapping> = mapObjectKey(\n    AllNotes,\n    (rootNote: Note) => notesToIntervalsOfRootNote(rootNote)\n);\n","import { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { AllNotes, Note } from \"common/music/foundation/Note\";\nimport {\n    IntervalToNote,\n    NoteToInterval\n} from \"common/music/foundation/NoteIntervalConversion\";\n\nconst transposeNote = (note: Note, fromKey: Note, toKey: Note): Note => {\n    const interval = NoteToInterval[fromKey][note];\n\n    return IntervalToNote[toKey][interval];\n};\n\nconst transposeSymbol = (\n    symbol: string,\n    fromKey: Note,\n    toKey: Note\n): string => {\n    const matchingNotes: Note[] = [];\n\n    let note: Note;\n    for (note in AllNotes) {\n        if (symbol.startsWith(note)) {\n            matchingNotes.push(note);\n        }\n    }\n\n    if (matchingNotes.length === 0) {\n        return symbol;\n    }\n\n    let matchingNote: Note = matchingNotes[0];\n    for (const note of matchingNotes) {\n        // use the longest matching note as the root\n        // e.g. in C#7, C# is a better match than C\n        if (note.length > matchingNote.length) {\n            matchingNote = note;\n        }\n    }\n\n    const transposedNote = transposeNote(matchingNote, fromKey, toKey);\n    return symbol.replace(matchingNote, transposedNote);\n};\n\nconst transposeChord = (chord: string, fromKey: Note, toKey: Note): string => {\n    let bass: string | null = null;\n    let baseChord: string = chord;\n    if (chord.includes(\"/\")) {\n        const tokens = chord.split(\"/\");\n        baseChord = tokens[0];\n        // we don't expect more than one slash, but just to be careful\n        const remainingTokens = tokens.slice(1);\n        bass = remainingTokens.join(\"/\");\n    }\n\n    baseChord = transposeSymbol(baseChord, fromKey, toKey);\n    if (bass === null) {\n        return baseChord;\n    }\n\n    bass = transposeSymbol(bass, fromKey, toKey);\n    return baseChord + \"/\" + bass;\n};\n\nexport const transposeSong = (\n    song: ChordSong,\n    fromKey: Note,\n    toKey: Note\n): ChordSong => {\n    const transposeBlock = (block: ChordBlock): ChordBlock => {\n        if (block.chord === \"\") {\n            return block;\n        }\n\n        return block.update(\"chord\", (chord: string) =>\n            transposeChord(chord, fromKey, toKey)\n        );\n    };\n\n    const newSong = song.updateAllElements((line) => {\n        return line.updateAllElements((block) => {\n            return transposeBlock(block);\n        });\n    });\n\n    return newSong;\n};\n","import { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport {\n    ChordLine,\n    ChordLineValidatedFields,\n    ChordLineValidator,\n    TimestampedSection,\n} from \"common/ChordModel/ChordLine\";\nimport {\n    Collection,\n    CollectionMethods,\n    IDable,\n} from \"common/ChordModel/Collection\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { Note } from \"common/music/foundation/Note\";\nimport { transposeSong } from \"common/music/transpose/Transpose\";\nimport { User } from \"components/user/userContext\";\nimport { Json, parse } from \"fp-ts/Json\";\nimport { Either, isLeft, left, right } from \"fp-ts/lib/Either\";\nimport { List, Record } from \"immutable\";\nimport * as iots from \"io-ts\";\nimport { DateFromISOString } from \"io-ts-types\";\nimport lodash from \"lodash\";\n\nconst RequiredMetadataValidator = iots.type({\n    title: iots.string,\n    composedBy: iots.string,\n    performedBy: iots.string,\n});\n\n// not great to duplicate, but at least it's easily readable and hard to get wrong\nconst NoteValidator = iots.union([\n    iots.literal(\"C\"),\n    iots.literal(\"C#\"),\n    iots.literal(\"Cb\"),\n    iots.literal(\"D\"),\n    iots.literal(\"D#\"),\n    iots.literal(\"Db\"),\n    iots.literal(\"E\"),\n    iots.literal(\"E#\"),\n    iots.literal(\"Eb\"),\n    iots.literal(\"F\"),\n    iots.literal(\"F#\"),\n    iots.literal(\"Fb\"),\n    iots.literal(\"G\"),\n    iots.literal(\"G#\"),\n    iots.literal(\"Gb\"),\n    iots.literal(\"A\"),\n    iots.literal(\"A#\"),\n    iots.literal(\"Ab\"),\n    iots.literal(\"B\"),\n    iots.literal(\"B#\"),\n    iots.literal(\"Bb\"),\n]);\n\n// this is meant to be nested one more level in inside a transpose object\n// but the serde library vomits when it's nested.\n// working to migrate the backend to an ecosystem that doesn't suck\n// then these can be migrated inside another object\n// but until then, they are top level in metadata\nconst OptionalMetadataValidator = iots.partial({\n    originalKey: NoteValidator,\n    currentKey: NoteValidator,\n});\n\nconst MetadataValidator = iots.intersection([\n    RequiredMetadataValidator,\n    OptionalMetadataValidator,\n]);\n\ntype Metadata = iots.TypeOf<typeof MetadataValidator>;\n\nconst SongSummaryTypes = {\n    id: iots.string,\n    owner: iots.string,\n    lastSavedAt: iots.union([DateFromISOString, iots.null]),\n    metadata: MetadataValidator,\n};\n\nconst SongSummaryValidator = iots.type(SongSummaryTypes);\n\nconst ListSongSummaryValidator = iots.array(SongSummaryValidator);\n\ntype SongSummaryValidatedFields = iots.TypeOf<typeof SongSummaryValidator>;\n\nexport class SongSummary implements SongSummaryValidatedFields {\n    id: string;\n    owner: string;\n    lastSavedAt: Date | null;\n    metadata: Metadata;\n\n    constructor(fields?: SongSummaryValidatedFields) {\n        if (fields === undefined) {\n            this.id = \"\";\n            this.owner = \"\";\n            this.metadata = {\n                title: \"\",\n                composedBy: \"\",\n                performedBy: \"\",\n                originalKey: undefined,\n                currentKey: undefined,\n            };\n            this.lastSavedAt = null;\n            return;\n        }\n\n        this.id = fields.id;\n        this.owner = fields.owner;\n        this.metadata = fields.metadata;\n        this.lastSavedAt = fields.lastSavedAt;\n    }\n\n    static fromJSONObject(jsonObj: unknown): Either<Error, SongSummary> {\n        const validationResult = SongSummaryValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Song Summary object\"));\n        }\n\n        return right(new SongSummary({ ...validationResult.right }));\n    }\n\n    static fromJSONList(jsonList: unknown): Either<Error, SongSummary[]> {\n        const validationResult = ListSongSummaryValidator.decode(jsonList);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Song Summary list\"));\n        }\n\n        const songSummaryList: SongSummary[] = validationResult.right.map(\n            (fields: SongSummaryValidatedFields): SongSummary => {\n                return new SongSummary({ ...fields });\n            }\n        );\n\n        return right(songSummaryList);\n    }\n}\n\nconst ChordSongValidator = iots.type({\n    ...SongSummaryTypes,\n    elements: iots.array(ChordLineValidator),\n});\n\ntype ChordSongValidatedFields = iots.TypeOf<typeof ChordSongValidator>;\n\ntype RecordType = {\n    id: string;\n    owner: string;\n    lastSavedAt: Date | null;\n    metadata: Metadata;\n    elements: Collection<ChordLine>;\n};\n\nconst DefaultRecord: RecordType = {\n    id: \"\",\n    owner: \"\",\n    lastSavedAt: null,\n    metadata: {\n        title: \"\",\n        composedBy: \"\",\n        performedBy: \"\",\n        originalKey: undefined,\n        currentKey: undefined,\n    },\n    elements: new Collection<ChordLine>(),\n};\n\nconst RecordConstructor = Record(DefaultRecord);\ntype ChordSongRecord = ReturnType<typeof RecordConstructor>;\n\ntype ConstructorParams = {\n    lines?: Collection<ChordLine> | ChordLine[];\n    fields?: SongSummaryValidatedFields;\n};\n\nexport class ChordSong\n    extends CollectionMethods<ChordSong, ChordLine>\n    implements SongSummaryValidatedFields\n{\n    readonly record: ChordSongRecord;\n\n    constructor(params: ConstructorParams | ChordSongRecord) {\n        super();\n\n        if (ChordSong.isChordSongRecord(params)) {\n            this.record = params as ChordSongRecord;\n            return;\n        }\n\n        const record: RecordType = {\n            ...DefaultRecord,\n            metadata: { ...DefaultRecord.metadata },\n        };\n\n        if (params.lines === undefined) {\n            record.elements = new Collection([new ChordLine({})]);\n        } else {\n            if (params.lines instanceof Collection) {\n                record.elements = params.lines;\n            } else {\n                record.elements = new Collection(params.lines);\n            }\n        }\n\n        if (params.fields !== undefined) {\n            record.id = params.fields.id;\n            record.owner = params.fields.owner;\n            record.metadata = params.fields.metadata;\n            record.lastSavedAt = params.fields.lastSavedAt;\n        }\n\n        this.record = RecordConstructor(record);\n    }\n\n    static isChordSongRecord(\n        params: ConstructorParams | ChordSongRecord\n    ): params is ChordSongRecord {\n        return Record.isRecord(params);\n    }\n\n    toJSON(): object {\n        return this.record.toJSON();\n    }\n\n    private new(maybeNew: ChordSongRecord): ChordSong {\n        if (maybeNew === this.record) {\n            return this;\n        }\n\n        return new ChordSong(maybeNew);\n    }\n\n    get id(): string {\n        return this.record.id;\n    }\n\n    get owner(): string {\n        return this.record.owner;\n    }\n\n    get metadata(): Metadata {\n        return this.record.metadata;\n    }\n\n    get lastSavedAt(): Date | null {\n        return this.record.lastSavedAt;\n    }\n\n    get originalKey(): Note | null {\n        return this.record.metadata.originalKey ?? null;\n    }\n\n    get currentKey(): Note | null {\n        return this.record.metadata.currentKey ?? null;\n    }\n\n    protected get elements(): Collection<ChordLine> {\n        return this.record.elements;\n    }\n\n    updateCollection(\n        updater: (collection: Collection<ChordLine>) => Collection<ChordLine>\n    ): ChordSong {\n        return this.update(\"elements\", updater);\n    }\n\n    set<K extends keyof RecordType>(key: K, value: RecordType[K]): ChordSong {\n        const newRecord = this.record.set(key, value);\n        return this.new(newRecord);\n    }\n\n    update<K extends keyof RecordType>(\n        key: K,\n        updater: (value: RecordType[K]) => RecordType[K]\n    ): ChordSong {\n        const newRecord = this.record.update(key, updater);\n        return this.new(newRecord);\n    }\n\n    static fromValidatedFields(\n        validatedFields: ChordSongValidatedFields\n    ): ChordSong {\n        const chordLines: ChordLine[] = validatedFields.elements.map(\n            (chordLineValidatedFields: ChordLineValidatedFields) => {\n                return ChordLine.fromValidatedFields(chordLineValidatedFields);\n            }\n        );\n\n        return new ChordSong({\n            lines: new Collection(chordLines),\n            fields: validatedFields,\n        });\n    }\n\n    static deserialize(jsonStr: string): Either<Error, ChordSong> {\n        const result: Either<unknown, Json> = parse(jsonStr);\n\n        if (isLeft(result)) {\n            return left(new Error(JSON.stringify(result.left)));\n        }\n\n        const jsonObj = result.right;\n        return ChordSong.fromJSONObject(jsonObj);\n    }\n\n    static fromJSONObject(jsonObj: unknown): Either<Error, ChordSong> {\n        const validationResult = ChordSongValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Song object\"));\n        }\n\n        return right(this.fromValidatedFields(validationResult.right));\n    }\n\n    static fromLyricsLines(lyricLines: Lyric[]): ChordSong {\n        const chordLines: ChordLine[] = lyricLines.map((lyricLine: Lyric) =>\n            ChordLine.fromLyrics(lyricLine)\n        );\n\n        const params: ConstructorParams = {\n            lines: new Collection(chordLines),\n        };\n\n        return new ChordSong(params);\n    }\n\n    get chordLines(): Collection<ChordLine> {\n        return this.elements;\n    }\n\n    get timeSectionedChordLines(): List<List<ChordLine>> {\n        let allSections: List<List<ChordLine>> = List();\n        let currentSection: ChordLine[] = [];\n\n        this.chordLines.forEach((line: ChordLine) => {\n            const beginningOfNewSection = line.section?.type === \"time\";\n            if (beginningOfNewSection) {\n                const currentSectionHasContent = currentSection.length > 0;\n                if (currentSectionHasContent) {\n                    allSections = allSections.push(List(currentSection));\n                }\n\n                currentSection = [];\n            }\n\n            currentSection.push(line);\n        });\n\n        const currentSectionHasContent = currentSection.length > 0;\n        if (currentSectionHasContent) {\n            allSections = allSections.push(List(currentSection));\n        }\n\n        return allSections;\n    }\n\n    get timestampedSections(): List<TimestampedSection> {\n        const timestampedSections: TimestampedSection[] = [];\n\n        this.chordLines.forEach((line: ChordLine) => {\n            if (line.section?.type === \"time\") {\n                timestampedSections.push({\n                    ...line.section,\n                    lineID: line.id,\n                });\n            }\n        });\n\n        return List(timestampedSections);\n    }\n\n    get title(): string {\n        return this.metadata.title;\n    }\n\n    set title(newTitle: string) {\n        this.metadata.title = newTitle;\n    }\n\n    get performedBy(): string {\n        return this.metadata.performedBy;\n    }\n\n    set performedBy(newPerformedBy: string) {\n        this.metadata.performedBy = newPerformedBy;\n    }\n\n    get composedBy(): string {\n        return this.metadata.composedBy;\n    }\n\n    set composedBy(newComposedBy: string) {\n        this.metadata.composedBy = newComposedBy;\n    }\n\n    get(idable: IDable<ChordLine>): ChordLine {\n        return this.chordLines.get(idable);\n    }\n\n    // fork clones only the contents of the song, not the ownership information\n    // i.e. not ID, not owner ID, not last saved, etc\n    fork(): ChordSong {\n        const clone = this.set(\"id\", \"\")\n            .set(\"owner\", \"\")\n            .set(\"lastSavedAt\", null);\n\n        return clone;\n    }\n\n    isUnsaved(): boolean {\n        return this.id === \"\";\n    }\n\n    isOwner(user: User | null): boolean {\n        if (this.owner === \"\") {\n            return false;\n        }\n\n        if (user === null) {\n            return false;\n        }\n\n        return this.owner === user.userID;\n    }\n\n    mergeLineWithPrevious(idable: IDable<ChordLine>): [ChordSong, boolean] {\n        const currIndex = this.chordLines.indexOf(idable.id);\n\n        const hasPreviousLine = currIndex > 0;\n        // no previous line to merge with, just bail\n        if (!hasPreviousLine) {\n            return [this, false];\n        }\n\n        // the user experience usually would like a space between lines when they're merged\n        // e.g.\n        // Never Gonna\n        // Give You Up\n        // =>\n        // Never GonnaGive You Up is awkward\n\n        const addSpaceToEndOfLine = (line: ChordLine): ChordLine => {\n            const lastBlockIndex = line.chordBlocks.length - 1;\n\n            return line.updateElement(lastBlockIndex, (block) => {\n                return block.update(\"lyric\", (lyric) => {\n                    return lyric.append(\" \");\n                });\n            });\n        };\n\n        const appendLineToPrev = (\n            prevLine: ChordLine,\n            currLine: ChordLine\n        ): ChordLine => {\n            return prevLine.updateCollection((elements) => {\n                return elements.transform((list) =>\n                    list.push(...currLine.chordBlocks.toArray())\n                );\n            });\n        };\n\n        const mergeLines = (\n            prevLine: ChordLine,\n            currLine: ChordLine\n        ): ChordLine => {\n            prevLine = addSpaceToEndOfLine(prevLine);\n            prevLine = appendLineToPrev(prevLine, currLine);\n            prevLine = prevLine.normalizeBlocks();\n\n            return prevLine;\n        };\n\n        const newChordSong = this.updateCollection((elements) => {\n            const currLine = elements.getAtIndex(currIndex);\n\n            elements = elements.update(currIndex - 1, (prevLine) =>\n                mergeLines(prevLine, currLine)\n            );\n\n            elements = elements.remove(currLine);\n\n            return elements;\n        });\n\n        return [newChordSong, true];\n    }\n\n    splitLine(\n        idable: IDable<ChordLine>,\n        splitIndex: number\n    ): [ChordSong, boolean] {\n        const chordLine = this.chordLines.get(idable);\n\n        const [newCurrLine, nextLine] = chordLine.splitByCharIndex(splitIndex);\n\n        const newChordSong = this.updateCollection((elements) => {\n            return elements.splice(chordLine, 1, newCurrLine, nextLine);\n        });\n\n        return [newChordSong, true];\n    }\n\n    contentEquals(other: ChordSong): boolean {\n        if (this.chordLines.length !== other.chordLines.length) {\n            return false;\n        }\n\n        if (!lodash.isEqual(this.metadata, other.metadata)) {\n            return false;\n        }\n\n        let linesAreEqual = true;\n        this.chordLines.forEach(\n            (line: ChordLine, index: number): void | false => {\n                const otherLine = other.chordLines.getAtIndex(index);\n                if (!line.contentEquals(otherLine)) {\n                    linesAreEqual = false;\n                    return false;\n                }\n            }\n        );\n\n        return linesAreEqual;\n    }\n\n    findLineWithBlock(blockID: IDable<ChordBlock>): ChordLine {\n        const line = this.chordLines.list.find((line): boolean => {\n            const blockResult = line.chordBlocks.list.find(\n                (block: ChordBlock) => block.id === blockID.id\n            );\n\n            return blockResult !== undefined;\n        });\n\n        if (line === undefined) {\n            throw new Error(\"BlockID can't be found in the entire song\");\n        }\n\n        return line;\n    }\n\n    transpose(fromKey: Note, toKey: Note): ChordSong {\n        const originalKey = this.originalKey;\n\n        const isFirstTransposition = originalKey === null;\n        const keyMismatch = this.currentKey !== fromKey;\n        const doLossyTranposition = isFirstTransposition || keyMismatch;\n\n        let newSong: ChordSong;\n        \n        if (doLossyTranposition) {\n            newSong = transposeSong(this, fromKey, toKey);\n        } else {\n            newSong = transposeSong(this, fromKey, originalKey);\n            newSong = transposeSong(newSong, originalKey, toKey);\n        }\n\n        const newOriginalKey = originalKey ?? fromKey;\n\n        newSong = newSong.update(\"metadata\", (metadata) => ({\n            ...metadata,\n            originalKey: newOriginalKey,\n            currentKey: toKey,\n        }));\n\n        return newSong;\n    }\n\n    validateTimestampedSections(): Error | null {\n        const sections = this.timestampedSections;\n\n        let prevSectionName = \"the beginning of the song\";\n        let prevTime = 0;\n        for (const section of sections) {\n            if (section.time < prevTime) {\n                return new Error(\n                    `Section ${section.name} has an earlier timestamp than ${prevSectionName}`\n                );\n            }\n\n            prevSectionName = section.name;\n            prevTime = section.time;\n        }\n\n        return null;\n    }\n}\n","// P A T H S\n// by Isayama\n\nconst newSongID = \"new\";\n\nexport class RootPath {\n    URL(): string {\n        return \"/\";\n    }\n\n    static readonly root: RootPath = new RootPath();\n    static rootURL(): string {\n        return this.root.URL();\n    }\n}\n\nexport class AboutPath {\n    URL(): string {\n        return \"/about\";\n    }\n\n    static readonly root: AboutPath = new AboutPath();\n    static rootURL(): string {\n        return this.root.URL();\n    }\n}\n\nexport class GuitarDemoPath {\n    URL(): string {\n        return \"/guitar-demo\";\n    }\n\n    static readonly root: GuitarDemoPath = new GuitarDemoPath();\n    static rootURL(): string {\n        return this.root.URL();\n    }\n}\n\nexport class SongPath {\n    URL(): string {\n        return \"/song\";\n    }\n\n    withID(id: string): SongIDPath {\n        return new SongIDPath(id);\n    }\n\n    withNew(): SongIDPath {\n        return new SongIDPath(newSongID);\n    }\n\n    static readonly root: SongPath = new SongPath();\n    static rootURL(): string {\n        return this.root.URL();\n    }\n\n    static newURL(): string {\n        return this.root.withNew().URL();\n    }\n}\n\nexport class SongIDPath {\n    private readonly id: string;\n\n    constructor(id: string) {\n        this.id = id;\n    }\n\n    URL(): string {\n        return `/song/${this.id}`;\n    }\n\n    isNew(): boolean {\n        return this.id === newSongID;\n    }\n\n    withEditMode(): EditSongPath {\n        return new EditSongPath(this.id);\n    }\n\n    withPlayMode(): PlaySongPath {\n        return new PlaySongPath(this.id, \"root\");\n    }\n\n    parent(): SongPath {\n        return SongPath.root;\n    }\n}\n\nexport class EditSongPath {\n    private readonly id: string;\n    constructor(id: string) {\n        this.id = id;\n    }\n\n    URL(): string {\n        return `/song/${this.id}/edit`;\n    }\n\n    parent(): SongIDPath {\n        return new SongIDPath(this.id);\n    }\n\n    static isEditMode(path: string): boolean {\n        const result = path.match(/\\/song\\/.+\\/edit/i);\n        return result !== null;\n    }\n}\n\nexport class PlaySongPath {\n    private readonly id: string;\n    private readonly mode: \"page\" | \"scroll\" | \"root\";\n\n    constructor(id: string, mode: \"page\" | \"scroll\" | \"root\") {\n        this.id = id;\n        this.mode = mode;\n    }\n\n    URL(): string {\n        const baseURL = `/song/${this.id}/play`;\n\n        if (this.mode === \"root\") {\n            return baseURL;\n        }\n\n        return `${baseURL}/${this.mode}`;\n    }\n\n    withPageView(): PlaySongPath {\n        return new PlaySongPath(this.id, \"page\");\n    }\n\n    withScrollView(): PlaySongPath {\n        return new PlaySongPath(this.id, \"scroll\");\n    }\n\n    parent(): SongIDPath {\n        return new SongIDPath(this.id);\n    }\n\n    static isPlayMode(path: string): boolean {\n        const result = path.match(/\\/song\\/.+\\/play/i);\n        return result !== null;\n    }\n}\n\nexport class DemoPath {\n    URL(): string {\n        const neverGonnaGiveYouPlasticLoveUUID =\n            \"c531c0fe-6e8d-4cfe-9c5f-120e3402ccd9\";\n\n        return new SongIDPath(neverGonnaGiveYouPlasticLoveUUID).URL();\n    }\n\n    static readonly root: DemoPath = new DemoPath();\n    static rootURL(): string {\n        return this.root.URL();\n    }\n}\n\nexport class TutorialPath {\n    private readonly lesson: string;\n\n    URL(): string {\n        if (this.lesson === \"root\") {\n            return \"/learn\";\n        }\n\n        return `/learn/${this.lesson}`;\n    }\n\n    constructor(lesson: string) {\n        this.lesson = lesson;\n    }\n\n    static readonly root: TutorialPath = new TutorialPath(\"root\");\n    static rootURL(): string {\n        return this.root.URL();\n    }\n}\n","enum RangePosition {\n    START,\n    END,\n    MIDDLE,\n}\n\nconst parentNode = (node: Node): Node => {\n    if (node.parentNode === null) {\n        throw new Error(\"Node doesn't have parent\");\n    }\n\n    return node.parentNode;\n};\n\nconst normalizeNodeBoundary = (\n    container: Node,\n    offset: number\n): [Node, number] => {\n    const position = getPositionForNode(container, offset);\n    if (position === RangePosition.MIDDLE) {\n        return [container, offset];\n    }\n\n    let offsetFromParent = findOffsetForNode(container);\n    if (position === RangePosition.END) {\n        offsetFromParent += 1;\n    }\n\n    return normalizeNodeBoundary(parentNode(container), offsetFromParent);\n};\n\n// ranges from selection tend to end up inside elements\n// e.g. selecting line 2 might look like\n// <div><div>line 1 |sel-start|</div></div>\n// <div><div>line 2 |sel-end|</div></div>\n// but what we really want is more like\n// <div><div>line 1 </div></div>\n// |sel-start|<div><div>line 2 </div></div>|sel-end|\n// this function adjusts the boundaries of range by climbing up the DOM tree\n// when the range boundary is at the start or end edge of an element\nconst normalizeRange = (range: Range) => {\n    const [startContainer, startOffset] = normalizeNodeBoundary(\n        range.startContainer,\n        range.startOffset\n    );\n    const [endContainer, endOffset] = normalizeNodeBoundary(\n        range.endContainer,\n        range.endOffset\n    );\n\n    range.setStart(startContainer, startOffset);\n    range.setEnd(endContainer, endOffset);\n};\n\nconst getPositionForTextNode = (\n    container: Node,\n    offset: number\n): RangePosition => {\n    if (offset === 0) {\n        return RangePosition.START;\n    }\n\n    const nodeValue: string | null = container.nodeValue;\n    if (nodeValue === null) {\n        throw new Error(\"Text node has no value?\");\n    }\n\n    if (offset === nodeValue.length) {\n        return RangePosition.END;\n    }\n\n    return RangePosition.MIDDLE;\n};\n\nconst getPositionForElementNode = (\n    container: Node,\n    offset: number\n): RangePosition => {\n    const childNodes = container.childNodes;\n    if (offset === 0) {\n        return RangePosition.START;\n    }\n\n    if (offset === childNodes.length) {\n        return RangePosition.END;\n    }\n\n    return RangePosition.MIDDLE;\n};\n\nconst getPositionForNode = (container: Node, offset: number): RangePosition => {\n    switch (container.nodeType) {\n        case Node.TEXT_NODE: {\n            return getPositionForTextNode(container, offset);\n        }\n        case Node.ELEMENT_NODE: {\n            return getPositionForElementNode(container, offset);\n        }\n\n        default: {\n            throw new Error(\"Crash for now \" + container.nodeType);\n        }\n    }\n};\n\nconst findOffsetForNode = (node: Node): number => {\n    if (node.parentNode === null) {\n        throw new Error(\"wtf\");\n    }\n\n    const nodes = node.parentNode.childNodes;\n\n    for (let i = 0; i < nodes.length; i++) {\n        if (nodes.item(i) === node) {\n            return i;\n        }\n    }\n\n    throw new Error(\"Child node doesn't exist in parent???\");\n};\n\n// selection can be represented as many discontiguous ranges, but that doesn't help us\n// figure out whether a line is under selection or not.\n// this utility function figures out a range that's the superset of all ranges in the selection\n// with the start point as the earliest start point, and the end point as the latest end point\nconst getWideSelectionBoundary = (selection: Selection): Range => {\n    const wideRange = document.createRange();\n    const firstRange = selection.getRangeAt(0);\n    wideRange.setStart(firstRange.startContainer, firstRange.startOffset);\n    wideRange.setEnd(firstRange.endContainer, firstRange.endOffset);\n    // selecting in the app can result in many dis\n\n    for (let rangeIndex = 1; rangeIndex < selection.rangeCount; rangeIndex++) {\n        const range = selection.getRangeAt(rangeIndex);\n\n        if (\n            range.compareBoundaryPoints(Range.START_TO_START, wideRange) === -1\n        ) {\n            wideRange.setStart(range.startContainer, range.startOffset);\n        }\n\n        if (range.compareBoundaryPoints(Range.END_TO_END, wideRange) === 1) {\n            wideRange.setEnd(range.endContainer, range.endOffset);\n        }\n    }\n\n    return wideRange;\n};\n\nexport const getSelectedLineIDs = (): string[] => {\n    const selection: Selection | null = window.getSelection();\n    if (selection === null || selection.rangeCount === 0) {\n        return [];\n    }\n\n    const range = getWideSelectionBoundary(selection);\n    normalizeRange(range);\n\n    const lineElements = document.querySelectorAll(\"[data-lineid]\");\n    const lineIDs: string[] = [];\n\n    for (\n        let lineElementIndex = 0;\n        lineElementIndex < lineElements.length;\n        lineElementIndex++\n    ) {\n        const lineElement = lineElements.item(lineElementIndex);\n\n        if (!range.intersectsNode(lineElement)) {\n            continue;\n        }\n\n        const lineID: string | null = lineElement.getAttribute(\"data-lineid\");\n        if (lineID === null) {\n            throw new Error(\n                \"Unexpected - line element should have line ID because that's how it was selected\"\n            );\n        }\n\n        lineIDs.push(lineID);\n    }\n\n    return lineIDs;\n};\n","export default __webpack_public_path__ + \"static/media/symphony.d46887dc.png\";","import { Either, isLeft, left, right } from \"fp-ts/lib/Either\";\nimport * as iots from \"io-ts\";\nimport ky from \"ky\";\nimport { useSnackbar } from \"notistack\";\n\n\nconst BackendErrorValidator = iots.type({\n    msg: iots.string,\n    code: iots.string,\n    error_details: iots.string,\n});\n\nexport type BackendError = iots.TypeOf<typeof BackendErrorValidator>;\n\nexport type RequestError = Either<string, BackendError>;\n\nexport const parseRequestError = async (\n    unknownError: unknown\n): Promise<RequestError> => {\n    if (unknownError instanceof ky.HTTPError) {\n        // cloning the response so that it can continue to be reused\n        const responseClone = unknownError.response.clone();\n        const jsonError: unknown = await responseClone.json();\n\n        const decodeResult = BackendErrorValidator.decode(jsonError);\n        if (isLeft(decodeResult)) {\n            const decodeErrorMsg = decodeResult.left.toString();\n            return left(\n                `Failed to decode the backend error type: ${decodeErrorMsg}`\n            );\n        }\n\n        console.error(decodeResult.right.error_details);\n        return decodeResult;\n    }\n\n    if (unknownError instanceof ky.TimeoutError) {\n        return right({\n            code: \"timeout\",\n            msg: \"A backend request timed out\",\n            error_details: \"\",\n        });\n    }\n\n    if (typeof unknownError === \"string\") {\n        return left(unknownError);\n    }\n\n    if (typeof unknownError === \"object\" && unknownError !== null) {\n        if (typeof unknownError.toString === \"function\") {\n            return left(unknownError.toString());\n        }\n    }\n\n    return left(\"An unparsable error has occurred\");\n};\n\nexport const getErrorMessageForUser = (backendError: BackendError): string => {\n    return backendError.msg;\n};\n\nexport const useErrorSnackbar = () => {\n    const { enqueueSnackbar } = useSnackbar();\n\n    const showErrorMsg = (msg: string) => {\n        enqueueSnackbar(msg, { variant: \"error\" });\n    };\n\n    return async (requestError: RequestError) => {\n        if (isLeft(requestError)) {\n            console.error(requestError.left);\n\n            showErrorMsg(\n                \"An unknown error has occurred - please check the console for more details\"\n            );\n            return;\n        }\n\n        const backendError = requestError.right;\n\n        console.error(backendError.msg);\n\n        const userErrorMsg = getErrorMessageForUser(backendError);\n        showErrorMsg(userErrorMsg);\n    };\n};\n","import { parseRequestError, RequestError } from \"common/backend/errors\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { TrackList } from \"common/ChordModel/tracks/TrackList\";\nimport { Either, left, right } from \"fp-ts/lib/Either\";\nimport ky from \"ky\";\n\nexport type ResponseJSON = unknown;\nexport type BackendResult = Either<RequestError, ResponseJSON>;\n\nconst backendHost = ((): string => {\n    const localURL = \"http://localhost:5000\";\n\n    if (\n        process.env.NODE_ENV === \"development\" ||\n        process.env.NODE_ENV === \"test\"\n    ) {\n        return localURL;\n    }\n\n    const backendURL: string | undefined = process.env.REACT_APP_BACKEND_URL;\n    if (backendURL === undefined) {\n        console.error(\"Production build doesn't have backend URL set!\");\n        return localURL;\n    }\n\n    return backendURL;\n})();\n\nconst authHeader = (authToken: string) => {\n    return {\n        headers: { Authorization: \"Bearer \" + authToken },\n    };\n};\n\nexport const login = async (authToken: string): Promise<BackendResult> => {\n    let parsed: ResponseJSON;\n\n    try {\n        parsed = await ky\n            .post(`${backendHost}/login`, authHeader(authToken))\n            .json();\n    } catch (e) {\n        const parsedError: RequestError = await parseRequestError(e);\n        return left(parsedError);\n    }\n\n    return right(parsed);\n};\n\nexport const getSong = async (songID: string): Promise<BackendResult> => {\n    let parsed: ResponseJSON;\n\n    try {\n        parsed = await ky.get(`${backendHost}/songs/${songID}`).json();\n    } catch (e) {\n        const parsedError: RequestError = await parseRequestError(e);\n        return left(parsedError);\n    }\n\n    return right(parsed);\n};\n\nexport const getTrackList = async (songID: string): Promise<BackendResult> => {\n    let parsed: ResponseJSON;\n\n    try {\n        parsed = await ky\n            .get(`${backendHost}/songs/${songID}/tracklist`, { timeout: false })\n            .json();\n    } catch (e) {\n        const parsedError: RequestError = await parseRequestError(e);\n        return left(parsedError);\n    }\n\n    return right(parsed);\n};\n\nexport const getSongsForUser = async (\n    userID: string,\n    authToken: string\n): Promise<BackendResult> => {\n    let parsed: ResponseJSON;\n\n    try {\n        parsed = await ky\n            .get(`${backendHost}/users/${userID}/songs`, authHeader(authToken))\n            .json();\n    } catch (e) {\n        const parsedError: RequestError = await parseRequestError(e);\n        return left(parsedError);\n    }\n\n    return right(parsed);\n};\n\nexport const createSong = async (\n    song: ChordSong,\n    authToken: string\n): Promise<BackendResult> => {\n    let parsed: ResponseJSON;\n\n    try {\n        parsed = await ky\n            .post(`${backendHost}/songs`, {\n                json: song,\n                ...authHeader(authToken),\n            })\n            .json();\n    } catch (e) {\n        const parsedError: RequestError = await parseRequestError(e);\n        return left(parsedError);\n    }\n\n    return right(parsed);\n};\n\nexport const updateSong = async (\n    song: ChordSong,\n    authToken: string\n): Promise<BackendResult> => {\n    if (song.isUnsaved()) {\n        return left(left(\"A song that hasn't been created can't be updated\"));\n    }\n\n    let parsed: ResponseJSON;\n\n    try {\n        parsed = await ky\n            .put(`${backendHost}/songs/${song.id}`, {\n                json: song,\n                ...authHeader(authToken),\n            })\n            .json();\n    } catch (e) {\n        const parsedError: RequestError = await parseRequestError(e);\n        return left(parsedError);\n    }\n\n    return right(parsed);\n};\n\nexport const deleteSong = async (\n    song: ChordSong,\n    authToken: string\n): Promise<Either<RequestError, true>> => {\n    if (song.isUnsaved()) {\n        return left(left(\"A song that hasn't been created can't be deleted\"));\n    }\n\n    try {\n        await ky.delete(\n            `${backendHost}/songs/${song.id}`,\n            authHeader(authToken)\n        );\n    } catch (e) {\n        const parsedError: RequestError = await parseRequestError(e);\n        return left(parsedError);\n    }\n\n    return right(true);\n};\n\nexport const updateTrackList = async (\n    tracklist: TrackList,\n    authToken: string\n): Promise<BackendResult> => {\n    if (tracklist.song_id === \"\") {\n        return left(left(\"No song ID on the tracklist\"));\n    }\n\n    let parsed: ResponseJSON;\n\n    try {\n        parsed = await ky\n            .put(`${backendHost}/songs/${tracklist.song_id}/tracklist`, {\n                json: tracklist,\n                ...authHeader(authToken),\n            })\n            .json();\n    } catch (e) {\n        const parsedError: RequestError = await parseRequestError(e);\n        return left(parsedError);\n    }\n\n    return right(parsed);\n};\n","import {\n    Box,\n    Dialog,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    Link,\n    styled,\n} from \"@mui/material\";\nimport { getErrorMessageForUser, RequestError } from \"common/backend/errors\";\nimport { PlainFn } from \"common/PlainFn\";\nimport { isLeft } from \"fp-ts/lib/Either\";\nimport { isRight } from \"fp-ts/lib/These\";\nimport React, { useEffect, useState } from \"react\";\n\nconst BoxWithMargin = styled(Box)(({ theme }) => ({\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n}));\n\ninterface OneTimeErrorNotificationProps {\n    componentDescription: string;\n    error: RequestError;\n    onClose?: PlainFn;\n}\n\nconst feedbackFormURL =\n    \"https://docs.google.com/forms/d/e/1FAIpQLScL05fGWOVX-l5kqIoKBz4jreVmCJeIVhFu5TT2txVGNrV5rw/viewform?usp=sf_link\";\n\nconst OneTimeErrorNotification: React.FC<OneTimeErrorNotificationProps> = (\n    props: OneTimeErrorNotificationProps\n): JSX.Element => {\n    const [open, setOpen] = useState(true);\n\n    useEffect(() => {\n        if (isRight(props.error)) {\n            console.error(props.error.right.msg);\n        }\n    }, [props.error]);\n\n    const errorMsg: string = (() => {\n        if (isLeft(props.error)) {\n            return props.error.left;\n        }\n\n        return getErrorMessageForUser(props.error.right);\n    })();\n\n    const handleCloseDialog = () => {\n        setOpen(false);\n        props.onClose?.();\n    };\n\n    const feedbackLink = (\n        <Link\n            href={feedbackFormURL}\n            target=\"_blank\"\n            rel=\"noopener\"\n        >\n            contact form\n        </Link>\n    );\n\n    return (\n        <Dialog open={open} onClose={handleCloseDialog}>\n            <DialogTitle>Error</DialogTitle>\n            <DialogContent>\n                <BoxWithMargin>\n                    <DialogContentText>\n                        {`A component failed to render due to an error: ${props.componentDescription}`}\n                    </DialogContentText>\n                </BoxWithMargin>\n                <BoxWithMargin>\n                    <DialogContentText>{errorMsg}</DialogContentText>\n                </BoxWithMargin>\n                <BoxWithMargin>\n                    <DialogContentText>\n                        {\n                            \"Try refreshing and the problem may go away. If it sticks around feel free to leave a comment in the \"\n                        }\n                        {feedbackLink}\n                    </DialogContentText>\n                </BoxWithMargin>\n            </DialogContent>\n        </Dialog>\n    );\n};\n\nexport default OneTimeErrorNotification;\n","export type PlainFn = () => void;\nexport const noopFn: PlainFn = () => {};\n","import { noopFn } from \"common/PlainFn\";\nimport React from \"react\";\n\ninterface LoginResponse {\n    id: string;\n    name: string | null;\n}\n\nexport class User {\n    private currentGoogleUser: gapi.auth2.CurrentUser;\n    name: string;\n    userID: string;\n    authToken: string;\n\n    constructor(currentGoogleUser: gapi.auth2.CurrentUser, userID: string) {\n        this.currentGoogleUser = currentGoogleUser;\n        this.userID = userID;\n\n        const googleUser: gapi.auth2.GoogleUser = currentGoogleUser.get();\n\n        this.authToken = googleUser.getAuthResponse().id_token;\n        this.name = googleUser.getBasicProfile().getName();\n\n        this.currentGoogleUser.listen(() => {\n            this.refreshAuthToken.call(this);\n        });\n    }\n\n    private refreshAuthToken() {\n        this.authToken = this.getNewAuthToken();\n    }\n\n    private getNewAuthToken(): string {\n        const user = this.currentGoogleUser.get();\n        return user.getAuthResponse().id_token;\n    }\n}\n\nexport type SetUserFn = (user: User | null) => void;\nexport const UserContext = React.createContext<User | null>(null);\nexport const SetUserContext = React.createContext<SetUserFn>(noopFn);\n\nexport const deserializeUser = (\n    response: unknown,\n    googleUser: gapi.auth2.CurrentUser\n): User | null => {\n    if (!validateResponse(response)) {\n        return null;\n    }\n\n    return new User(googleUser, response.id);\n};\n\nconst validateResponse = (response: unknown): response is LoginResponse => {\n    if (typeof response !== \"object\") {\n        return false;\n    }\n\n    if (response === null || response === undefined) {\n        return false;\n    }\n\n    return \"id\" in response && \"name\" in response;\n};\n","import {\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    LinearProgress,\n    List,\n    ListItem,\n    ListItemText,\n    Typography\n} from \"@mui/material\";\nimport { RequestError } from \"common/backend/errors\";\nimport { getSongsForUser } from \"common/backend/requests\";\nimport { SongSummary } from \"common/ChordModel/ChordSong\";\nimport { FetchState } from \"common/fetch\";\nimport { SongPath } from \"common/paths\";\nimport { PlainFn } from \"common/PlainFn\";\nimport OneTimeErrorNotification from \"components/display/OneTimeErrorNotification\";\nimport { UserContext } from \"components/user/userContext\";\nimport { isLeft, left } from \"fp-ts/lib/Either\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface LoadSongsDialogProps {\n    open: boolean;\n    onClose?: PlainFn;\n}\n\nconst LoadSongDialog: React.FC<LoadSongsDialogProps> = (\n    props: LoadSongsDialogProps\n): JSX.Element => {\n    const [fetchState, setFetchState] = useState<\n        FetchState<SongSummary[], RequestError>\n    >({\n        state: \"not-started\",\n    });\n    const user = React.useContext(UserContext);\n    const history = useHistory();\n\n    const wrapInDialog = (contents: React.ReactNode): React.ReactElement => {\n        return (\n            <Dialog open={props.open} onClose={props.onClose} fullWidth>\n                <DialogTitle>Load Songs</DialogTitle>\n                <DialogContent>{contents}</DialogContent>\n            </Dialog>\n        );\n    };\n\n    if (user === null) {\n        return wrapInDialog(\n            <Typography>\n                You must be logged in to load a song graahhhhh *foams at mouth*\n            </Typography>\n        );\n    }\n\n    const summarySortFn = (a: SongSummary, b: SongSummary): number => {\n        if (a.lastSavedAt === b.lastSavedAt) {\n            return 0;\n        }\n\n        // sort in reverse order - most recently saved should come first\n        if (a.lastSavedAt === null) {\n            return 1;\n        }\n\n        if (b.lastSavedAt === null) {\n            return -1;\n        }\n\n        return a.lastSavedAt < b.lastSavedAt ? 1 : -1;\n    };\n\n    const loadSummaries = async () => {\n        const result = await getSongsForUser(user.userID, user.authToken);\n        if (isLeft(result)) {\n            setFetchState({ state: \"error\", error: result.left });\n            return;\n        }\n\n        const summariesResult = SongSummary.fromJSONList(result.right);\n        if (isLeft(summariesResult)) {\n            setFetchState({\n                state: \"error\",\n                error: left(summariesResult.left.message),\n            });\n            return;\n        }\n\n        const summaries = summariesResult.right;\n        summaries.sort(summarySortFn);\n\n        setFetchState({ state: \"loaded\", item: summaries });\n    };\n\n    const summaryListItem = (summary: SongSummary): React.ReactElement => {\n        const songLink = SongPath.root.withID(summary.id);\n\n        const navigateToSong = () => {\n            history.push(songLink.URL());\n            props.onClose?.();\n        };\n\n        const detailElement = (\n            detail: string | undefined,\n            label: string\n        ): React.ReactNode => {\n            if (detail === \"\" || detail === undefined) {\n                return null;\n            }\n\n            return (\n                <Typography\n                    key={`${summary.id}-${label}`}\n                    display=\"block\"\n                    variant=\"caption\"\n                >\n                    {`${label}: ${detail}`}\n                </Typography>\n            );\n        };\n\n        const details = (\n            <>\n                {detailElement(summary.metadata.currentKey, \"In the key of\")}\n                {detailElement(summary.metadata.performedBy, \"Performed by\")}\n                {detailElement(summary.metadata.composedBy, \"Composed by\")}\n                {summary.lastSavedAt !== null && (\n                    <Typography\n                        key={`${summary.id}-lastSavedAt`}\n                        display=\"block\"\n                        variant=\"caption\"\n                    >\n                        {`Last Saved At: ${summary.lastSavedAt.toLocaleString()}`}\n                    </Typography>\n                )}\n            </>\n        );\n\n        const title =\n            summary.metadata.title !== \"\"\n                ? summary.metadata.title\n                : \"(Untitled)\";\n\n        return (\n            <React.Fragment key={summary.id}>\n                <ListItem key={summary.id} button onClick={navigateToSong}>\n                    <ListItemText\n                        primary={title}\n                        primaryTypographyProps={{\n                            key: `${summary.id}-primary`,\n                        }}\n                        secondary={details}\n                        secondaryTypographyProps={{\n                            key: `${summary.id}-seccondary`,\n                        }}\n                    />\n                </ListItem>\n                <Divider key={`${summary.id}-divider`} />\n            </React.Fragment>\n        );\n    };\n\n    const summaryCards = (summaries: SongSummary[]): React.ReactElement => {\n        if (summaries.length === 0) {\n            return (\n                <Typography>\n                    You don't have any songs saved. GET TO IT\n                </Typography>\n            );\n        }\n\n        return <List>{summaries.map(summaryListItem)}</List>;\n    };\n\n    switch (fetchState.state) {\n        case \"not-started\": {\n            setFetchState({ state: \"loading\" });\n            loadSummaries();\n            return <></>;\n        }\n        case \"error\": {\n            const resetState = () => setFetchState({ state: \"not-started\" });\n            return (\n                <OneTimeErrorNotification\n                    componentDescription=\"Load Song Dialog\"\n                    error={fetchState.error}\n                    onClose={resetState}\n                />\n            );\n        }\n        case \"loading\": {\n            return wrapInDialog(<LinearProgress />);\n        }\n        case \"loaded\": {\n            return wrapInDialog(summaryCards(fetchState.item));\n        }\n    }\n};\n\nexport default LoadSongDialog;\n","import { Grid, Paper, styled, Typography } from \"@mui/material\";\nimport React from \"react\";\n\nconst RootPaper = styled(Paper)(({ theme }) => ({\n    margin: theme.spacing(5),\n    padding: theme.spacing(5),\n    minHeight: theme.spacing(46),\n    minWidth: theme.spacing(92),\n    position: \"relative\",\n}));\n\nconst ErrorPage: React.FC<{}> = (): JSX.Element => {\n    return (\n        <Grid container data-testid=\"Tutorial\">\n            <Grid item xs={3}></Grid>\n            <Grid item xs={6}>\n                <RootPaper>\n                    <Typography>An Error Occurred Oh No</Typography>\n                </RootPaper>\n            </Grid>\n            <Grid item xs={3}></Grid>\n        </Grid>\n    );\n};\n\nexport default ErrorPage;\n","import { styled, Typography } from \"@mui/material\";\nimport { inflatingWhitespace } from \"common/Whitespace\";\nimport React from \"react\";\nexport const LyricsTypography = styled(Typography)(({ theme }) => ({\n    color: theme.palette.secondary.light,\n}));\n\nexport const ChordTypography = styled(Typography)(({ theme }) => ({\n    color: theme.palette.primary.main,\n}));\n\nexport const LineBreak = () => {\n    return <Typography>{inflatingWhitespace()}</Typography>;\n};\n","import React, { useRef } from \"react\";\n\nexport type GetPlayerTimeFn = () => number | null;\ntype GetPlayerTimeFnRef = React.MutableRefObject<GetPlayerTimeFn>;\n\nconst nullContextRef = {\n    current: () => null,\n};\n\nexport const PlayerTimeContext =\n    React.createContext<GetPlayerTimeFnRef>(nullContextRef);\n\ninterface PlayerTimeProviderProps {\n    children: React.ReactNode;\n}\n\nconst PlayerTimeProvider: React.FC<PlayerTimeProviderProps> = (\n    props: PlayerTimeProviderProps\n) => {\n    const getPlayerTimeRef: GetPlayerTimeFnRef = useRef<GetPlayerTimeFn>(\n        () => null\n    );\n\n    return (\n        <PlayerTimeContext.Provider value={getPlayerTimeRef}>\n            {props.children}\n        </PlayerTimeContext.Provider>\n    );\n};\n\nexport default PlayerTimeProvider;\n","import { TimestampedSection } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport {\n    findSectionAtTime,\n    TimestampedSectionItem,\n} from \"common/ChordModel/Section\";\nimport { PlayerTimeContext } from \"components/PlayerTimeContext\";\nimport { List } from \"immutable\";\nimport React, { useCallback, useContext, useEffect, useRef, useState } from \"react\";\n\nconst sectionCheckInterval = 250;\n\nexport const PlayerSectionContext =\n    React.createContext<TimestampedSectionItem | null>(null);\n\ninterface PlayerSectionProviderProps {\n    song: ChordSong;\n    children: React.ReactNode;\n}\n\nconst PlayerSectionProvider: React.FC<PlayerSectionProviderProps> = (\n    props: PlayerSectionProviderProps\n) => {\n    const getPlayerTimeRef = useContext(PlayerTimeContext);\n    const sectionsRef = useRef<List<TimestampedSection>>(props.song.timestampedSections);\n    const [currentSection, setCurrentSection] =\n        useState<TimestampedSectionItem | null>(null);\n\n    const maybeSetNewSection = useCallback(() => {\n        const getPlayerTime = getPlayerTimeRef.current;\n\n        const currentTime = getPlayerTime();\n        const isBeginningOfSong = currentTime === 0;\n\n        // also avoiding setting an active section for the beginning of the song\n        // because it will cause sections to highlight or get labelled when in fact\n        // nothing started to play yet\n        if (currentTime === null || isBeginningOfSong) {\n            if (currentSection !== null) {\n                setCurrentSection(null);\n            }\n\n            return;\n        }\n\n        const timestampedSections = sectionsRef.current;\n\n        const nowTimestampedSection = findSectionAtTime(\n            timestampedSections,\n            currentTime\n        );\n\n        const sectionChanged =\n            currentSection?.timestampedSection.lineID !==\n            nowTimestampedSection?.timestampedSection.lineID;\n\n        if (!sectionChanged) {\n            return;\n        }\n\n        setCurrentSection(nowTimestampedSection);\n    }, [currentSection, setCurrentSection, getPlayerTimeRef]);\n\n    const sectionsChanged = sectionsRef.current !== props.song.timestampedSections;\n    if (sectionsChanged) {\n        sectionsRef.current = props.song.timestampedSections;\n        maybeSetNewSection();\n    }\n\n    useEffect(() => {\n        const intervalID = setInterval(\n            maybeSetNewSection,\n            sectionCheckInterval\n        );\n\n        return () => clearInterval(intervalID);\n    }, [maybeSetNewSection]);\n\n    return (\n        <PlayerSectionContext.Provider value={currentSection}>\n            {props.children}\n        </PlayerSectionContext.Provider>\n    );\n};\n\nexport default PlayerSectionProvider;\n","import { TimestampedSection } from \"common/ChordModel/ChordLine\";\nimport { List } from \"immutable\";\n\nexport interface TimestampedSectionItem {\n    index: number;\n    timestampedSection: TimestampedSection;\n}\n\nexport const findSectionAtTime = (\n    timestampedSections: List<TimestampedSection>,\n    currentTime: number\n): TimestampedSectionItem | null => {\n    if (timestampedSections.size === 0) {\n        return null;\n    }\n\n    let sectionItemAtCurrentTime: TimestampedSectionItem | null = null;\n\n    timestampedSections.forEach(\n        (candidateSection: TimestampedSection, index: number) => {\n            if (currentTime < candidateSection.time) {\n                return;\n            }\n\n            if (\n                sectionItemAtCurrentTime !== null &&\n                candidateSection.time <=\n                    sectionItemAtCurrentTime.timestampedSection.time\n            ) {\n                return;\n            }\n\n            sectionItemAtCurrentTime = {\n                index: index,\n                timestampedSection: candidateSection,\n            };\n        }\n    );\n\n    return sectionItemAtCurrentTime;\n};\n\n","import { Box, styled, Theme } from \"@mui/material\";\nimport { alpha } from \"@mui/system\";\nimport { PlayerSectionContext } from \"components/PlayerSectionContext\";\nimport React, { useContext } from \"react\";\n\nexport interface LineWithSectionHighlightProps {\n    children: React.ReactElement | React.ReactElement[];\n    sectionID: string | null;\n    top?: boolean;\n    bottom?: boolean;\n}\n\nconst transitionFunction = \"cubic-bezier(.19,1,.22,1)\";\n\nconst SmoothTransitionBox = styled(Box)({\n    transition: `background-color ${transitionFunction} 0.5s`,\n});\n\nconst backgroundColorStyle = (theme: Theme) => ({\n    backgroundColor: alpha(theme.palette.primary.dark, 0.1),\n});\n\nconst topLineStyle = (theme: Theme) => ({\n    borderTopLeftRadius: theme.spacing(1),\n    borderTopRightRadius: theme.spacing(1),\n});\n\nconst bottomLineStyle = (theme: Theme) => ({\n    borderBottomLeftRadius: theme.spacing(1),\n    borderBottomRightRadius: theme.spacing(1),\n});\n\nconst LineWithSectionHighlight: React.FC<LineWithSectionHighlightProps> = (\n    props: LineWithSectionHighlightProps\n): JSX.Element => {\n    const currentSectionItem = useContext(PlayerSectionContext);\n\n    if (\n        currentSectionItem === null ||\n        currentSectionItem.timestampedSection.lineID !== props.sectionID\n    ) {\n        return <SmoothTransitionBox>{props.children}</SmoothTransitionBox>;\n    }\n\n    const sxFn = (theme: Theme) => {\n        let style = backgroundColorStyle(theme);\n        if (props.top === true) {\n            style = {\n                ...style,\n                ...topLineStyle(theme),\n            };\n        }\n\n        if (props.bottom === true) {\n            style = {\n                ...style,\n                ...bottomLineStyle(theme),\n            };\n        }\n\n        return style;\n    };\n\n    return (\n        <SmoothTransitionBox sx={sxFn}>{props.children}</SmoothTransitionBox>\n    );\n};\n\nexport default LineWithSectionHighlight;\n","import { ChordLine } from \"common/ChordModel/ChordLine\";\nimport LineWithSectionHighlight from \"components/display/LineWithSectionHighlight\";\nimport { List } from \"immutable\";\nimport React from \"react\";\n\nexport const makeSection = (\n    sectionLines: List<ChordLine>,\n    lineElementFn: (\n        line: ChordLine\n    ) => React.ReactElement | React.ReactElement[]\n) => {\n    const sectionID = sectionLines.get(0)?.id;\n    if (sectionID === undefined) {\n        throw new Error(\"Sections are expected to have at least one line\");\n    }\n\n    const makeLineElement = (line: ChordLine, index: number) => {\n        const isTop = index === 0;\n        const isBottom = index === sectionLines.size - 1;\n        return (\n            <LineWithSectionHighlight\n                key={line.id}\n                sectionID={sectionID}\n                top={isTop}\n                bottom={isBottom}\n            >\n                {lineElementFn(line)}\n            </LineWithSectionHighlight>\n        );\n    };\n\n    return sectionLines.map(makeLineElement);\n};\n","import { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { IDable } from \"common/ChordModel/Collection\";\nimport { getSelectedLineIDs } from \"components/edit/LineSelection\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\n\nexport const handleBatchLineDelete = (\n    event: KeyboardEvent,\n    songDispatch: React.Dispatch<ChordSongAction>\n): boolean => {\n    if (event.key !== \"Backspace\") {\n        return false;\n    }\n\n    const lineIDStrs: string[] = getSelectedLineIDs();\n    if (lineIDStrs.length === 0) {\n        return false;\n    }\n\n    const lineIDs = lineIDStrs.map(\n        (id: string): IDable<ChordLine> => ({\n            type: \"ChordLine\",\n            id: id,\n        })\n    );\n\n    songDispatch({\n        type: \"batch-remove-lines\",\n        lineIDs: lineIDs,\n    });\n\n    return true;\n};\n","import {\n    ChordLine,\n    ChordLineValidatedFields,\n    ChordLineValidator\n} from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { getSelectedLineIDs } from \"components/edit/LineSelection\";\nimport { Either, isLeft, left, parseJSON, right } from \"fp-ts/lib/Either\";\nimport { List } from \"immutable\";\nimport * as iots from \"io-ts\";\nimport { useSnackbar } from \"notistack\";\n\nconst CopiedChordLinesValidator = iots.type({\n    copiedChordLines: iots.array(ChordLineValidator),\n});\n\ninterface CopiedChordLines {\n    copiedChordLines: ChordLine[];\n}\n\nexport const deserializeCopiedChordLines = (\n    jsonStr: string\n): Either<Error, ChordLine[]> | null => {\n    const result: Either<Error, unknown> = parseJSON(\n        jsonStr,\n        () => new Error(\"Failed to parse json string\")\n    );\n\n    if (isLeft(result)) {\n        return result;\n    }\n\n    const jsonObj = result.right as any;\n\n    // if the JSON doesn't contain this field, then it's a JSON copy payload\n    // from somewhere else - don't handle it\n    if (jsonObj.copiedChordLines === undefined) {\n        return null;\n    }\n\n    const validationResult = CopiedChordLinesValidator.decode(jsonObj);\n\n    if (isLeft(validationResult)) {\n        return left(new Error(\"Invalid Chord Lines payload\"));\n    }\n\n    const validatedChordLineObjects = validationResult.right.copiedChordLines;\n    const chordLines: ChordLine[] = validatedChordLineObjects.map(\n        (obj: ChordLineValidatedFields) => {\n            return ChordLine.fromValidatedFields(obj);\n        }\n    );\n\n    return right(chordLines);\n};\n\nconst serializeCopiedChordLines = (chordLines: List<ChordLine>): string => {\n    const copyableLines: List<ChordLine> = chordLines.map((line: ChordLine) =>\n        line.forCopying()\n    );\n    const payload: CopiedChordLines = {\n        copiedChordLines: copyableLines.toArray(),\n    };\n\n    return JSON.stringify(payload);\n};\n\nexport const useLineCopyHandler = (song: ChordSong) => {\n    const { enqueueSnackbar } = useSnackbar();\n\n    return (event: React.ClipboardEvent<HTMLDivElement>): boolean => {\n        const lineIDs: string[] = getSelectedLineIDs();\n        const lines: List<ChordLine> = song.chordLines.list.filter(\n            (line: ChordLine): boolean => {\n                return lineIDs.includes(line.id);\n            }\n        );\n\n        if (lines.size === 0) {\n            return false;\n        }\n\n        const serialized = serializeCopiedChordLines(lines);\n        event.clipboardData.setData(\"application/json\", serialized);\n\n        event.preventDefault();\n\n        let copyMsg: string;\n        if (lines.size === 1) {\n            copyMsg = `1 line copied to your clipboard`;\n        } else {\n            copyMsg = `${lines.size} lines copied to your clipboard`;\n        }\n\n        enqueueSnackbar(copyMsg, { variant: \"info\" });\n        return true;\n    };\n};\n","import { noopFn, PlainFn } from \"common/PlainFn\";\nimport React, { useContext, useState } from \"react\";\n\nexport interface InteractionSetter {\n    startInteraction: PlainFn;\n    endInteraction: PlainFn;\n}\n\nconst defaultSetter: InteractionSetter = {\n    startInteraction: noopFn,\n    endInteraction: noopFn,\n};\n\nexport const InteractionContext =\n    React.createContext<InteractionSetter>(defaultSetter);\n\ninterface EditingState {\n    editing: boolean;\n    startEdit: PlainFn;\n    finishEdit: PlainFn;\n}\n\nexport const useEditingState = (): EditingState => {\n    const [editing, setEditing] = useState(false);\n    const { startInteraction, endInteraction } = useContext(InteractionContext);\n\n    const startEdit = () => {\n        setEditing(true);\n        startInteraction();\n    };\n\n    const finishEdit = () => {\n        setEditing(false);\n        endInteraction();\n    };\n\n    return {\n        editing: editing,\n        startEdit: startEdit,\n        finishEdit: finishEdit,\n    };\n};\n","import { css, cx } from \"@emotion/css\";\nimport { Theme, useTheme } from \"@mui/material\";\n\nexport const spaceClassName = \"LyricTokenSpace\";\nexport const wordClassName = \"LyricTokenWord\";\nexport const firstTokenClassName = \"FirstLyricToken\";\n\nexport const chordTargetClassName = \"ChordTarget\";\nexport const chordSymbolClassName = \"ChordSymbol\";\n\nconst highlightedSpaceStyle = (theme: Theme) => ({\n    backgroundColor: theme.palette.primary.main,\n    borderRadius: \"0.3em\",\n});\n\nconst highlightedWordStyle = (theme: Theme) => ({\n    color: theme.palette.primary.main,\n});\n\nconst outlineStyle = (theme: Theme) => ({\n    borderStyle: \"solid\",\n    borderColor: theme.palette.primary.main,\n    borderRadius: \"0.3em\",\n    borderWidth: \"0.075em\",\n});\n\nexport interface HighlightChordLyricStyleOptions {\n    dragOverOutline?: (theme: Theme) => {\n        color?: string;\n        borderColor?: string;\n    };\n    hoverOutline?: (theme: Theme) => { color?: string; borderColor?: string };\n    customLyricClassSelector?: string;\n    customChordTargetClassSelector?: string;\n    customChordSymbolClassSelector?: string;\n}\n\nexport interface HighlightableBlockStyles {\n    dragOver: string;\n    hoverable: string;\n}\n\nexport const makeHighlightableBlockStyles = (\n    options?: HighlightChordLyricStyleOptions\n) => {\n    const dragOverStyleForTheme = dragOverChordLyricStyle(options);\n    const hoverStyleForTheme = hoverChordLyricStyle(options);\n\n    return (): HighlightableBlockStyles => {\n        const theme = useTheme();\n        const dragOverStyle = dragOverStyleForTheme(theme);\n        const hoverStyle = hoverStyleForTheme(theme);\n\n        return {\n            dragOver: cx(css(dragOverStyle)),\n            hoverable: cx(css(hoverStyle)),\n        };\n    };\n};\n\nconst withCustomLyricSelector = (\n    selector: string,\n    options?: HighlightChordLyricStyleOptions\n): string => {\n    if (options?.customLyricClassSelector === undefined) {\n        return selector;\n    }\n\n    return `${selector}.${options.customLyricClassSelector}`;\n};\n\nconst withCustomChordTargetSelector = (\n    selector: string,\n    options?: HighlightChordLyricStyleOptions\n): string => {\n    if (options?.customChordTargetClassSelector === undefined) {\n        return selector;\n    }\n\n    return `${selector}.${options.customChordTargetClassSelector}`;\n};\n\nconst withCustomChordSymbolSelector = (\n    selector: string,\n    options?: HighlightChordLyricStyleOptions\n): string => {\n    if (options?.customChordSymbolClassSelector === undefined) {\n        return selector;\n    }\n\n    return `${selector}.${options.customChordSymbolClassSelector}`;\n};\n\nconst dragOverChordLyricStyle = (options?: HighlightChordLyricStyleOptions) => {\n    return (theme: Theme) => {\n        const highlightedSpace = highlightedSpaceStyle(theme);\n        const highlightedWord = highlightedWordStyle(theme);\n\n        const customOutlineStyles =\n            options?.dragOverOutline !== undefined\n                ? options.dragOverOutline(theme)\n                : undefined;\n\n        const outline = {\n            ...outlineStyle(theme),\n            ...customOutlineStyles,\n        };\n\n        const spaceClassSelector = withCustomLyricSelector(\n            `.${spaceClassName}`,\n            options\n        );\n        const wordClassSelector = withCustomLyricSelector(\n            `.${wordClassName}`,\n            options\n        );\n\n        const chordSymbolSelector = withCustomChordSymbolSelector(\n            `.${chordSymbolClassName}`,\n            options\n        );\n\n        return {\n            [`& ${spaceClassSelector}`]: highlightedSpace,\n            [`& ${wordClassSelector}`]: highlightedWord,\n            [`& ${chordSymbolSelector}`]: outline,\n        };\n    };\n};\n\nexport const hoverChordLyricStyle = (\n    options?: HighlightChordLyricStyleOptions\n) => {\n    return (theme: Theme) => {\n        const highlightedSpace = highlightedSpaceStyle(theme);\n        const highlightedWord = highlightedWordStyle(theme);\n\n        const customOutlineStyles =\n            options?.hoverOutline !== undefined\n                ? options.hoverOutline(theme)\n                : undefined;\n\n        const outline = {\n            ...outlineStyle(theme),\n            ...customOutlineStyles,\n        };\n\n        const spaceClassSelector = withCustomLyricSelector(\n            `.${spaceClassName}`,\n            options\n        );\n        const wordClassSelector = withCustomLyricSelector(\n            `.${wordClassName}`,\n            options\n        );\n        const chordTargetSelector = withCustomChordTargetSelector(\n            `.${chordTargetClassName}`,\n            options\n        );\n        const chordSymbolSelector = withCustomChordSymbolSelector(\n            `.${chordSymbolClassName}`,\n            options\n        );\n\n        return {\n            [`& ${chordTargetSelector}:hover ~ ${spaceClassSelector}`]:\n                highlightedSpace,\n            [`& ${chordTargetSelector}:hover ~ * ${spaceClassSelector}`]:\n                highlightedSpace,\n\n            [`& ${chordTargetSelector}:hover ~ ${wordClassSelector}`]:\n                highlightedWord,\n            [`& ${chordTargetSelector}:hover ~ * ${wordClassSelector}`]:\n                highlightedWord,\n\n            [`& ${chordTargetSelector}${chordSymbolSelector}:hover`]: outline,\n            [`& ${chordTargetSelector}:hover ${chordSymbolSelector}`]: outline,\n        };\n    };\n};\n","import { Lyric } from \"common/ChordModel/Lyric\";\nimport Tab, {\n    findTabType,\n    isValidTabValue,\n    lyricTabTypeOfDOMNode,\n    SizedTab\n} from \"components/lyrics/Tab\";\nimport { List } from \"immutable\";\nimport React from \"react\";\n\nconst deserializeLyricStr = (\n    lyrics: string,\n    tokenIndex: number,\n    edit: boolean\n): React.ReactElement | string => {\n    if (isValidTabValue(\"serializedStr\", lyrics)) {\n        const tabType = findTabType(\"serializedStr\", lyrics);\n        return <Tab key={tokenIndex} type={tabType.sizedTab} edit={edit} />;\n    }\n\n    return lyrics;\n};\n\nexport const deserializeLyrics = (\n    lyric: Lyric,\n    edit: boolean\n): (React.ReactElement | string)[] => {\n    const nodes: (React.ReactElement | string)[] = [];\n    const tokens: List<Lyric> = lyric.tokenize();\n\n    for (let i = 0; i < tokens.size; i++) {\n        const token = tokens.get(i);\n        if (token === undefined) {\n            throw new Error(\"Token index not found\");\n        }\n        const node: React.ReactElement | string = token.get((lyrics: string) =>\n            deserializeLyricStr(lyrics, i, edit)\n        );\n\n        // merge strings where possible\n        if (\n            typeof node === \"string\" &&\n            nodes.length > 0 &&\n            typeof nodes[nodes.length - 1] === \"string\"\n        ) {\n            nodes[nodes.length - 1] += node;\n        } else {\n            nodes.push(node);\n        }\n    }\n\n    return nodes;\n};\n\nexport const serializeLyrics = (childNodes: NodeListOf<ChildNode>): Lyric => {\n    let serializedLyrics: string = \"\";\n    childNodes.forEach((childNode: ChildNode) => {\n        const sizedTab: SizedTab | null = lyricTabTypeOfDOMNode(childNode);\n\n        if (sizedTab !== null) {\n            const tabType = findTabType(\"sizedTab\", sizedTab);\n            serializedLyrics += tabType.serializedStr;\n        } else {\n            serializedLyrics += childNode.textContent;\n        }\n    });\n\n    return new Lyric(serializedLyrics);\n};\n","import { cx } from \"@emotion/css\";\nimport { styled, Typography, TypographyProps } from \"@mui/material\";\nimport { CSSProperties } from \"@mui/styled-engine\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { DataTestID } from \"common/DataTestID\";\nimport { spaceClassName, wordClassName } from \"components/edit/HighlightableBlockStyle\";\nimport { deserializeLyrics } from \"components/lyrics/Serialization\";\nimport React from \"react\";\n\nexport const lyricTypographyVariant: \"h6\" = \"h6\";\n\nexport const lyricTypographyProps = {\n    variant: lyricTypographyVariant,\n    display: \"inline\" as \"inline\",\n};\n\nexport const lyricStyle: CSSProperties = {\n    whiteSpace: \"pre\",\n    wordSpacing: \".15em\",\n    display: \"inline-block\",\n};\n\nexport const LyricTypography = styled(Typography)<TypographyProps>({\n    ...lyricStyle,\n});\n\ninterface LyricTypographyProps extends DataTestID {\n    children: Lyric;\n    className?: string;\n}\n\nconst LyricDisplay: React.FC<LyricTypographyProps> = (\n    props: LyricTypographyProps\n): JSX.Element => {\n    const customClassName = props.className ?? \"\";\n\n    const className = cx({\n        [spaceClassName]: props.children.isEntirelySpaceOrTab(),\n        [wordClassName]: !props.children.isEntirelySpaceOrTab(),\n        [customClassName]: props.className !== undefined,\n    });\n\n    return (\n        <LyricTypography\n            {...lyricTypographyProps}\n            className={className}\n            data-testid={props[\"data-testid\"]}\n        >\n            {deserializeLyrics(props.children, false)}\n        </LyricTypography>\n    );\n};\n\nexport default LyricDisplay;\n","import { styled, Typography } from \"@mui/material\";\nimport { inflateIfEmpty } from \"common/Whitespace\";\nimport { lyricTypographyVariant } from \"components/display/Lyric\";\nimport React from \"react\";\n\nconst ChordTypography = styled(Typography)({\n    whiteSpace: \"pre\",\n    cursor: \"pointer\",\n    fontFamily: \"PoriChord\",\n    userSelect: \"all\",\n});\n\nexport interface ChordSymbolProps {\n    children: string;\n    className?: string;\n}\n\nconst ChordSymbol = React.forwardRef(\n    (\n        props: ChordSymbolProps,\n        ref: React.ForwardedRef<HTMLSpanElement>\n    ): JSX.Element => {\n        const formattedChord = (): string => {\n            let chord = props.children;\n            if (chord.endsWith(\" \")) {\n                return chord;\n            }\n\n            chord = chord + \" \";\n\n            return inflateIfEmpty(chord);\n        };\n\n        return (\n            <ChordTypography\n                variant={lyricTypographyVariant} // keep chords and lyrics the same size\n                display=\"inline\"\n                data-testid=\"ChordSymbol\"\n                className={props.className}\n                ref={ref}\n            >\n                {formattedChord()}\n            </ChordTypography>\n        );\n    }\n);\n\nexport default ChordSymbol;\n","import { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { IDable } from \"common/ChordModel/Collection\";\n\nexport const DNDChordType: \"chord\" = \"chord\";\n\nexport interface DNDChord {\n    type: typeof DNDChordType;\n    sourceBlockID: IDable<ChordBlock>;\n    chord: string;\n}\n\nexport const NewDNDChord = (\n    sourceBlockID: IDable<ChordBlock>,\n    chord: string\n): DNDChord => {\n    return {\n        type: DNDChordType,\n        sourceBlockID: sourceBlockID,\n        chord: chord,\n    };\n};\n\nexport interface ClassNameable {\n    className?: string;\n}\n\nexport type DragOverHandler = (isDraggingOver: boolean) => void;\n","import { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { IDable } from \"common/ChordModel/Collection\";\nimport { DNDChord, DNDChordType } from \"components/edit/block-dnd/common\";\nimport { ConnectDropTarget, DropTargetMonitor, useDrop } from \"react-dnd\";\n\ninterface DropObject {\n    type: \"dropped-chord-result\";\n    readonly tokenIndex: number;\n    readonly blockID: IDable<ChordBlock>;\n}\n\nexport interface DropResult extends DropObject {\n    dropEffect: \"move\" | \"copy\";\n}\n\nexport const isDropResult = (\n    maybeDropResult: any\n): maybeDropResult is DropResult => {\n    if (maybeDropResult === null || maybeDropResult === undefined) {\n        return false;\n    }\n\n    if (typeof maybeDropResult !== \"object\") {\n        return false;\n    }\n\n    return maybeDropResult.type === \"dropped-chord-result\";\n};\n\ninterface DropCollector {\n    isOver: boolean;\n}\n\nexport const useChordDrop = (\n    blockID: IDable<ChordBlock>,\n    tokenIndex: number\n): [ConnectDropTarget, boolean] => {\n    const [{ isOver }, dropRef] = useDrop<DNDChord, DropObject, DropCollector>({\n        accept: DNDChordType,\n        drop: (): DropObject => {\n            return {\n                type: \"dropped-chord-result\",\n                blockID: blockID,\n                tokenIndex: tokenIndex,\n            };\n        },\n        collect: (monitor: DropTargetMonitor): DropCollector => ({\n            isOver: monitor.isOver({ shallow: true }),\n        }),\n    });\n\n    return [dropRef, isOver];\n};\n","import { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { IDable } from \"common/ChordModel/Collection\";\nimport { ClassNameable } from \"components/edit/block-dnd/common\";\nimport { useChordDrop } from \"components/edit/block-dnd/useChordDrop\";\nimport React from \"react\";\nimport { ConnectDropTarget } from \"react-dnd\";\n\ninterface ChordlessTokenDroppableProps {\n    children: (\n        dropTargetRef: ConnectDropTarget\n    ) => React.ReactElement<ClassNameable>;\n    hoverableClassName: string;\n    dragOverClassName: string;\n    blockID: IDable<ChordBlock>;\n    tokenIndex: number;\n}\n\nconst ChordlessTokenDroppable: React.FC<ChordlessTokenDroppableProps> = (\n    props: ChordlessTokenDroppableProps\n): JSX.Element => {\n    const [dropRef, isOver] = useChordDrop(props.blockID, props.tokenIndex);\n\n    const childClassName: string = isOver\n        ? props.dragOverClassName\n        : props.hoverableClassName;\n\n    const childElement = props.children(dropRef);\n\n    const childrenWithClassName = React.cloneElement(childElement, {\n        className: childClassName,\n    });\n\n    return childrenWithClassName;\n};\n\nexport default ChordlessTokenDroppable;\n","import { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { IDable } from \"common/ChordModel/Collection\";\nimport { useChordDrop } from \"components/edit/block-dnd/useChordDrop\";\nimport React, { useEffect } from \"react\";\nimport { ConnectDropTarget } from \"react-dnd\";\n\ninterface ChordTokenDroppableProps {\n    children: (dropRef: ConnectDropTarget) => React.ReactElement;\n    blockID: IDable<ChordBlock>;\n    onDragOver: (isDraggingOver: boolean) => void;\n}\n\nconst ChordTokenDroppable: React.FC<ChordTokenDroppableProps> = (\n    props: ChordTokenDroppableProps\n) => {\n    const [dropRef, isOver] = useChordDrop(props.blockID, 0);\n\n    const onDragOver = props.onDragOver;\n\n    useEffect(() => {\n        onDragOver(isOver);\n    }, [onDragOver, isOver]);\n\n    return props.children(dropRef);\n};\n\nexport default ChordTokenDroppable;\n","import { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { IDable } from \"common/ChordModel/Collection\";\nimport ChordSymbol, { ChordSymbolProps } from \"components/display/ChordSymbol\";\nimport { DNDChord, NewDNDChord } from \"components/edit/block-dnd/common\";\nimport { isDropResult } from \"components/edit/block-dnd/useChordDrop\";\nimport React, { useCallback } from \"react\";\nimport { DragSourceMonitor, useDrag } from \"react-dnd\";\n\ninterface DraggableChordSymbolProps extends ChordSymbolProps {\n    chordBlockID: IDable<ChordBlock>;\n    onDrop: (params: {\n        chord: string;\n        sourceBlockID: IDable<ChordBlock>;\n        destinationBlockID: IDable<ChordBlock>;\n        splitIndex: number;\n        dropType: \"move\" | \"copy\";\n    }) => void;\n}\n\nconst DraggableChordSymbol = React.forwardRef(\n    (\n        props: DraggableChordSymbolProps,\n        ref: React.ForwardedRef<Element>\n    ): JSX.Element => {\n        const [, dragRef] = useDrag({\n            item: NewDNDChord(props.chordBlockID, props.children),\n            end: (chord: DNDChord | undefined, monitor: DragSourceMonitor) => {\n                if (chord === undefined) {\n                    return;\n                }\n\n                const dropResult = monitor.getDropResult();\n\n                if (!isDropResult(dropResult)) {\n                    return;\n                }\n\n                props.onDrop({\n                    chord: chord.chord,\n                    sourceBlockID: chord.sourceBlockID,\n                    destinationBlockID: dropResult.blockID,\n                    splitIndex: dropResult.tokenIndex,\n                    dropType: dropResult.dropEffect,\n                });\n            },\n        });\n\n        const combinedRefCallback = useCallback(\n            (chordSymbolRef: HTMLSpanElement | null) => {\n                dragRef(chordSymbolRef);\n                if (ref !== null) {\n                    if (typeof ref === \"function\") {\n                        ref(chordSymbolRef);\n                    } else {\n                        ref.current = chordSymbolRef;\n                    }\n                }\n            },\n            [dragRef, ref]\n        );\n\n        return (\n            <ChordSymbol className={props.className} ref={combinedRefCallback}>\n                {props.children}\n            </ChordSymbol>\n        );\n    }\n);\n\nexport default DraggableChordSymbol;\n","import { DragOverHandler } from \"components/edit/block-dnd/common\";\nimport { List } from \"immutable\";\nimport { useCallback, useReducer } from \"react\";\n\ntype SetDragOverAction = {\n    index: number;\n    isDraggingOver: boolean;\n};\n\nconst reducer = (\n    list: List<boolean>,\n    action: SetDragOverAction\n): List<boolean> => {\n    return list.set(action.index, action.isDraggingOver);\n};\n\nexport const useChordTokenDragState = (\n    hoverableClassName: string,\n    dragOverClassName: string\n): [string, DragOverHandler, DragOverHandler] => {\n    const [dragOverState, dispatch] = useReducer(reducer, List([false, false]));\n\n    const getValue = (index: number): boolean => {\n        const value = dragOverState.get(index);\n        if (value === undefined) {\n            throw new Error(\"Out of index error\");\n        }\n\n        return value;\n    };\n\n    const handlers = [\n        useCallback(\n            (isDraggingOver: boolean) =>\n                dispatch({\n                    index: 0,\n                    isDraggingOver: isDraggingOver,\n                }),\n            [dispatch]\n        ),\n        useCallback(\n            (isDraggingOver: boolean) =>\n                dispatch({\n                    index: 1,\n                    isDraggingOver: isDraggingOver,\n                }),\n            [dispatch]\n        ),\n    ];\n\n    const isDragging = getValue(0) || getValue(1);\n    const gridClassName = isDragging ? dragOverClassName : hoverableClassName;\n\n    return [gridClassName, handlers[0], handlers[1]];\n};\n","import {\n    InputBaseComponentProps,\n    TextField,\n    TextFieldProps,\n    Theme,\n    TypographyStyle,\n    TypographyVariant,\n    useTheme\n} from \"@mui/material\";\nimport { MUIStyledProps } from \"common/styledProps\";\nimport React from \"react\";\n\ninterface ControlledTextInputProps extends MUIStyledProps {\n    value: string;\n    onValueChange: (newValue: string) => void;\n    onFinish?: (newValue: string) => void;\n    label?: string;\n    width?: string;\n    variant: TextFieldProps[\"variant\"];\n    InputProps?: TextFieldProps[\"InputProps\"];\n    inputRef?: TextFieldProps[\"inputRef\"];\n    error?: TextFieldProps[\"error\"];\n    typographyVariant?: TypographyVariant;\n    placeholder?: string;\n    paddingSpacing?: number;\n}\n\nconst ControlledTextInput: React.FC<ControlledTextInputProps> = (\n    props: ControlledTextInputProps\n): JSX.Element => {\n    const theme: Theme = useTheme();\n\n    const updateValue = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => {\n        props.onValueChange(event.target.value);\n    };\n\n    const keyDownHandler = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"Enter\") {\n            finish(props.value);\n        }\n    };\n\n    const finish = (newValue: string) => {\n        props.onFinish?.(newValue);\n    };\n\n    const blurHandler = () => {\n        finish(props.value);\n    };\n\n    const browserInputProps = (() => {\n        let variant: TypographyStyle | undefined = undefined;\n        if (props.typographyVariant !== undefined) {\n            variant = theme?.typography?.[props.typographyVariant];\n        }\n\n        const padding: string = (() => {\n            if (props.paddingSpacing === undefined) {\n                return \"0px\";\n            }\n\n            return theme.spacing(props.paddingSpacing);\n        })();\n\n        const fontSize: string | number | undefined = variant?.fontSize;\n\n        const inputProps: InputBaseComponentProps = {\n            style: {\n                padding: padding,\n                fontSize: fontSize,\n                opacity: 1,\n            },\n        };\n\n        if (props.width !== undefined && inputProps.style) {\n            inputProps.style.width = props.width;\n        }\n\n        return inputProps;\n    })();\n\n    return (\n        <TextField\n            autoFocus\n            className={props.className}\n            variant={props.variant}\n            label={props.label}\n            inputProps={{\n                \"data-testid\": \"InnerInput\",\n                spellCheck: false,\n                ...browserInputProps,\n            }}\n            InputProps={props.InputProps}\n            inputRef={props.inputRef}\n            value={props.value}\n            onBlur={blurHandler}\n            onChange={updateValue}\n            onKeyDown={keyDownHandler}\n            placeholder={props.placeholder}\n            error={props.error}\n            fullWidth\n            data-testid=\"TextInput\"\n        />\n    );\n};\n\nexport default ControlledTextInput;\n","import { TextFieldProps, TypographyVariant } from \"@mui/material\";\nimport { MUIStyledProps } from \"common/styledProps\";\nimport ControlledTextInput from \"components/edit/ControlledTextInput\";\nimport React, { useState } from \"react\";\n\ninterface TextInputProps extends MUIStyledProps {\n    value: string;\n    onFinish?: (newValue: string) => void;\n    width?: string;\n    typographyVariant?: TypographyVariant;\n    variant: TextFieldProps[\"variant\"];\n}\n\nconst TextInput: React.FC<TextInputProps> = (\n    props: TextInputProps\n): JSX.Element => {\n    const [value, setValue] = useState<string>(props.value);\n\n    return (\n        <ControlledTextInput\n            className={props.className}\n            value={value}\n            onValueChange={setValue}\n            variant={props.variant}\n            typographyVariant={props.typographyVariant}\n            width={props.width}\n            onFinish={props.onFinish}\n        />\n    );\n};\n\nexport default TextInput;\n","import { cx } from \"@emotion/css\";\nimport { Box, styled } from \"@mui/material\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport LyricDisplay, {\n    LyricTypography,\n    lyricTypographyProps\n} from \"components/display/Lyric\";\nimport {\n    chordSymbolClassName,\n    chordTargetClassName,\n    firstTokenClassName\n} from \"components/edit/HighlightableBlockStyle\";\nimport { deserializeLyrics } from \"components/lyrics/Serialization\";\nimport React from \"react\";\n\nconst InvisibleTypography = styled(LyricTypography)({\n    color: \"transparent\",\n    cursor: \"pointer\",\n    userSelect: \"none\",\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    transform: \"translate(0%, -110%)\",\n});\n\ninterface ChordTargetBoxProps {\n    children: React.ReactNode;\n    className?: string;\n    onClick?: (event: React.MouseEvent<HTMLSpanElement>) => void;\n}\n\nconst ChordTargetBox: React.FC<ChordTargetBoxProps> = (\n    props: ChordTargetBoxProps\n): JSX.Element => {\n    return (\n        <InvisibleTypography\n            {...lyricTypographyProps}\n            onClick={props.onClick}\n            className={props.className}\n            data-testid=\"ChordEditButton\"\n        >\n            {props.children}\n        </InvisibleTypography>\n    );\n};\n\ninterface TokenProps {\n    children: Lyric;\n    index: number;\n    className?: string;\n    invisibleTarget?: { onClick: ChordTargetBoxProps[\"onClick\"] };\n}\n\nconst Token = React.forwardRef(\n    (props: TokenProps, ref: React.ForwardedRef<Element>): JSX.Element => {\n        const invisibleTarget = (): JSX.Element | null => {\n            if (props.invisibleTarget === undefined) {\n                return null;\n            }\n\n            const content: React.ReactNode[] = deserializeLyrics(\n                props.children,\n                false\n            );\n\n            return (\n                <ChordTargetBox\n                    className={cx(chordTargetClassName, chordSymbolClassName)}\n                    onClick={props.invisibleTarget.onClick}\n                >\n                    {content}\n                </ChordTargetBox>\n            );\n        };\n\n        const lyricClassName: string | undefined =\n            props.index === 0 ? firstTokenClassName : undefined;\n\n        const lyricBlock = (\n            <LyricDisplay\n                className={lyricClassName}\n                data-testid={`Token-${props.index}`}\n            >\n                {props.children}\n            </LyricDisplay>\n        );\n\n        return (\n            <Box\n                className={props.className}\n                key={props.index}\n                position=\"relative\"\n                display=\"inline\"\n                data-testid={`TokenBox-${props.index}`}\n                ref={ref}\n            >\n                {invisibleTarget()}\n                {lyricBlock}\n            </Box>\n        );\n    }\n);\n\nexport default Token;\n","import { cx } from \"@emotion/css\";\nimport { Box, Grid, inputBaseClasses, styled, Theme } from \"@mui/material\";\nimport { red } from \"@mui/material/colors\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { IDable } from \"common/ChordModel/Collection\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { DataTestID } from \"common/DataTestID\";\nimport { inflatingWhitespace } from \"common/Whitespace\";\nimport ChordSymbol from \"components/display/ChordSymbol\";\nimport { lyricTypographyVariant } from \"components/display/Lyric\";\nimport ChordlessTokenDroppable from \"components/edit/block-dnd/ChordlessTokenDroppable\";\nimport ChordTokenDroppable from \"components/edit/block-dnd/ChordTokenDroppable\";\nimport DraggableChordSymbol from \"components/edit/block-dnd/DraggableChordSymbol\";\nimport { useChordTokenDragState } from \"components/edit/block-dnd/useChordTokenDragState\";\nimport {\n    chordTargetClassName,\n    firstTokenClassName,\n    makeHighlightableBlockStyles\n} from \"components/edit/HighlightableBlockStyle\";\nimport { useEditingState } from \"components/edit/InteractionContext\";\nimport TextInput from \"components/edit/TextInput\";\nimport Token from \"components/edit/Token\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\nimport { List } from \"immutable\";\nimport React from \"react\";\nimport { ConnectDropTarget } from \"react-dnd\";\n\nconst chordSymbolClassName = \"ChordSymbol\";\n\nconst blockChordSymbolClassName = \"BlockChordSymbol\";\nconst blockChordTargetClassName = \"BlockChordTarget\";\n\n// this height keeps the chords, the chord input, and lyrics the same height\n// so that everything lines up\nconst rowHeight = \"2em\";\n\nconst ChordInput = styled(TextInput)({\n    width: \"4em\",\n    height: rowHeight,\n    [`& .${inputBaseClasses.input}`]: {\n        fontFamily: \"PoriChord\",\n    },\n});\n\nconst useFirstTokenStyle = makeHighlightableBlockStyles({\n    dragOverOutline: (theme: Theme) => ({\n        borderColor: red[300],\n        color: red[300],\n    }),\n    hoverOutline: (theme: Theme) => ({\n        color: theme.palette.primary.dark,\n    }),\n    customLyricClassSelector: firstTokenClassName,\n    customChordSymbolClassSelector: blockChordSymbolClassName,\n    customChordTargetClassSelector: blockChordTargetClassName,\n});\n\nconst useNormalTokenStyle = makeHighlightableBlockStyles();\n\nexport interface BlockProps extends DataTestID {\n    chordBlock: ChordBlock;\n    songDispatch: React.Dispatch<ChordSongAction>;\n\n    onChordChange: (id: IDable<ChordBlock>, newChord: string) => void;\n    onBlockSplit: (id: IDable<ChordBlock>, splitIndex: number) => void;\n}\n\nconst Block: React.FC<BlockProps> = (props: BlockProps): JSX.Element => {\n    const chordTokenStyle = useFirstTokenStyle();\n    const chordlessTokenStyle = useNormalTokenStyle();\n\n    const { editing, startEdit, finishEdit } = useEditingState();\n\n    const [gridClassName, onChordDragOver, onLyricDragOver] =\n        useChordTokenDragState(\n            chordTokenStyle.hoverable,\n            chordTokenStyle.dragOver\n        );\n\n    let lyricTokens: List<Lyric> = props.chordBlock.lyricTokens;\n\n    if (lyricTokens.size === 0) {\n        const whitespaceLyric = new Lyric(inflatingWhitespace());\n        lyricTokens = List([whitespaceLyric]);\n    }\n\n    const clickHandler: (\n        tokenIndex: number\n    ) => (event: React.MouseEvent<HTMLSpanElement>) => void = (\n        tokenIndex: number\n    ) => {\n        return (event: React.MouseEvent<HTMLSpanElement>) => {\n            // block splitting happens after the first token\n            // as first token is already aligned with the current chord\n            if (tokenIndex !== 0) {\n                props.onBlockSplit(props.chordBlock, tokenIndex);\n            }\n\n            startEdit();\n\n            event.stopPropagation();\n        };\n    };\n\n    const onDrop = (params: {\n        chord: string;\n        sourceBlockID: IDable<ChordBlock>;\n        destinationBlockID: IDable<ChordBlock>;\n        splitIndex: number;\n        dropType: \"move\" | \"copy\";\n    }) => {\n        props.songDispatch({\n            type: \"drag-and-drop-chord\",\n            sourceBlockID: params.sourceBlockID,\n            newChord: params.chord,\n            dropType: params.dropType,\n            destinationBlockID: params.destinationBlockID,\n            splitIndex: params.splitIndex,\n        });\n    };\n\n    const endEdit = (newChord: string) => {\n        props.onChordChange?.(props.chordBlock, newChord);\n\n        finishEdit();\n    };\n\n    const makeFirstToken = (lyric: Lyric): React.ReactElement => {\n        const blockHasChord = props.chordBlock.chord !== \"\";\n        if (!blockHasChord) {\n            return makeChordlessToken(lyric, 0);\n        }\n\n        return (\n            <ChordTokenDroppable\n                key={0}\n                blockID={props.chordBlock}\n                onDragOver={onLyricDragOver}\n            >\n                {(dropRef: ConnectDropTarget) => (\n                    <Token index={0} ref={dropRef}>\n                        {lyric}\n                    </Token>\n                )}\n            </ChordTokenDroppable>\n        );\n    };\n\n    const makeChordlessToken = (\n        lyric: Lyric,\n        index: number\n    ): React.ReactElement => {\n        const invisibleTargetOption = {\n            onClick: clickHandler(index),\n        };\n\n        return (\n            <ChordlessTokenDroppable\n                key={index}\n                blockID={props.chordBlock}\n                tokenIndex={index}\n                hoverableClassName={chordlessTokenStyle.hoverable}\n                dragOverClassName={chordlessTokenStyle.dragOver}\n            >\n                {(dropRef: ConnectDropTarget) => (\n                    <Token\n                        index={index}\n                        invisibleTarget={invisibleTargetOption}\n                        ref={dropRef}\n                    >\n                        {lyric}\n                    </Token>\n                )}\n            </ChordlessTokenDroppable>\n        );\n    };\n\n    const firstLyricToken = lyricTokens.get(0);\n    if (firstLyricToken === undefined) {\n        throw new Error(\"Lyric tokens list guaranteed at least one token\");\n    }\n\n    const subsequentLyricTokens = lyricTokens.slice(1);\n\n    const firstLyricBlock = makeFirstToken(firstLyricToken);\n    const subsequentLyricBlocks = subsequentLyricTokens.map(\n        (lyricToken: Lyric, index: number) =>\n            makeChordlessToken(lyricToken, index + 1)\n    );\n\n    const lyricBlocks = subsequentLyricBlocks.unshift(firstLyricBlock);\n\n    const chordRow = (dropRef: ConnectDropTarget) => {\n        if (editing) {\n            return (\n                <Box data-testid=\"ChordEdit\">\n                    <ChordInput\n                        value={props.chordBlock.chord}\n                        variant=\"filled\"\n                        typographyVariant={lyricTypographyVariant}\n                        onFinish={endEdit}\n                    />\n                </Box>\n            );\n        }\n\n        if (props.chordBlock.chord === \"\") {\n            return (\n                <ChordSymbol ref={dropRef}>\n                    {props.chordBlock.chord}\n                </ChordSymbol>\n            );\n        }\n\n        return (\n            <DraggableChordSymbol\n                chordBlockID={props.chordBlock}\n                onDrop={onDrop}\n                className={cx(chordSymbolClassName, blockChordSymbolClassName)}\n                ref={dropRef}\n            >\n                {props.chordBlock.chord}\n            </DraggableChordSymbol>\n        );\n    };\n\n    return (\n        <Box display=\"inline-block\" sx={{ verticalAlign: \"bottom\" }}>\n            <Grid\n                container\n                direction=\"column\"\n                data-testid={props[\"data-testid\"]}\n                className={gridClassName}\n            >\n                <Grid\n                    className={cx(\n                        chordTargetClassName,\n                        blockChordTargetClassName\n                    )}\n                    onClick={clickHandler(0)}\n                    height={rowHeight}\n                    item\n                >\n                    <ChordTokenDroppable\n                        blockID={props.chordBlock}\n                        onDragOver={onChordDragOver}\n                    >\n                        {chordRow}\n                    </ChordTokenDroppable>\n                </Grid>\n                <Grid item height={rowHeight} data-testid=\"Lyric\">\n                    {lyricBlocks}\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default Block;\n","import {\n    styled,\n    Theme,\n    Tooltip,\n    tooltipClasses,\n    TooltipProps\n} from \"@mui/material\";\nimport { StandardCSSProperties } from \"@mui/system\";\nimport React from \"react\";\n\nexport type TooltipStylesInput = (theme: Theme) => StandardCSSProperties;\n\n// crazy nonsense: https://mui.com/material-ui/react-tooltip/#customization\n// tl;dr, tooltip needs to be styled in a very particular way that overrides its own classname\n// and also targets its child elements. it's very easy to miss so making it a utility\nexport const makeStyledTooltipMenu = (styleInput: TooltipStylesInput) => {\n    return styled(({ className, ...props }: TooltipProps) => (\n        <Tooltip {...props} classes={{ popper: className }} />\n    ))(({ theme }) => {\n        const styles = styleInput(theme);\n\n        return {\n            // this tooltip isn't meant to paint over any other surfaces\n            // but extend as an adjacent menu to the line, so z index is 0\n            zIndex: 0,\n            [`& .${tooltipClasses.tooltip}`]: styles,\n        };\n    });\n};\n","import { Button, ButtonGroup, styled } from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { DataTestID } from \"common/DataTestID\";\nimport { makeStyledTooltipMenu } from \"components/edit/StyledTooltip\";\nimport React from \"react\";\n\nconst HoverMenuButton = styled(Button)({\n    backgroundColor: \"transparent\",\n    \"&:hover\": {\n        backgroundColor: grey[200],\n    },\n});\n\nconst TransparentTooltip = makeStyledTooltipMenu(() => ({\n    padding: \"0px\",\n    // !important is awful. however MUI keeps overriding the specified style\n    // and there isn't a good guide on how to compose this properly\n    // so that the customized style is observed. be great to fix this in the future\n    margin: \"0px !important\",\n    backgroundColor: \"transparent\",\n}));\n\nexport interface MenuItem extends DataTestID {\n    icon: React.ReactElement;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport interface LineWithHoverMenuProps {\n    children: React.ReactElement;\n    menuItems: MenuItem[];\n}\n\nconst LineWithHoverMenu: React.FC<LineWithHoverMenuProps> = (\n    props: LineWithHoverMenuProps\n): JSX.Element => {\n    const buttons = props.menuItems.map((item: MenuItem, index: number) => (\n        <HoverMenuButton\n            key={index}\n            onClick={item.onClick}\n            data-testid={item[\"data-testid\"]}\n        >\n            {item.icon}\n        </HoverMenuButton>\n    ));\n\n    const menuContents = (\n        <ButtonGroup orientation=\"vertical\" variant=\"text\">\n            {buttons}\n        </ButtonGroup>\n    );\n\n    return (\n        <TransparentTooltip placement=\"right\" title={menuContents}>\n            {props.children}\n        </TransparentTooltip>\n    );\n};\n\nexport default LineWithHoverMenu;\n","export const contentEditableElement = (\n    contentEditableRef: React.RefObject<HTMLSpanElement>\n): HTMLSpanElement => {\n    if (contentEditableRef.current === null) {\n        throw new Error(\"unexpected for ref to be null\");\n    }\n\n    return contentEditableRef.current;\n};\n\nexport const selectionRange = (\n    ref: React.RefObject<HTMLSpanElement>\n): Range | null => {\n    const node = contentEditableElement(ref);\n\n    const selection = window.getSelection();\n    if (selection === null || selection.rangeCount === 0) {\n        return null;\n    }\n\n    const range = selection.getRangeAt(0);\n    if (\n        range === null ||\n        !node.contains(range.startContainer) ||\n        !node.contains(range.endContainer)\n    ) {\n        return null;\n    }\n\n    return range;\n};\n\nexport const isSelectionAtBeginning = (\n    ref: React.RefObject<HTMLSpanElement>\n): boolean => {\n    const range: Range | null = selectionRange(ref);\n    if (range === null) {\n        return false;\n    }\n\n    if (!range.collapsed) {\n        return false;\n    }\n\n    const elem = contentEditableElement(ref);\n    if (range.startContainer === elem && range.startOffset === 0) {\n        return true;\n    }\n\n    if (elem.firstChild !== null) {\n        if (\n            range.startContainer === elem.firstChild &&\n            range.startOffset === 0\n        ) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nexport const splitContentBySelection = (\n    ref: React.RefObject<HTMLSpanElement>\n): [Range, Range] => {\n    const currentRange: Range | null = selectionRange(ref);\n    const elem = contentEditableElement(ref);\n\n    const beforeRange: Range = document.createRange();\n    const afterRange: Range = document.createRange();\n\n    if (currentRange !== null) {\n        beforeRange.setStart(elem, 0);\n        beforeRange.setEnd(\n            currentRange.startContainer,\n            currentRange.startOffset\n        );\n        afterRange.setStart(currentRange.endContainer, currentRange.endOffset);\n        afterRange.setEnd(elem, elem.childNodes.length);\n    } else {\n        beforeRange.selectNodeContents(elem);\n        afterRange.setStart(beforeRange.endContainer, beforeRange.endOffset);\n        afterRange.setEnd(beforeRange.endContainer, beforeRange.endOffset);\n    }\n\n    return [beforeRange, afterRange];\n};\n\nexport const insertNodeAtSelection = (\n    ref: React.RefObject<HTMLSpanElement>,\n    node: Node\n): boolean => {\n    const elem = contentEditableElement(ref);\n    const range = selectionRange(ref);\n    if (range === null) {\n        return false;\n    }\n\n    range.deleteContents();\n    range.insertNode(node);\n    range.collapse(false);\n    elem.normalize();\n    return true;\n};\n\nexport const childIndex = (parent: Node, child: Node): number | null => {\n    const childNodes = parent.childNodes;\n    for (let i = 0; i < childNodes.length; i++) {\n        if (child === childNodes.item(i)) {\n            return i;\n        }\n    }\n\n    return null;\n};\n\nexport const nodeBeforeSelection = (\n    ref: React.RefObject<HTMLSpanElement>\n): Node | null => {\n    const elem = contentEditableElement(ref);\n    const range = selectionRange(ref);\n    if (range === null) {\n        return null;\n    }\n\n    let targetNodeIndex: number;\n    if (range.startContainer === elem) {\n        if (range.startOffset === 0) {\n            return null;\n        }\n\n        targetNodeIndex = range.startOffset - 1;\n    } else {\n        // we'd like to step outside of the childnode\n        // startOffset of 0 is the only condition we are looking for\n        if (range.startOffset !== 0) {\n            return null;\n        }\n\n        const currNodeIndex = childIndex(elem, range.startContainer);\n        if (currNodeIndex === null || currNodeIndex === 0) {\n            return null;\n        }\n\n        targetNodeIndex = currNodeIndex - 1;\n    }\n\n    return elem.childNodes.item(targetNodeIndex);\n};\n\nexport const nodeAfterSelection = (\n    ref: React.RefObject<HTMLSpanElement>\n): Node | null => {\n    const elem = contentEditableElement(ref);\n    const range = selectionRange(ref);\n    if (range === null) {\n        return null;\n    }\n\n    const childCount = elem.childNodes.length;\n    let targetNodeIndex: number;\n    if (range.endContainer === elem) {\n        if (range.endOffset === childCount) {\n            return null;\n        }\n\n        targetNodeIndex = range.endOffset;\n    } else {\n        if (range.endContainer.nodeType === range.endContainer.TEXT_NODE) {\n            const textNode = range.endContainer as Text;\n            if (range.endOffset !== textNode.length) {\n                return null;\n            }\n        }\n\n        const currNodeIndex = childIndex(elem, range.endContainer);\n        if (currNodeIndex === null || currNodeIndex === childCount) {\n            return null;\n        }\n\n        targetNodeIndex = currNodeIndex + 1;\n    }\n\n    return elem.childNodes.item(targetNodeIndex);\n};\n","import { PlainFn } from \"common/PlainFn\";\nimport {\n    childIndex,\n    contentEditableElement,\n    insertNodeAtSelection,\n    isSelectionAtBeginning,\n    nodeAfterSelection,\n    nodeBeforeSelection,\n    selectionRange\n} from \"components/edit/lyric_input/SelectionUtils\";\nimport {\n    DomLyricTabFn,\n    lyricTabTypeOfDOMNode,\n    SizedTab,\n    useDomLyricTab\n} from \"components/lyrics/Tab\";\n\ntype ContentEditableElement = HTMLSpanElement;\ntype HandlerFn = (\n    event: React.KeyboardEvent<ContentEditableElement>\n) => boolean;\n\nconst enterHandler = (callback: PlainFn): HandlerFn => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        if (event.key !== \"Enter\") {\n            return false;\n        }\n\n        callback();\n        return true;\n    };\n};\n\nconst specialBackspaceHandler = (\n    ref: React.RefObject<ContentEditableElement>,\n    callback: PlainFn\n): HandlerFn => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        const specialBackspace: boolean =\n            event.key === \"Backspace\" && (event.metaKey || event.ctrlKey);\n        if (!specialBackspace) {\n            return false;\n        }\n\n        if (!isSelectionAtBeginning(ref)) {\n            return false;\n        }\n\n        callback();\n        return true;\n    };\n};\n\n// returns the start offset of the current selection relative to the span element\n// this mostly concerns the various tabs and large spaces inside the input\n// that get inserted as content uneditable spans\n//\n// e.g. content inside the lyric input, | is the current selection\n// <span contenteditable=false /><span contenteditable=false />1|2\n// expected offset should be 3, as if each child span is counted as a character\n// this matches up with the lyrics where these tabs get serialized as a single character\nconst getSelectionStartOffset = (ref: React.RefObject<HTMLSpanElement>): number | null => {\n    if (ref.current === null) {\n        return null;\n    }\n\n    const range = selectionRange(ref);\n    if (range === null) {\n        return null;\n    }\n\n    if (range.startContainer === ref.current) {\n        return range.startOffset;\n    }\n\n    let childIndex = 0;\n    for (const childNode of ref.current.childNodes) {\n        if (range.startContainer === childNode) {\n            return childIndex + range.startOffset;\n        }\n\n        childIndex += 1;\n    }\n\n    throw new Error(\"Unexpected - a child node should match range's start container\");\n}\n\nconst specialEnterHandler = (\n    ref: React.RefObject<ContentEditableElement>,\n    callback: (splitIndex: number) => void\n): HandlerFn => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        const specialEnter: boolean =\n            event.key === \"Enter\" && (event.metaKey || event.ctrlKey);\n        if (!specialEnter) {\n            return false;\n        }\n\n        const startOffset = getSelectionStartOffset(ref);\n        if (startOffset === null) {\n            return false;\n        }\n\n        callback(startOffset);\n\n        return true;\n    };\n};\n\nconst tabHandler = (\n    ref: React.RefObject<ContentEditableElement>,\n    domLyricTab: DomLyricTabFn\n): HandlerFn => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        let sizedTab: SizedTab;\n\n        if (event.key === \"Tab\" && !event.shiftKey) {\n            sizedTab = SizedTab.MediumTab;\n        } else if (event.key === \"Tab\" && event.shiftKey) {\n            sizedTab = SizedTab.LargeTab;\n        } else if (event.key === \" \" && event.shiftKey) {\n            sizedTab = SizedTab.SmallTab;\n        } else {\n            return false;\n        }\n\n        const domNode = domLyricTab(sizedTab);\n        return insertNodeAtSelection(ref, domNode);\n    };\n};\n\nconst specialStylingKeysHandler = (): HandlerFn => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        if (!event.metaKey && !event.ctrlKey) {\n            return false;\n        }\n\n        // prevent bold, underline, or italics commands\n        return (\n            event.key === \"b\" ||\n            event.key === \"B\" ||\n            event.key === \"u\" ||\n            event.key === \"U\" ||\n            event.key === \"i\" ||\n            event.key === \"I\"\n        );\n    };\n};\n\nconst backspaceHandler = (ref: React.RefObject<ContentEditableElement>) => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        if (event.key !== \"Backspace\") {\n            return false;\n        }\n\n        const node: Node | null = nodeBeforeSelection(ref);\n\n        if (node === null || lyricTabTypeOfDOMNode(node) === null) {\n            return false;\n        }\n\n        const parent = node.parentElement;\n        if (parent === null) {\n            return false;\n        }\n\n        parent.removeChild(node);\n        return true;\n    };\n};\n\nconst directionKeyHandler = (ref: React.RefObject<ContentEditableElement>) => {\n    return (event: React.KeyboardEvent<ContentEditableElement>): boolean => {\n        const elem = contentEditableElement(ref);\n        const selection = window.getSelection();\n\n        if (selection === null) {\n            return false;\n        }\n\n        if (event.shiftKey || event.metaKey || event.ctrlKey) {\n            return false;\n        }\n\n        if (event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\") {\n            return false;\n        }\n\n        let nodeIndex: number;\n\n        if (event.key === \"ArrowLeft\") {\n            const node: Node | null = nodeBeforeSelection(ref);\n            if (node === null || lyricTabTypeOfDOMNode(node) === null) {\n                return false;\n            }\n\n            const childNodeIndex = childIndex(elem, node);\n            if (childNodeIndex === null) {\n                console.error(\n                    \"Unexpected - node cannot be found inside contenteditable element\"\n                );\n                return false;\n            }\n\n            // navigate to before this node by setting the selection offset to this node index\n\n            nodeIndex = childNodeIndex;\n        } else {\n            // ArrowRight\n            const node: Node | null = nodeAfterSelection(ref);\n            if (node === null || lyricTabTypeOfDOMNode(node) === null) {\n                return false;\n            }\n\n            const childNodeIndex = childIndex(elem, node);\n            if (childNodeIndex === null) {\n                console.error(\n                    \"Unexpected - node cannot be found inside contenteditable element\"\n                );\n                return false;\n            }\n\n            // navigate to before this node by setting the selection offset to this node index\n            nodeIndex = childNodeIndex + 1;\n        }\n\n        selection.setBaseAndExtent(elem, nodeIndex, elem, nodeIndex);\n\n        return true;\n    };\n};\n\nexport interface KeyDownHandlerProps {\n    contentEditableRef: React.RefObject<ContentEditableElement>;\n    enterCallback: PlainFn;\n    specialBackspaceCallback: PlainFn;\n    specialEnterCallback: (splitIndex: number) => void;\n}\n\nexport const useKeyDownHandler = (props: KeyDownHandlerProps) => {\n    const domLyricTab = useDomLyricTab();\n\n    const handlers: HandlerFn[] = [\n        specialEnterHandler(\n            props.contentEditableRef,\n            props.specialEnterCallback\n        ),\n        specialBackspaceHandler(\n            props.contentEditableRef,\n            props.specialBackspaceCallback\n        ),\n        tabHandler(props.contentEditableRef, domLyricTab),\n        enterHandler(props.enterCallback),\n        backspaceHandler(props.contentEditableRef),\n        directionKeyHandler(props.contentEditableRef),\n        specialStylingKeysHandler(),\n    ];\n\n    return (event: React.KeyboardEvent<ContentEditableElement>) => {\n        for (const handler of handlers) {\n            const handled: boolean = handler(event);\n            if (handled) {\n                event.preventDefault();\n                return;\n            }\n        }\n    };\n};\n","import { Lyric } from \"common/ChordModel/Lyric\";\nimport {\n    insertNodeAtSelection,\n    splitContentBySelection\n} from \"components/edit/lyric_input/SelectionUtils\";\nimport { serializeLyrics } from \"components/lyrics/Serialization\";\n\ntype HandlerFn = (event: React.ClipboardEvent<HTMLDivElement>) => boolean;\n\nconst serializedLyricsFromRange = (range: Range): Lyric => {\n    const documentFragment = range.cloneContents();\n    return serializeLyrics(documentFragment.childNodes);\n};\n\nconst composeMultilinePaste = (\n    ref: React.RefObject<HTMLSpanElement>,\n    pasteContent: string[]\n): [Lyric, Lyric[]] => {\n    const [beforeSelection, afterSelection] = splitContentBySelection(ref);\n\n    let serializedLyricsForThisLine: Lyric =\n        serializedLyricsFromRange(beforeSelection);\n\n    serializedLyricsForThisLine = serializedLyricsForThisLine.append(\n        pasteContent[0]\n    );\n\n    const newPasteLines = pasteContent.slice(1);\n    const remainingSerializedLyrics: Lyric[] = newPasteLines.map(\n        (line: string): Lyric => {\n            return new Lyric(line);\n        }\n    );\n\n    const lastIndex = remainingSerializedLyrics.length - 1;\n    const lastLyric = remainingSerializedLyrics[lastIndex].append(\n        serializedLyricsFromRange(afterSelection)\n    );\n    remainingSerializedLyrics[lastIndex] = lastLyric;\n\n    return [serializedLyricsForThisLine, remainingSerializedLyrics];\n};\n\nconst handlePlainTextPaste = (\n    ref: React.RefObject<HTMLSpanElement>,\n    callback: (firstLine: Lyric, restOfLines: Lyric[]) => void\n): HandlerFn => {\n    return (event: React.ClipboardEvent<HTMLDivElement>): boolean => {\n        const payload = event.clipboardData.getData(\"text/plain\");\n\n        if (payload === \"\") {\n            return false;\n        }\n\n        // handling both Windows + Mac\n        let linesOfText: string[] = payload.split(\"\\r\\n\");\n        linesOfText = linesOfText.flatMap((line: string) => line.split(\"\\n\"));\n\n        if (linesOfText.length === 0) {\n            return false;\n        }\n\n        if (linesOfText.length === 1) {\n            return insertNodeAtSelection(\n                ref,\n                document.createTextNode(linesOfText[0])\n            );\n        }\n\n        const [newValue, newPasteLines] = composeMultilinePaste(\n            ref,\n            linesOfText\n        );\n\n        callback(newValue, newPasteLines);\n\n        return true;\n    };\n};\n\nconst handleJSONPaste = (callback: (payload: string) => boolean): HandlerFn => {\n    return (event: React.ClipboardEvent<HTMLDivElement>): boolean => {\n        const payload = event.clipboardData.getData(\"application/json\");\n\n        if (payload === \"\") {\n            return false;\n        }\n\n        return callback(payload);\n    };\n};\n\nexport interface PasteHandlerProps {\n    contentEditableRef: React.RefObject<HTMLSpanElement>;\n    pastePlainTextCallback: (firstLine: Lyric, restOfLines: Lyric[]) => void;\n    pasteJSONCallback: (payload: string) => boolean;\n}\n\nexport const usePasteHandler = (props: PasteHandlerProps) => {\n    const handlers: HandlerFn[] = [\n        handleJSONPaste(props.pasteJSONCallback),\n        handlePlainTextPaste(\n            props.contentEditableRef,\n            props.pastePlainTextCallback\n        ),\n    ];\n\n    return (event: React.ClipboardEvent<HTMLDivElement>) => {\n        for (const handler of handlers) {\n            const handled: boolean = handler(event);\n            if (handled) {\n                event.preventDefault();\n                return;\n            }\n        }\n    };\n};\n","import { contentEditableElement } from \"components/edit/lyric_input/SelectionUtils\";\nimport { lyricTabTypeOfDOMNode } from \"components/lyrics/Tab\";\nimport { useEffect } from \"react\";\n\ntype HandlerFn = (selection: Selection) => boolean;\n\nexport const useFocusAndPlaceCaretEffect = (\n    ref: React.RefObject<HTMLSpanElement>\n): void => {\n    useEffect(() => {\n        const elem = contentEditableElement(ref);\n        elem.focus();\n\n        const selection = window.getSelection();\n        if (selection === null) {\n            return;\n        }\n\n        const newRange = document.createRange();\n        newRange.selectNodeContents(elem);\n        newRange.collapse(false);\n\n        selection.removeAllRanges();\n        selection.addRange(newRange);\n    });\n};\n\nconst handleSelectOpaqueBlock = (selection: Selection): boolean => {\n    //todo, handle non collapsed selections\n    if (!selection.isCollapsed) {\n        return false;\n    }\n\n    const range = selection.getRangeAt(0);\n    // not embedded in a non contenteditable\n    if (lyricTabTypeOfDOMNode(range.endContainer) === null) {\n        return false;\n    }\n\n    range.setStartAfter(range.endContainer);\n    range.setEndAfter(range.endContainer);\n    range.collapse(true);\n    return true;\n};\n\nconst handlers: HandlerFn[] = [handleSelectOpaqueBlock];\n\nconst handleSelectionChange = (event: Event) => {\n    const selection = document.getSelection();\n    if (selection === null || selection.rangeCount !== 1) {\n        return;\n    }\n\n    for (const handler of handlers) {\n        const handled = handler(selection);\n        if (handled) {\n            event.preventDefault();\n            return;\n        }\n    }\n};\n\nexport const useSelectionChangeEffect = () => {\n    useEffect(() => {\n        document.addEventListener(\"selectionchange\", handleSelectionChange);\n\n        return () =>\n            document.removeEventListener(\n                \"selectionchange\",\n                handleSelectionChange\n            );\n    });\n};\n","import { styled, Theme, Typography, TypographyVariant } from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { MUIStyledCommonProps, SystemStyleObject } from \"@mui/system\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { PlainFn } from \"common/PlainFn\";\nimport { contentEditableElement } from \"components/edit/lyric_input/SelectionUtils\";\nimport { KeyDownHandlerProps, useKeyDownHandler } from \"components/edit/lyric_input/useKeyHandler\";\nimport { PasteHandlerProps, usePasteHandler } from \"components/edit/lyric_input/usePasteHandler\";\nimport {\n    useFocusAndPlaceCaretEffect,\n    useSelectionChangeEffect\n} from \"components/edit/lyric_input/useSelectionHandler\";\nimport { deserializeLyrics, serializeLyrics } from \"components/lyrics/Serialization\";\nimport React from \"react\";\n\nconst InputTypography = styled(Typography)({\n    width: \"100%\",\n    backgroundColor: grey[200],\n    whiteSpace: \"pre\",\n    display: \"inline-block\",\n});\n\nconst contentEditableStyle: SystemStyleObject<Theme> = {\n    display: \"inline-block\",\n    width: \"100%\",\n    pointerEvents: \"auto\",\n    userSelect: \"text\",\n    outline: \"none\",\n    wordSpacing: \".15em\",\n    // this prevent the span height from collapsing if there's no content\n    \"&:empty:before\": {\n        content: '\"\\\\a0\"',\n    },\n};\n\nexport interface LyricInputProps extends MUIStyledCommonProps<Theme> {\n    children: Lyric;\n    onFinish: (newValue: Lyric) => void;\n    onSpecialBackspace: PlainFn;\n    onSpecialEnter: (splitIndex: number) => void;\n    onLyricOverflow: (overflowContent: Lyric[]) => void;\n    onJSONPaste: (jsonStr: string) => [boolean, PlainFn | null];\n    variant?: TypographyVariant;\n}\n\nconst LyricInput: React.FC<LyricInputProps> = (\n    props: LyricInputProps\n): JSX.Element => {\n    const contentEditableRef: React.RefObject<HTMLSpanElement> =\n        React.createRef();\n\n    const value = (): Lyric => {\n        const elem = contentEditableElement(contentEditableRef);\n        if (elem.textContent === null) {\n            return new Lyric(\"\");\n        }\n\n        return serializeLyrics(elem.childNodes);\n    };\n\n    const finish = (newValue: Lyric) => {\n        props.onFinish(newValue);\n    };\n\n    const keyDownHandlerProps: KeyDownHandlerProps = {\n        contentEditableRef: contentEditableRef,\n        enterCallback: () => {\n            finish(value());\n        },\n        specialBackspaceCallback: () => {\n            props.onSpecialBackspace();\n        },\n        specialEnterCallback: (splitIndex: number) => {\n            finish(value());\n            props.onSpecialEnter(splitIndex);\n        },\n    };\n\n    const handleKeyDown = useKeyDownHandler(keyDownHandlerProps);\n\n    const pasteHandlerProps: PasteHandlerProps = {\n        contentEditableRef: contentEditableRef,\n        pasteJSONCallback: (payload: string): boolean => {\n            const [canHandle, executePaste] = props.onJSONPaste(payload);\n            if (canHandle) {\n                finish(value());\n                executePaste?.();\n            }\n\n            return canHandle;\n        },\n        pastePlainTextCallback: (firstLine: Lyric, restOfLines: Lyric[]) => {\n            finish(firstLine);\n            props.onLyricOverflow(restOfLines);\n        },\n    };\n\n    const handlePaste = usePasteHandler(pasteHandlerProps);\n\n    const handleBlur = () => {\n        finish(value());\n    };\n\n    const lyricContent = deserializeLyrics(props.children, true);\n\n    useFocusAndPlaceCaretEffect(contentEditableRef);\n    useSelectionChangeEffect();\n\n    return (\n        <InputTypography\n            sx={props.sx}\n            variant={props.variant}\n            display=\"inline\"\n            data-testid=\"LyricInput\"\n        >\n            <span\n                contentEditable\n                spellCheck={false}\n                style={contentEditableStyle}\n                ref={contentEditableRef}\n                data-testid=\"InnerInput\"\n                onBlur={handleBlur}\n                onKeyDown={handleKeyDown}\n                onPaste={handlePaste}\n                suppressContentEditableWarning\n            >\n                {lyricContent}\n            </span>\n        </InputTypography>\n    );\n};\n\nexport default LyricInput;\n","import { Box, styled } from \"@mui/material\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { PlainFn } from \"common/PlainFn\";\nimport { lyricStyle, lyricTypographyVariant } from \"components/display/Lyric\";\nimport { deserializeCopiedChordLines } from \"components/edit/CopyAndPaste\";\nimport { useEditingState } from \"components/edit/InteractionContext\";\nimport UnstyledLyricInput, { LyricInputProps } from \"components/edit/lyric_input/LyricInput\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\nimport { isLeft } from \"fp-ts/lib/Either\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useMemo } from \"react\";\n\nconst LyricInput = styled(UnstyledLyricInput)<LyricInputProps>(({ theme }) => ({\n    ...lyricStyle,\n    borderBottom: \"solid\",\n    borderBottomColor: theme.palette.secondary.main,\n    borderBottomWidth: \"2px\",\n}));\n\ninterface LineWithLyricInputProps {\n    children: (handleEdit: PlainFn) => React.ReactElement;\n    chordLine: ChordLine;\n    songDispatch: React.Dispatch<ChordSongAction>;\n}\n\n// this component is inherently quite coupled with Line & friends\n// however, this is a good opportunity to separate concerns and organize functionality\nconst LineWithLyricInput: React.FC<LineWithLyricInputProps> = (\n    props: LineWithLyricInputProps\n): JSX.Element => {\n    const { editing, startEdit, finishEdit } = useEditingState();\n    const { songDispatch, chordLine } = props;\n    const { enqueueSnackbar } = useSnackbar();\n\n    const handlers = useMemo(\n        () => ({\n            lyricEdit: (newLyric: Lyric) => {\n                finishEdit();\n\n                songDispatch({\n                    type: \"replace-line-lyrics\",\n                    line: chordLine,\n                    lineID: chordLine,\n                    newLyric: newLyric,\n                });\n            },\n\n            lyricPasteOverflow: (overflowContent: Lyric[]) => {\n                songDispatch({\n                    type: \"insert-overflow-lyrics\",\n                    insertionLineID: chordLine,\n                    overflowLyrics: overflowContent,\n                });\n                finishEdit();\n            },\n            jsonPaste: (jsonStr: string): [boolean, PlainFn | null] => {\n                const deserializedCopyResult =\n                    deserializeCopiedChordLines(jsonStr);\n                // not actually a Chord Paper line payload, don't handle it\n                if (deserializedCopyResult === null) {\n                    return [false, null];\n                }\n\n                if (isLeft(deserializedCopyResult)) {\n                    const errorMsg =\n                        \"Failed to paste copied lines: \" +\n                        deserializedCopyResult.left.message;\n                    enqueueSnackbar(errorMsg, { variant: \"error\" });\n                    return [true, null];\n                }\n\n                const insertLines = () =>\n                    songDispatch({\n                        type: \"batch-insert-lines\",\n                        insertLineID: chordLine,\n                        copiedLines: deserializedCopyResult.right,\n                    });\n\n                return [true, insertLines];\n            },\n\n            specialBackspace: () => {\n                songDispatch({\n                    type: \"merge-lines\",\n                    latterLineID: chordLine,\n                });\n                finishEdit();\n            },\n            specialEnter: (splitIndex: number) => {\n                songDispatch({\n                    type: \"split-line\",\n                    lineID: chordLine,\n                    splitIndex: splitIndex,\n                });\n\n                finishEdit();\n            },\n        }),\n        [chordLine, songDispatch, finishEdit, enqueueSnackbar]\n    );\n\n    const lineElement: React.ReactElement = props.children(startEdit);\n\n    if (!editing) {\n        return lineElement;\n    }\n\n    // using a css trick to overlay the lyrics edit input over\n    // the noneditable lyrics line so chords are still showing\n    return (\n        <>\n            {lineElement}\n            <Box position=\"absolute\" left=\"0\" bottom=\"0px\" width=\"100%\">\n                <LyricInput\n                    variant={lyricTypographyVariant}\n                    onFinish={handlers.lyricEdit}\n                    onJSONPaste={handlers.jsonPaste}\n                    onLyricOverflow={handlers.lyricPasteOverflow}\n                    onSpecialBackspace={handlers.specialBackspace}\n                    onSpecialEnter={handlers.specialEnter}\n                >\n                    {props.chordLine.lyrics}\n                </LyricInput>\n            </Box>\n        </>\n    );\n};\n\nexport default LineWithLyricInput;\n","import { blueGrey } from \"@mui/material/colors\";\n\nexport const sectionLabelStyle = {\n    borderColor: blueGrey[500],\n    borderStyle: \"solid\",\n    borderRadius: \"0.3em\",\n    borderWidth: \"0.075em\",\n    color: blueGrey[500],\n    display: \"inline-block\",\n};\n\nexport const sectionTypographyVariant: \"body2\" = \"body2\";\n","import { Box, styled, Typography, TypographyProps } from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { DataTestID } from \"common/DataTestID\";\nimport { PlainFn } from \"common/PlainFn\";\nimport { inflateIfEmpty } from \"common/Whitespace\";\nimport TextInput from \"components/edit/TextInput\";\nimport React, { useState } from \"react\";\n\nexport interface EditControl {\n    editing: boolean;\n    onStartEdit: PlainFn;\n    onEndEdit: PlainFn;\n}\n\ninterface EditableTypographyProps extends DataTestID, TypographyProps {\n    children?: never;\n    value: string;\n    // provide this if you want to provide explicit control over the editability\n    // of the field. this means the parent must manage this component's editing state\n    editControl?: EditControl;\n\n    onValueChange?: (newValue: string) => void;\n    placeholder?: string;\n}\n\nconst PlaceholderTypography = styled(Typography)({\n    color: grey[400],\n});\n\nconst EditableTypography: React.FC<EditableTypographyProps> = (\n    props: EditableTypographyProps\n): JSX.Element => {\n    const [editingState, setEditingState] = useState(false);\n\n    const editing: boolean =\n        props.editControl !== undefined\n            ? props.editControl.editing\n            : editingState;\n\n    const startEdit = () => {\n        if (props.editControl !== undefined) {\n            props.editControl.onStartEdit();\n        } else {\n            setEditingState(true);\n        }\n    };\n\n    const finishEdit = (newValue: string) => {\n        if (props.editControl !== undefined) {\n            props.editControl.onEndEdit();\n        } else {\n            setEditingState(false);\n        }\n\n        if (props.onValueChange) {\n            props.onValueChange(newValue);\n        }\n    };\n\n    const nonEditableLine = (): React.ReactElement => {\n        const {\n            value,\n            placeholder,\n            onValueChange,\n            editControl,\n            ...typographyProps\n        } = props;\n\n        if (props.value === \"\" && props.placeholder !== undefined) {\n            return (\n                <PlaceholderTypography {...typographyProps} onClick={startEdit}>\n                    {props.placeholder}\n                </PlaceholderTypography>\n            );\n        }\n\n        return (\n            <Typography {...typographyProps} onClick={startEdit}>\n                {inflateIfEmpty(props.value)}\n            </Typography>\n        );\n    };\n\n    const editableLine = (): React.ReactElement => {\n        if (props.variant === \"inherit\") {\n            throw new Error(\"can't have these variant types\");\n        }\n\n        return (\n            <TextInput\n                value={props.value}\n                variant=\"filled\"\n                typographyVariant={props.variant}\n                onFinish={finishEdit}\n                data-testid={\"EditableLine\"}\n            />\n        );\n    };\n\n    const elem: React.ReactElement = editing\n        ? editableLine()\n        : nonEditableLine();\n\n    return <Box>{elem}</Box>;\n};\n\nexport default EditableTypography;\n","import { Box, BoxProps, Theme, TypographyVariant } from \"@mui/material\";\nimport { blueGrey, grey } from \"@mui/material/colors\";\nimport { styled } from \"@mui/material/styles\";\nimport React from \"react\";\n\nexport const roundedTopCornersStyle = (theme: Theme) => ({\n    borderTopLeftRadius: theme.spacing(1.5),\n    borderTopRightRadius: theme.spacing(1.5),\n});\n\nexport const roundedCornersStyle = (theme: Theme) => ({\n    borderRadius: theme.spacing(1.5),\n});\n\nexport const controlPaneStyle = {\n    backgroundColor: blueGrey[50],\n    display: \"flex\",\n    alignItems: \"center\",\n};\n\n// pretty wild stuff, but I've come across some circumstances where I want\n// to provide a min width to an element so that its surrounding elements\n// do not shift\n//\n// flexbox was considered but it required some magic guess of the container's\n// width, which is just as uneducated as any other guess\n//\n// suppose you have a box that contains a number that's unlikely go to beyond\n// 200 - and suppose 200 is the largest width that the value can be\n// (e.g. perhaps in some fonts 199 is wider, then you'd use that)\n// then minWidthOf(theme, \"body\", \"200\") would return a size to use as the minWidth\n// so that the range of values will not change the size of the container\n// or move its surrounding elements\nexport const widthOfString = (\n    theme: Theme,\n    typographyVariant: TypographyVariant,\n    phattestString: string\n): string | undefined => {\n    const typography = theme.typography[typographyVariant];\n\n    const font: string | undefined = (() => {\n        if (typography.fontFamily === undefined) {\n            return undefined;\n        }\n\n        if (typography.fontSize === undefined) {\n            return undefined;\n        }\n\n        return `${typography.fontSize} ${typography.fontFamily}`;\n    })();\n\n    if (font === undefined) {\n        return undefined;\n    }\n\n    const canvas = document.createElement(\"canvas\");\n    const canvasContext = canvas.getContext(\"2d\");\n    if (canvasContext === null) {\n        return undefined;\n    }\n\n    canvasContext.font = font;\n    const measurement = canvasContext.measureText(phattestString);\n    return `${measurement.width}px`;\n};\n\nexport const greyTextColour = grey[700];\n\nconst BottomRightBox = styled(Box)(({ theme }) => ({\n    position: \"fixed\",\n    bottom: 0,\n    right: theme.spacing(2),\n    // just bump the z index slightly to above 0 to cover most things\n    zIndex: 1,\n    ...roundedTopCornersStyle(theme),\n}));\n\nexport const withBottomRightBox = (children: React.ReactElement) => {\n    return (\n        <BottomRightBox boxShadow={4}>\n            {children}\n        </BottomRightBox>\n    );\n};\n\nexport const TitleBar = styled(Box)<BoxProps>(({ theme }) => ({\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    ...roundedTopCornersStyle(theme),\n}));\n\n","import CurrentTimeIcon from \"@mui/icons-material/Downloading\";\nimport {\n    FormControl,\n    IconButton,\n    InputAdornment,\n    inputBaseClasses,\n    styled,\n} from \"@mui/material\";\nimport { MUIStyledProps } from \"common/styledProps\";\nimport UnstyledControlledTextInput from \"components/edit/ControlledTextInput\";\nimport { PlayerTimeContext } from \"components/PlayerTimeContext\";\nimport { widthOfString } from \"components/track_player/common\";\nimport { Duration } from \"luxon\";\nimport React, { useContext, useRef, useState } from \"react\";\n\ninterface TimeInputProps extends MUIStyledProps {\n    seconds: number | null;\n    onFinish?: (newSeconds: number | null) => void;\n    label?: string;\n}\n\nconst ControlledTextInput = styled(UnstyledControlledTextInput)(\n    ({ theme }) => ({\n        [`& .${inputBaseClasses.input}`]: {\n            textAlign: \"right\",\n            width: widthOfString(theme, \"body1\", \"00:00\"),\n        },\n    })\n);\n\nconst TimeInput: React.FC<TimeInputProps> = (\n    props: TimeInputProps\n): JSX.Element => {\n    const secondsToString = (seconds: number | null): string => {\n        if (seconds === null) {\n            return \"\";\n        }\n\n        const duration = Duration.fromMillis(seconds * 1000);\n        return duration.toFormat(\"mss\");\n    };\n\n    const initialValue: string = secondsToString(props.seconds);\n    const [value, setValue] = useState<string>(initialValue);\n    const inputBoxRef = useRef<any>(null); // pretty awful but this is the type from TextFieldProps\n\n    const getPlayerTimeRef = useContext(PlayerTimeContext);\n\n    const decomposeTimeString = (timeString: string): [number, number] => {\n        const numericValue = Number(timeString);\n\n        const secondsPart = numericValue % 100;\n        const minutesPart = Math.floor(numericValue / 100);\n        return [minutesPart, secondsPart];\n    };\n\n    const validateTimeValue = (time: string): boolean => {\n        if (time === \"\") {\n            return true;\n        }\n\n        const [minutesPart, secondsPart] = decomposeTimeString(time);\n\n        if (isNaN(minutesPart) || isNaN(secondsPart)) {\n            return false;\n        }\n\n        if (secondsPart > 59 || secondsPart < 0) {\n            return false;\n        }\n\n        return true;\n    };\n\n    const sanitizeValue = (newTime: string): string => {\n        let sanitizedValue = newTime.replaceAll(/\\D/g, \"\");\n\n        if (sanitizedValue === \"0\") {\n            return \"000\";\n        }\n\n        if (sanitizedValue === \"00\") {\n            return \"\";\n        }\n\n        sanitizedValue = sanitizedValue.replace(/^0+/, \"\");\n        return sanitizedValue;\n    };\n\n    const handleValueChange = (newTime: string): void => {\n        setValue(sanitizeValue(newTime));\n    };\n\n    const finish = (newTime: string) => {\n        if (newTime === \"\") {\n            props.onFinish?.(null);\n            return;\n        }\n\n        if (!validateTimeValue(newTime)) {\n            return;\n        }\n\n        const [minutes, seconds] = decomposeTimeString(newTime);\n\n        props.onFinish?.(60 * minutes + seconds);\n    };\n\n    const handleCurrentTimeButton = () => {\n        const currentGetPlayerTime = getPlayerTimeRef.current;\n        const playerTimeSeconds: number | null = currentGetPlayerTime();\n        if (playerTimeSeconds === null) {\n            return;\n        }\n\n        const newValue = secondsToString(playerTimeSeconds);\n\n        // put the focus back into the input box\n        if (\n            inputBoxRef.current !== null &&\n            inputBoxRef.current.focus !== undefined &&\n            inputBoxRef.current.focus !== null\n        ) {\n            inputBoxRef.current.focus();\n        }\n\n        setValue(newValue);\n        finish(newValue);\n    };\n\n    const buttonAdornment = (\n        <InputAdornment position=\"end\">\n            <IconButton\n                edge=\"end\"\n                onMouseDown={handleCurrentTimeButton}\n                size=\"large\"\n                sx={{ padding: 0.5 }}\n            >\n                <CurrentTimeIcon />\n            </IconButton>\n        </InputAdornment>\n    );\n\n    const formatValue = (timeString: string): string => {\n        if (timeString === \"\") {\n            return \"\";\n        }\n\n        if (timeString.length === 1) {\n            return \"0:0\" + timeString;\n        }\n\n        if (timeString.length === 2) {\n            return \"0:\" + timeString;\n        }\n\n        const colonIndex = timeString.length - 2;\n        const minutesPart = timeString.substring(0, colonIndex);\n        const secondsPart = timeString.substring(colonIndex);\n        return minutesPart + \":\" + secondsPart;\n    };\n\n    const formattedValue = formatValue(value);\n    const error = !validateTimeValue(value);\n\n    return (\n        <FormControl variant=\"filled\" sx={{ margin: 1 }}>\n            <ControlledTextInput\n                label={props.label}\n                className={props.className}\n                placeholder=\"0:00\"\n                value={formattedValue}\n                onValueChange={handleValueChange}\n                variant=\"outlined\"\n                typographyVariant=\"body1\"\n                onFinish={() => finish(value)}\n                paddingSpacing={0.5}\n                error={error}\n                InputProps={{\n                    endAdornment: buttonAdornment,\n                    disableUnderline: !error,\n                }}\n                inputRef={inputBoxRef}\n            />\n        </FormControl>\n    );\n};\n\nexport default TimeInput;\n","import { Box, styled, Theme } from \"@mui/material\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { DataTestID } from \"common/DataTestID\";\nimport { PlainFn } from \"common/PlainFn\";\nimport {\n    sectionLabelStyle,\n    sectionTypographyVariant,\n} from \"components/display/SectionLabel\";\nimport UnstyledEditableTypography, {\n    EditControl,\n} from \"components/edit/EditableTypography\";\nimport { useEditingState } from \"components/edit/InteractionContext\";\nimport { makeStyledTooltipMenu } from \"components/edit/StyledTooltip\";\nimport TimeInput from \"components/edit/TimeInput\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\nimport React, { useCallback } from \"react\";\n\nconst EditableTypography = styled(UnstyledEditableTypography)({\n    ...sectionLabelStyle,\n});\n\nconst Tooltip = makeStyledTooltipMenu((theme: Theme) => ({\n    background: \"white\",\n    boxShadow: theme.shadows[2],\n}));\n\nexport interface MenuItem extends DataTestID {\n    icon: React.ReactElement;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport interface LineWithSectionProps {\n    chordLine: ChordLine;\n    songDispatch: React.Dispatch<ChordSongAction>;\n    children: (editLabel: PlainFn) => React.ReactElement;\n}\n\nconst LineWithSection: React.FC<LineWithSectionProps> = (\n    props: LineWithSectionProps\n): JSX.Element => {\n    const { editing, startEdit, finishEdit } = useEditingState();\n\n    const editControl: EditControl = {\n        editing: editing,\n        onStartEdit: startEdit,\n        onEndEdit: finishEdit,\n    };\n\n    const { chordLine, songDispatch } = props;\n\n    const handleLabelChange = useCallback(\n        (newValue: string) => {\n            songDispatch({\n                type: \"set-section\",\n                lineID: chordLine,\n                label: newValue,\n            });\n        },\n        [chordLine, songDispatch]\n    );\n\n    const handleTimeChange = useCallback(\n        (newValue: number | null) => {\n            songDispatch({\n                type: \"set-section\",\n                lineID: chordLine,\n                time: newValue,\n            });\n        },\n        [chordLine, songDispatch]\n    );\n\n    const childElement: React.ReactElement = props.children(startEdit);\n    const section = props.chordLine.section;\n\n    if (!editing && section === undefined) {\n        return childElement;\n    }\n\n    const label: string = section?.name ?? \"\";\n\n    const timeInput = (() => {\n        const time: number | null =\n            section?.type === \"time\" ? section.time : null;\n\n        return (\n            <TimeInput\n                seconds={time}\n                onFinish={handleTimeChange}\n                label=\"timestamp\"\n            />\n        );\n    })();\n\n    // prevent tooltip from stealing focus from the editable textfield\n    const disableTooltipFocus = editing;\n\n    return (\n        <>\n            <Box>\n                <Tooltip\n                    arrow\n                    placement=\"left\"\n                    title={timeInput}\n                    disableFocusListener={disableTooltipFocus}\n                >\n                    <span>\n                        <EditableTypography\n                            value={label}\n                            variant={sectionTypographyVariant}\n                            data-testid=\"EditLabel\"\n                            editControl={editControl}\n                            onValueChange={handleLabelChange}\n                        />\n                    </span>\n                </Tooltip>\n            </Box>\n            {childElement}\n        </>\n    );\n};\n\nexport default LineWithSection;\n","import UnstyledBackspaceIcon from \"@mui/icons-material/Backspace\";\nimport BookmarkBorderOutlinedIcon from \"@mui/icons-material/BookmarkBorderOutlined\";\nimport { Box, Slide, styled } from \"@mui/material\";\nimport { red } from \"@mui/material/colors\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { Collection, IDable } from \"common/ChordModel/Collection\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { DataTestID } from \"common/DataTestID\";\nimport { PlainFn } from \"common/PlainFn\";\nimport Block from \"components/edit/Block\";\nimport LineWithHoverMenu, { MenuItem } from \"components/edit/LineWithHoverMenu\";\nimport LineWithLyricInput from \"components/edit/LineWithLyricInput\";\nimport LineWithSection from \"components/edit/LineWithSection\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\nimport { List } from \"immutable\";\nimport React, { useMemo, useState } from \"react\";\n\nconst AtomicSelectionBox = styled(Box)({\n    userSelect: \"all\",\n});\n\nconst BackspaceIcon = styled(UnstyledBackspaceIcon)({\n    color: red[300],\n});\n\nconst DimmedOnHoverBox = styled(Box)({\n    \"&:hover\": {\n        backgroundImage: \"linear-gradient(rgba(0, 0, 0, 0.05) 0 0)\",\n    },\n    whiteSpace: \"nowrap\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n});\n\ninterface LineProps extends DataTestID {\n    chordLine: ChordLine;\n    songDispatch: React.Dispatch<ChordSongAction>;\n    \"data-lineid\": string;\n}\n\nconst Line: React.FC<LineProps> = (props: LineProps): JSX.Element => {\n    const [removing, setRemoving] = useState(false);\n    const { chordLine, songDispatch } = props;\n\n    const handlers = useMemo(\n        () => ({\n            chordChange: (blockID: IDable<ChordBlock>, newChord: string) => {\n                songDispatch({\n                    type: \"set-chord\",\n                    lineID: chordLine,\n                    blockID: blockID,\n                    newChord: newChord,\n                });\n            },\n            blockSplit: (blockID: IDable<ChordBlock>, splitIndex: number) => {\n                songDispatch({\n                    type: \"split-block\",\n                    lineID: chordLine,\n                    blockID: blockID,\n                    splitIndex: splitIndex,\n                });\n            },\n\n            startRemove: () => {\n                setRemoving(true);\n            },\n\n            remove: () => {\n                songDispatch({\n                    type: \"remove-line\",\n                    lineID: chordLine,\n                });\n            },\n        }),\n        [chordLine, songDispatch]\n    );\n\n    let chordBlocks: Collection<ChordBlock> = props.chordLine.chordBlocks;\n    if (chordBlocks.length === 0) {\n        chordBlocks = new Collection([\n            new ChordBlock({\n                chord: \"\",\n                lyric: new Lyric(\"\"),\n            }),\n        ]);\n    }\n\n    const blocks: List<React.ReactElement> = chordBlocks.list.map(\n        (chordBlock: ChordBlock): React.ReactElement => (\n            <Block\n                key={chordBlock.id}\n                chordBlock={chordBlock}\n                songDispatch={songDispatch}\n                onChordChange={handlers.chordChange}\n                onBlockSplit={handlers.blockSplit}\n                data-testid=\"Block\"\n            />\n        )\n    );\n\n    const basicLine = (startEdit: PlainFn) => (\n        <DimmedOnHoverBox data-testid=\"NoneditableLine\" onClick={startEdit}>\n            {blocks}\n        </DimmedOnHoverBox>\n    );\n\n    const withHoverMenu = (startEdit: PlainFn, menuItems: MenuItem[]) => (\n        <LineWithHoverMenu menuItems={menuItems}>\n            {basicLine(startEdit)}\n        </LineWithHoverMenu>\n    );\n\n    const withLyricInput = (menuItems: MenuItem[]) => (\n        <LineWithLyricInput chordLine={chordLine} songDispatch={songDispatch}>\n            {(startEdit: PlainFn) => withHoverMenu(startEdit, menuItems)}\n        </LineWithLyricInput>\n    );\n\n    const withSection = (\n        <LineWithSection chordLine={chordLine} songDispatch={songDispatch}>\n            {(editLabel: PlainFn) => {\n                const menuItems: MenuItem[] = [\n                    {\n                        onClick: editLabel,\n                        icon: <BookmarkBorderOutlinedIcon />,\n                        \"data-testid\": \"EditLabel\",\n                    },\n                    {\n                        onClick: handlers.startRemove,\n                        icon: <BackspaceIcon />,\n                        \"data-testid\": \"RemoveButton\",\n                    },\n                ];\n\n                return withLyricInput(menuItems);\n            }}\n        </LineWithSection>\n    );\n\n    const lineContent: React.ReactElement = withSection;\n    const yeetDirection = removing ? \"up\" : \"down\";\n\n    return (\n        <Slide\n            direction={yeetDirection}\n            in={!removing}\n            timeout={250}\n            onExited={handlers.remove}\n        >\n            <AtomicSelectionBox>\n                <Box\n                    borderBottom={1}\n                    width=\"100%\"\n                    position=\"relative\"\n                    data-lineid={props[\"data-lineid\"]}\n                    data-testid={props[\"data-testid\"]}\n                >\n                    {lineContent}\n                </Box>\n            </AtomicSelectionBox>\n        </Slide>\n    );\n};\n\nexport default React.memo(Line);\n","import UnstyledAddCircleOutlineIcon from \"@mui/icons-material/AddCircleOutline\";\nimport { Divider as UnstyledDivider, Grid, styled } from \"@mui/material\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { IDable } from \"common/ChordModel/Collection\";\nimport { DataTestID } from \"common/DataTestID\";\nimport LineWithHoverMenu, { MenuItem } from \"components/edit/LineWithHoverMenu\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\nimport React from \"react\";\n\nconst ColourOnHoverGrid = styled(Grid)(({ theme }) => ({\n    minHeight: theme.spacing(3),\n    \"&:hover .MuiDivider-root\": {\n        borderColor: \"rgba(0, 0, 0, 0.25)\",\n    },\n}));\n\nconst Divider = styled(UnstyledDivider)({\n    width: \"100%\",\n    borderColor: \"transparent\",\n});\n\nconst AddCircleOutlineIcon = styled(UnstyledAddCircleOutlineIcon)(\n    ({ theme }) => ({\n        color: theme.palette.secondary.light,\n    })\n);\n\ninterface NewLineProps extends DataTestID {\n    lineID: IDable<ChordLine> | \"beginning\";\n    songDispatch: React.Dispatch<ChordSongAction>;\n}\n\nconst NewLine: React.FC<NewLineProps> = (props: NewLineProps): JSX.Element => {\n    const handleAddLine = () => {\n        props.songDispatch({\n            type: \"add-line\",\n            lineID: props.lineID,\n        });\n    };\n\n    const menuItem: MenuItem = {\n        onClick: handleAddLine,\n        \"data-testid\": \"AddButton\",\n        icon: <AddCircleOutlineIcon />,\n    };\n\n    return (\n        <LineWithHoverMenu menuItems={[menuItem]}>\n            <ColourOnHoverGrid\n                container\n                direction=\"column\"\n                justifyContent=\"center\"\n                onClick={handleAddLine}\n                data-testid={props[\"data-testid\"]}\n            >\n                <Divider />\n            </ColourOnHoverGrid>\n        </LineWithHoverMenu>\n    );\n};\n\nexport default React.memo(NewLine);\n","import { ChordSongAction } from \"components/reducer/reducer\";\n\nexport const handleUndoRedo = (\n    event: KeyboardEvent,\n    songDispatch: React.Dispatch<ChordSongAction>\n): boolean => {\n    const isSpecialKey = event.metaKey || event.ctrlKey;\n    if (event.key !== \"z\" || !isSpecialKey) {\n        return false;\n    }\n\n    if (event.shiftKey) {\n        songDispatch({ type: \"redo\" });\n    } else {\n        songDispatch({ type: \"undo\" });\n    }\n\n    return true;\n};\n","import { noopFn } from \"common/PlainFn\";\nimport React, { useContext, useRef } from \"react\";\n\ntype KeyListener = (event: KeyboardEvent) => void;\ninterface StoredKeyListener {\n    original: KeyListener;\n    wrapped: KeyListener;\n}\ntype RegisterKeyListenerFn = (listener: KeyListener) => void;\n\nconst GlobalKeyListenerContext = React.createContext<\n    [RegisterKeyListenerFn, RegisterKeyListenerFn, RegisterKeyListenerFn]\n>([noopFn, noopFn, noopFn]);\n\ninterface GlobalKeyListenerProviderProps {\n    children: React.ReactNode;\n}\n\nexport const useRegisterKeyListener = (): [\n    RegisterKeyListenerFn,\n    RegisterKeyListenerFn\n] => {\n    const [registerKeyListener, , unregisterKeyListener] = useContext(\n        GlobalKeyListenerContext\n    );\n    return [registerKeyListener, unregisterKeyListener];\n};\n\nexport const useRegisterTopKeyListener = (): [\n    RegisterKeyListenerFn,\n    RegisterKeyListenerFn\n] => {\n    const [, registerTopKeyListener, unregisterKeyListener] = useContext(\n        GlobalKeyListenerContext\n    );\n    return [registerTopKeyListener, unregisterKeyListener];\n};\n\nconst GlobalKeyListenerProvider: React.FC<GlobalKeyListenerProviderProps> = (\n    props: GlobalKeyListenerProviderProps\n): JSX.Element => {\n    const keyListeners = useRef<StoredKeyListener[]>([]);\n\n    const removeAll = () => {\n        for (let entry of keyListeners.current) {\n            window.removeEventListener(\"keydown\", entry.wrapped, true);\n        }\n    };\n\n    const addAll = () => {\n        for (let entry of keyListeners.current) {\n            window.addEventListener(\"keydown\", entry.wrapped, true);\n        }\n    };\n\n    const wrapListener = (listener: KeyListener): KeyListener => {\n        return (event: KeyboardEvent): void => {\n            const isTypingContext =\n                event.target instanceof HTMLElement &&\n                (event.target.tagName === \"INPUT\" ||\n                    event.target.tagName === \"TEXTAREA\" ||\n                    event.target.isContentEditable);\n\n            if (isTypingContext) {\n                return;\n            }\n\n            listener(event);\n\n            if (event.defaultPrevented) {\n                event.stopImmediatePropagation();\n            }\n            return;\n        };\n    };\n\n    const registerKeyListener = (listener: KeyListener) => {\n        const wrappedListener = wrapListener(listener);\n\n        keyListeners.current.push({\n            original: listener,\n            wrapped: wrappedListener,\n        });\n\n        window.addEventListener(\"keydown\", wrappedListener, true);\n    };\n\n    const registerTopKeyListener = (listener: KeyListener) => {\n        const wrappedListener = wrapListener(listener);\n\n        removeAll();\n        keyListeners.current.unshift({\n            original: listener,\n            wrapped: wrappedListener,\n        });\n        addAll();\n    };\n\n    const unregisterKeyListener = (listener: KeyListener) => {\n        const index = keyListeners.current.findIndex(\n            (entry: StoredKeyListener) => entry.original === listener\n        );\n        if (index === -1) {\n            return;\n        }\n\n        const entry = keyListeners.current[index];\n\n        window.removeEventListener(\"keydown\", entry.wrapped, true);\n        keyListeners.current.splice(index, 1);\n    };\n\n    return (\n        <GlobalKeyListenerContext.Provider\n            value={[\n                registerKeyListener,\n                registerTopKeyListener,\n                unregisterKeyListener,\n            ]}\n        >\n            {props.children}\n        </GlobalKeyListenerContext.Provider>\n    );\n};\n\nexport default GlobalKeyListenerProvider;\n","import { Grid, Paper as UnstyledPaper, styled, Theme } from \"@mui/material\";\nimport { SystemStyleObject } from \"@mui/system\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { makeSection } from \"components/display/SectionHighlight\";\nimport { handleBatchLineDelete } from \"components/edit/BatchDelete\";\nimport { useLineCopyHandler } from \"components/edit/CopyAndPaste\";\nimport {\n    InteractionContext,\n    InteractionSetter\n} from \"components/edit/InteractionContext\";\nimport Line from \"components/edit/Line\";\nimport NewLine from \"components/edit/NewLine\";\nimport { handleUndoRedo } from \"components/edit/Undo\";\nimport { useRegisterKeyListener } from \"components/GlobalKeyListener\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\nimport { List } from \"immutable\";\nimport React, { useEffect, useMemo, useState } from \"react\";\n\nconst uninteractiveSx: SystemStyleObject<Theme> = {\n    pointerEvents: \"none\",\n};\n\nconst Paper = styled(UnstyledPaper)({\n    width: \"auto\",\n});\n\ntype KeyDownHandler = (\n    event: KeyboardEvent,\n    songDispatch: React.Dispatch<ChordSongAction>\n) => boolean;\n\ninterface ChordPaperBodyProps {\n    song: ChordSong;\n    songDispatch: React.Dispatch<ChordSongAction>;\n}\n\nconst ChordPaperBody: React.FC<ChordPaperBodyProps> = (\n    props: ChordPaperBodyProps\n): React.ReactElement => {\n    const [interacting, setInteracting] = useState(false);\n    const handleCopy = useLineCopyHandler(props.song);\n    const [addKeyListener, removeKeyListener] = useRegisterKeyListener();\n\n    const songDispatch = props.songDispatch;\n\n    const interactionContextValue: InteractionSetter = useMemo(\n        () => ({\n            startInteraction: () => {\n                setTimeout(() => {\n                    setInteracting(true);\n                });\n            },\n            endInteraction: () => {\n                setTimeout(() => {\n                    setInteracting(false);\n                });\n            },\n        }),\n        []\n    );\n\n    // prevent other interactions if currently interacting\n    const allowInteraction: boolean = !interacting;\n\n    useEffect(() => {\n        const handleKeyDown = (event: KeyboardEvent): void => {\n            if (!allowInteraction) {\n                return;\n            }\n\n            const handlers: KeyDownHandler[] = [\n                handleBatchLineDelete,\n                handleUndoRedo,\n            ];\n\n            for (const handler of handlers) {\n                const handled = handler(event, songDispatch);\n                if (handled) {\n                    event.preventDefault();\n                    return;\n                }\n            }\n        };\n\n        addKeyListener(handleKeyDown);\n\n        return () => removeKeyListener(handleKeyDown);\n    }, [allowInteraction, addKeyListener, removeKeyListener, songDispatch]);\n\n    const makeLineElement = (line: ChordLine): React.ReactElement[] => {\n        return [\n            <Line\n                key={line.id}\n                chordLine={line}\n                songDispatch={songDispatch}\n                data-lineid={line.id}\n                data-testid=\"Line\"\n            />,\n            <NewLine\n                key={`NewLine-${line.id}`}\n                lineID={line}\n                songDispatch={songDispatch}\n                data-testid=\"NewLine\"\n            />,\n        ];\n    };\n\n    const lines: List<JSX.Element> = (() => {\n        let lines = props.song.timeSectionedChordLines.flatMap(\n            (section: List<ChordLine>) => makeSection(section, makeLineElement)\n        );\n\n        const firstNewLine = (\n            <NewLine\n                key={\"NewLine-Top\"}\n                lineID=\"beginning\"\n                songDispatch={songDispatch}\n                data-testid=\"NewLine-Top\"\n            />\n        );\n\n        lines = lines.splice(0, 0, firstNewLine);\n\n        return lines;\n    })();\n\n    const paperSx = allowInteraction ? undefined : uninteractiveSx;\n\n    return (\n        <InteractionContext.Provider value={interactionContextValue}>\n            <Paper\n                onCopy={allowInteraction ? handleCopy : undefined}\n                sx={paperSx}\n                elevation={0}\n                tabIndex={0}\n            >\n                <Grid container justifyContent=\"center\">\n                    <Grid item xs={10}>\n                        {lines}\n                    </Grid>\n                </Grid>\n            </Paper>\n        </InteractionContext.Provider>\n    );\n};\n\nexport default ChordPaperBody;\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Typography,\n} from \"@mui/material\";\nimport { useErrorSnackbar } from \"common/backend/errors\";\nimport { createSong, deleteSong } from \"common/backend/requests\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { SongPath } from \"common/paths\";\nimport { noopFn, PlainFn } from \"common/PlainFn\";\nimport { User } from \"components/user/userContext\";\nimport { isLeft } from \"fp-ts/lib/These\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useCallback, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const useCloudCreateSong = () => {\n    const { enqueueSnackbar } = useSnackbar();\n    const showError = useErrorSnackbar();\n    const history = useHistory();\n\n    const createNewSong = useCallback(\n        async (song: ChordSong, user: User) => {\n            const ownedSong = song.set(\"owner\", user.userID);\n\n            const createResult = await createSong(ownedSong, user.authToken);\n\n            if (isLeft(createResult)) {\n                await showError(createResult.left);\n                return;\n            }\n\n            let deserializeResult = ChordSong.fromJSONObject(\n                createResult.right\n            );\n\n            if (isLeft(deserializeResult)) {\n                console.error(\"Backend response does not match song format\");\n                console.log(createResult.right);\n                enqueueSnackbar(\n                    \"A failure happened. Check console for more error details\",\n                    { variant: \"error\" }\n                );\n                return;\n            }\n\n            const deserializedSong = deserializeResult.right;\n            const pathWithID = SongPath.root.withID(deserializedSong.id);\n            const editPath = pathWithID.withEditMode();\n\n            history.push(editPath.URL());\n        },\n        [enqueueSnackbar, showError, history]\n    );\n\n    const createNewSongIfUnsaved = useCallback(\n        async (song: ChordSong, user: User) => {\n            if (song.isUnsaved()) {\n                await createNewSong(song, user);\n            }\n        },\n        [createNewSong]\n    );\n\n    return createNewSongIfUnsaved;\n};\n\nexport const useCloudDeleteSongDialog = (\n    song: ChordSong,\n    user: User | null\n): [PlainFn, React.ReactElement | null] => {\n    const { enqueueSnackbar } = useSnackbar();\n    const showError = useErrorSnackbar();\n    const history = useHistory();\n    const [shouldShowDialog, setShouldShowDialog] = useState(false);\n\n    const showDialog = () => setShouldShowDialog(true);\n\n    if (!shouldShowDialog) {\n        return [showDialog, null];\n    }\n\n    if (user === null) {\n        return [noopFn, null];\n    }\n\n    if (user === null) {\n        return [noopFn, null];\n    }\n\n    const closeDialog = () => setShouldShowDialog(false);\n\n    const deleteAction = async () => {\n        if (song.isUnsaved()) {\n            return;\n        }\n\n        const deleteResult = await deleteSong(song, user.authToken);\n\n        if (isLeft(deleteResult)) {\n            await showError(deleteResult.left);\n            return;\n        }\n\n        enqueueSnackbar(\"Song has been successfully deleted\", {\n            variant: \"success\",\n        });\n        history.push(SongPath.newURL());\n    };\n\n    const deleteDialog = (\n        <Dialog open onClose={closeDialog}>\n            <DialogTitle>Delete Song</DialogTitle>\n            <DialogContent>\n                <Typography>\n                    This will delete the song and cannot be undone. Are you\n                    sure?\n                </Typography>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={closeDialog}>Cancel</Button>\n                <Button onClick={deleteAction}>Delete</Button>\n            </DialogActions>\n        </Dialog>\n    );\n\n    return [noopFn, deleteDialog];\n};\n","import { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { IDable } from \"common/ChordModel/Collection\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { Note } from \"common/music/foundation/Note\";\nimport { List, Record } from \"immutable\";\nimport { ProviderContext, useSnackbar } from \"notistack\";\nimport { useCallback, useMemo, useReducer, useContext } from \"react\";\nimport { useCloudCreateSong } from \"components/edit/menu/cloudSave\";\nimport { User, UserContext } from \"components/user/userContext\";\n\ntype ReplaceSong = {\n    type: \"replace-song\";\n    newSong: ChordSong;\n};\n\ntype Undo = {\n    type: \"undo\";\n};\n\ntype Redo = {\n    type: \"redo\";\n};\n\ntype SetHeader = {\n    type: \"set-header\";\n    title?: string;\n    composedBy?: string;\n    performedBy?: string;\n};\n\ntype SetLastSavedAt = {\n    type: \"set-last-saved-at\";\n    lastSavedAt: Date | null;\n};\n\ntype Transpose = {\n    type: \"transpose\";\n    originalKey: Note;\n    transposeKey: Note;\n    modifyMode: \"in-place\" | \"new-song\";\n};\n\ntype AddLine = {\n    type: \"add-line\";\n    lineID: IDable<ChordLine> | \"beginning\";\n};\n\ntype RemoveLine = {\n    type: \"remove-line\";\n    lineID: IDable<ChordLine>;\n};\n\ntype BatchInsertLines = {\n    type: \"batch-insert-lines\";\n    insertLineID: IDable<ChordLine>;\n    copiedLines: ChordLine[];\n};\n\ntype BatchRemoveLines = {\n    type: \"batch-remove-lines\";\n    lineIDs: IDable<ChordLine>[];\n};\n\ntype SplitLine = {\n    type: \"split-line\";\n    lineID: IDable<ChordLine>;\n    splitIndex: number;\n};\n\ntype MergeLines = {\n    type: \"merge-lines\";\n    latterLineID: IDable<ChordLine>;\n};\n\ntype InsertOverflowLyrics = {\n    type: \"insert-overflow-lyrics\";\n    insertionLineID: IDable<ChordLine>;\n    overflowLyrics: Lyric[];\n};\n\ntype ReplaceLineLyrics = {\n    type: \"replace-line-lyrics\";\n    line: ChordLine;\n    lineID: IDable<ChordLine>;\n    newLyric: Lyric;\n};\n\ntype SetChord = {\n    type: \"set-chord\";\n    lineID: IDable<ChordLine>;\n    blockID: IDable<ChordBlock>;\n    newChord: string;\n};\n\ntype SplitBlock = {\n    type: \"split-block\";\n    lineID: IDable<ChordLine>;\n    blockID: IDable<ChordBlock>;\n    splitIndex: number;\n};\n\ntype DragAndDropChord = {\n    type: \"drag-and-drop-chord\";\n    sourceBlockID: IDable<ChordBlock>;\n    newChord: string;\n    destinationBlockID: IDable<ChordBlock>;\n    splitIndex: number;\n    dropType: \"move\" | \"copy\";\n};\n\ntype SetSection = {\n    type: \"set-section\";\n    lineID: IDable<ChordLine>;\n    label?: string;\n    time?: number | null;\n};\n\nexport type ChordSongAction =\n    | ReplaceSong\n    | Undo\n    | Redo\n    | SetHeader\n    | SetLastSavedAt\n    | AddLine\n    | RemoveLine\n    | BatchInsertLines\n    | BatchRemoveLines\n    | SplitLine\n    | MergeLines\n    | InsertOverflowLyrics\n    | ReplaceLineLyrics\n    | DragAndDropChord\n    | SetChord\n    | SplitBlock\n    | SetSection\n    | Transpose;\n\nexport type ChordSongActionWithoutUndo = Exclude<\n    ChordSongAction,\n    Undo | Redo | SetLastSavedAt\n>;\n\ntype ChordPaperStateType = {\n    undoStack: List<ChordSong>;\n    currentSongIndex: number;\n    lastSavedAt: Date | null;\n};\n\nconst ChordPaperStateConstructor = Record<ChordPaperStateType>({\n    undoStack: List(),\n    currentSongIndex: -1,\n    lastSavedAt: null,\n});\n\ntype ChordPaperState = ReturnType<typeof ChordPaperStateConstructor>;\n\ninterface Hooks {\n    user: User | null;\n    enqueueSnackbar: ProviderContext[\"enqueueSnackbar\"];\n    cloudSaveAction: ReturnType<typeof useCloudCreateSong>;\n}\n\nconst getCurrentSong = (state: ChordPaperState): ChordSong => {\n    const currentSong: ChordSong | undefined = state.undoStack.get(\n        state.currentSongIndex\n    );\n\n    if (currentSong === undefined) {\n        throw new Error(\n            \"Invalid state: no valid entry found in undo stack for current state\"\n        );\n    }\n\n    return currentSong.set(\"lastSavedAt\", state.lastSavedAt);\n};\n\n// the separation between these two reducer functions is that\n// most operations don't need to understand then undo stack, only\n// undo and redo operations require it, so splitting these keeps each\n// easier to manage\nconst chordSongReducer = (\n    state: ChordPaperState,\n    action: ChordSongAction,\n    hooks: Hooks\n): ChordPaperState => {\n    switch (action.type) {\n        case \"undo\": {\n            if (state.currentSongIndex === 0) {\n                return state;\n            }\n\n            state = state.update(\"currentSongIndex\", (index) => index - 1);\n            return state;\n        }\n\n        case \"redo\": {\n            const lastIndex = state.undoStack.size - 1;\n\n            if (state.currentSongIndex === lastIndex) {\n                return state;\n            }\n\n            state = state.update(\"currentSongIndex\", (index) => index + 1);\n            return state;\n        }\n\n        case \"set-last-saved-at\": {\n            return state.set(\"lastSavedAt\", action.lastSavedAt);\n        }\n\n        default: {\n            const currentSong = getCurrentSong(state);\n            const newSong = chordSongReducerWithoutUndo(\n                currentSong,\n                action,\n                hooks\n            );\n\n            if (newSong === false) {\n                return state;\n            }\n\n            const currentSongIndex = state.currentSongIndex;\n\n            const blowAwayRedoStack = (\n                list: List<ChordSong>\n            ): List<ChordSong> => {\n                return list.slice(0, currentSongIndex + 1);\n            };\n\n            state = state.update(\"undoStack\", (list) => {\n                list = blowAwayRedoStack(list);\n                list = list.push(newSong);\n                return list;\n            });\n\n            state = state.update(\"currentSongIndex\", (index) => index + 1);\n\n            return state;\n        }\n    }\n};\n\nconst chordSongReducerWithoutUndo = (\n    song: ChordSong,\n    action: ChordSongActionWithoutUndo,\n    hooks: Hooks\n): ChordSong | false => {\n    switch (action.type) {\n        case \"replace-song\": {\n            return action.newSong;\n        }\n\n        case \"set-header\": {\n            if (action.title !== undefined) {\n                const title: string = action.title;\n                song = song.update(\"metadata\", (metadata) => ({\n                    ...metadata,\n                    title: title,\n                }));\n            }\n\n            if (action.composedBy !== undefined) {\n                const composedBy: string = action.composedBy;\n                song = song.update(\"metadata\", (metadata) => ({\n                    ...metadata,\n                    composedBy: composedBy,\n                }));\n            }\n\n            if (action.performedBy !== undefined) {\n                const performedBy: string = action.performedBy;\n                song = song.update(\"metadata\", (metadata) => ({\n                    ...metadata,\n                    performedBy: performedBy,\n                }));\n            }\n\n            return song;\n        }\n\n        case \"add-line\": {\n            if (action.lineID === \"beginning\") {\n                return song.addBeginning(new ChordLine({}));\n            }\n            return song.addAfter(action.lineID, new ChordLine({}));\n        }\n\n        case \"remove-line\": {\n            return song.removeElement(action.lineID);\n        }\n\n        case \"split-line\": {\n            const [newSong, splitted] = song.splitLine(\n                action.lineID,\n                action.splitIndex\n            );\n            if (!splitted) {\n                return false;\n            }\n\n            return newSong;\n        }\n\n        case \"merge-lines\": {\n            const [newSong, merged] = song.mergeLineWithPrevious(\n                action.latterLineID\n            );\n            if (!merged) {\n                return false;\n            }\n\n            return newSong;\n        }\n\n        case \"batch-insert-lines\": {\n            const currLine: ChordLine = song.get(action.insertLineID);\n\n            song = song.addAfter(action.insertLineID, ...action.copiedLines);\n\n            // if the line is empty, the user was probably trying to paste into the current line, and not the next\n            // so just remove the current line to simulate that\n            if (currLine.isEmpty()) {\n                song = song.removeElement(action.insertLineID);\n            }\n\n            return song;\n        }\n\n        case \"batch-remove-lines\": {\n            return song.removeMultipleElements(action.lineIDs);\n        }\n\n        case \"replace-line-lyrics\": {\n            return song.replaceElement(action.lineID, (line) => {\n                return line.replaceLyrics(action.newLyric);\n            });\n        }\n\n        case \"insert-overflow-lyrics\": {\n            const newLyrics = action.overflowLyrics.filter(\n                (lyric: Lyric) => !lyric.isEntirelySpace() && !lyric.isEmpty()\n            );\n\n            const newChordLines: ChordLine[] = newLyrics.map(\n                (newLyricLine: Lyric) => ChordLine.fromLyrics(newLyricLine)\n            );\n            return song.addAfter(action.insertionLineID, ...newChordLines);\n        }\n\n        case \"set-chord\": {\n            return song.replaceElement(action.lineID, (line) => {\n                return line.setChord(action.blockID, action.newChord);\n            });\n        }\n\n        case \"split-block\": {\n            return song.replaceElement(action.lineID, (line) => {\n                return line.splitBlock(action.blockID, action.splitIndex);\n            });\n        }\n\n        case \"drag-and-drop-chord\": {\n            let sourceLine = song.findLineWithBlock(action.sourceBlockID);\n\n            let destinationLine = song.findLineWithBlock(\n                action.destinationBlockID\n            );\n\n            const sameLine = sourceLine === destinationLine;\n            const syncSameLines = (newLine: ChordLine) => {\n                if (sameLine) {\n                    sourceLine = newLine;\n                    destinationLine = newLine;\n                }\n            };\n\n            if (action.dropType === \"move\") {\n                // clearing the source block first allows handling of when the chord\n                // is dropped onto another token in the same block without special cases\n                sourceLine = sourceLine.replaceElement(\n                    action.sourceBlockID,\n                    (block) => block.set(\"chord\", \"\")\n                );\n\n                syncSameLines(sourceLine);\n            }\n\n            if (action.splitIndex !== 0) {\n                destinationLine = destinationLine.splitBlock(\n                    action.destinationBlockID,\n                    action.splitIndex\n                );\n\n                syncSameLines(destinationLine);\n            }\n\n            destinationLine = destinationLine.replaceElement(\n                action.destinationBlockID,\n                (block) => {\n                    return block.set(\"chord\", action.newChord);\n                }\n            );\n\n            syncSameLines(destinationLine);\n\n            if (sameLine) {\n                sourceLine = sourceLine.normalizeBlocks();\n                syncSameLines(sourceLine);\n            } else {\n                sourceLine = sourceLine.normalizeBlocks();\n                destinationLine = destinationLine.normalizeBlocks();\n            }\n\n            song = song.replaceElement(sourceLine, () => sourceLine);\n            song = song.replaceElement(destinationLine, () => destinationLine);\n\n            return song;\n        }\n\n        case \"set-section\": {\n            const updateName = (line: ChordLine): ChordLine => {\n                if (action.label !== undefined) {\n                    [line] = line.setSectionName(action.label);\n                }\n\n                return line;\n            };\n\n            const updateTime = (line: ChordLine): ChordLine => {\n                if (action.time !== undefined) {\n                    [line] = line.setSectionTime(action.time);\n                }\n\n                return line;\n            };\n\n            song = song.updateCollection((elements) => {\n                return elements.replace(action.lineID, (line) => {\n                    line = updateName(line);\n                    line = updateTime(line);\n                    return line;\n                });\n            });\n\n            const validation = song.validateTimestampedSections();\n            if (validation !== null) {\n                hooks.enqueueSnackbar(validation.message, {\n                    variant: \"warning\",\n                });\n                return false;\n            }\n\n            return song;\n        }\n\n        case \"transpose\": {\n            switch (action.modifyMode) {\n                case \"in-place\":\n                    return song.transpose(\n                        action.originalKey,\n                        action.transposeKey\n                    );\n                case \"new-song\": {\n                    if (hooks.user === null) {\n                        hooks.enqueueSnackbar(\n                            \"Cannot create a new song without a logged in user\",\n                            { variant: \"error\" }\n                        );\n                        return false;\n                    }\n\n                    let newSong = song.fork();\n                    newSong = newSong.transpose(\n                        action.originalKey,\n                        action.transposeKey\n                    );\n\n                    hooks.cloudSaveAction(newSong, hooks.user);\n                    hooks.enqueueSnackbar(\n                        \"Saving into a new song, please wait...\",\n                        { variant: \"info\" }\n                    );\n                    return false;\n                }\n            }\n        }\n    }\n};\n\nexport const useChordSongReducer = (\n    initialSong: ChordSong,\n    onChange?: (newSong: ChordSong, action: ChordSongAction) => void\n): [ChordSong, React.Dispatch<ChordSongAction>] => {\n    const { enqueueSnackbar } = useSnackbar();\n    const cloudSaveAction = useCloudCreateSong();\n    const user = useContext(UserContext);\n\n    const hooks: Hooks = useMemo(\n        () => ({\n            user: user,\n            enqueueSnackbar: enqueueSnackbar,\n            cloudSaveAction: cloudSaveAction,\n        }),\n        [user, enqueueSnackbar, cloudSaveAction]\n    );\n\n    const reducerWithChangeCallback = useCallback(\n        (state: ChordPaperState, action: ChordSongAction): ChordPaperState => {\n            const newState = chordSongReducer(state, action, hooks);\n            const skipChangeHandler = state === newState;\n            if (skipChangeHandler) {\n                return state;\n            }\n\n            const newSong = getCurrentSong(state);\n            onChange?.(newSong, action);\n\n            return newState;\n        },\n        [onChange, hooks]\n    );\n\n    const initialState = ChordPaperStateConstructor({\n        undoStack: List([initialSong]),\n        currentSongIndex: 0,\n        lastSavedAt: initialSong.lastSavedAt,\n    });\n\n    const [state, dispatch] = useReducer(\n        reducerWithChangeCallback,\n        initialState\n    );\n\n    const currentSong = getCurrentSong(state);\n\n    return [currentSong, dispatch];\n};\n","import UnstyledCheckCircleIcon from \"@mui/icons-material/CheckCircle\";\nimport { Badge as UnstyledBadge, Paper, styled } from \"@mui/material\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport ChordPaperBody from \"components/edit/ChordPaperBody\";\nimport { useChordSongReducer } from \"components/reducer/reducer\";\nimport React, { useEffect, useState } from \"react\";\n\nconst CheckCircleIcon = styled(UnstyledCheckCircleIcon)(({ theme }) => ({\n    color: theme.palette.success.main,\n}));\n\nconst Badge = styled(UnstyledBadge)({\n    display: \"inherit\",\n});\n\ninterface PlaygroundProps {\n    initialSong: ChordSong;\n    expectedSong?: ChordSong;\n}\n\nconst Playground: React.FC<PlaygroundProps> = (\n    props: PlaygroundProps\n): JSX.Element => {\n    const [song, songDispatch] = useChordSongReducer(props.initialSong);\n\n    const [finish, setFinish] = useState(false);\n\n    const { expectedSong } = props;\n\n    useEffect(() => {\n        // don't undo the green check if it's already been passing\n        if (finish) {\n            return;\n        }\n\n        if (expectedSong !== undefined && expectedSong.contentEquals(song)) {\n            setFinish(true);\n        }\n    }, [song, expectedSong, finish, setFinish]);\n\n    return (\n        <Badge badgeContent={<CheckCircleIcon />} invisible={!finish}>\n            <Paper elevation={1}>\n                <ChordPaperBody song={song} songDispatch={songDispatch} />\n            </Paper>\n        </Badge>\n    );\n};\n\nexport default Playground;\n","import React from \"react\";\n\ninterface TitleComponent {\n    title: string;\n}\n\nexport type TutorialComponent = React.FC<{}> & TitleComponent;\n\nexport const convertToTutorialComponent = (\n    fc: React.FC<{}>,\n    title: string\n): TutorialComponent => {\n    const tutorialComponent: TutorialComponent = fc as TutorialComponent;\n    tutorialComponent.title = title;\n    return tutorialComponent;\n};\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { ChordTypography, LineBreak, LyricsTypography } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Add Chords\";\n\nconst AddChord = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                Add a chord by hovering above a word, and clicking the outlined\n                box. Let's add{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography> back\n                above{\" \"}\n                <LyricsTypography display=\"inline\">appear</LyricsTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(AddChord, title);\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { LineBreak, LyricsTypography } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Add New Lines\";\n\nconst AddLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"Every time you are near\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                You can add more lines by hovering below (or above) and existing\n                line, and clicking the gray line or the add icon to the right.\n            </Typography>\n            <Typography>Let's add a line, and change the lyrics to:</Typography>\n            <LyricsTypography>Why do birds suddenly ap-pear?</LyricsTypography>\n            <LyricsTypography>Every time you are near</LyricsTypography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(AddLine, title);\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { ChordTypography, LineBreak, LyricsTypography } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Chord Positioning\";\n\nconst ChordPositioning: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const example = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"F#7\",\n                        lyric: new Lyric(\" ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"F#7\",\n                        lyric: new Lyric(\" ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                Sometimes you want to emphasize a chord landing on a specific\n                syllable or between words. Without the overhead of standard\n                notation, we can do this by breaking up lyrics and annotating\n                spaces.\n            </Typography>\n            <LineBreak />\n\n            <Typography>Let's change the lyrics to:</Typography>\n            <LyricsTypography>Why do birds suddenly ap-pear?</LyricsTypography>\n            <Typography>\n                And add a tab after the{\" \"}\n                <LyricsTypography display=\"inline\">?</LyricsTypography>\n            </Typography>\n            <Typography>\n                Then add the chord{\" \"}\n                <ChordTypography display=\"inline\">F#7</ChordTypography> to the\n                space before{\" \"}\n                <LyricsTypography display=\"inline\">ap-</LyricsTypography>\n            </Typography>\n            <Typography>\n                Add the chord{\" \"}\n                <ChordTypography display=\"inline\">B7sus4</ChordTypography> to{\" \"}\n                <LyricsTypography display=\"inline\">pear</LyricsTypography>\n            </Typography>\n            <Typography>\n                Add the chord{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography> to the\n                tabbed space after{\" \"}\n            </Typography>\n            <Typography>It should look like this:</Typography>\n            <Playground initialSong={example} />\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(ChordPositioning, title);\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { LineBreak, LyricsTypography } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Copy and Paste Lines\";\n\nconst CopyAndPaste: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"But I'm a \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"G\",\n                        lyric: new Lyric(\"creep, I'm a \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"weirdo\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"What the hell am doing \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"C\",\n                        lyric: new Lyric(\"here? I don't be-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"Cm\",\n                        lyric: new Lyric(\"long here\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"I don't care if it \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"G\",\n                        lyric: new Lyric(\"hurts, I wanna have con-\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"trol\") }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"I want a perfect \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"C\",\n                        lyric: new Lyric(\"body, I want a perfect \"),\n                    }),\n                    new ChordBlock({ chord: \"Cm\", lyric: new Lyric(\"soul\") }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"I want you to \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"G\",\n                        lyric: new Lyric(\"notice when I'm not a-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"round\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"You're so fucking \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"C\",\n                        lyric: new Lyric(\"special, I wish I was \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"Cm\",\n                        lyric: new Lyric(\"special\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"But I'm a \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"G\",\n                        lyric: new Lyric(\"creep, I'm a \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"weirdo\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"What the hell am doing \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"C\",\n                        lyric: new Lyric(\"here? I don't be-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"Cm\",\n                        lyric: new Lyric(\"long here\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"I don't care if it \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"G\",\n                        lyric: new Lyric(\"hurts, I wanna have con-\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"trol\") }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"I want a perfect \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"C\",\n                        lyric: new Lyric(\"body, I want a perfect \"),\n                    }),\n                    new ChordBlock({ chord: \"Cm\", lyric: new Lyric(\"soul\") }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"I want you to \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"G\",\n                        lyric: new Lyric(\"notice when I'm not a-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"round\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"You're so fucking \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"C\",\n                        lyric: new Lyric(\"special, I wish I was \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"Cm\",\n                        lyric: new Lyric(\"special\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"But I'm a \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"G\",\n                        lyric: new Lyric(\"creep, I'm a \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"weirdo\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"What the hell am doing \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"C\",\n                        lyric: new Lyric(\"here? I don't be-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"Cm\",\n                        lyric: new Lyric(\"long here\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                Sometimes you want to just repeat what's on the page without\n                entering it all over again - choruses with the same lyrics,\n                repeating instrumental sections. You can do this by copying and\n                pasting entire lines that you've already written out.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                The easiest way to copy is to drag down from some empty space on\n                the left of the line you wish to start copying from, then\n                pressing (CTRL or CMD) + C, or right click {\"->\"} copy.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                To paste, click to edit a lyric line, and press (CTRL or CMD) +\n                V, or right click {\"->\"} paste.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Note that there's no partial copy - if any part of the line is\n                selected during the copy, the whole line is copied.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                If you have trouble selecting a line, try dragging your cursor\n                starting further left and above the line.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Let's try copying and pasting the repeated chorus:\n            </Typography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                But I'm a creep, I'm a weirdo\n            </LyricsTypography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                What the hell am I doing here? I don't belong here.\n            </LyricsTypography>\n            <LineBreak />\n            <Typography>\n                Copy those two lines, add a new line at the bottom, and paste it\n                there.\n            </Typography>\n\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(CopyAndPaste, title);\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { ChordTypography, LineBreak, LyricsTypography } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Drag and Drop Chords\";\n\nconst DragAndDropChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"suddenly appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                It's also possible to drag and drop chords onto different parts\n                of the line when its initial placement wasn't quite correct.\n                Just drag a chord and drop it to the space above or on another\n                lyric.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                If you hold CTRL/CMD/ALT/Option while dragging and dropping, the\n                chord will be copied instead of moved over.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Let's move the{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography> above{\" \"}\n                <LyricsTypography display=\"inline\">suddenly</LyricsTypography>{\" \"}\n                to above{\" \"}\n                <LyricsTypography display=\"inline\">appear</LyricsTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(DragAndDropChord, title);\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { ChordTypography, LineBreak, LyricsTypography } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Edit Chords\";\n\nconst EditChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"Bm\",\n                        lyric: new Lyric(\"appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                Click on a chord to change it, then press enter to commit your\n                changes. Let's change the chord above{\" \"}\n                <LyricsTypography display=\"inline\">appear</LyricsTypography>{\" \"}\n                from <ChordTypography display=\"inline\">Bm</ChordTypography> to{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(EditChord, title);\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { LineBreak, LyricsTypography } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Edit Lyrics\";\n\nconst EditLyrics: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why oh why do birds suddenly \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                You can edit the lyrics by clicking anywhere along the lyrics.\n                Finish editing lyrics by pressing enter or clicking outside the\n                text edit box. Chord Paper will move chords along with lyrics\n                when you edit them. Let's change the lyrics to:\n            </Typography>\n            <LyricsTypography>\n                Why oh why do birds suddenly appear?\n            </LyricsTypography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(EditLyrics, title);\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { ChordTypography, LineBreak, LyricsTypography } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Instrumental Sections\";\n\nconst Instrumental: React.FC<{}> = (): JSX.Element => {\n    const tabExample = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({ chord: \"Bm\", lyric: new Lyric(\"\\ue200\") }),\n                    new ChordBlock({ chord: \"A\", lyric: new Lyric(\"\\ue200\") }),\n                    new ChordBlock({ chord: \"E\", lyric: new Lyric(\"\\ue400\") }),\n                ],\n            }),\n        ],\n    });\n\n    const initialSong = new ChordSong({});\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({ chord: \"Bm\", lyric: new Lyric(\"\\ue200\") }),\n                    new ChordBlock({ chord: \"A\", lyric: new Lyric(\"\\ue200\") }),\n                    new ChordBlock({ chord: \"E\", lyric: new Lyric(\"\\ue400\") }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                In addition to putting chords over lyrics, you can also put them\n                in the spaces between lyrics. When there are no lyrics around\n                the harmony, you can use tabs to create spacing in the lyrics\n                for placing chords.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                You can do this by hitting{\" \"}\n                <LyricsTypography display=\"inline\">tab</LyricsTypography> when\n                editting lyrics, for a normal sized tab, or{\" \"}\n                <LyricsTypography display=\"inline\">\n                    SHIFT + space\n                </LyricsTypography>{\" \"}\n                for a small sized tab, or{\" \"}\n                <LyricsTypography display=\"inline\">\n                    SHIFT + tab\n                </LyricsTypography>{\" \"}\n                for a large sized tab.\n            </Typography>\n            <Playground initialSong={tabExample} />\n            <LineBreak />\n            <Typography>\n                Let's replicate the example from above using{\" \"}\n                <LyricsTypography display=\"inline\">tab</LyricsTypography>s.\n                Start by editing the lyrics. Insert two normal sized tabs with\n                the <LyricsTypography display=\"inline\">tab</LyricsTypography>{\" \"}\n                key, and a large sized tab using{\" \"}\n                <LyricsTypography display=\"inline\">\n                    SHIFT + tab\n                </LyricsTypography>{\" \"}\n                key. Then add{\" \"}\n                <ChordTypography display=\"inline\">Bm</ChordTypography>,{\" \"}\n                <ChordTypography display=\"inline\">A</ChordTypography>,{\" \"}\n                <ChordTypography display=\"inline\">E</ChordTypography>,{\" \"}\n                respectively to each tab.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(Instrumental, title);\n","import ChatBubbleIcon from \"@mui/icons-material/ChatBubbleOutline\";\nimport { styled, Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { sectionLabelStyle } from \"components/display/SectionLabel\";\nimport { LineBreak } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Labels\";\n\nconst LabelTypography = styled(Typography)({ ...sectionLabelStyle });\n\nconst Labels: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"Every time you are near\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"\\ue200\"),\n                    }),\n                ],\n                section: {\n                    type: \"label\",\n                    name: \"Verse\",\n                },\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"Every time you are near\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                It's common to label sections to navigate easily within the\n                song. For example, some common labels are \"Verse\", \"Chorus\",\n                \"Bridge\", or more simplified markers like \"A\", \"B\", etc.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Add a label to a line by hovering over the line, and then\n                clicking the <ChatBubbleIcon /> icon to insert a label for that\n                line. Let's add{\" \"}\n                <LabelTypography display=\"inline\">Verse</LabelTypography> to the\n                first line.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(Labels, title);\n","import { SvgIcon, SvgIconProps } from \"@mui/material\";\nimport React from \"react\";\n\nconst ABLoopIcon: React.FC<SvgIconProps> = (props: SvgIconProps) => {\n    return (\n        <SvgIcon {...props}>\n            <path d=\"m 20.059576,18.25 c 0.6875,0 1.25,0.5625 1.25,1.25 v 1.25 c 0,0.6875 -0.5625,1.25 -1.25,1.25 h -5 v -7.5 h 5 c 0.6875,0 1.25,0.5625 1.25,1.25 V 17 c 0,0.6875 -0.5625,1.25 -1.25,1.25 z m -3.125,-1.875 v 0.9375 h 2.5 V 16.375 Z m 2.5,2.8125 h -2.5 v 0.9375 h 2.5 z\" />\n            <path d=\"M 9.4345756,3.25 V 9.5 h -1.875 V 7.625 h -2.5 V 9.5 h -1.875 V 3.25 c 0,-0.6875 0.5625,-1.25 1.25,-1.25 h 3.75 c 0.6875,0 1.25,0.5625 1.25,1.25 z m -1.875,0.625 h -2.5 V 5.75 h 2.5 z\" />\n            <path d=\"m 4.1789444,14.8468 -0.9943688,-0.994369 2.9831063,-2.983107 2.983107,2.983107 -0.9943695,0.994369 -1.2877078,-1.287707 -0.00497,4.966872 6.9655554,0.005 2.84e-4,1.407033 H 6.8736869 c -0.7756078,0 -1.4070319,-0.631424 -1.4070319,-1.407033 v -4.971844 z\" />\n            <path d=\"M 19.056771,10.878876 V 5.9070325 C 19.056771,5.1314237 18.425346,4.5 17.649738,4.5 h -6.955162 l -4.48e-4,1.4070325 6.965554,0.005 -0.005,4.9668725 -1.287708,-1.2877075 -0.994368,0.9943685 2.983106,2.983108 2.983107,-2.983108 -0.994368,-0.9943685 z\" />\n        </SvgIcon>\n    );\n};\n\nexport default ABLoopIcon;\n","import { SvgIcon, SvgIconProps } from \"@mui/material\";\nimport React from \"react\";\n\nexport const makeRobotoIcon = (textIconContent: string) => {\n    return makeTextIcon(textIconContent, \"Roboto\", \"1.25rem\", \"middle\");\n};\n\nexport const makePressStartIcon = (textIconContent: string, fontSize: string) => {\n    return makeTextIcon(textIconContent, \"PressStart\", fontSize, \"mathematical\");\n};\n\nexport const makeTextIcon = (\n    textIconContent: string,\n    fontFamily: string,\n    fontSize: string,\n    dominantBaseLine: \"middle\" | \"mathematical\"\n): React.FC<SvgIconProps> => {\n    return (props: SvgIconProps) => {\n        return (\n            <SvgIcon {...props}>\n                <g>\n                    <text\n                        style={{ fontFamily: fontFamily, fontSize: fontSize }}\n                        x=\"50%\"\n                        y=\"50%\"\n                        dominant-baseline={dominantBaseLine}\n                        text-anchor=\"middle\"\n                    >\n                        {textIconContent}\n                    </text>\n                </g>\n            </SvgIcon>\n        );\n    };\n};\n\n","import { makePressStartIcon } from \"components/icons/makeTextIcon\";\n\nexport default makePressStartIcon(\"A\", \"1rem\");\n","import { SvgIcon, SvgIconProps } from \"@mui/material\";\nimport React from \"react\";\n\nconst BeginningIcon: React.FC<SvgIconProps> = (props: SvgIconProps) => {\n    return (\n        <SvgIcon {...props}>\n            <path d=\"M6 6h2v12h-2z m1.5 6l8 6V6z m7 0 l8 6V6z\" />\n        </SvgIcon>\n    );\n};\n\nexport default BeginningIcon;\n","import { makePressStartIcon } from \"components/icons/makeTextIcon\";\n\nexport default makePressStartIcon(\"B\", \"1rem\");\n","import { makeRobotoIcon } from \"components/icons/makeTextIcon\";\n\nexport default makeRobotoIcon(\"♭\");\n","import { makeRobotoIcon } from \"components/icons/makeTextIcon\";\n\nexport default makeRobotoIcon(\"♭♯\");\n","import { SvgIcon, SvgIconProps } from \"@mui/material\";\nimport React from \"react\";\n\nconst ForwardIcon: React.FC<SvgIconProps> = (props: SvgIconProps) => {\n    return (\n        <SvgIcon {...props}>\n            <path d=\"M18,13c0,3.31-2.69,6-6,6s-6-2.69-6-6s2.69-6,6-6v4l5-5l-5-5v4c-4.42,0-8,3.58-8,8c0,4.42,3.58,8,8,8c4.42,0,8-3.58,8-8 H18z\" />\n        </SvgIcon>\n    );\n};\n\nexport default ForwardIcon;\n","import { SvgIcon, SvgIconProps } from \"@mui/material\";\nimport React from \"react\";\n\nconst MetronomeIcon: React.FC<SvgIconProps> = (props: SvgIconProps) => {\n    return (\n        <SvgIcon {...props}>\n            <g transform=\"matrix(0.6,0,0,0.6,2.0242947,2.4014213)\">\n                <path d=\"m 16,21 c 0.3,0 0.6,-0.1 0.8,-0.4 l 13,-17 C 30.1,3.2 30.1,2.5 29.6,2.2 29.2,1.9 28.5,1.9 28.2,2.4 l -5.7,7.5 -1,-4.8 C 21.1,3.3 19.5,2 17.7,2 H 14.3 C 12.5,2 10.9,3.2 10.5,5 L 5.8,25.5 c -0.3,1.1 0,2.2 0.7,3.1 0.7,0.9 1.7,1.4 2.8,1.4 h 13.3 c 1.1,0 2.2,-0.5 2.9,-1.4 0.7,-0.9 0.9,-2 0.7,-3.1 L 23.7,15.8 C 23.6,15.3 23,14.9 22.5,15.1 22,15.2 21.6,15.8 21.8,16.3 l 1.5,5.8 H 8.6 L 12.4,5.6 c 0.2,-0.9 1,-1.5 1.8,-1.5 h 3.4 c 0.9,0 1.7,0.6 1.8,1.5 l 1.4,6.5 -5.6,7.4 c -0.3,0.4 -0.3,1.1 0.2,1.4 0.2,0 0.4,0.1 0.6,0.1 z\" />\n                <path d=\"m 15,8 h 2 C 17.6,8 18,7.6 18,7 18,6.4 17.6,6 17,6 h -2 c -0.6,0 -1,0.4 -1,1 0,0.6 0.4,1 1,1 z\" />\n                <path d=\"m 15,11 h 2 c 0.6,0 1,-0.4 1,-1 0,-0.6 -0.4,-1 -1,-1 h -2 c -0.6,0 -1,0.4 -1,1 0,0.6 0.4,1 1,1 z\" />\n                <path d=\"m 15,14 h 2 c 0.6,0 1,-0.4 1,-1 0,-0.6 -0.4,-1 -1,-1 h -2 c -0.6,0 -1,0.4 -1,1 0,0.6 0.4,1 1,1 z\" />\n            </g>\n        </SvgIcon>\n    );\n};\n\nexport default MetronomeIcon;\n\n","import { makePressStartIcon } from \"components/icons/makeTextIcon\";\n\nexport default makePressStartIcon(\"+5\", \"0.85rem\");\n","import { makeRobotoIcon } from \"components/icons/makeTextIcon\";\n\nexport default makeRobotoIcon(\"♯\");\n","import DecreaseIcon from \"@mui/icons-material/ArrowDropDown\";\nimport IncreaseIcon from \"@mui/icons-material/ArrowDropUp\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport PauseIcon from \"@mui/icons-material/Pause\";\nimport PlayIcon from \"@mui/icons-material/PlayArrow\";\nimport JumpBackIcon from \"@mui/icons-material/Replay\";\nimport SkipForwardIcon from \"@mui/icons-material/SkipNext\";\nimport SkipBackIcon from \"@mui/icons-material/SkipPrevious\";\nimport { Button as UnstyledButton, styled, Tooltip } from \"@mui/material\";\nimport { ButtonProps } from \"@mui/material/Button\";\nimport ABLoopIcon from \"components/icons/ABLoopIcon\";\nimport AIcon from \"components/icons/AIcon\";\nimport BeginningIcon from \"components/icons/BeginningIcon\";\nimport BIcon from \"components/icons/BIcon\";\nimport FlatIcon from \"components/icons/FlatIcon\";\nimport FlatSharpIcon from \"components/icons/FlatSharpIcon\";\nimport JumpForwardIcon from \"components/icons/ForwardIcon\";\nimport MetronomeIcon from \"components/icons/MetronomeIcon\";\nimport Plus5Icon from \"components/icons/Plus5Icon\";\nimport SharpIcon from \"components/icons/SharpIcon\";\nimport { roundedCornersStyle } from \"components/track_player/common\";\nimport React from \"react\";\n\nconst Button = styled(UnstyledButton)(({ theme }) => ({\n    minWidth: 0,\n    ...roundedCornersStyle(theme),\n}));\n\nconst makeControlButton = (\n    child: React.ReactElement,\n    key: string,\n    tooltipMsg: string,\n    color: \"primary.main\" | \"secondary.main\" | \"action.active\"\n): React.FC<ButtonProps> => {\n    // the keyboard usage of the player collides with any keyboard triggers of control buttons\n    // so disable them entirely, which may happen through keyups\n    const preventKeyInvocation = (\n        event: React.KeyboardEvent<HTMLButtonElement>\n    ) => {\n        event.preventDefault();\n    };\n\n    return (props: ButtonProps) => (\n        <Tooltip key={key} title={tooltipMsg}>\n            <span>\n                <Button\n                    onKeyUp={preventKeyInvocation}\n                    size=\"large\"\n                    sx={{ color: color }}\n                    {...props}\n                >\n                    {child}\n                </Button>\n            </span>\n        </Tooltip>\n    );\n};\n\nexport const ControlButton = {\n    Play: makeControlButton(\n        <PlayIcon />,\n        \"play-button\",\n        \"Play the damn song\",\n        \"primary.main\"\n    ),\n    Pause: makeControlButton(\n        <PauseIcon />,\n        \"pause-button\",\n        \"Pause\",\n        \"secondary.main\"\n    ),\n    JumpBack: makeControlButton(\n        <JumpBackIcon />,\n        \"jump-back-buttonn\",\n        \"Jump Back\",\n        \"primary.main\"\n    ),\n    JumpForward: makeControlButton(\n        <JumpForwardIcon />,\n        \"jump-forward-button\",\n        \"Jump Forward\",\n        \"primary.main\"\n    ),\n    SkipBack: makeControlButton(\n        <SkipBackIcon />,\n        \"skip-back-button\",\n        \"Go back a section\",\n        \"primary.main\"\n    ),\n    SkipForward: makeControlButton(\n        <SkipForwardIcon />,\n        \"skip-back-button\",\n        \"Go forward a section\",\n        \"primary.main\"\n    ),\n    Beginning: makeControlButton(\n        <BeginningIcon />,\n        \"beginning-button\",\n        \"Go to Beginning\",\n        \"primary.main\"\n    ),\n    DecreaseTempo: makeControlButton(\n        <DecreaseIcon />,\n        \"decrease-tempo-button\",\n        \"Play slower\",\n        \"primary.main\"\n    ),\n    IncreaseTempo: makeControlButton(\n        <IncreaseIcon />,\n        \"increase-tempo-button\",\n        \"Play faster\",\n        \"primary.main\"\n    ),\n    TempoMenu: makeControlButton(\n        <MetronomeIcon />,\n        \"tempo-menu\",\n        \"Change tempo\",\n        \"primary.main\"\n    ),\n    ABLoopMenu: makeControlButton(\n        <ABLoopIcon />,\n        \"ab-loop-menu\",\n        \"Set A/B Loop\",\n        \"primary.main\"\n    ),\n    TransposeMenu: makeControlButton(\n        <FlatSharpIcon />,\n        \"transpose-menu\",\n        \"Change pitch\",\n        \"primary.main\"\n    ),\n    TransposeDown: makeControlButton(\n        <FlatIcon />,\n        \"transpose-down-button\",\n        \"Down half step\",\n        \"primary.main\"\n    ),\n    TransposeUp: makeControlButton(\n        <SharpIcon />,\n        \"transpose-up-button\",\n        \"Up half step\",\n        \"primary.main\"\n    ),\n    CloseMenu: makeControlButton(\n        <CloseIcon />,\n        \"close-menu\",\n        \"Close Menu\",\n        \"secondary.main\"\n    ),\n    SetPointA: makeControlButton(\n        <AIcon />,\n        \"set-point-a\",\n        \"Set Point A\",\n        \"action.active\"\n    ),\n    ClearPointA: makeControlButton(\n        <AIcon />,\n        \"clear-point-a\",\n        \"Clear Point A\",\n        \"primary.main\"\n    ),\n    SetPointB: makeControlButton(\n        <BIcon />,\n        \"set-point-b\",\n        \"Set Point B\",\n        \"action.active\"\n    ),\n    ClearPointB: makeControlButton(\n        <BIcon />,\n        \"clear-point-b\",\n        \"Clear Point B\",\n        \"primary.main\"\n    ),\n    EnableDefaultLoop: makeControlButton(\n        <Plus5Icon />,\n        \"enable-default-loop\",\n        \"Loop 5 seconds from A\",\n        \"action.active\"\n    ),\n    DisableDefaultLoop: makeControlButton(\n        <Plus5Icon />,\n        \"disable-plus-5\",\n        \"Disable default looping\",\n        \"primary.main\"\n    ),\n};\n","import { Box, Divider, styled, Theme } from \"@mui/material\";\nimport { MUIStyledCommonProps } from \"@mui/system\";\nimport React from \"react\";\n\nexport const ControlGroupBox = styled(Box)({\n    display: \"flex\",\n    alignContent: \"center\",\n    flexShrink: 0,\n    flexGrow: 0,\n    height: \"100%\",\n});\n\nexport const VerticalMiddleDivider = styled(Divider)(({ theme }) => ({\n    marginLeft: 0,\n    marginRight: 0,\n    marginTop: theme.spacing(1.5),\n    marginBottom: theme.spacing(1.5),\n}));\n\ninterface ControlGroupProps extends MUIStyledCommonProps<Theme> {\n    children: React.ReactNode[];\n    dividers: \"left\" | \"right\";\n    edgeDivider?: boolean;\n}\n\nconst ControlGroup: React.FC<ControlGroupProps> = (\n    props: ControlGroupProps\n): JSX.Element => {\n    const isRealNode = (node: React.ReactNode): boolean => {\n        return node !== null && node !== undefined;\n    };\n\n    const realContents: React.ReactNode[] = props.children.filter(isRealNode);\n\n    const contents: React.ReactElement[] = realContents.map(\n        (child: React.ReactNode, index: number) => {\n            const isEdge =\n                (props.dividers === \"left\" && index === 0) ||\n                (props.dividers === \"right\" &&\n                    index === realContents.length - 1);\n\n            if (props.edgeDivider !== true && isEdge) {\n                return <React.Fragment key={index}>{child}</React.Fragment>;\n            }\n\n            const divider = (\n                <VerticalMiddleDivider\n                    key={`divider-${index}`}\n                    orientation=\"vertical\"\n                    flexItem\n                />\n            );\n\n            const content: React.ReactNode[] =\n                props.dividers === \"right\"\n                    ? [child, divider]\n                    : [divider, child];\n\n            return <React.Fragment key={index}>{content}</React.Fragment>;\n        }\n    );\n\n    return <ControlGroupBox sx={props.sx}>{contents}</ControlGroupBox>;\n};\n\nexport default ControlGroup;\n","import { Box, styled, Tooltip, Typography } from \"@mui/material\";\nimport { greyTextColour, widthOfString } from \"components/track_player/common\";\nimport { ControlButton } from \"components/track_player/internal_player/ControlButton\";\nimport { ControlGroupBox } from \"components/track_player/internal_player/ControlGroup\";\nimport React from \"react\";\n\nconst TempoBox = styled(ControlGroupBox)({\n    justifyContent: \"space-between\",\n});\n\nconst PercentageDisplay = styled(Typography)(({ theme }) => ({\n    color: greyTextColour,\n    minWidth: widthOfString(theme, \"h6\", \"200%\"),\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}));\n\ninterface TempoControlProps {\n    tempoPercentage: number;\n    onTempoChange: (newTempoPercentage: number) => void;\n}\n\nconst TempoControl: React.FC<TempoControlProps> = (\n    props: TempoControlProps\n): JSX.Element => {\n    const tempoPercentage = Math.round(props.tempoPercentage);\n    const interval = 5;\n    const percentageDisplay: string = `${tempoPercentage}%`;\n\n    const onDecrease = () => props.onTempoChange(tempoPercentage - interval);\n    const onIncrease = () => props.onTempoChange(tempoPercentage + interval);\n\n    const decreaseDisabled = tempoPercentage - interval < 50;\n    const increaseDisabled = tempoPercentage + interval > 100;\n\n    return (\n        <TempoBox>\n            <ControlButton.DecreaseTempo\n                onClick={onDecrease}\n                disabled={decreaseDisabled}\n            />\n            <Tooltip title=\"Playback speed\">\n                <PercentageDisplay variant=\"h6\">\n                    <Box>{percentageDisplay}</Box>\n                </PercentageDisplay>\n            </Tooltip>\n\n            <ControlButton.IncreaseTempo\n                onClick={onIncrease}\n                disabled={increaseDisabled}\n            />\n        </TempoBox>\n    );\n};\n\nexport default React.memo(TempoControl);\n","import { Box, styled, Tooltip, Typography } from \"@mui/material\";\nimport { greyTextColour, widthOfString } from \"components/track_player/common\";\nimport { ControlButton } from \"components/track_player/internal_player/ControlButton\";\nimport { ControlGroupBox } from \"components/track_player/internal_player/ControlGroup\";\nimport React from \"react\";\n\nconst TransposeBox = styled(ControlGroupBox)({\n    justifyContent: \"space-between\",\n});\n\nconst TransposeDisplay = styled(Typography)(({ theme }) => ({\n    color: greyTextColour,\n    minWidth: widthOfString(theme, \"h6\", \"♯12\"),\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}));\n\ninterface TransposeControlProps {\n    transposeLevel: number;\n    onTransposeChange: (newTransposeLevel: number) => void;\n}\n\nconst TransposeControl: React.FC<TransposeControlProps> = (\n    props: TransposeControlProps\n): JSX.Element => {\n    const tempo = Math.round(props.transposeLevel);\n    const interval = 1;\n\n    const onDecrease = () => props.onTransposeChange(tempo - interval);\n    const onIncrease = () => props.onTransposeChange(tempo + interval);\n\n    const decreaseDisabled = tempo - interval < -12;\n    const increaseDisabled = tempo + interval > 12;\n\n    const transposeText: string = (() => {\n        if (props.transposeLevel > 0) {\n            return `♯${props.transposeLevel}`;\n        }\n\n        if (props.transposeLevel < 0) {\n            return `♭${-props.transposeLevel}`;\n        }\n\n        return \"♮0\";\n    })();\n\n    return (\n        <TransposeBox>\n            <ControlButton.TransposeDown\n                onClick={onDecrease}\n                disabled={decreaseDisabled}\n            />\n            <Tooltip title=\"Transposition\">\n                <TransposeDisplay variant=\"h6\">\n                    <Box>{transposeText}</Box>\n                </TransposeDisplay>\n            </Tooltip>\n            <ControlButton.TransposeUp\n                onClick={onIncrease}\n                disabled={increaseDisabled}\n            />\n        </TransposeBox>\n    );\n};\n\nexport default React.memo(TransposeControl);\n","import { FirstPage, Repeat } from \"@mui/icons-material\";\nimport {\n    Collapse,\n    styled,\n    ToggleButton as UnstyledToggleButton,\n    ToggleButtonGroup,\n} from \"@mui/material\";\nimport { PlayerTimeContext } from \"components/PlayerTimeContext\";\nimport {\n    ABLoop,\n    ABLoopMode,\n} from \"components/track_player/internal_player/ABLoop\";\nimport { ControlButton } from \"components/track_player/internal_player/ControlButton\";\nimport ControlGroup, {\n    ControlGroupBox,\n} from \"components/track_player/internal_player/ControlGroup\";\nimport { Either, isLeft } from \"fp-ts/lib/Either\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useContext } from \"react\";\n\nconst ToggleButton = styled(UnstyledToggleButton)(({ theme }) => ({\n    border: \"none\",\n    borderRadius: theme.spacing(1),\n}));\n\ninterface ABLoopControlProps {\n    abLoop: ABLoop;\n    onABLoopChange: (newABLoop: ABLoop) => void;\n}\n\nconst ABLoopControl: React.FC<ABLoopControlProps> = (\n    props: ABLoopControlProps\n): JSX.Element => {\n    const getPlayerTimeRef = useContext(PlayerTimeContext);\n    const { enqueueSnackbar } = useSnackbar();\n\n    const abLoop = props.abLoop;\n\n    const isPointASet = abLoop.timeA !== null;\n    const isPointBSet = !abLoop.isDefaultLoop() && abLoop.timeB !== null;\n    const isDefaultLoopSet = abLoop.isDefaultLoop();\n    const showBButton = !isDefaultLoopSet;\n\n    const getTime = (): number | null => {\n        return getPlayerTimeRef.current();\n    };\n\n    const ensureMode = (abLoop: ABLoop): ABLoopMode => {\n        if (!abLoop.isSet()) {\n            return abLoop.mode;\n        }\n\n        const abLoopDisabled = abLoop.mode === \"disabled\";\n\n        if (abLoopDisabled) {\n            const defaultABLoopMode = \"rewind\";\n            return defaultABLoopMode;\n        }\n\n        return abLoop.mode;\n    };\n\n    const setNewLoop = (newABLoop: ABLoop) => {\n        const newMode = ensureMode(newABLoop);\n        props.onABLoopChange(newABLoop.setMode(newMode));\n    };\n\n    const checkErrorAndSetNewLoop = (\n        newABLoopResult: Either<Error, ABLoop>\n    ) => {\n        if (isLeft(newABLoopResult)) {\n            enqueueSnackbar(newABLoopResult.left.message, {\n                variant: \"warning\",\n            });\n\n            return;\n        }\n\n        setNewLoop(newABLoopResult.right);\n    };\n\n    const setPointA = () => {\n        checkErrorAndSetNewLoop(abLoop.setA(getTime()));\n    };\n\n    const setPointB = () => {\n        checkErrorAndSetNewLoop(abLoop.setB(getTime()));\n    };\n\n    const clearPointA = () => {\n        setNewLoop(abLoop.clearA());\n    };\n\n    const clearPointB = () => {\n        setNewLoop(abLoop.clearB());\n    };\n\n    const setDefaultLoop = () => {\n        setNewLoop(abLoop.setDefaultLoop());\n    };\n\n    const clearDefaultLoop = clearPointB;\n\n    const setAButton = <ControlButton.SetPointA onClick={setPointA} />;\n    const clearAButton = <ControlButton.ClearPointA onClick={clearPointA} />;\n    const aButton = isPointASet ? clearAButton : setAButton;\n\n    const setBButton = <ControlButton.SetPointB onClick={setPointB} />;\n    const clearBButton = <ControlButton.ClearPointB onClick={clearPointB} />;\n    const bButton = isPointBSet ? clearBButton : setBButton;\n\n    const enableDefaultLoopButton = (\n        <ControlButton.EnableDefaultLoop onClick={setDefaultLoop} />\n    );\n    const disableDefaultLoopButton = (\n        <ControlButton.DisableDefaultLoop onClick={clearDefaultLoop} />\n    );\n    const defaultLoopButton = isDefaultLoopSet\n        ? disableDefaultLoopButton\n        : enableDefaultLoopButton;\n\n    const handleModeChange = (\n        _event: React.MouseEvent<HTMLElement>,\n        changedMode: \"loop\" | \"rewind\" | null\n    ) => {\n        const newMode: \"loop\" | \"rewind\" | \"disabled\" =\n            changedMode ?? \"disabled\";\n\n        props.onABLoopChange(abLoop.setMode(newMode));\n    };\n\n    return (\n        <ControlGroup dividers=\"left\">\n            <ControlGroupBox>\n                {aButton}\n                <Collapse in={showBButton} orientation=\"horizontal\">\n                    {bButton}\n                </Collapse>\n            </ControlGroupBox>\n            {defaultLoopButton}\n            <ToggleButtonGroup\n                size=\"small\"\n                color=\"primary\"\n                value={abLoop.mode}\n                onChange={handleModeChange}\n                exclusive\n            >\n                <ToggleButton value=\"rewind\">\n                    <FirstPage />\n                </ToggleButton>\n                <ToggleButton value=\"loop\">\n                    <Repeat />\n                </ToggleButton>\n            </ToggleButtonGroup>\n        </ControlGroup>\n    );\n};\n\nexport default React.memo(ABLoopControl);\n","import { Collapse } from \"@mui/material\";\nimport ABLoopControl from \"components/track_player/internal_player/advanced_controls/ABLoopControl\";\nimport TempoControl from \"components/track_player/internal_player/advanced_controls/TempoControl\";\nimport TransposeControl from \"components/track_player/internal_player/advanced_controls/TransposeControl\";\nimport { ControlButton } from \"components/track_player/internal_player/ControlButton\";\nimport {\n    ControlGroupBox,\n    VerticalMiddleDivider,\n} from \"components/track_player/internal_player/ControlGroup\";\nimport { ABLoop } from \"components/track_player/internal_player/ABLoop\";\nimport React, { useState } from \"react\";\n\ninterface AdvancedControlsProps {\n    tempo: {\n        percentage: number;\n        onChange: (newPercentage: number) => void;\n    };\n    abLoop: {\n        abLoop: ABLoop;\n        onChange: (newABLoop: ABLoop) => void;\n    };\n    transpose?: {\n        level: number;\n        onChange: (newLevel: number) => void;\n    };\n}\n\ninterface Menu {\n    icon: React.ReactElement;\n    controls: React.ReactElement;\n}\n\ntype MenuTypes = \"tempo\" | \"transpose\" | \"abLoop\";\nconst menuOrder: MenuTypes[] = [\"tempo\", \"transpose\", \"abLoop\"];\n\nconst AdvancedControls: React.FC<AdvancedControlsProps> = (\n    props: AdvancedControlsProps\n): JSX.Element => {\n    const [currentMenu, setCurrentMenu] = useState<MenuTypes | null>(null);\n\n    const transposeMenu: Menu | null = (() => {\n        if (props.transpose === undefined) {\n            return null;\n        }\n\n        return {\n            icon: (\n                <ControlButton.TransposeMenu\n                    onClick={() => setCurrentMenu(\"transpose\")}\n                />\n            ),\n            controls: (\n                <TransposeControl\n                    transposeLevel={props.transpose.level}\n                    onTransposeChange={props.transpose.onChange}\n                />\n            ),\n        };\n    })();\n\n    const tempoMenu: Menu = {\n        icon: (\n            <ControlButton.TempoMenu onClick={() => setCurrentMenu(\"tempo\")} />\n        ),\n        controls: (\n            <TempoControl\n                tempoPercentage={props.tempo.percentage}\n                onTempoChange={props.tempo.onChange}\n            />\n        ),\n    };\n\n    const abLoopMenu: Menu = {\n        icon: (\n            <ControlButton.ABLoopMenu\n                onClick={() => setCurrentMenu(\"abLoop\")}\n            />\n        ),\n        controls: (\n            <ABLoopControl\n                abLoop={props.abLoop.abLoop}\n                onABLoopChange={props.abLoop.onChange}\n            />\n        ),\n    };\n\n    const showCloseButton = currentMenu !== null;\n    const closeButton = (\n        <Collapse\n            key=\"menu-close-button\"\n            in={showCloseButton}\n            orientation=\"horizontal\"\n        >\n            <ControlButton.CloseMenu onClick={() => setCurrentMenu(null)} />\n        </Collapse>\n    );\n\n    const menus: Record<MenuTypes, Menu | null> = {\n        tempo: tempoMenu,\n        transpose: transposeMenu,\n        abLoop: abLoopMenu,\n    };\n\n    const makeCollapsibleMenu = (menuType: MenuTypes): React.ReactElement[] => {\n        const menu = menus[menuType];\n        if (menu === null) {\n            return [];\n        }\n\n        const showControl = currentMenu === menuType;\n        const control = (\n            <Collapse\n                key={`${menuType}-control`}\n                in={showControl}\n                orientation=\"horizontal\"\n            >\n                <ControlGroupBox>\n                    {menu.controls}\n                    <VerticalMiddleDivider orientation=\"vertical\" flexItem />\n                </ControlGroupBox>\n            </Collapse>\n        );\n\n        const showIconButton = currentMenu === menuType || currentMenu === null;\n        const iconButton = (\n            <Collapse\n                key={`${menuType}-open-button`}\n                in={showIconButton}\n                orientation=\"horizontal\"\n            >\n                {menu.icon}\n            </Collapse>\n        );\n\n        return [control, iconButton];\n    };\n\n    let menuElements: React.ReactElement[] = [];\n    for (const menuKey of menuOrder) {\n        const collapsibleMenuElements = makeCollapsibleMenu(menuKey);\n        menuElements = menuElements.concat(collapsibleMenuElements);\n    }\n\n    menuElements.push(closeButton);\n\n    return <>{menuElements}</>;\n};\n\nexport default React.memo(AdvancedControls);\n","import { useRegisterTopKeyListener } from \"components/GlobalKeyListener\";\nimport { ControlButton } from \"components/track_player/internal_player/ControlButton\";\nimport ControlGroup from \"components/track_player/internal_player/ControlGroup\";\nimport {\n    TransportActions\n} from \"components/track_player/internal_player/usePlayerControls\";\nimport React, { useEffect } from \"react\";\n\ninterface TransportControlProps {\n    show: boolean;\n    playing: boolean;\n    transport: TransportActions;\n}\n\nconst TransportControl: React.FC<TransportControlProps> = (\n    props: TransportControlProps\n): JSX.Element => {\n    const [addTopKeyListener, removeKeyListener] = useRegisterTopKeyListener();\n\n    useEffect(() => {\n        if (!props.show) {\n            return;\n        }\n\n        const handleKey = (event: KeyboardEvent) => {\n            switch (event.code) {\n                case \"Space\": {\n                    props.transport.togglePlay();\n                    event.preventDefault();\n\n                    break;\n                }\n                case \"ArrowLeft\": {\n                    if (event.ctrlKey || event.metaKey) {\n                        props.transport.skipBack.action();\n                    } else {\n                        props.transport.jumpBack();\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n                case \"ArrowRight\": {\n                    if (event.ctrlKey || event.metaKey) {\n                        props.transport.skipForward.action();\n                    } else {\n                        props.transport.jumpForward();\n                    }\n\n                    event.preventDefault();\n                    return;\n                }\n            }\n        };\n\n        addTopKeyListener(handleKey);\n        return () => {\n            removeKeyListener(handleKey);\n        };\n    }, [props, addTopKeyListener, removeKeyListener]);\n\n    const playPauseButton = props.playing ? (\n        <ControlButton.Pause onClick={props.transport.togglePlay} />\n    ) : (\n        <ControlButton.Play onClick={props.transport.togglePlay} />\n    );\n\n    return (\n        <ControlGroup dividers=\"right\">\n            <ControlButton.Beginning onClick={props.transport.goToBeginning} />\n            <ControlButton.SkipBack\n                disabled={!props.transport.skipBack.enabled}\n                onClick={props.transport.skipBack.action}\n            />\n            <ControlButton.JumpBack onClick={props.transport.jumpBack} />\n            {playPauseButton}\n            <ControlButton.JumpForward onClick={props.transport.jumpForward} />\n            <ControlButton.SkipForward\n                disabled={!props.transport.skipForward.enabled}\n                onClick={props.transport.skipForward.action}\n            />\n        </ControlGroup>\n    );\n};\n\nexport default React.memo(TransportControl);\n\n","import { Box, styled } from \"@mui/material\";\nimport { controlPaneStyle } from \"components/track_player/common\";\nimport AdvancedControls from \"components/track_player/internal_player/advanced_controls/AdvancedControls\";\nimport { ControlGroupBox } from \"components/track_player/internal_player/ControlGroup\";\nimport TransportControl from \"components/track_player/internal_player/TransportControl\";\nimport {\n    ABLoopControl,\n    TempoControl,\n    TransportActions,\n} from \"components/track_player/internal_player/usePlayerControls\";\nimport React from \"react\";\n\ninterface ControlPaneProps {\n    show: boolean;\n    playing: boolean;\n    transport: TransportActions;\n    tempo: TempoControl;\n    abLoop: ABLoopControl;\n    transpose?: {\n        level: number;\n        onChange: (newLevel: number) => void;\n    };\n}\n\nconst RightJustifiedControlBox = styled(ControlGroupBox)({\n    marginLeft: \"auto\",\n});\n\nexport const ControlPaneBox = styled(Box)(({ theme }) => {\n    const buttonHeight = theme.spacing(5);\n    return {\n        ...controlPaneStyle,\n        justifyContent: \"space-between\",\n        // these series of CSS allows flex items\n        // to be \"pushed off\" when they run out of space\n        flexWrap: \"wrap\",\n        overflow: \"hidden\",\n        maxHeight: buttonHeight,\n    };\n});\n\nconst ControlPane: React.FC<ControlPaneProps> = (\n    props: ControlPaneProps\n): JSX.Element => {\n    return (\n        <ControlPaneBox>\n            <TransportControl\n                show={props.show}\n                playing={props.playing}\n                transport={props.transport}\n            />\n            <RightJustifiedControlBox>\n                <AdvancedControls\n                    tempo={props.tempo}\n                    abLoop={props.abLoop}\n                    transpose={props.transpose}\n                />\n            </RightJustifiedControlBox>\n        </ControlPaneBox>\n    );\n};\n\nexport default ControlPane;\n","import {\n    Box,\n    Button as UnstyledButton,\n    Grid,\n    Slider,\n    styled,\n    Typography\n} from \"@mui/material\";\nimport {\n    blueGrey,\n    grey,\n    lightBlue,\n    lightGreen,\n    pink,\n    purple,\n    yellow\n} from \"@mui/material/colors\";\nimport React from \"react\";\n\nconst FullSizedBox = styled(Box)(({ theme }) => ({\n    width: \"100%\",\n    paddingLeft: theme.spacing(1.5),\n    paddingRight: theme.spacing(1.5),\n}));\n\nconst VolumeSlider = styled(Slider)({\n    color: blueGrey[400],\n});\n\nconst colouredButton = (color: string) => {\n    return styled(UnstyledButton)(({ theme }) => ({\n        backgroundColor: color,\n        width: \"100%\",\n        height: \"100%\",\n        color: grey[700],\n        padding: theme.spacing(0.5),\n        textTransform: \"none\",\n        \"&:hover\": {\n            opacity: 0.6,\n            backgroundColor: color,\n        },\n    }));\n};\n\nconst DisabledButton = colouredButton(grey[300]);\n\nconst ColouredButtons = {\n    white: colouredButton(\"white\"),\n    pink: colouredButton(pink[200]),\n    yellow: colouredButton(yellow[200]),\n    purple: colouredButton(purple[100]),\n    lightBlue: colouredButton(lightBlue[200]),\n    lightGreen: colouredButton(lightGreen[100]),\n};\n\nexport type ControlPaneButtonColour = keyof typeof ColouredButtons;\n\nexport interface StemControl<StemKey extends string> {\n    label: StemKey;\n    buttonColour: ControlPaneButtonColour;\n\n    enabled: boolean;\n    onEnabledChanged: (newEnabled: boolean) => void;\n    volume: number;\n    onVolumeChanged: (newVolume: number) => void;\n}\n\n// T is a stem key, e.g. \"bass\" | \"drums\"\ntype StemTrackControlPaneProps<StemKey extends string> = {\n    stemControls: StemControl<StemKey>[];\n};\n\nconst StemTrackControlPane = <StemKey extends string>(\n    props: StemTrackControlPaneProps<StemKey>\n): JSX.Element => {\n    const makeButton = <StemKey extends string>(\n        stemButton: StemControl<StemKey>\n    ) => {\n        const RenderedButton = stemButton.enabled\n            ? ColouredButtons[stemButton.buttonColour]\n            : DisabledButton;\n\n        const handleClick = () => {\n            stemButton.onEnabledChanged(!stemButton.enabled);\n        };\n\n        const preventClickBubble = (event: React.ChangeEvent<{}>) => {\n            event.preventDefault();\n            event.stopPropagation();\n        };\n\n        const handleVolumeChange = (\n            _event: Event,\n            value: number | number[]\n        ) => {\n            if (typeof value !== \"number\") {\n                return;\n            }\n\n            stemButton.onVolumeChanged(value);\n        };\n\n        return (\n            <Grid key={stemButton.label} item xs>\n                <RenderedButton variant=\"contained\" onClick={handleClick}>\n                    <FullSizedBox>\n                        <Typography variant=\"body1\">\n                            {stemButton.label}\n                        </Typography>\n\n                        <Box onClick={preventClickBubble}>\n                            <VolumeSlider\n                                value={stemButton.volume}\n                                onChange={handleVolumeChange}\n                                min={0}\n                                max={200}\n                                step={10}\n                                size=\"small\"\n                                valueLabelDisplay=\"auto\"\n                            />\n                        </Box>\n                    </FullSizedBox>\n                </RenderedButton>\n            </Grid>\n        );\n    };\n\n    const buttons = props.stemControls.map(makeButton);\n\n    return <Grid container>{buttons}</Grid>;\n};\n\nexport default React.memo(StemTrackControlPane);\n","import RadioIcon from \"@mui/icons-material/Radio\";\nimport { styled, Typography } from \"@mui/material\";\nimport { noopFn } from \"common/PlainFn\";\nimport TempoControl from \"components/track_player/internal_player/advanced_controls/TempoControl\";\nimport TransposeControl from \"components/track_player/internal_player/advanced_controls/TransposeControl\";\nimport { ControlButton } from \"components/track_player/internal_player/ControlButton\";\nimport { ControlPaneBox } from \"components/track_player/internal_player/ControlPane\";\nimport StemTrackControlPane, {\n    ControlPaneButtonColour,\n    StemControl\n} from \"components/track_player/internal_player/stem/StemTrackControlPane\";\nimport { LineBreak } from \"components/tutorial/Common\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Track Player\";\n\nconst SmallControlPaneBox = styled(ControlPaneBox)({\n    width: \"min-content\",\n});\n\nconst TrackPlayer: React.FC<{}> = (): JSX.Element => {\n    const makeStemControl = <\n        StemKey extends \"vocals\" | \"other\" | \"bass\" | \"drums\"\n    >(\n        label: StemKey,\n        buttonColour: ControlPaneButtonColour\n    ): StemControl<\"vocals\" | \"other\" | \"bass\" | \"drums\"> => {\n        return {\n            label: label,\n            buttonColour: buttonColour,\n            enabled: true,\n            onEnabledChanged: noopFn,\n            volume: 100,\n            onVolumeChanged: noopFn,\n        };\n    };\n\n    const stemControls = [\n        makeStemControl(\"vocals\", \"lightBlue\"),\n        makeStemControl(\"other\", \"purple\"),\n        makeStemControl(\"bass\", \"pink\"),\n        makeStemControl(\"drums\", \"yellow\"),\n    ];\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                The track player is an integrated audio player which helps with\n                your transcription, or aids with your jam. The track player is\n                available once a song is saved. Once the song is saved, click\n                the <RadioIcon /> on the bottom right to bring up the player.\n                This is available in both edit or play mode.\n            </Typography>\n            <LineBreak />\n            <Typography variant=\"h6\">Adding a track</Typography>\n            <Typography>\n                The track player requires at least one track to play. If you add\n                a new track, several options of track types will be presented.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                A single track is the most basic track type. The URL can be a\n                Youtube URL, or a link to an mp3, or another media reference,\n                etc.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                2/4/5 stem tracks allow independent control of each stem (e.g.\n                drums, vocals). The URLs are expected to point to an audio file.\n                One way to create these stem files is to use Spleeter.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                The \"Split into 2/4/5 stem\" tracks will take an audio track and\n                turn them into stems. This is the easiest way to get stem\n                tracks. For the URL, a Youtube URL or mp3 would work well.\n            </Typography>\n            <LineBreak />\n            <Typography variant=\"h6\">Transport</Typography>\n            <Typography>\n                In addition to the native player controls, there are also some\n                transport buttons here the bottom:\n            </Typography>\n            <Typography>\n                <ControlButton.Play />: Plays the song\n            </Typography>\n            <Typography>\n                <ControlButton.Pause />: Pauses the song\n            </Typography>\n            <Typography>\n                <ControlButton.JumpBack />: Jumps back 5 seconds\n            </Typography>\n            <Typography>\n                <ControlButton.JumpForward />: Jumps forward 5 seconds\n            </Typography>\n            <Typography>\n                <ControlButton.SkipBack />: Jumps back to the previous section\n                (as marked by the section label times)\n            </Typography>\n            <Typography>\n                <ControlButton.SkipForward />: Jumps forward to the next section\n                (as marked by the section label times)\n            </Typography>\n            <Typography>\n                <ControlButton.Beginning />: Jumps back to the beginning of the\n                song\n            </Typography>\n            <LineBreak />\n            <Typography variant=\"h6\">Speed</Typography>\n            <Typography>\n                On the right, you will see a control like this:\n            </Typography>\n            <SmallControlPaneBox>\n                <TempoControl tempoPercentage={100} onTempoChange={noopFn} />\n            </SmallControlPaneBox>\n            <Typography>\n                Here, you can slow down the tempo of a track to listen more\n                carefully. This will work with Youtube or mp3 tracks, and may or\n                may not work with tracks from other sources.\n            </Typography>\n            <LineBreak />\n            <Typography variant=\"h6\">Transpose</Typography>\n            <Typography>\n                If you have a stem track, you will also see a control on the\n                right like this:\n            </Typography>\n            <SmallControlPaneBox>\n                <TransposeControl transposeLevel={0} onTransposeChange={noopFn} />\n            </SmallControlPaneBox>\n            <Typography>\n                This allows you to transpose the song up or down a desired\n                amount of semitones.\n            </Typography>\n            <LineBreak />\n            <Typography variant=\"h6\">Stems</Typography>\n            <Typography>\n                A stem is a part in the track, such as vocals, guitar, or drums.\n                Once you end up with stem tracks, you will see controls like\n                this:\n            </Typography>\n            <StemTrackControlPane stemControls={stemControls} />\n            <LineBreak />\n            <Typography>\n                The exact stems will vary, but each stem can be muted by\n                clicking on the respective button, or its volume adjusted via\n                the slider.\n            </Typography>\n            <LineBreak />\n            <Typography variant=\"h6\">Keyboard shortcuts</Typography>\n            <Typography>\n                There are keyboard shortcuts for the transport controls, but\n                they vary depending on the player is shown or minimized.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                There are keyboard shortcuts for the transport controls, but\n                they vary depending on the player is shown or minimized.\n            </Typography>\n            <LineBreak />\n            <Typography>When the player is shown:</Typography>\n            <Typography>/: minimize the player</Typography>\n            <Typography>Space: play/pause</Typography>\n            <Typography>Left arrow: jump back 5 seconds</Typography>\n            <Typography>Right arrow: jump forward 5 seconds</Typography>\n            <Typography>\n                CMD/Control + left arrow: jump back one section\n            </Typography>\n            <Typography>\n                CMD/Control + right arrow: jump forward one section\n            </Typography>\n            <LineBreak />\n            <Typography>When the player is minimized:</Typography>\n            <Typography>/: shows the player</Typography>\n            <Typography>CMD/Control + Enter: play/pause</Typography>\n            <Typography>\n                CMD/Control + left arrow: jump back 5 seconds\n            </Typography>\n            <Typography>\n                CMD/Control + right arrow: jump forward 5 seconds\n            </Typography>\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(TrackPlayer, title);\n","import CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nimport { Typography } from \"@mui/material\";\nimport { getRouteForTutorialComponent } from \"components/Tutorial\";\nimport { LineBreak } from \"components/tutorial/Common\";\nimport TrackPlayer from \"components/tutorial/TrackPlayer\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst title = \"Logging In\";\n\nconst Login: React.FC<{}> = (): JSX.Element => {\n    const trackPlayerRoute = getRouteForTutorialComponent(TrackPlayer);\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                You can save and load your songs if you have logged in. When you\n                want to save your song to the cloud, hover to the bottom right\n                menu and click <CloudUploadIcon /> to commit the song. After the\n                song is saved once, it will continue to save any changes\n                automatically.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Having an account also means you can add music tracks to the{\" \"}\n                <Link to={trackPlayerRoute}>Track Player</Link>.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Accounts are provided on an invite basis right now. Requests for\n                invites coming soon.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                If you don't want to sign in or save your songs to the cloud, I\n                get it. You can also reveal (offline) Save and Load menu icons\n                in the bottom right menu by entering the{\" \"}\n                <a href=\"https://en.wikipedia.org/wiki/Konami_Code\">\n                    Konami Code\n                </a>{\" \"}\n                to save and load the files striaght to your computer.\n            </Typography>\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(Login, title);\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { LineBreak } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Merge Lines\";\n\nconst MergeLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"suddenly \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                Sometimes the lyrics that we paste in is not the division we\n                want. Let's merge the two lines. Click into the second line,\n                move the cursor to the beginning of the line, and press\n            </Typography>\n            <Typography>\n                (CTRL+Backspace : Windows | CMD+Backspace : Mac)\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(MergeLine, title);\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { LineBreak, LyricsTypography } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Paste Lyrics\";\n\nconst PasteLyrics: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n                ],\n            }),\n            new ChordLine({}),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"Every time you are near\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"Just like me, they long to be\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"Close to you\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                It would be annoying to have to type out the lyrics. But we can\n                paste it in! Copy these lyrics, click into the second line, and\n                paste:\n            </Typography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                Every time you are near\n            </LyricsTypography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                Just like me, they long to be\n            </LyricsTypography>\n            <LyricsTypography variantMapping={{ body1: \"div\" }}>\n                Close to you\n            </LyricsTypography>\n\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(PasteLyrics, title);\n","import PlayIcon from \"@mui/icons-material/PlayArrow\";\nimport { Typography } from \"@mui/material\";\nimport { LineBreak } from \"components/tutorial/Common\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Play Mode\";\n\nconst PlayMode: React.FC<{}> = (): JSX.Element => {\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                Play mode is where you focus on playing the song rather than\n                writing or transcribing it. The chords and lyrics are laid out\n                for ease of reading while playing through.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                To go forward a page, left click anywhere on the page, or tap\n                any button except the buttons that go back a page.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                To go back a page, right click anywhere on the page, or tap\n                left, up, or backspace.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Try this by going into your own song or the demo song, hovering\n                over the menu icon on the bottom right, and clicking the{\" \"}\n                <PlayIcon /> icon.\n            </Typography>\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(PlayMode, title);\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { ChordTypography, LineBreak } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Remove Chords\";\n\nconst RemoveChord: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly appear?\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                Simply remove all the chord text when editing to clear the\n                chord. Let's remove the{\" \"}\n                <ChordTypography display=\"inline\">B7</ChordTypography>.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(RemoveChord, title);\n","import UnstyledBackspaceIcon from \"@mui/icons-material/Backspace\";\nimport { styled, Typography } from \"@mui/material\";\nimport { red } from \"@mui/material/colors\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { LineBreak } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Remove Lines\";\n\nconst BackspaceIcon = styled(UnstyledBackspaceIcon)({\n    color: red[300],\n});\n\nconst RemoveLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"Every time you are near\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                Similarly, you can remove a line by hovering over the line, and\n                clicking the <BackspaceIcon /> icon to the right. Let's remove\n                the second line of lyrics.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(RemoveLine, title);\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { LineBreak } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Remove Multiple Lines\";\n\nconst RemoveMultipleLines: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"Every \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"Bm7\",\n                        lyric: new Lyric(\"time you are \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"Em7\",\n                        lyric: new Lyric(\"near\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"Am7\",\n                        lyric: new Lyric(\"Just like me, \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"D7\",\n                        lyric: new Lyric(\"they long to be\"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"G^\",\n                        lyric: new Lyric(\"Close to you\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({ chord: \"B7\", lyric: new Lyric(\"\\ue200\") }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                You can remove multiple lines at once by dragging and selecting\n                over multiple lines, and then pressing Backspace/Delete.\n            </Typography>\n            <LineBreak />\n            <Typography>Let's remove the last three lines.</Typography>\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(RemoveMultipleLines, title);\n","import { Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { LineBreak, LyricsTypography } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Split Lines\";\n\nconst SplitLine: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear? Every \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"time you are near\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear? \"),\n                    }),\n                ],\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"Every \"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"time you are near\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                Similarly, we can split lines that may be too long for our chart\n                into two lines. Move the cursor to where you want the line to\n                split, and press\n            </Typography>\n            <Typography>(CTRL+Enter : Windows | CMD+Enter : Mac)</Typography>\n            <LineBreak />\n            <Typography>\n                Let's break the one long line of lyrics up, so that it looks\n                like:\n            </Typography>\n            <LyricsTypography>Why do birds suddenly appear?</LyricsTypography>\n            <LyricsTypography>Every time you are near</LyricsTypography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <Playground initialSong={initialSong} expectedSong={expectedSong} />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(SplitLine, title);\n","import { Typography } from \"@mui/material\";\nimport { LineBreak } from \"components/tutorial/Common\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\n\nconst title = \"Learn Chord Paper\";\n\nconst Header = () => {\n    return <Typography variant=\"h5\">{title}</Typography>;\n};\n\nconst Preamble = () => {\n    return (\n        <>\n            <Typography>\n                Chord Paper aims to be as intuitive and handy as possible, but\n                there could still be features that aren't obvious as we work out\n                the kinks. Let's walk through the basics together by making some\n                changes to chords and lyrics!\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Since Chord Paper is still in early stages, some of these could\n                change in the future.\n            </Typography>\n        </>\n    );\n};\n\nconst Starting: React.FC<{}> = (): JSX.Element => {\n    return (\n        <>\n            <Header />\n            <LineBreak />\n            <Preamble />\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(Starting, title);\n","import SlowMotionVideoIcon from \"@mui/icons-material/SlowMotionVideo\";\nimport { styled, Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Lyric } from \"common/ChordModel/Lyric\";\nimport { sectionLabelStyle } from \"components/display/SectionLabel\";\nimport PlayerTimeProvider, { PlayerTimeContext } from \"components/PlayerTimeContext\";\nimport { getRouteForTutorialComponent } from \"components/Tutorial\";\nimport { LineBreak } from \"components/tutorial/Common\";\nimport Playground from \"components/tutorial/Playground\";\nimport TrackPlayer from \"components/tutorial/TrackPlayer\";\nimport { convertToTutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst title = \"Labels with Timestamp\";\n\nconst LabelTypography = styled(Typography)(sectionLabelStyle);\n\nconst TimeSetter: React.FC<{}> = (): null => {\n    const getPlayerTimeRef = useContext(PlayerTimeContext);\n    getPlayerTimeRef.current = () => 83;\n    return null;\n};\n\nconst TimeLabels: React.FC<{}> = (): JSX.Element => {\n    const initialSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"\\ue200\"),\n                    }),\n                ],\n                section: {\n                    type: \"label\",\n                    name: \"Verse\",\n                },\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"Every time you are near\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const expectedSong = new ChordSong({\n        lines: [\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"C^\",\n                        lyric: new Lyric(\"Why do birds suddenly ap-\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7sus4\",\n                        lyric: new Lyric(\"pear?\"),\n                    }),\n                    new ChordBlock({\n                        chord: \"B7\",\n                        lyric: new Lyric(\"\\ue200\"),\n                    }),\n                ],\n                section: {\n                    type: \"time\",\n                    name: \"Verse\",\n                    time: 83,\n                },\n            }),\n            new ChordLine({\n                blocks: [\n                    new ChordBlock({\n                        chord: \"\",\n                        lyric: new Lyric(\"Every time you are near\"),\n                    }),\n                ],\n            }),\n        ],\n    });\n\n    const trackPlayerRoute = getRouteForTutorialComponent(TrackPlayer);\n\n    return (\n        <>\n            <Typography variant=\"h5\">{title}</Typography>\n            <LineBreak />\n            <Typography>\n                After creating a label, it's possible to annotate each section\n                with the time of recording, e.g. this verse is at 2:10.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                If you hover over the{\" \"}\n                <LabelTypography display=\"inline\">Verse</LabelTypography> label,\n                a floating input will show up. You can enter a time by typing it\n                in, and then pressing enter.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                Alternatively, you can set the time to the current time in the{\" \"}\n                <Link to={trackPlayerRoute}>track player</Link> by clicking the{\" \"}\n                <SlowMotionVideoIcon /> button.\n            </Typography>\n            <LineBreak />\n            <Typography>\n                In this example, pretend that the current verse starts at time\n                1:23 and that is the current time in the track player. Let's set\n                the time of the label to 1:23 by clicking the{\" \"}\n                <SlowMotionVideoIcon /> button.\n            </Typography>\n            <LineBreak />\n            <Typography>Try it!</Typography>\n            <PlayerTimeProvider>\n                <TimeSetter />\n                <Playground\n                    initialSong={initialSong}\n                    expectedSong={expectedSong}\n                />\n            </PlayerTimeProvider>\n        </>\n    );\n};\n\nexport default convertToTutorialComponent(TimeLabels, title);\n","import UnstyledPlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport { Fab as UnstyledFab, Paper, styled } from \"@mui/material\";\nimport { MultiFC, transformToFC } from \"common/FunctionalComponent\";\nimport { TutorialPath } from \"common/paths\";\nimport CenteredLayoutWithMenu from \"components/display/CenteredLayoutWithMenu\";\nimport ErrorPage from \"components/display/ErrorPage\";\nimport AddChord from \"components/tutorial/AddChord\";\nimport AddLine from \"components/tutorial/AddLine\";\nimport ChordPositioning from \"components/tutorial/ChordPositioning\";\nimport CopyAndPaste from \"components/tutorial/CopyAndPaste\";\nimport DragAndDropChord from \"components/tutorial/DragAndDropChord\";\nimport EditChord from \"components/tutorial/EditChord\";\nimport EditLyrics from \"components/tutorial/EditLyrics\";\nimport Instrumental from \"components/tutorial/Instrumental\";\nimport Labels from \"components/tutorial/Labels\";\nimport Login from \"components/tutorial/Login\";\nimport MergeLine from \"components/tutorial/MergeLine\";\nimport PasteLyrics from \"components/tutorial/PasteLyrics\";\nimport PlayMode from \"components/tutorial/PlayMode\";\nimport RemoveChord from \"components/tutorial/RemoveChord\";\nimport RemoveLine from \"components/tutorial/RemoveLine\";\nimport RemoveMultipleLines from \"components/tutorial/RemoveMultipleLines\";\nimport SplitLine from \"components/tutorial/SplitLine\";\nimport Starting from \"components/tutorial/Start\";\nimport TimeLabels from \"components/tutorial/TimeLabels\";\nimport TrackPlayer from \"components/tutorial/TrackPlayer\";\nimport { TutorialComponent } from \"components/tutorial/TutorialComponent\";\nimport React from \"react\";\nimport { Link, Route } from \"react-router-dom\";\n\ntype ExerciseEntry = {\n    route: string;\n    component: TutorialComponent;\n};\n\nexport type ExerciseRoute = {\n    title: string;\n    route: string;\n};\n\nconst allExercises: ExerciseEntry[] = [\n    {\n        route: new TutorialPath(\"start\").URL(),\n        component: Starting,\n    },\n    {\n        route: new TutorialPath(\"edit-chord\").URL(),\n        component: EditChord,\n    },\n    {\n        route: new TutorialPath(\"remove-chord\").URL(),\n        component: RemoveChord,\n    },\n    {\n        route: new TutorialPath(\"add-chord\").URL(),\n        component: AddChord,\n    },\n    {\n        route: new TutorialPath(\"drag-and-drop-chord\").URL(),\n        component: DragAndDropChord,\n    },\n    {\n        route: new TutorialPath(\"edit-lyrics\").URL(),\n        component: EditLyrics,\n    },\n    {\n        route: new TutorialPath(\"instrumentals\").URL(),\n        component: Instrumental,\n    },\n    {\n        route: new TutorialPath(\"chord-positioning\").URL(),\n        component: ChordPositioning,\n    },\n    {\n        route: new TutorialPath(\"add-line\").URL(),\n        component: AddLine,\n    },\n    {\n        route: new TutorialPath(\"remove-line\").URL(),\n        component: RemoveLine,\n    },\n    {\n        route: new TutorialPath(\"paste-lyrics\").URL(),\n        component: PasteLyrics,\n    },\n    {\n        route: new TutorialPath(\"remove-multiple-lines\").URL(),\n        component: RemoveMultipleLines,\n    },\n    {\n        route: new TutorialPath(\"merge-lines\").URL(),\n        component: MergeLine,\n    },\n    {\n        route: new TutorialPath(\"split-lines\").URL(),\n        component: SplitLine,\n    },\n    {\n        route: new TutorialPath(\"copy-and-paste\").URL(),\n        component: CopyAndPaste,\n    },\n    {\n        route: new TutorialPath(\"labels\").URL(),\n        component: Labels,\n    },\n    {\n        route: new TutorialPath(\"time-labels\").URL(),\n        component: TimeLabels,\n    },\n    {\n        route: new TutorialPath(\"play-mode\").URL(),\n\n        component: PlayMode,\n    },\n    {\n        route: new TutorialPath(\"login\").URL(),\n\n        component: Login,\n    },\n    {\n        route: new TutorialPath(\"track-player\").URL(),\n        component: TrackPlayer,\n    },\n];\n\nexport const allExerciseRoutes = (): ExerciseRoute[] => {\n    return allExercises.map((entry: ExerciseEntry) => ({\n        title: entry.component.title,\n        route: entry.route,\n    }));\n};\n\nexport const getRouteForTutorialComponent = (\n    tutorialComponent: TutorialComponent\n): string => {\n    const matchingExercise: ExerciseEntry | undefined = allExercises.find(\n        (exercise: ExerciseEntry) =>\n            exercise.component.title === tutorialComponent.title\n    );\n\n    if (matchingExercise === undefined) {\n        throw new Error(\n            \"Input tutorial component not found in list - is the list up to date?\"\n        );\n    }\n\n    return matchingExercise.route;\n};\n\nconst PlayArrowIcon = styled(UnstyledPlayArrowIcon)({\n    color: \"white\",\n});\n\nconst RootPaper = styled(Paper)(({ theme }) => ({\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(5),\n    padding: theme.spacing(5),\n    minHeight: theme.spacing(46),\n    width: theme.spacing(92),\n    position: \"relative\",\n}));\n\nconst Fab = styled(UnstyledFab)(({ theme }) => ({\n    position: \"absolute\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n}));\n\ninterface SingleTutorialProps {\n    route: string;\n}\n\nconst SingleTutorialScreen: React.FC<SingleTutorialProps> = (\n    props: SingleTutorialProps\n): JSX.Element => {\n    return (\n        <CenteredLayoutWithMenu>\n            <SingleTutorial route={props.route} />\n        </CenteredLayoutWithMenu>\n    );\n};\n\nconst SingleTutorial: React.FC<SingleTutorialProps> = (\n    props: SingleTutorialProps\n): JSX.Element => {\n    const matchEntry = (entry: ExerciseEntry): boolean => {\n        return entry.route === props.route;\n    };\n\n    const exerciseEntry: ExerciseEntry | undefined =\n        allExercises.find(matchEntry);\n\n    if (exerciseEntry === undefined) {\n        return <ErrorPage />;\n    }\n\n    const exerciseIndex = allExercises.findIndex(matchEntry);\n\n    let nextButton: React.ReactElement | null = null;\n\n    if (exerciseIndex < allExercises.length - 1) {\n        const nextExercise = allExercises[exerciseIndex + 1];\n        nextButton = (\n            <Link to={nextExercise.route}>\n                <Fab color=\"primary\">\n                    <PlayArrowIcon />\n                </Fab>\n            </Link>\n        );\n    }\n\n    return (\n        <RootPaper>\n            <exerciseEntry.component />\n            {nextButton}\n        </RootPaper>\n    );\n};\n\nconst TutorialRoutes: MultiFC<{}> = (): React.ReactElement[] => {\n    return allExercises.map((exerciseEntry: ExerciseEntry) => (\n        <Route key={exerciseEntry.route} path={exerciseEntry.route} exact>\n            <SingleTutorialScreen route={exerciseEntry.route} />\n        </Route>\n    ));\n};\n\nexport default transformToFC(TutorialRoutes);\n","export default __webpack_public_path__ + \"static/media/google_signin.1875863c.svg\";","import {\n    Alert,\n    AlertTitle,\n    Box,\n    Dialog,\n    Grid,\n    Link as MaterialLink,\n    Paper as UnstyledPaper,\n    styled,\n    Typography as UnstyledTypography,\n} from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport SigninIcon from \"assets/img/google_signin.svg\";\nimport { BackendError, RequestError } from \"common/backend/errors\";\nimport { login } from \"common/backend/requests\";\nimport { getRouteForTutorialComponent } from \"components/Tutorial\";\nimport LoginTutorial from \"components/tutorial/Login\";\nimport {\n    deserializeUser,\n    User,\n    UserContext,\n} from \"components/user/userContext\";\nimport { isLeft } from \"fp-ts/lib/These\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Paper = styled(UnstyledPaper)({\n    width: \"100%\",\n    cursor: \"pointer\",\n});\n\nconst Typography = styled(UnstyledTypography)(({ theme }) => ({\n    margin: theme.spacing(2),\n    color: grey[600],\n}));\n\nconst Paragraph = styled(Box)(({ theme }) => ({\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n}));\n\nconst googleSignInID = \"google-sign-in\";\nconst googleClientID =\n    \"650853277550-ta69qbfcvdl6tb5ogtnh2d07ae9rcdlf.apps.googleusercontent.com\";\n\ninterface LoginProps {\n    onUserChanged: (user: User | null) => void;\n}\n\nconst Login: React.FC<LoginProps> = (props: LoginProps): JSX.Element => {\n    const { enqueueSnackbar } = useSnackbar();\n\n    const [gapiLoaded, setGapiLoaded] = useState<boolean>(false);\n    const [dialogError, setDialogError] = useState<BackendError | null>(null);\n    const [snackbarError, setSnackbarError] = useState<RequestError | null>(\n        null\n    );\n    const user: User | null = React.useContext(UserContext);\n\n    const userNotSignedIn = (user: User | null): user is null => {\n        return user === null;\n    };\n\n    const shouldDisplayDialog = (\n        reqError: RequestError\n    ): BackendError | null => {\n        if (reqError === null) {\n            return null;\n        }\n\n        if (isLeft(reqError)) {\n            return null;\n        }\n\n        const backendError = reqError.right;\n        if (\n            !(\n                backendError.code === \"no_account\" ||\n                backendError.code === \"failed_google_verification\"\n            )\n        ) {\n            return null;\n        }\n\n        return backendError;\n    };\n\n    useEffect(() => {\n        if (gapiLoaded) {\n            return;\n        }\n\n        if (window[\"gapi\"] !== undefined) {\n            setGapiLoaded(true);\n        } else {\n            enqueueSnackbar(\"gapi is not loaded, working offline only\", {\n                variant: \"error\",\n            });\n        }\n    }, [gapiLoaded, enqueueSnackbar]);\n\n    useEffect(() => {\n        if (snackbarError === null) {\n            return;\n        }\n\n        if (isLeft(snackbarError)) {\n            console.error(snackbarError.left);\n\n            enqueueSnackbar(\n                \"Login failed for an unknown reason, please check console for more details\",\n                { variant: \"error\" }\n            );\n        } else {\n            enqueueSnackbar(`Login failed: ${snackbarError.right.msg}`, {\n                variant: \"error\",\n            });\n        }\n\n        setSnackbarError(null);\n    }, [enqueueSnackbar, snackbarError, setSnackbarError]);\n\n    useEffect(() => {\n        if (!gapiLoaded) {\n            return;\n        }\n\n        gapi.load(\"auth2\", () => {\n            const handleLoginError = (\n                loginError: RequestError,\n                authClient: gapi.auth2.GoogleAuth\n            ): void => {\n                const dialogError = shouldDisplayDialog(loginError);\n                if (dialogError !== null) {\n                    setDialogError(dialogError);\n                } else {\n                    setSnackbarError(loginError);\n                }\n\n                props.onUserChanged(null);\n                authClient.signOut();\n            };\n\n            const handleGoogleLogin = async (\n                currentUser: gapi.auth2.CurrentUser,\n                authClient: gapi.auth2.GoogleAuth\n            ) => {\n                const idToken: string = currentUser\n                    .get()\n                    .getAuthResponse().id_token;\n\n                let loginResult = await login(idToken);\n\n                if (isLeft(loginResult)) {\n                    handleLoginError(loginResult.left, authClient);\n                    return;\n                }\n\n                const parsedUser = deserializeUser(\n                    loginResult.right,\n                    currentUser\n                );\n\n                if (parsedUser === null) {\n                    console.error(\n                        \"JSON payload is not a user\",\n                        loginResult.right\n                    );\n                    enqueueSnackbar(\n                        \"Failed to login to backend. Check console for more error details\",\n                        { variant: \"error\" }\n                    );\n\n                    return;\n                }\n\n                props.onUserChanged(parsedUser);\n            };\n\n            if (!userNotSignedIn(user)) {\n                return;\n            }\n\n            const handleAuthInit = (authClient: gapi.auth2.GoogleAuth) => {\n                authClient.attachClickHandler(\n                    document.getElementById(googleSignInID),\n                    {},\n                    () => handleGoogleLogin(authClient.currentUser, authClient),\n                    (failureReason: string) => {\n                        console.error(\n                            \"Failed to login to Google\",\n                            failureReason\n                        );\n                    }\n                );\n\n                if (authClient.isSignedIn.get()) {\n                    handleGoogleLogin(authClient.currentUser, authClient);\n                }\n            };\n\n            gapi.auth2\n                .init({\n                    client_id: googleClientID,\n                    scope: \"profile email\",\n                })\n                .then(handleAuthInit);\n        });\n    }, [\n        enqueueSnackbar,\n        user,\n        props,\n        gapiLoaded,\n        setDialogError,\n        setSnackbarError,\n    ]);\n\n    if (!gapiLoaded) {\n        return <div></div>;\n    }\n\n    const userDescription: string = ((): string => {\n        if (userNotSignedIn(user)) {\n            return \"Sign In\";\n        }\n\n        if (user.name === null) {\n            return \"You Logged In But Who Are You???\";\n        }\n\n        return user.name;\n    })();\n\n    const errorDialog: React.ReactElement = (() => {\n        const content: React.ReactElement | null = (() => {\n            if (dialogError === null) {\n                return null;\n            }\n\n            switch (dialogError.code) {\n                case \"no_account\":\n                    const loginTutorialRoute =\n                        getRouteForTutorialComponent(LoginTutorial);\n\n                    const signupLink = (\n                        <MaterialLink\n                            href=\"https://forms.gle/4kgLF6oXPfFYDTm86\"\n                            target=\"_blank\"\n                            rel=\"noopener\"\n                        >\n                            here\n                        </MaterialLink>\n                    );\n\n                    return (\n                        <Alert severity=\"info\">\n                            <AlertTitle>No account found</AlertTitle>\n                            <Paragraph>\n                                Thanks for stopping by! Looks like there is no\n                                Chord Paper account associated with your Google\n                                account.\n                            </Paragraph>\n                            <Paragraph>\n                                You can still use the offline functionalities\n                                for now. You won't be able to save any songs\n                                that you write right now. See more details{\" \"}\n                                <Link to={loginTutorialRoute}>here</Link>.\n                            </Paragraph>\n                            <Paragraph>\n                                In addition to being able to save your song, you\n                                will also be able to use the audio player with\n                                an account (check out how that works in the\n                                Demo, accessible on the left hand menu)\n                            </Paragraph>\n                            <Paragraph>\n                                To request an account, please fill out the form{\" \"}\n                                {signupLink}. I will try to get back to you\n                                soon!\n                            </Paragraph>\n                        </Alert>\n                    );\n                case \"failed_google_verification\":\n                    return (\n                        <Alert severity=\"error\">\n                            <AlertTitle>\n                                Google account verification failed\n                            </AlertTitle>\n                            <Paragraph>\n                                Your Google account failed server verification.\n                            </Paragraph>\n                            <Paragraph>\n                                Please try to refresh and login to your Google\n                                account again.\n                            </Paragraph>\n                        </Alert>\n                    );\n                default:\n                    return null;\n            }\n        })();\n\n        const clearDialogError = () => setDialogError(null);\n\n        return (\n            <Dialog open={content !== null} onClose={clearDialogError}>\n                {content}\n            </Dialog>\n        );\n    })();\n\n    return (\n        <Paper id={googleSignInID}>\n            <Grid container alignItems=\"center\" justifyContent=\"center\">\n                <Grid item>\n                    <img\n                        src={SigninIcon}\n                        alt=\"Google Signin\"\n                        style={{\n                            display: \"inline-block\",\n                            objectFit: \"contain\",\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"h6\" display=\"inline\">\n                        {userDescription}\n                    </Typography>\n                </Grid>\n            </Grid>\n            {errorDialog}\n        </Paper>\n    );\n};\n\nexport default Login;\n","import UnstyledCloseIcon from \"@mui/icons-material/Close\";\nimport ExpandLessIcon from \"@mui/icons-material/ExpandLess\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport FreeBreakfastIcon from \"@mui/icons-material/FreeBreakfast\";\nimport LibraryMusicIcon from \"@mui/icons-material/LibraryMusic\";\nimport UnstyledMenuIcon from \"@mui/icons-material/Menu\";\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\nimport PetsIcon from \"@mui/icons-material/Pets\";\nimport StoreIcon from \"@mui/icons-material/Store\";\nimport {\n    Box,\n    Collapse,\n    Divider,\n    Drawer as UnstyledDrawer,\n    Grid,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Paper,\n    styled,\n    Typography,\n} from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { DemoPath, SongPath } from \"common/paths\";\nimport { PlainFn } from \"common/PlainFn\";\nimport LoadSongDialog from \"components/LoadSongDialog\";\nimport { allExerciseRoutes, ExerciseRoute } from \"components/Tutorial\";\nimport Login from \"components/user/Login\";\nimport { SetUserContext, UserContext } from \"components/user/userContext\";\n\nconst pointerStyle = {\n    cursor: \"pointer\",\n};\n\nconst MenuIcon = styled(UnstyledMenuIcon)(pointerStyle);\nconst CloseIcon = styled(UnstyledCloseIcon)(pointerStyle);\n\nconst Drawer = styled(UnstyledDrawer)({\n    display: \"flex\",\n    flexDirection: \"column\",\n});\n\nconst VerticalGridItem = styled(Grid)({\n    maxWidth: \"none\",\n});\n\ninterface CollapsedSideMenuProps {\n    open: boolean;\n    onClick?: PlainFn;\n}\n\nexport const CollapsedSideMenu: React.FC<CollapsedSideMenuProps> = (\n    props: CollapsedSideMenuProps\n): JSX.Element => {\n    return (\n        <Drawer variant=\"persistent\" open={props.open} anchor=\"left\">\n            <Paper\n                sx={{\n                    minWidth: \"24px\",\n                    height: \"100vh\",\n                }}\n            >\n                <Grid\n                    container\n                    direction=\"column\"\n                    alignContent=\"center\"\n                    sx={{\n                        height: \"100%\",\n                        width: \"100%\",\n                    }}\n                >\n                    <VerticalGridItem item xs={1}></VerticalGridItem>\n                    <VerticalGridItem item xs={1}>\n                        <MenuIcon onClick={props.onClick} />\n                    </VerticalGridItem>\n                    <VerticalGridItem item xs={10}></VerticalGridItem>\n                </Grid>\n            </Paper>\n        </Drawer>\n    );\n};\n\nconst SideMenu: React.FC<{}> = (): JSX.Element => {\n    const user = React.useContext(UserContext);\n    const onUserChanged = React.useContext(SetUserContext);\n\n    const [expanded, setExpanded] = useState(false);\n    const [showLoadSongsDialog, setShowLoadSongsDialog] = useState(false);\n\n    const [learnSubmenuOpen, setLearnSubMenuOpen] = useState(false);\n\n    const typographyProps = {\n        variant: \"h6\" as \"h6\",\n    };\n\n    const learnClickHandler = () => {\n        setLearnSubMenuOpen(!learnSubmenuOpen);\n    };\n\n    const tutorialMenu = () => {\n        const exerciseLinks = allExerciseRoutes().map(\n            (exerciseRoute: ExerciseRoute) => {\n                return (\n                    <Link\n                        key={exerciseRoute.route}\n                        to={exerciseRoute.route}\n                        style={linkStyle}\n                    >\n                        <ListItem button>\n                            <ListItemText inset primary={exerciseRoute.title} />\n                        </ListItem>\n                    </Link>\n                );\n            }\n        );\n\n        return (\n            <>\n                <ListItem key=\"Learn\" button onClick={learnClickHandler}>\n                    <ListItemIcon>\n                        <FreeBreakfastIcon />\n                    </ListItemIcon>\n                    <ListItemText\n                        primary=\"Learn\"\n                        primaryTypographyProps={typographyProps}\n                    />\n                    {learnSubmenuOpen ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                </ListItem>\n                <Collapse in={learnSubmenuOpen} timeout=\"auto\">\n                    <List>{exerciseLinks}</List>\n                </Collapse>\n            </>\n        );\n    };\n\n    const linkStyle = {\n        textDecoration: \"none\",\n        color: \"inherit\",\n    };\n\n    const fillerBox = <Box sx={{ flexGrow: 1 }} />;\n\n    const collapsedMenu = (\n        <CollapsedSideMenu open={!expanded} onClick={() => setExpanded(true)} />\n    );\n\n    const expandedMenu = (\n        <Drawer variant=\"persistent\" open={expanded} anchor=\"left\">\n            <Grid\n                container\n                alignItems=\"center\"\n                justifyContent=\"space-between\"\n                sx={{ padding: 3 }}\n            >\n                <Grid item>\n                    <Link\n                        to=\"/\"\n                        style={linkStyle}\n                        data-testid=\"Menu-TitleButton\"\n                    >\n                        <Typography\n                            variant=\"h5\"\n                            display=\"inline\"\n                            sx={{ color: grey[600] }}\n                        >\n                            Chord Paper\n                        </Typography>\n                    </Link>\n                </Grid>\n                <Grid item>\n                    <CloseIcon onClick={() => setExpanded(false)} />\n                </Grid>\n            </Grid>\n\n            <Divider />\n            <List>\n                <Link\n                    key={SongPath.rootURL()}\n                    to={SongPath.rootURL()}\n                    style={linkStyle}\n                    data-testid=\"Menu-HomeButton\"\n                >\n                    <ListItem key=\"New Song\" button>\n                        <ListItemIcon>\n                            <MusicNoteIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"New Song\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n                {user !== null && (\n                    <ListItem\n                        key=\"Load Song\"\n                        button\n                        onClick={(event: unknown) =>\n                            setShowLoadSongsDialog(true)\n                        }\n                    >\n                        <ListItemIcon>\n                            <LibraryMusicIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"Load Song\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                )}\n                <Link\n                    key={DemoPath.rootURL()}\n                    to={DemoPath.rootURL()}\n                    style={linkStyle}\n                    data-testid=\"Menu-DemoButton\"\n                >\n                    <ListItem key=\"Demo\" button>\n                        <ListItemIcon>\n                            <StoreIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"Demo\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n                {tutorialMenu()}\n                <Link\n                    key=\"/about\"\n                    to=\"/about\"\n                    style={linkStyle}\n                    data-testid=\"Menu-AboutButton\"\n                >\n                    <ListItem key=\"About\" button>\n                        <ListItemIcon>\n                            <PetsIcon />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary=\"About\"\n                            primaryTypographyProps={typographyProps}\n                        />\n                    </ListItem>\n                </Link>\n            </List>\n            {fillerBox}\n            <Login onUserChanged={onUserChanged} />\n        </Drawer>\n    );\n\n    return (\n        <>\n            {collapsedMenu}\n            {expandedMenu}\n            {showLoadSongsDialog && (\n                <LoadSongDialog\n                    open\n                    onClose={() => setShowLoadSongsDialog(false)}\n                />\n            )}\n        </>\n    );\n};\n\nexport default React.memo(SideMenu);\n","import { styled, Typography } from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport React from \"react\";\n\nconst PaddedTypography = styled(Typography)(({ theme }) => ({\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    padding: theme.spacing(1),\n    color: grey[600],\n}));\n\nconst Version: React.FC<{}> = (): JSX.Element => {\n    const version: string = process.env.REACT_APP_VERSION ?? \"dev-build\";\n\n    return <PaddedTypography variant=\"subtitle2\">{version}</PaddedTypography>;\n};\n\nexport default Version;\n","import { Grid, styled } from \"@mui/material\";\nimport Background from \"assets/img/symphony.png\";\nimport SideMenu from \"components/SideMenu\";\nimport Version from \"components/Version\";\nimport React from \"react\";\n\nconst AppLayout = styled(Grid)({\n    backgroundImage: `url(${Background})`,\n    minHeight: \"100vh\",\n});\n\ninterface CenteredLayoutWithMenuProps {\n    children: React.ReactNode | React.ReactNode[];\n    menuElement?: React.ReactElement;\n}\n\nconst CenteredLayoutWithMenu: React.FC<CenteredLayoutWithMenuProps> = (\n    props: CenteredLayoutWithMenuProps\n): JSX.Element => {\n    let menu: React.ReactElement = <SideMenu />;\n    if (props.menuElement !== undefined) {\n        menu = props.menuElement;\n    }\n\n    return (\n        <>\n            {menu}\n            <AppLayout container>\n                <Grid item container justifyContent=\"center\">\n                    {props.children}\n                </Grid>\n            </AppLayout>\n            <Version />\n        </>\n    );\n};\n\nexport default CenteredLayoutWithMenu;\n","import { Grid, Paper, styled, Typography } from \"@mui/material\";\nimport { inflatingWhitespace } from \"common/Whitespace\";\nimport CenteredLayoutWithMenu from \"components/display/CenteredLayoutWithMenu\";\nimport React from \"react\";\n\nconst RootPaper = styled(Paper)(({ theme }) => ({\n    marginTop: theme.spacing(5),\n    padding: theme.spacing(5),\n    minHeight: theme.spacing(46),\n    minWidth: theme.spacing(92),\n}));\n\nconst About: React.FC<{}> = (): JSX.Element => {\n    return (\n        <Grid container data-testid=\"About\">\n            <Grid item xs={3}></Grid>\n            <Grid item xs={6}>\n                <RootPaper>\n                    <Typography variant=\"h6\">About Chord Paper</Typography>\n                    <Typography variant=\"h6\">\n                        {inflatingWhitespace()}\n                    </Typography>\n                    <Typography>\n                        Chord Paper makes writing and reading chord sheets\n                        easier than the traditional monospace font formatting.\n                        It's a passion project born out of frustration at the\n                        clunkiness of writing chords on a computer.\n                    </Typography>\n                    <Typography>{inflatingWhitespace()}</Typography>\n                    <Typography>\n                        Hope you will find that Chord Paper helps you focus more\n                        of your musical time on playing and listening, and less\n                        on formatting.\n                    </Typography>\n                    <Typography>{inflatingWhitespace()}</Typography>\n                    <Typography>\n                        Background audio separation is built on{\" \"}\n                        <a href=\"https://github.com/deezer/spleeter\">\n                            Spleeter\n                        </a>\n                        .\n                    </Typography>\n                    <Typography>{inflatingWhitespace()}</Typography>\n                    <Typography>Credits:</Typography>\n                    <Typography>\n                        Kubernetes infrastructure and deployment:{\" \"}\n                        <a href=\"https://github.com/pw1124\">@pw1124</a>\n                    </Typography>\n                    <Typography>\n                        Initial design (all the good parts!): Key\n                    </Typography>\n                    <Typography>\n                        Everything else:{\" \"}\n                        <a href=\"https://github.com/veedubyou\">@veedubyou</a>\n                    </Typography>\n                </RootPaper>\n            </Grid>\n            <Grid item xs={3}></Grid>\n        </Grid>\n    );\n};\n\nconst AboutScreen: React.FC<{}> = (): JSX.Element => {\n    return (\n        <CenteredLayoutWithMenu>\n            <About />\n        </CenteredLayoutWithMenu>\n    );\n};\n\nexport default AboutScreen;\n","import {\n    Box,\n    Dialog,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    styled,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { MobileView } from \"react-device-detect\";\n\nconst BoxWithMargin = styled(Box)(({ theme }) => ({\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n}));\n\nconst OneTimeMobileNotification: React.FC<{}> = (): JSX.Element => {\n    const [open, setOpen] = useState(true);\n\n    const handleCloseDialog = () => {\n        setOpen(false);\n    };\n\n    return (\n        <MobileView>\n            <Dialog open={open} onClose={handleCloseDialog}>\n                <DialogTitle>Mobile not supported</DialogTitle>\n                <DialogContent>\n                    <BoxWithMargin>\n                        <DialogContentText>\n                            Thanks for coming by to check out Chord Paper, but\n                            only desktop is supported right now.\n                        </DialogContentText>\n                    </BoxWithMargin>\n                    <BoxWithMargin>\n                        <DialogContentText>\n                            <sub>Seriously don't try it, the mobile experience is awful.</sub>\n                        </DialogContentText>\n                    </BoxWithMargin>\n                </DialogContent>\n            </Dialog>\n        </MobileView>\n    );\n};\n\nexport default OneTimeMobileNotification;\n\n","import React from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\ntype DragEventHandler = (e: DragEvent) => void;\n\ntype UnsafeBackend = {\n    handleTopDragEnter: DragEventHandler | null | undefined;\n    handleTopDragOver: DragEventHandler | null | undefined;\n    __original__handleTopDragEnter: DragEventHandler | null | undefined;\n    __original__handleTopDragOver: DragEventHandler | null | undefined;\n    altKeyPressed: boolean;\n};\n\n// extremely hacky - overriding the implementation of the backend forcibly\n// however React-DND is pretty much unmaintained, so there are few other choices\nexport const HTML5BackendWithCTRLKey = (\n    ...params: Parameters<typeof HTML5Backend>\n) => {\n    const backend = HTML5Backend(...params);\n\n    const welpThingsBroke = (): never => {\n        console.error(\n            \"----------------------BAD THING HAPPENED----------------------\"\n        );\n        console.error(\"HTML5 Drag and Drop backend changed internally\");\n        console.error(\"Drag and drop is probably broken\");\n        console.error(\n            \"----------------------BAD THING HAPPENED----------------------\"\n        );\n\n        throw new Error(\"HTMLBackend changed and is now broken\");\n    };\n\n    const untypesafeBackend: UnsafeBackend =\n        backend as unknown as UnsafeBackend;\n\n    if (\n        untypesafeBackend.handleTopDragEnter === undefined ||\n        untypesafeBackend.handleTopDragEnter === null\n    ) {\n        welpThingsBroke();\n    }\n\n    untypesafeBackend.__original__handleTopDragEnter =\n        untypesafeBackend.handleTopDragEnter;\n\n    untypesafeBackend.handleTopDragEnter = (e: DragEvent) => {\n        untypesafeBackend.__original__handleTopDragEnter?.(e);\n        untypesafeBackend.altKeyPressed = e.ctrlKey || e.metaKey || e.altKey;\n    };\n\n    if (\n        untypesafeBackend.handleTopDragOver === undefined ||\n        untypesafeBackend.handleTopDragOver === null\n    ) {\n        welpThingsBroke();\n    }\n\n    untypesafeBackend.__original__handleTopDragOver =\n        untypesafeBackend.handleTopDragOver;\n    untypesafeBackend.handleTopDragOver = (e: DragEvent) => {\n        untypesafeBackend.__original__handleTopDragOver?.(e);\n        untypesafeBackend.altKeyPressed = e.ctrlKey || e.metaKey || e.altKey;\n    };\n\n    return backend;\n};\n\ninterface DragAndDropProps {\n    children: React.ReactElement;\n}\n\nconst DragAndDrop: React.FC<DragAndDropProps> = (\n    props: DragAndDropProps\n): JSX.Element => {\n    return (\n        <DndProvider backend={HTML5BackendWithCTRLKey}>\n            {props.children}\n        </DndProvider>\n    );\n};\n\nexport default DragAndDrop;\n","import { mapObjectKey } from \"common/mapObject\";\nimport { Importance } from \"common/music/foundation/Importance\";\nimport { Interval } from \"common/music/foundation/Interval\";\nimport { AllNotes, Note } from \"common/music/foundation/Note\";\nimport { IntervalToNote } from \"common/music/foundation/NoteIntervalConversion\";\n\nexport type ScaleInterval = {\n    interval: Interval;\n    // the importance of the note should be determined by the chord context\n    // but we may not always get that context\n    importance: Importance;\n};\n\nexport type ScaleNote = {\n    note: Note;\n    interval: Interval;\n    importance: Importance;\n};\n\nexport type ScaleType = ScaleInterval[];\n\nexport type ScaleName =\n    | \"Ionian\"\n    | \"Dorian\"\n    | \"Phrygian\"\n    | \"Lydian\"\n    | \"Mixolydian\"\n    | \"Aeolian\"\n    | \"Locrian\"\n    | \"Dominant\";\n\nexport const ScaleTypes: Record<ScaleName, ScaleType> = {\n    // modes\n    Lydian: [\n        { interval: \"1\", importance: \"root\" },\n        { interval: \"2\", importance: \"normal\" },\n        { interval: \"3\", importance: \"chordtone\" },\n        { interval: \"#4\", importance: \"special\" },\n        { interval: \"5\", importance: \"chordtone\" },\n        { interval: \"6\", importance: \"normal\" },\n        { interval: \"7\", importance: \"chordtone\" },\n    ],\n    Ionian: [\n        { interval: \"1\", importance: \"root\" },\n        { interval: \"2\", importance: \"normal\" },\n        { interval: \"3\", importance: \"chordtone\" },\n        { interval: \"4\", importance: \"normal\" },\n        { interval: \"5\", importance: \"chordtone\" },\n        { interval: \"6\", importance: \"normal\" },\n        { interval: \"7\", importance: \"chordtone\" },\n    ],\n    Mixolydian: [\n        { interval: \"1\", importance: \"root\" },\n        { interval: \"2\", importance: \"normal\" },\n        { interval: \"3\", importance: \"chordtone\" },\n        { interval: \"4\", importance: \"normal\" },\n        { interval: \"5\", importance: \"chordtone\" },\n        { interval: \"6\", importance: \"normal\" },\n        { interval: \"b7\", importance: \"chordtone\" },\n    ],\n    Dorian: [\n        { interval: \"1\", importance: \"root\" },\n        { interval: \"2\", importance: \"normal\" },\n        { interval: \"b3\", importance: \"chordtone\" },\n        { interval: \"4\", importance: \"normal\" },\n        { interval: \"5\", importance: \"chordtone\" },\n        { interval: \"6\", importance: \"special\" },\n        { interval: \"b7\", importance: \"chordtone\" },\n    ],\n    Aeolian: [\n        { interval: \"1\", importance: \"root\" },\n        { interval: \"2\", importance: \"normal\" },\n        { interval: \"b3\", importance: \"chordtone\" },\n        { interval: \"4\", importance: \"normal\" },\n        { interval: \"5\", importance: \"chordtone\" },\n        { interval: \"b6\", importance: \"normal\" },\n        { interval: \"b7\", importance: \"chordtone\" },\n    ],\n    Phrygian: [\n        { interval: \"1\", importance: \"root\" },\n        { interval: \"b2\", importance: \"special\" },\n        { interval: \"b3\", importance: \"chordtone\" },\n        { interval: \"4\", importance: \"normal\" },\n        { interval: \"5\", importance: \"chordtone\" },\n        { interval: \"b6\", importance: \"normal\" },\n        { interval: \"b7\", importance: \"chordtone\" },\n    ],\n    Locrian: [\n        { interval: \"1\", importance: \"root\" },\n        { interval: \"b2\", importance: \"special\" },\n        { interval: \"b3\", importance: \"chordtone\" },\n        { interval: \"4\", importance: \"normal\" },\n        { interval: \"b5\", importance: \"chordtone\" },\n        { interval: \"b6\", importance: \"normal\" },\n        { interval: \"b7\", importance: \"chordtone\" },\n    ],\n    // dominant\n    Dominant: [\n        { interval: \"1\", importance: \"root\" },\n        { interval: \"b2\", importance: \"special\" },\n        { interval: \"#2\", importance: \"special\" },\n        { interval: \"3\", importance: \"chordtone\" },\n        { interval: \"#4\", importance: \"special\" },\n        { interval: \"b6\", importance: \"special\" },\n        { interval: \"b7\", importance: \"chordtone\" },\n    ],\n};\n\nexport type Scale = {\n    center: Note;\n    name: ScaleName;\n    notes: ScaleNote[];\n};\n// scale mapping for all keys\nexport type ScaleCollection = Record<Note, Scale>;\n\nconst buildScaleCollection = (scaleName: ScaleName): ScaleCollection => {\n    return mapObjectKey(AllNotes, (keyCenter: Note) =>\n        buildScale(keyCenter, scaleName)\n    );\n};\n\nconst buildScale = (keyCenter: Note, scaleName: ScaleName): Scale => {\n    const convertToScaleNote = (scaleInterval: ScaleInterval) => {\n        return {\n            note: IntervalToNote[keyCenter][scaleInterval.interval],\n            interval: scaleInterval.interval,\n            importance: scaleInterval.importance,\n        };\n    };\n\n    const scaleNotes: ScaleNote[] =\n        ScaleTypes[scaleName].map(convertToScaleNote);\n\n    return {\n        center: keyCenter,\n        name: scaleName,\n        notes: scaleNotes,\n    };\n};\n\nexport const AllScales: Record<ScaleName, ScaleCollection> = mapObjectKey(\n    ScaleTypes,\n    (scaleName: ScaleName) => buildScaleCollection(scaleName)\n);\n\nexport class ScaleUtility {\n    scale: Scale;\n    constructor(scale: Scale) {\n        this.scale = scale;\n    }\n\n    name(): string {\n        return `${this.scale.center} ${this.scale.name}`;\n    }\n}\n","import { TextField } from \"@mui/material\";\nimport { StartingFret } from \"components/guitar/ScaleChart\";\nimport React from \"react\";\n\ninterface FretSelectorProps {\n    startingFret: StartingFret;\n    onStartingFretChanged: (startingFret: StartingFret) => void;\n}\n\nconst FretSelector: React.FC<FretSelectorProps> = (\n    props: FretSelectorProps\n): JSX.Element => {\n    return (\n        <TextField\n            label=\"Starting Fret\"\n            type=\"number\"\n            InputLabelProps={{\n                shrink: true,\n            }}\n            variant=\"outlined\"\n            value={props.startingFret}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                const val = parseInt(event.target.value);\n                if (val <= 0 || val > 21) {\n                    return;\n                }\n\n                if (val % 1 !== 0) {\n                    return;\n                }\n\n                props.onStartingFretChanged(val as StartingFret);\n            }}\n        />\n    );\n};\n\nexport default FretSelector;\n","import { mapObjectKey } from \"common/mapObject\";\nimport { asSemitone } from \"common/music/foundation/Distance\";\nimport { AllNotes, Note, NoteUtilities } from \"common/music/foundation/Note\";\n\nexport type StringName = \"E\" | \"A\" | \"D\" | \"G\" | \"B\" | \"highE\";\nexport const AllStringNames: Record<StringName, undefined> = {\n    highE: undefined,\n    B: undefined,\n    G: undefined,\n    D: undefined,\n    A: undefined,\n    E: undefined,\n};\n\ntype Fretmap = Record<Note, number[]>;\n\nexport type Fret = {\n    fret: number;\n    note: Note;\n};\n\nexport type FretboardView = Record<StringName, Fret[]>;\n\nclass FretboardClass {\n    static readonly maxFrets = 24;\n    noteMap: Record<StringName, Fretmap>;\n\n    static buildString(baseNote: Note): Fretmap {\n        const fretmap: Fretmap = mapObjectKey(AllNotes, (): number[] => []);\n        const noteUtility = NoteUtilities[baseNote];\n        for (let i = 0; i <= FretboardClass.maxFrets; i++) {\n            const nextNotes = noteUtility.semitonesUp(asSemitone(i));\n            for (const note of nextNotes) {\n                fretmap[note].push(i);\n            }\n        }\n\n        return fretmap;\n    }\n\n    constructor() {\n        this.noteMap = {\n            highE: FretboardClass.buildString(\"E\"),\n            B: FretboardClass.buildString(\"B\"),\n            G: FretboardClass.buildString(\"G\"),\n            D: FretboardClass.buildString(\"D\"),\n            A: FretboardClass.buildString(\"A\"),\n            E: FretboardClass.buildString(\"E\"),\n        };\n    }\n\n    getPositions(\n        note: Note,\n        startingFret: number,\n        endingFret: number\n    ): FretboardView {\n        const fretboardView: FretboardView = mapObjectKey(\n            AllStringNames,\n            () => []\n        );\n\n        let stringName: StringName;\n        for (stringName in fretboardView) {\n            const frets = this.noteMap[stringName][note];\n            for (const fret of frets) {\n                if (fret < startingFret || fret > endingFret) {\n                    continue;\n                }\n\n                fretboardView[stringName].push({\n                    fret: fret,\n                    note: note,\n                });\n            }\n        }\n\n        return fretboardView;\n    }\n}\n\nexport const Fretboard = new FretboardClass();\n","import { mapObjectKey } from \"common/mapObject\";\nimport { Importance } from \"common/music/foundation/Importance\";\nimport { AllStringNames, Fret, Fretboard, StringName } from \"common/music/guitar/Fretboard\";\nimport { Scale, ScaleNote } from \"common/music/scale/Scale\";\n\nexport type GuitarFretLabel = {\n    fret: number;\n    labelText: string;\n    importance: Importance;\n};\n\nconst getLabelText = (scaleNote: ScaleNote, labelType: \"interval\" | \"note\") => {\n    switch (labelType) {\n        case \"interval\": {\n            return scaleNote.interval;\n        }\n\n        case \"note\": {\n            return scaleNote.note;\n        }\n    }\n};\n\nexport const generateGuitarScaleView = (\n    scale: Scale,\n    startingFret: number,\n    endingFret: number,\n    labelType: \"interval\" | \"note\"\n): Record<StringName, GuitarFretLabel[]> => {\n    const fretboardLabels: Record<StringName, GuitarFretLabel[]> = mapObjectKey(\n        AllStringNames,\n        () => []\n    );\n\n    for (const scaleNote of scale.notes) {\n        const notePositions = Fretboard.getPositions(\n            scaleNote.note,\n            startingFret,\n            endingFret\n        );\n        let stringName: StringName;\n        for (stringName in notePositions) {\n            const fretLabel = notePositions[stringName].map(\n                (fret: Fret): GuitarFretLabel => ({\n                    fret: fret.fret,\n                    labelText: getLabelText(scaleNote, labelType),\n                    importance: scaleNote.importance,\n                })\n            );\n\n            fretboardLabels[stringName].push(...fretLabel);\n        }\n    }\n\n    return fretboardLabels;\n};\n","import { Box, styled } from \"@mui/material\";\nimport { StringName } from \"common/music/guitar/Fretboard\";\nimport {\n    generateGuitarScaleView,\n    GuitarFretLabel\n} from \"common/music/guitar/Scale\";\nimport { Scale } from \"common/music/scale/Scale\";\nimport React, { useEffect, useRef } from \"react\";\nimport { Finger, FretLabelPosition, Shape, SVGuitarChord } from \"svguitar\";\n\nconst ChartBox = styled(Box)({\n    transform: \"rotate(270deg)\",\n\n    \"& svg\": {\n        // magic number, but it makes charts not overlap\n        transform: \"scale(0.85)\",\n    },\n    \"& .title\": {\n        fontFamily: \"PoriChord\",\n    },\n});\n\nconst fretWindow = 4;\n\nconst stringNameMap: Record<StringName, number> = {\n    highE: 1,\n    B: 2,\n    G: 3,\n    D: 4,\n    A: 5,\n    E: 6,\n};\n\nconst convertScaleViewToFingers = (\n    scaleView: Record<StringName, GuitarFretLabel[]>,\n    startingFret: number\n): Finger[] => {\n    const fingers: Finger[] = [];\n\n    let stringName: StringName;\n    for (stringName in scaleView) {\n        const stringNumber = stringNameMap[stringName];\n\n        const fretLabels = scaleView[stringName];\n        for (const fretLabel of fretLabels) {\n            let fretNumber: number = (() => {\n                const fretNumber = fretLabel.fret - startingFret + 1;\n                if (fretNumber <= 0) {\n                    throw new Error(\n                        \"Invalid finger generated - got a zero or negative fretting\"\n                    );\n                }\n\n                return fretNumber;\n            })();\n\n            const labelColour: string | undefined = (() => {\n                switch (fretLabel.importance) {\n                    case \"normal\": {\n                        return \"black\";\n                    }\n\n                    case \"root\": {\n                        return \"#f44336\";\n                    }\n\n                    case \"chordtone\": {\n                        return \"#64b5f6\";\n                    }\n\n                    case \"special\": {\n                        return \"purple\";\n                    }\n                }\n            })();\n\n            const shape: Shape =\n                fretLabel.importance === \"root\" ? Shape.SQUARE : Shape.CIRCLE;\n\n            fingers.push([\n                stringNumber,\n                fretNumber,\n                {\n                    text: fretLabel.labelText,\n                    color: labelColour,\n                    shape: shape,\n                },\n            ]);\n        }\n    }\n\n    return fingers;\n};\n\nexport type StartingFret =\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12\n    | 13\n    | 14\n    | 15\n    | 16\n    | 17\n    | 18\n    | 19\n    | 20\n    | 21;\n\ninterface ScaleChartProps {\n    scale: Scale;\n    startingFret: StartingFret;\n    scaleLabel: string;\n}\n\nconst ScaleChart: React.FC<ScaleChartProps> = (\n    props: ScaleChartProps\n): JSX.Element => {\n    const elemRef = useRef<HTMLElement>(null);\n    const prevSVGuitarChord = useRef<SVGuitarChord | null>(null);\n\n    const getPos = (elem: SVGTextElement): [number, number] | undefined => {\n        if (\n            elem.x.baseVal.numberOfItems === 0 ||\n            elem.y.baseVal.numberOfItems === 0\n        ) {\n            return undefined;\n        }\n\n        return [\n            elem.x.baseVal.getItem(0).value,\n            elem.y.baseVal.getItem(0).value,\n        ];\n    };\n\n    useEffect(() => {\n        if (elemRef.current === null) {\n            return;\n        }\n\n        if (prevSVGuitarChord.current !== null) {\n            prevSVGuitarChord.current.remove();\n        }\n\n        const endingFret = props.startingFret + fretWindow;\n        const guitarScaleView = generateGuitarScaleView(\n            props.scale,\n            props.startingFret,\n            endingFret,\n            \"note\"\n        );\n\n        const svguitarChord = new SVGuitarChord(elemRef.current);\n\n        svguitarChord.chord({\n            barres: [],\n            fingers: convertScaleViewToFingers(\n                guitarScaleView,\n                props.startingFret\n            ),\n            title: props.scaleLabel,\n        });\n\n        svguitarChord.configure({\n            position: props.startingFret,\n            fretLabelPosition: FretLabelPosition.LEFT,\n        });\n\n        svguitarChord.draw();\n        prevSVGuitarChord.current = svguitarChord;\n\n        const texts = elemRef.current.querySelectorAll(\".nut-text,.position\");\n        texts.forEach((elem: Element) => {\n            if (!(elem instanceof SVGTextElement)) {\n                return;\n            }\n\n            const pos = getPos(elem);\n            if (pos === undefined) {\n                return;\n            }\n\n            setTimeout(() =>\n                elem.setAttribute(\"transform\", `rotate(90,${pos[0]},${pos[1]})`)\n            );\n        });\n    }, [props.scale, props.startingFret, props.scaleLabel]);\n\n    // https://github.com/mui-org/material-ui/issues/17010\n    const refProps = {\n        ref: elemRef,\n    };\n\n    return <ChartBox {...refProps}></ChartBox>;\n};\n\nexport default ScaleChart;\n","import {\n    Box,\n    Grid,\n    styled,\n    TextField,\n    Theme\n} from \"@mui/material\";\nimport { Scale, ScaleUtility } from \"common/music/scale/Scale\";\nimport { makeStyledTooltipMenu } from \"components/edit/StyledTooltip\";\nimport FretSelector from \"components/guitar/FretSelector\";\nimport ScaleChart, { StartingFret } from \"components/guitar/ScaleChart\";\nimport React, { useState } from \"react\";\n\nconst Tooltip = makeStyledTooltipMenu((theme: Theme) => ({\n    background: \"white\",\n    boxShadow: theme.shadows[2],\n}));\n\nconst MarginBox = styled(Box)(({ theme }) => ({\n    margin: theme.spacing(2),\n}));\n\ninterface MenuSelectableScaleChartProps {\n    scale: Scale;\n    initialStartingFret: StartingFret;\n}\n\nconst MenuSelectableScaleChart: React.FC<MenuSelectableScaleChartProps> = (\n    props: MenuSelectableScaleChartProps\n): JSX.Element => {\n    const [label, setLabel] = useState(new ScaleUtility(props.scale).name());\n    const [startingFret, setStartingFret] = useState(props.initialStartingFret);\n\n    const menu = (\n        <Grid container>\n            <Grid item xs={6}>\n                <MarginBox>\n                    <FretSelector\n                        startingFret={startingFret}\n                        onStartingFretChanged={setStartingFret}\n                    />\n                </MarginBox>\n            </Grid>\n            <Grid item xs={6}>\n                <MarginBox>\n                    <TextField\n                        label=\"Label\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        value={label}\n                        onChange={(\n                            event: React.ChangeEvent<HTMLInputElement>\n                        ) => {\n                            setLabel(event.target.value);\n                        }}\n                    />\n                </MarginBox>\n            </Grid>\n        </Grid>\n    );\n\n    return (\n        <Tooltip placement=\"top\" title={menu}>\n            <span>\n                <ScaleChart\n                    scale={props.scale}\n                    scaleLabel={label}\n                    startingFret={startingFret}\n                />\n            </span>\n        </Tooltip>\n    );\n};\n\nexport default MenuSelectableScaleChart;\n","import Autocomplete, {\n    AutocompleteRenderInputParams,\n    createFilterOptions\n} from \"@mui/material/Autocomplete\";\nimport TextField from \"@mui/material/TextField\";\nimport { AllNotes, Note } from \"common/music/foundation/Note\";\nimport { ScaleName, ScaleTypes } from \"common/music/scale/Scale\";\nimport lodash from \"lodash\";\nimport React from \"react\";\n\nexport type SelectableScale = {\n    note: Note;\n    scaleName: ScaleName;\n    label: string;\n};\n\nconst AllScaleValues: SelectableScale[] = (() => {\n    const allOptions: SelectableScale[] = [];\n    let note: Note;\n    let scaleName: ScaleName;\n\n    for (note in AllNotes) {\n        for (scaleName in ScaleTypes) {\n            allOptions.push({\n                note: note,\n                scaleName: scaleName,\n                label: `${note} ${scaleName}`,\n            });\n        }\n    }\n\n    return allOptions;\n})();\n\ninterface ScaleSelectionProps {\n    scales: SelectableScale[];\n    onSelection: (selection: SelectableScale[]) => void;\n}\n\nconst ScaleSelection: React.FC<ScaleSelectionProps> = (\n    props: ScaleSelectionProps\n): JSX.Element => {\n    const filterOptions = createFilterOptions<SelectableScale>({\n        matchFrom: \"start\",\n    });\n\n    const changeHandler = (\n        _event: React.ChangeEvent<{}>,\n        newValue: SelectableScale[]\n    ) => {\n        props.onSelection(newValue);\n    };\n\n    // another workaround\n    // the selection box needs to be able to provide duplicate options\n    // e.g. C ionian, D dorian, C ionian\n    // it can't do that right now, but this mechanism can emulate it\n    // by making the options a difference reference every time\n    // https://github.com/mui-org/material-ui/issues/18755#issuecomment-864118839\n    const copiedScaleOptions = lodash.cloneDeep(AllScaleValues);\n\n    return (\n        <Autocomplete\n            multiple\n            options={copiedScaleOptions}\n            filterOptions={filterOptions}\n            getOptionLabel={(scaleValue) => scaleValue.label}\n            renderInput={(params: AutocompleteRenderInputParams) => (\n                <TextField {...params} variant=\"outlined\" label=\"Scales\" />\n            )}\n            value={props.scales}\n            onChange={changeHandler}\n        />\n    );\n};\n\nexport default ScaleSelection;\n","import { Box, Grid, Paper as UnstyledPaper, styled } from \"@mui/material\";\nimport { AllScales, ScaleUtility } from \"common/music/scale/Scale\";\nimport FretSelector from \"components/guitar/FretSelector\";\nimport MenuSelectableScaleChart from \"components/guitar/MenuSelectableScaleChart\";\nimport { StartingFret } from \"components/guitar/ScaleChart\";\nimport ScaleSelection, { SelectableScale } from \"components/guitar/ScaleSelection\";\nimport React, { useRef, useState } from \"react\";\nimport \"swiper/components/navigation/navigation.min.css\";\nimport SwiperCore, { Navigation, Pagination } from \"swiper/core\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport \"swiper/swiper.min.css\";\n\n// install Swiper modules\nSwiperCore.use([Navigation, Pagination]);\n\nconst MarginBox = styled(Box)(({ theme }) => ({\n    margin: theme.spacing(2),\n}));\n\nconst Paper = styled(UnstyledPaper)({\n    display: \"block\",\n});\n\ninterface GuitarDemoProps {}\n\nconst GuitarDemo: React.FC<GuitarDemoProps> = (\n    props: GuitarDemoProps\n): JSX.Element => {\n    const [scales, setScales] = useState<SelectableScale[]>([]);\n    const [startingFret, setStartingFret] = useState<StartingFret>(5);\n\n    const firstRowSwiperRef = useRef<SwiperCore | null>(null);\n    const secondRowSwiperRef = useRef<SwiperCore | null>(null);\n\n    const menu = (\n        <Grid container>\n            <Grid item xs={9}>\n                <MarginBox>\n                    <ScaleSelection scales={scales} onSelection={setScales} />\n                </MarginBox>\n            </Grid>\n            <Grid item xs={3}>\n                <MarginBox>\n                    <FretSelector\n                        startingFret={startingFret}\n                        onStartingFretChanged={setStartingFret}\n                    />\n                </MarginBox>\n            </Grid>\n        </Grid>\n    );\n\n    const makeSlide = (selectableScale: SelectableScale): JSX.Element => {\n        const scale =\n            AllScales[selectableScale.scaleName][selectableScale.note];\n        return (\n            <SwiperSlide>\n                <MenuSelectableScaleChart\n                    key={new ScaleUtility(scale).name()}\n                    scale={scale}\n                    initialStartingFret={startingFret}\n                />\n            </SwiperSlide>\n        );\n    };\n\n    const slidesPerView = 4;\n    const secondRow = scales.length > slidesPerView;\n    const overflow = scales.length > 2 * slidesPerView;\n\n    const firstRowSwiper: JSX.Element = (() => {\n        const rotateSecondRow = (swiper: SwiperCore) => {\n            if (!overflow) {\n                return;\n            }\n\n            if (secondRowSwiperRef.current === null) {\n                return;\n            }\n\n            const secondRowSlideIndex =\n                (swiper.realIndex + slidesPerView) % scales.length;\n            secondRowSwiperRef.current.slideToLoop(secondRowSlideIndex);\n        };\n\n        const firstRowSlides: JSX.Element[] = (() => {\n            if (overflow) {\n                return scales.map(makeSlide);\n            }\n\n            const firstSetScales = scales.slice(0, slidesPerView);\n            return firstSetScales.map(makeSlide);\n        })();\n\n        return (\n            <Swiper\n                slidesPerView={slidesPerView}\n                navigation={overflow}\n                loop={overflow}\n                onSlideChange={rotateSecondRow}\n                onSwiper={(swiper: SwiperCore) => {\n                    firstRowSwiperRef.current = swiper;\n                }}\n            >\n                {firstRowSlides}\n            </Swiper>\n        );\n    })();\n\n    const secondRowSwiper: JSX.Element | null = (() => {\n        if (!secondRow) {\n            return null;\n        }\n\n        const secondRowSlides: JSX.Element[] = (() => {\n            if (overflow) {\n                return scales.map(makeSlide);\n            }\n\n            const secondSetScales = scales.slice(\n                slidesPerView,\n                2 * slidesPerView\n            );\n            return secondSetScales.map(makeSlide);\n        })();\n\n        return (\n            <Swiper\n                slidesPerView={slidesPerView}\n                loop={overflow}\n                onSwiper={(swiper: SwiperCore) => {\n                    secondRowSwiperRef.current = swiper;\n                }}\n                initialSlide={slidesPerView}\n            >\n                {secondRowSlides}\n            </Swiper>\n        );\n    })();\n\n    return (\n        <Paper>\n            {menu}\n            {firstRowSwiper}\n            {secondRowSwiper}\n        </Paper>\n    );\n};\n\nexport default GuitarDemo;\n","import { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { ChordSongAction, useChordSongReducer } from \"components/reducer/reducer\";\nimport { useCloud } from \"components/useCloud\";\nimport React from \"react\";\n\ninterface OriginalComponentProps {\n    song: ChordSong;\n    songDispatch: React.Dispatch<ChordSongAction>;\n}\n\nexport const withSongContext = <P extends OriginalComponentProps>(\n    OriginalComponent: React.FC<P>\n): React.FC<Omit<P, \"songDispatch\">> => {\n    return (props: Omit<P, \"songDispatch\">): JSX.Element => {\n        const [song, songDispatch] = useChordSongReducer(props.song);\n\n        const { song: throwawaySong, ...propsWithoutInitialSong } = props;\n\n        // https://github.com/microsoft/TypeScript/issues/35858\n        const originalComponentProps = {\n            ...propsWithoutInitialSong,\n            song: song,\n            songDispatch: songDispatch,\n        } as P;\n\n        return <OriginalComponent {...originalComponentProps} />;\n    };\n};\n\nexport const withCloudSaveSongContext = <P extends OriginalComponentProps>(\n    OriginalComponent: React.FC<P>\n): React.FC<Omit<P, \"songDispatch\">> => {\n    return (props: Omit<P, \"songDispatch\">): JSX.Element => {\n        const [onSongChange, useSave] = useCloud();\n        const [song, songDispatch] = useChordSongReducer(\n            props.song,\n            onSongChange\n        );\n        const unsavedPrompt = useSave(song, songDispatch);\n\n        const { song: throwawaySong, ...propsWithoutInitialSong } = props;\n\n        // https://github.com/microsoft/TypeScript/issues/35858\n        const originalComponentProps = {\n            ...propsWithoutInitialSong,\n            song: song,\n            songDispatch: songDispatch,\n        } as P;\n\n        return (\n            <>\n                {unsavedPrompt}\n                <OriginalComponent {...originalComponentProps} />\n            </>\n        );\n    };\n};\n","export default __webpack_public_path__ + \"static/media/error.91c3c13e.jpeg\";","import ErrorImg from \"assets/img/error.jpeg\";\nimport React from \"react\";\n\nconst ErrorImage: React.FC<{}> = (): JSX.Element => {\n    return (\n        <img\n            src={ErrorImg}\n            alt=\"Song Loading Error\"\n            style={{\n                objectFit: \"scale-down\",\n            }}\n        />\n    );\n};\n\nexport default ErrorImage;\n","import { Box, CircularProgress, Theme } from \"@mui/material\";\nimport { SystemStyleObject } from \"@mui/system\";\nimport React from \"react\";\n\ninterface LoadingSpinnerProps {\n    size?: number;\n    thickness?: number;\n    sx?: SystemStyleObject<Theme>;\n}\n\nconst LoadingSpinner = React.forwardRef(\n    (\n        props: LoadingSpinnerProps,\n        ref: React.ForwardedRef<Element>\n    ): JSX.Element => {\n        return (\n            <Box\n                sx={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    ...props.sx,\n                }}\n                ref={ref}\n            >\n                <CircularProgress\n                    size={props.size}\n                    thickness={props.thickness}\n                />\n            </Box>\n        );\n    }\n);\n\nexport default LoadingSpinner;\n","import { DialogContent, Modal } from \"@mui/material\";\nimport CenteredLayoutWithMenu from \"components/display/CenteredLayoutWithMenu\";\nimport LoadingSpinner from \"components/loading/LoadingSpinner\";\nimport { CollapsedSideMenu } from \"components/SideMenu\";\nimport React from \"react\";\n\nconst FullScreenLoading: React.FC<{}> = (): JSX.Element => {\n    const collapsedMenu = <CollapsedSideMenu open />;\n\n    return (\n        <CenteredLayoutWithMenu menuElement={collapsedMenu}>\n            <Modal open>\n                <DialogContent>\n                    <LoadingSpinner\n                        size={200}\n                        thickness={2}\n                        sx={{ width: \"100vw\", height: \"100vh\" }}\n                    />\n                </DialogContent>\n            </Modal>\n        </CenteredLayoutWithMenu>\n    );\n};\n\nexport default FullScreenLoading;\n","import { RequestError } from \"common/backend/errors\";\nimport { getSong } from \"common/backend/requests\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { FetchState } from \"common/fetch\";\nimport ErrorImage from \"components/display/ErrorImage\";\nimport OneTimeErrorNotification from \"components/display/OneTimeErrorNotification\";\nimport FullScreenLoading from \"components/loading/FullScreenLoading\";\nimport { left } from \"fp-ts/lib/Either\";\nimport { isLeft } from \"fp-ts/lib/These\";\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\ninterface IDParams {\n    id: string;\n}\n\ninterface InternalFetcherProps {\n    id: string;\n    children: (song: ChordSong) => JSX.Element;\n}\n\nconst InternalFetcher: React.FC<InternalFetcherProps> = (\n    props: InternalFetcherProps\n): JSX.Element => {\n    const [fetchState, setFetchState] = useState<\n        FetchState<ChordSong, RequestError>\n    >({\n        state: \"not-started\",\n    });\n\n    const fetchSong = async () => {\n        let fetchResult = await getSong(props.id);\n\n        if (isLeft(fetchResult)) {\n            setFetchState({ state: \"error\", error: fetchResult.left });\n            return;\n        }\n\n        const result = ChordSong.fromJSONObject(fetchResult.right);\n        if (isLeft(result)) {\n            setFetchState({\n                state: \"error\",\n                error: left(\"Failed to deserialize payload to song\"),\n            });\n            return;\n        }\n\n        setFetchState({ state: \"loaded\", item: result.right });\n    };\n\n    switch (fetchState.state) {\n        case \"not-started\": {\n            setFetchState({ state: \"loading\" });\n            fetchSong();\n            return <></>;\n        }\n        case \"error\": {\n            return (\n                <>\n                    <ErrorImage />\n                    <OneTimeErrorNotification\n                        componentDescription=\"Chord Paper\"\n                        error={fetchState.error}\n                    />\n                </>\n            );\n        }\n\n        case \"loading\": {\n            return <FullScreenLoading />;\n        }\n\n        case \"loaded\": {\n            return props.children(fetchState.item);\n        }\n    }\n};\n\ninterface SongFetcherProps {\n    children: (song: ChordSong) => JSX.Element;\n}\n\nconst SongFetcher: React.FC<SongFetcherProps> = (\n    props: SongFetcherProps\n): JSX.Element => {\n    const { id } = useParams<IDParams>();\n\n    // setting a key to force React to discard the component when the ID changes\n    // so that it does not reuse old fetch state\n    return (\n        <InternalFetcher key={id} id={id}>\n            {props.children}\n        </InternalFetcher>\n    );\n};\n\nexport default SongFetcher;\n","import { Box, styled, Typography as UnstyledTypography } from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { Note } from \"common/music/foundation/Note\";\nimport { MUIStyledProps } from \"common/styledProps\";\nimport React from \"react\";\n\nconst Typography = styled(UnstyledTypography)({\n    color: grey[600],\n});\n\ninterface KeyInfoProps extends MUIStyledProps {\n    originalKey: Note;\n    currentKey: Note;\n}\n\nconst KeyInfo: React.FC<KeyInfoProps> = (props: KeyInfoProps): JSX.Element => {\n    return (\n        <Box className={props.className}>\n            <Box>\n                <Typography variant=\"caption\">{`Key of: ${props.currentKey}`}</Typography>\n            </Box>\n            <Box>\n                <Typography variant=\"caption\">{`Original key: ${props.originalKey}`}</Typography>\n            </Box>\n        </Box>\n    );\n};\n\nexport default KeyInfo;\n\n","import { styled, Typography as UnstyledTypography } from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { MUIStyledProps } from \"common/styledProps\";\nimport { DateTime, Duration } from \"luxon\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Typography = styled(UnstyledTypography)({\n    color: grey[600],\n});\n\ninterface LastSavedAtProps extends MUIStyledProps {\n    lastSaved: Date;\n}\n\nconst LastSavedAt: React.FC<LastSavedAtProps> = (\n    props: LastSavedAtProps\n): JSX.Element => {\n    const [, setLastRefreshed] = useState<Date>(new Date());\n\n    const timeDescription = (): string => {\n        const lastSaved = DateTime.fromJSDate(props.lastSaved);\n        const sinceSaved: Duration = lastSaved.diffNow();\n\n        const daysSinceSaved: number = sinceSaved.as(\"day\");\n        if (daysSinceSaved <= -1) {\n            return lastSaved.toLocaleString(DateTime.DATE_MED);\n        }\n\n        const secondsSinceSaved: number = lastSaved.diffNow().as(\"second\");\n        if (secondsSinceSaved >= -1) {\n            return \"just now\";\n        }\n\n        const relativeDescription = lastSaved.toRelative();\n        if (relativeDescription === null) {\n            return \"WHAT IS HAPPENING? CONTACT YOUR DEV\";\n        }\n\n        return relativeDescription;\n    };\n\n    useEffect(() => {\n        const interval = setInterval(() => setLastRefreshed(new Date()), 30000);\n        return () => clearInterval(interval);\n    }, [setLastRefreshed]);\n\n    return (\n        <Typography\n            variant=\"caption\"\n            className={props.className}\n        >{`Last Saved: ${timeDescription()}`}</Typography>\n    );\n};\n\nexport default LastSavedAt;\n","import { Box, Grid, styled, Typography } from \"@mui/material\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport UnstyledKeyInfo from \"components/display/KeyInfo\";\nimport UnstyledLastSavedAt from \"components/display/LastSavedAt\";\nimport EditableTypography from \"components/edit/EditableTypography\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\nimport React from \"react\";\n\nconst LastSavedAt = styled(UnstyledLastSavedAt)(({ theme }) => ({\n    position: \"absolute\",\n    top: theme.spacing(2),\n    right: theme.spacing(2),\n}));\n\nconst KeyInfo = styled(UnstyledKeyInfo)(({ theme }) => ({\n    position: \"absolute\",\n    top: theme.spacing(2),\n    left: theme.spacing(4),\n}));\n\nconst TitleBox = styled(Box)(({ theme }) => ({\n    paddingBottom: theme.spacing(4),\n}));\n\nconst HeaderBox = styled(Box)(({ theme }) => ({\n    paddingTop: theme.spacing(8),\n    paddingLeft: theme.spacing(4),\n    paddingRight: theme.spacing(4),\n}));\n\ninterface HeaderProps {\n    song: ChordSong;\n    songDispatch: React.Dispatch<ChordSongAction>;\n}\n\nconst Header: React.FC<HeaderProps> = (props: HeaderProps): JSX.Element => {\n    const updateTitleHandler = (newTitle: string) => {\n        props.songDispatch({ type: \"set-header\", title: newTitle });\n    };\n\n    const updateComposeHandler = (newComposer: string) => {\n        props.songDispatch({ type: \"set-header\", composedBy: newComposer });\n    };\n\n    const updatePerformerHandler = (newPerformer: string) => {\n        props.songDispatch({ type: \"set-header\", performedBy: newPerformer });\n    };\n\n    const title = (\n        <TitleBox>\n            <EditableTypography\n                value={props.song.title}\n                variant=\"h4\"\n                align=\"center\"\n                data-testid=\"SongTitle\"\n                placeholder=\"Song Title\"\n                onValueChange={updateTitleHandler}\n            />\n        </TitleBox>\n    );\n\n    const lastSavedAt: React.ReactNode =\n        props.song.lastSavedAt === null ? null : (\n            <LastSavedAt lastSaved={props.song.lastSavedAt} />\n        );\n\n    const keyInfo: React.ReactNode = (() => {\n        if (props.song.originalKey === null || props.song.currentKey === null) {\n            return null;\n        }\n\n        return (\n            <KeyInfo\n                originalKey={props.song.originalKey}\n                currentKey={props.song.currentKey}\n            />\n        );\n    })();\n\n    const details = (\n        <Grid container justifyContent=\"center\">\n            <Grid container item xs={6} justifyContent=\"center\">\n                <Grid item>\n                    <Typography display=\"block\" variant=\"caption\">\n                        Composed by:{\" \"}\n                    </Typography>\n\n                    <EditableTypography\n                        value={props.song.composedBy}\n                        display=\"block\"\n                        variant=\"caption\"\n                        placeholder=\"Stock Aitken Waterman\"\n                        onValueChange={updateComposeHandler}\n                        data-testid=\"ComposedBy\"\n                    />\n                </Grid>\n            </Grid>\n            <Grid container item xs={6} justifyContent=\"center\">\n                <Grid item>\n                    <Typography display=\"inline\" variant=\"caption\">\n                        Performed by:{\" \"}\n                    </Typography>\n\n                    <EditableTypography\n                        value={props.song.performedBy}\n                        variant=\"caption\"\n                        placeholder=\"Rick Astley\"\n                        onValueChange={updatePerformerHandler}\n                        data-testid=\"PerformedBy\"\n                    />\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n\n    return (\n        <HeaderBox data-testid=\"Header\">\n            {keyInfo}\n            {lastSavedAt}\n            {title}\n            {details}\n        </HeaderBox>\n    );\n};\n\nexport default React.memo(Header);\n","import { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { isLeft } from \"fp-ts/lib/Either\";\nimport { ProviderContext } from \"notistack\";\n\ntype EnqueueSnackbarType = ProviderContext[\"enqueueSnackbar\"];\n\nconst createFilePickerHandler = (\n    onLoad: (song: ChordSong) => void,\n    enqueueSnackbar: EnqueueSnackbarType\n) => {\n    return function (this: HTMLInputElement) {\n        const fileList = this.files;\n        if (fileList === null) {\n            return;\n        }\n\n        if (fileList.length > 1) {\n            enqueueSnackbar(\"Multiple files selected, only one file expected\", {\n                variant: \"error\",\n            });\n            return;\n        }\n\n        const file = fileList.item(0);\n        if (file === null) {\n            enqueueSnackbar(\"Could not retrieve file from file dialog\", {\n                variant: \"error\",\n            });\n            return;\n        }\n\n        const fileReader = new FileReader();\n        fileReader.onload = (ev: ProgressEvent<FileReader>) => {\n            if (\n                ev.target === null ||\n                ev.target.result === null ||\n                ev.target.result instanceof ArrayBuffer\n            ) {\n                return;\n            }\n\n            const results = ChordSong.deserialize(ev.target.result);\n            if (isLeft(results)) {\n                enqueueSnackbar(\n                    \"Can't load file, Song file failed validation\",\n                    {\n                        variant: \"error\",\n                    }\n                );\n                return;\n            }\n\n            onLoad(results.right);\n        };\n\n        fileReader.readAsText(file);\n    };\n};\n\nexport const useLoadMenuAction = (\n    onLoad: (song: ChordSong) => void,\n    enqueueSnackbar: EnqueueSnackbarType\n) => {\n    return () => {\n        const inputElem: HTMLInputElement = document.createElement(\"input\");\n        inputElem.type = \"file\";\n\n        const filePickerHandler = createFilePickerHandler(\n            onLoad,\n            enqueueSnackbar\n        );\n        inputElem.addEventListener(\"change\", filePickerHandler);\n\n        inputElem.click();\n    };\n};\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControl as UnstyledFormControl,\n    FormControlLabel,\n    FormHelperText,\n    Grid,\n    MenuItem,\n    Select as UnstyledSelect,\n    SelectChangeEvent,\n    styled,\n    Switch,\n    Typography,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { AllNotes, Note } from \"common/music/foundation/Note\";\nimport { PlainFn } from \"common/PlainFn\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\nimport { UserContext } from \"components/user/userContext\";\nimport React, { useContext, useState } from \"react\";\n\ninterface TransposeMenuProps {\n    open: boolean;\n    song: ChordSong;\n    songDispatch: React.Dispatch<ChordSongAction>;\n    onClose: PlainFn;\n}\n\nconst FormControl = styled(UnstyledFormControl)(({ theme }) => ({\n    margin: theme.spacing(2),\n    display: \"flex\",\n}));\n\nconst Select = styled(UnstyledSelect)(({ theme }) => ({\n    margin: theme.spacing(0.5),\n}));\n\ninterface KeySelection {\n    originalKey: Note;\n    transposedKey: Note;\n}\n\nconst TransposeMenu: React.FC<TransposeMenuProps> = (\n    props: TransposeMenuProps\n): JSX.Element => {\n    const user = useContext(UserContext);\n    const [keySelection, setKeySelection] = useState<KeySelection>({\n        originalKey: \"C\",\n        transposedKey: \"C\",\n    });\n\n    const [modifyMode, setModifyMode] = useState<\"in-place\" | \"new-song\">(\n        \"in-place\"\n    );\n\n    const keySelectChangeHandler = (\n        changedField: \"originalKey\" | \"transposedKey\"\n    ): ((event: SelectChangeEvent<unknown>) => void) => {\n        return (event: SelectChangeEvent<unknown>) => {\n            const newSelectValue = event.target.value as Note;\n            const newKeySelection = { ...keySelection };\n            newKeySelection[changedField] = newSelectValue;\n            setKeySelection(newKeySelection);\n        };\n    };\n\n    const handleTransposeAction = (): void => {\n        props.songDispatch({\n            type: \"transpose\",\n            originalKey: keySelection.originalKey,\n            transposeKey: keySelection.transposedKey,\n            modifyMode: modifyMode,\n        });\n\n        props.onClose();\n    };\n\n    const createKeySelect = (\n        currentKey: Note,\n        changeHandler: (event: SelectChangeEvent<unknown>) => void\n    ) => {\n        const menuItems: React.ReactElement[] = [];\n\n        for (const keyName in AllNotes) {\n            menuItems.push(<MenuItem value={keyName}>{keyName}</MenuItem>);\n        }\n\n        return (\n            <Select value={currentKey} onChange={changeHandler}>\n                {menuItems}\n            </Select>\n        );\n    };\n\n    const modifyModeSwitch = (\n        <Switch\n            checked={modifyMode === \"new-song\"}\n            onChange={(_event: unknown, checked: boolean) => {\n                if (checked) {\n                    setModifyMode(\"new-song\");\n                } else {\n                    setModifyMode(\"in-place\");\n                }\n            }}\n        />\n    );\n\n    const modifyModeControl =\n        user !== null ? (\n            <FormControl>\n                <FormControlLabel\n                    control={modifyModeSwitch}\n                    labelPlacement=\"end\"\n                    label=\"Copy transposition into a new song\"\n                />\n            </FormControl>\n        ) : null;\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>Transpose Key</DialogTitle>\n            <DialogContent>\n                <Box>\n                    <Typography>\n                        Select the keys to transpose from and to. Major and\n                        minor do not need to be specified (e.g. choose G for G\n                        major or G minor).\n                    </Typography>\n                </Box>\n                <Grid container direction=\"row\">\n                    <Grid item>\n                        <FormControl>\n                            {createKeySelect(\n                                keySelection.originalKey,\n                                keySelectChangeHandler(\"originalKey\")\n                            )}\n                            <FormHelperText>Original Key</FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item>\n                        <FormControl>\n                            {createKeySelect(\n                                keySelection.transposedKey,\n                                keySelectChangeHandler(\"transposedKey\")\n                            )}\n                            <FormHelperText>Transposed Key</FormHelperText>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n                {modifyModeControl}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose}>Cancel</Button>\n                <Button onClick={handleTransposeAction}>Transpose</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default TransposeMenu;\n","import ForkIcon from \"@mui/icons-material/CallSplit\";\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FolderOpenIcon from \"@mui/icons-material/FolderOpen\";\nimport MoreVertIcon from \"@mui/icons-material/MoreVert\";\nimport PlayIcon from \"@mui/icons-material/Piano\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport {\n    SpeedDial as UnstyledSpeedDial,\n    SpeedDialAction,\n    styled\n} from \"@mui/material\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { PlainFn } from \"common/PlainFn\";\nimport { useCloudCreateSong, useCloudDeleteSongDialog } from \"components/edit/menu/cloudSave\";\nimport { useLoadMenuAction } from \"components/edit/menu/load\";\nimport { useSaveMenuAction } from \"components/edit/menu/save\";\nimport TransposeMenu from \"components/edit/menu/TransposeMenu\";\nimport TransposeIcon from \"components/icons/FlatSharpIcon\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\nimport { User, UserContext } from \"components/user/userContext\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useState } from \"react\";\nimport useKonamiCode from \"react-use-konami\";\n\ninterface ChordPaperMenuProps {\n    song: ChordSong;\n    songDispatch: React.Dispatch<ChordSongAction>;\n    onPlay?: PlainFn;\n}\n\nconst SpeedDial = styled(UnstyledSpeedDial)(({ theme }) => ({\n    position: \"fixed\",\n    top: theme.spacing(3),\n    right: theme.spacing(2),\n}));\n\nconst ChordPaperMenu: React.FC<ChordPaperMenuProps> = (\n    props: ChordPaperMenuProps\n): JSX.Element => {\n    const developmentEnv = process.env.NODE_ENV === \"development\";\n    const [open, setOpen] = useState(false);\n    const [transposeMenuOpen, setTransposeMenuOpen] = useState(false);\n    const [offlineMode, setOfflineMode] = useState(developmentEnv);\n    const { enqueueSnackbar } = useSnackbar();\n\n    const user = React.useContext(UserContext);\n\n    const setSong = (loadedSong: ChordSong) =>\n        props.songDispatch({ type: \"replace-song\", newSong: loadedSong });\n    const loadAction = useLoadMenuAction(setSong, enqueueSnackbar);\n    const saveAction = useSaveMenuAction(props.song);\n    const cloudSaveAction = useCloudCreateSong();\n    const [showDeleteDialog, deleteDialog] = useCloudDeleteSongDialog(\n        props.song,\n        user\n    );\n\n    const openMenu = () => {\n        setOpen(true);\n    };\n\n    const closeMenu = () => {\n        setOpen(false);\n    };\n\n    const forkSong = (song: ChordSong, user: User) => {\n        const songClone = song.fork();\n        cloudSaveAction(songClone, user);\n    };\n\n    useKonamiCode(() => {\n        setOfflineMode(true);\n        enqueueSnackbar(\"Local save and load buttons are enabled!\", {\n            variant: \"info\",\n        });\n    });\n\n    if (transposeMenuOpen) {\n        return (\n            <TransposeMenu\n                song={props.song}\n                songDispatch={props.songDispatch}\n                open\n                onClose={() => {\n                    setTransposeMenuOpen(false);\n                }}\n            ></TransposeMenu>\n        );\n    }\n\n    if (deleteDialog !== null) {\n        return deleteDialog;\n    }\n\n    return (\n        <SpeedDial\n            icon={<MoreVertIcon />}\n            open={open}\n            onOpen={openMenu}\n            onClose={closeMenu}\n            direction=\"down\"\n            ariaLabel=\"SpeedDial\"\n        >\n            <SpeedDialAction\n                icon={<PlayIcon />}\n                tooltipTitle=\"Play Mode\"\n                onClick={props.onPlay}\n            />\n\n            {!props.song.isUnsaved() && user !== null && (\n                <SpeedDialAction\n                    icon={<ForkIcon />}\n                    tooltipTitle=\"Fork\"\n                    onClick={() => forkSong(props.song, user)}\n                />\n            )}\n\n            {props.song.isUnsaved() && user !== null && (\n                <SpeedDialAction\n                    icon={<CloudUploadIcon />}\n                    tooltipTitle=\"Save to Cloud\"\n                    onClick={() => cloudSaveAction(props.song, user)}\n                />\n            )}\n\n            <SpeedDialAction\n                icon={<TransposeIcon />}\n                tooltipTitle=\"Transpose\"\n                onClick={() => {\n                    setTransposeMenuOpen(true);\n                }}\n            />\n\n            {offlineMode && (\n                <SpeedDialAction\n                    icon={<SaveIcon />}\n                    tooltipTitle=\"Save to computer\"\n                    onClick={saveAction}\n                />\n            )}\n\n            {offlineMode && (\n                <SpeedDialAction\n                    icon={<FolderOpenIcon />}\n                    tooltipTitle=\"Load from computer\"\n                    onClick={loadAction}\n                />\n            )}\n\n            {!props.song.isUnsaved() && props.song.isOwner(user) && (\n                <SpeedDialAction\n                    icon={<DeleteIcon />}\n                    tooltipTitle=\"Delete Song\"\n                    onClick={showDeleteDialog}\n                />\n            )}\n        </SpeedDial>\n    );\n};\n\nexport default ChordPaperMenu;\n","import { ChordSong } from \"common/ChordModel/ChordSong\";\nexport const useSaveMenuAction = (song: ChordSong) => {\n    return () => {\n        const jsonStr = JSON.stringify(song.fork());\n\n        const blob = new Blob([jsonStr], {\n            type: \"application/json\",\n        });\n        const objectURL = URL.createObjectURL(blob);\n\n        const anchor = document.createElement(\"a\");\n\n        anchor.download = \"chord_paper_song.json\";\n        if (song.title !== \"\") {\n            anchor.download = song.title + \".json\";\n        }\n        anchor.href = objectURL;\n        anchor.click();\n\n        URL.revokeObjectURL(objectURL);\n    };\n};\n","import FullScreenLoading from \"components/loading/FullScreenLoading\";\nimport React, { useEffect, useState } from \"react\";\n\ninterface LoadingRenderProps {\n    children: React.ReactElement;\n}\n\nconst LoadingRender: React.FC<LoadingRenderProps> = (\n    props: LoadingRenderProps\n): JSX.Element => {\n    const [initialRender, setInitialRender] = useState(false);\n\n    useEffect(() => {\n        if (!initialRender) {\n            // setTimeout gives a render cycle to allows the initial spinner to render\n            const timerID = setTimeout(() => setInitialRender(true));\n            return () => clearTimeout(timerID);\n        }\n    }, [initialRender, setInitialRender]);\n\n    if (!initialRender) {\n        return <FullScreenLoading />;\n    }\n\n    return props.children;\n};\n\nexport default LoadingRender;\n","import * as iots from \"io-ts\";\n\nexport const validateValue = (value: string): boolean => {\n    return value.trim() !== \"\";\n};\n\nexport const BaseTrackValidator = iots.type({\n    id: iots.string,\n    label: iots.string,\n});\n","import { BaseTrackValidator, validateValue } from \"common/ChordModel/tracks/BaseTrack\";\nimport { Record } from \"immutable\";\nimport * as iots from \"io-ts\";\n\nexport const SingleTrackValidator = iots.intersection([\n    BaseTrackValidator,\n    iots.type({\n        track_type: iots.literal(\"single\"),\n        url: iots.string,\n    }),\n]);\n\ntype SingleTrackValidatedFields = iots.TypeOf<typeof SingleTrackValidator>;\nconst DefaultSingleTrackRecord = {\n    id: \"\",\n    track_type: \"single\" as \"single\",\n    label: \"\",\n    url: \"\",\n};\n\nexport class SingleTrack\n    extends Record(DefaultSingleTrackRecord)\n    implements SingleTrackValidatedFields\n{\n    constructor(id: string, label: string, url: string) {\n        super({\n            id: id,\n            track_type: \"single\",\n            label: label,\n            url: url,\n        });\n    }\n\n    static fromValidatedFields(\n        validatedFields: SingleTrackValidatedFields\n    ): SingleTrack {\n        return new SingleTrack(\n            validatedFields.id,\n            validatedFields.label,\n            validatedFields.url\n        );\n    }\n\n    validate(): boolean {\n        return validateValue(this.label) && validateValue(this.url);\n    }\n}\n","import { BaseTrackValidator, validateValue } from \"common/ChordModel/tracks/BaseTrack\";\nimport { Record } from \"immutable\";\nimport * as iots from \"io-ts\";\n\nexport const SplitStemTrackValidator = iots.intersection([\n    BaseTrackValidator,\n    iots.type({\n        track_type: iots.union([\n            iots.literal(\"split_2stems\"),\n            iots.literal(\"split_4stems\"),\n            iots.literal(\"split_5stems\"),\n        ]),\n        original_url: iots.string,\n        job_status: iots.union([\n            iots.literal(\"requested\"),\n            iots.literal(\"processing\"),\n            iots.literal(\"error\"),\n        ]),\n        job_status_message: iots.string,\n        job_status_debug_log: iots.string,\n        job_progress: iots.number,\n    }),\n]);\n\ntype SplitStemTrackValidatedFields = iots.TypeOf<\n    typeof SplitStemTrackValidator\n>;\n\nexport type SplitStemTypes = \"split_2stems\" | \"split_4stems\" | \"split_5stems\";\nexport type SplitStemJobStatus = \"requested\" | \"processing\" | \"error\";\n\nconst DefaultSplitStemTrackRecord = {\n    id: \"\",\n    track_type: \"split_2stems\" as SplitStemTypes,\n    label: \"\",\n    original_url: \"\",\n    job_status: \"requested\" as SplitStemJobStatus,\n    job_status_message: \"\",\n    job_status_debug_log: \"\",\n    job_progress: 0,\n};\n\nexport class SplitStemTrack\n    extends Record(DefaultSplitStemTrackRecord)\n    implements SplitStemTrackValidatedFields\n{\n    constructor(\n        id: string,\n        label: string,\n        splitType: SplitStemTypes,\n        originalURL: string,\n        jobStatus: SplitStemJobStatus,\n        jobStatusMessage: string,\n        jobProgress: number,\n        jobStatusDebugLog: string\n    ) {\n        super({\n            id: id,\n            track_type: splitType,\n            label: label,\n            original_url: originalURL,\n            job_status: jobStatus,\n            job_status_message: jobStatusMessage,\n            job_progress: jobProgress,\n            job_status_debug_log: jobStatusDebugLog,\n        });\n    }\n\n    static defaultLabel(splitType: SplitStemTypes): string {\n        switch (splitType) {\n            case \"split_2stems\":\n                return \"2 stems\";\n            case \"split_4stems\":\n                return \"4 stems\";\n            case \"split_5stems\":\n                return \"5 stems\";\n        }\n    }\n\n    static newTrackRequest(splitType: SplitStemTypes): SplitStemTrack {\n        return new SplitStemTrack(\n            \"\",\n            this.defaultLabel(splitType),\n            splitType,\n            \"\",\n            \"requested\",\n            \"\",\n            0,\n            \"\"\n        );\n    }\n\n    static fromValidatedFields(\n        validatedFields: SplitStemTrackValidatedFields\n    ): SplitStemTrack {\n        return new SplitStemTrack(\n            validatedFields.id,\n            validatedFields.label,\n            validatedFields.track_type,\n            validatedFields.original_url,\n            validatedFields.job_status,\n            validatedFields.job_status_message,\n            validatedFields.job_progress,\n            validatedFields.job_status_debug_log\n        );\n    }\n\n    validate(): boolean {\n        return validateValue(this.label) && validateValue(this.original_url);\n    }\n}\n","import { BaseTrackValidator, validateValue } from \"common/ChordModel/tracks/BaseTrack\";\nimport { mapObject } from \"common/mapObject\";\nimport * as iots from \"io-ts\";\n\nconst makeStemTrackValidator = <T extends object, S extends string>(\n    emptyKeyMap: T,\n    trackType: S\n) => {\n    const stringTypes = mapObject(emptyKeyMap, () => iots.string);\n\n    return iots.intersection([\n        BaseTrackValidator,\n        iots.type({\n            track_type: iots.literal(trackType),\n            stem_urls: iots.type(stringTypes),\n        }),\n    ]);\n};\n\ntype StemURLs<StemKey extends string> = {\n    [P in StemKey]: string;\n};\n\nexport abstract class StemTrack<StemKey extends string> {\n    readonly id: string;\n    readonly label: string;\n    readonly stem_urls: StemURLs<StemKey>;\n\n    constructor(id: string, label: string, stems_urls: StemURLs<StemKey>) {\n        this.id = id;\n        this.label = label;\n        this.stem_urls = stems_urls;\n    }\n\n    abstract keyObject(): Record<StemKey, undefined>;\n\n    abstract setLabel(newLabel: string): this;\n\n    validate(): boolean {\n        if (!validateValue(this.label)) {\n            return false;\n        }\n\n        let key: StemKey;\n        for (key in this.stem_urls) {\n            if (!validateValue(this.stem_urls[key])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\n// Two stems\nconst TwoStemEmptyObject = {\n    accompaniment: undefined,\n    vocals: undefined,\n};\n\nexport type TwoStemKeys = keyof typeof TwoStemEmptyObject;\nexport const TwoStemTrackValidator = makeStemTrackValidator(\n    TwoStemEmptyObject,\n    \"2stems\"\n);\n\ntype TwoStemTrackValidatedFields = iots.TypeOf<typeof TwoStemTrackValidator>;\n\nexport class TwoStemTrack\n    extends StemTrack<TwoStemKeys>\n    implements TwoStemTrackValidatedFields\n{\n    readonly track_type: \"2stems\";\n\n    constructor(id: string, label: string, stem_urls: StemURLs<TwoStemKeys>) {\n        super(id, label, stem_urls);\n        this.track_type = \"2stems\";\n    }\n\n    keyObject(): Record<TwoStemKeys, undefined> {\n        return TwoStemEmptyObject;\n    }\n\n    setLabel(newLabel: string): this {\n        // nobody else will extend this\n        return new TwoStemTrack(this.id, newLabel, this.stem_urls) as this;\n    }\n\n    static fromValidatedFields(\n        validatedFields: TwoStemTrackValidatedFields\n    ): TwoStemTrack {\n        return new TwoStemTrack(\n            validatedFields.id,\n            validatedFields.label,\n            validatedFields.stem_urls\n        );\n    }\n}\n\n// Four stems\nconst FourStemEmptyObject = {\n    bass: undefined,\n    drums: undefined,\n    other: undefined,\n    vocals: undefined,\n};\n\nexport type FourStemKeys = keyof typeof FourStemEmptyObject;\nexport const FourStemTrackValidator = makeStemTrackValidator(\n    FourStemEmptyObject,\n    \"4stems\"\n);\n\ntype FourStemTrackValidatedFields = iots.TypeOf<typeof FourStemTrackValidator>;\n\nexport class FourStemTrack\n    extends StemTrack<FourStemKeys>\n    implements FourStemTrackValidatedFields\n{\n    readonly track_type: \"4stems\";\n\n    constructor(id: string, label: string, stem_urls: StemURLs<FourStemKeys>) {\n        super(id, label, stem_urls);\n        this.track_type = \"4stems\";\n    }\n\n    keyObject(): Record<FourStemKeys, undefined> {\n        return FourStemEmptyObject;\n    }\n\n    setLabel(newLabel: string): this {\n        // nobody else will extend this\n        return new FourStemTrack(this.id, newLabel, this.stem_urls) as this;\n    }\n\n    static fromValidatedFields(\n        validatedFields: FourStemTrackValidatedFields\n    ): FourStemTrack {\n        return new FourStemTrack(\n            validatedFields.id,\n            validatedFields.label,\n            validatedFields.stem_urls\n        );\n    }\n}\n\n// Five stems\nconst FiveStemEmptyObject = {\n    bass: undefined,\n    drums: undefined,\n    other: undefined,\n    piano: undefined,\n    vocals: undefined,\n};\n\nexport type FiveStemKeys = keyof typeof FiveStemEmptyObject;\nexport const FiveStemTrackValidator = makeStemTrackValidator(\n    FiveStemEmptyObject,\n    \"5stems\"\n);\n\ntype FiveStemTrackValidatedFields = iots.TypeOf<typeof FiveStemTrackValidator>;\n\nexport class FiveStemTrack\n    extends StemTrack<FiveStemKeys>\n    implements FiveStemTrackValidatedFields\n{\n    readonly track_type: \"5stems\";\n\n    constructor(id: string, label: string, stem_urls: StemURLs<FiveStemKeys>) {\n        super(id, label, stem_urls);\n        this.track_type = \"5stems\";\n    }\n\n    keyObject(): Record<FiveStemKeys, undefined> {\n        return FiveStemEmptyObject;\n    }\n\n    setLabel(newLabel: string): this {\n        // nobody else will extend this\n        return new FiveStemTrack(this.id, newLabel, this.stem_urls) as this;\n    }\n\n    static fromValidatedFields(\n        validatedFields: FiveStemTrackValidatedFields\n    ): FiveStemTrack {\n        return new FiveStemTrack(\n            validatedFields.id,\n            validatedFields.label,\n            validatedFields.stem_urls\n        );\n    }\n}\n","import { TextFieldProps } from \"@mui/material\";\n\nconst validateValue = (value: string): boolean => {\n    return value.trim() !== \"\";\n};\n\nexport const textFieldValidation = (value: string): TextFieldProps => {\n    const validValue = validateValue(value);\n\n    return {\n        error: validValue ? undefined : true,\n        helperText: validValue ? undefined : \"Can't be empty\",\n    };\n};\n","import { TextField } from \"@mui/material\";\nimport { textFieldValidation } from \"components/track_player/dialog/error\";\nimport React from \"react\";\n\ninterface LabelFieldProps {\n    value: string;\n    onChange: (newValue: string) => void;\n}\n\nconst LabelField: React.FC<LabelFieldProps> = (\n    props: LabelFieldProps\n): JSX.Element => {\n    const labelChangeHandler = (\n        event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n    ) => {\n        props.onChange(event.target.value);\n    };\n\n    return (\n        <TextField\n            label=\"Track Label\"\n            variant=\"outlined\"\n            value={props.value}\n            onChange={labelChangeHandler}\n            {...textFieldValidation(props.value)}\n        />\n    );\n};\n\nexport default LabelField;\n","const googleDriveExportLinkRegex = new RegExp(`.*drive.google.com/.*?.+`);\nconst googleDriveViewerLinkRegex = new RegExp(\n    `.*drive.google.com/file/d/(.+)/.*`\n);\n\nconst isGoogleDriveExportLink = (url: string): boolean => {\n    const results = url.match(googleDriveExportLinkRegex);\n    return results !== null;\n};\n\nexport const ensureGoogleDriveCacheBusted = (\n    url: string,\n    randID: string\n): string => {\n    if (!isGoogleDriveExportLink(url)) {\n        return url;\n    }\n\n    return url + \"&cacheBuster=\" + randID;\n};\n\nexport const convertViewLinkToExportLink = (url: string): string | null => {\n    const results = url.match(googleDriveViewerLinkRegex);\n    if (results === null) {\n        return null;\n    }\n\n    if (results.length < 2) {\n        return null;\n    }\n\n    const fileID = results[1];\n\n    return \"https://drive.google.com/uc?export=download&id=\" + fileID;\n};\n","import { TextField } from \"@mui/material\";\nimport { textFieldValidation } from \"components/track_player/dialog/error\";\nimport { convertViewLinkToExportLink } from \"components/track_player/internal_player/google_drive\";\nimport React from \"react\";\n\ninterface URLFieldProps {\n    labelText: string;\n    value: string;\n    onChange: (newValue: string) => void;\n    disabled?: boolean;\n}\n\nconst URLField: React.FC<URLFieldProps> = (\n    props: URLFieldProps\n): JSX.Element => {\n    const handleChange = (\n        event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n    ) => {\n        props.onChange(event.target.value);\n    };\n\n    const handleKey = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        // only process for (CMD | CTRL) + g\n        if (!event.metaKey && !event.ctrlKey) {\n            return;\n        }\n\n        if (event.key !== \"g\" && event.key !== \"G\") {\n            return;\n        }\n\n        const possiblyGoogleDriveViewLink: string = props.value;\n        const result: string | null = convertViewLinkToExportLink(\n            possiblyGoogleDriveViewLink\n        );\n        if (result === null) {\n            return;\n        }\n\n        props.onChange(result);\n        event.preventDefault();\n    };\n\n    return (\n        <TextField\n            label={props.labelText}\n            variant=\"outlined\"\n            value={props.value}\n            onChange={handleChange}\n            onKeyDown={handleKey}\n            disabled={props.disabled}\n            {...textFieldValidation(props.value)}\n        />\n    );\n};\n\nexport default URLField;\n","import DeleteIcon from \"@mui/icons-material/Delete\";\nimport { Button, Divider, Grid, styled } from \"@mui/material\";\nimport { SingleTrack } from \"common/ChordModel/tracks/SingleTrack\";\nimport LabelField from \"components/track_player/dialog/LabelField\";\nimport URLField from \"components/track_player/dialog/URLField\";\nimport React from \"react\";\n\ninterface SingleTrackRowProps {\n    track: SingleTrack;\n    onChange: (newTrack: SingleTrack) => void;\n    onRemove: () => void;\n}\n\nconst RowContainer = styled(Grid)(({ theme }) => ({\n    margin: theme.spacing(2),\n}));\n\nconst SingleTrackRow: React.FC<SingleTrackRowProps> = (\n    props: SingleTrackRowProps\n): JSX.Element => {\n    const handleLabelChange = (newLabel: string) => {\n        const updatedTrack = props.track.set(\"label\", newLabel);\n        props.onChange(updatedTrack);\n    };\n\n    const handleURLChange = (newURL: string) => {\n        const updatedTrack = props.track.set(\"url\", newURL);\n        props.onChange(updatedTrack);\n    };\n\n    return (\n        <>\n            <RowContainer container alignItems=\"center\">\n                <Grid xs={5} item>\n                    <LabelField\n                        value={props.track.label}\n                        onChange={handleLabelChange}\n                    />\n                </Grid>\n                <Grid xs={5} item>\n                    <URLField\n                        labelText=\"Track URL\"\n                        value={props.track.url}\n                        onChange={handleURLChange}\n                    />\n                </Grid>\n                <Grid xs={2} item>\n                    <Button onClick={props.onRemove}>\n                        <DeleteIcon />\n                    </Button>\n                </Grid>\n            </RowContainer>\n\n            <Divider />\n        </>\n    );\n};\n\nexport default SingleTrackRow;\n","import DeleteIcon from \"@mui/icons-material/Delete\";\nimport { Button, Divider, Grid, styled } from \"@mui/material\";\nimport { SplitStemTrack } from \"common/ChordModel/tracks/SplitStemRequest\";\nimport LabelField from \"components/track_player/dialog/LabelField\";\nimport URLField from \"components/track_player/dialog/URLField\";\nimport React from \"react\";\n\ninterface SplitStemTrackRowProps {\n    track: SplitStemTrack;\n    onChange: (newTrack: SplitStemTrack) => void;\n    onRemove: () => void;\n}\n\nconst RowContainer = styled(Grid)(({ theme }) => ({\n    margin: theme.spacing(2),\n}));\n\nconst SplitStemTrackRow: React.FC<SplitStemTrackRowProps> = (\n    props: SplitStemTrackRowProps\n): JSX.Element => {\n    const handleLabelChange = (newLabel: string) => {\n        const updatedTrack = props.track.set(\"label\", newLabel);\n        props.onChange(updatedTrack);\n    };\n\n    const handleURLChange = (newURL: string) => {\n        const updatedTrack = props.track.set(\"original_url\", newURL);\n        props.onChange(updatedTrack);\n    };\n\n    const currentlyProcessing = props.track.id !== \"\";\n\n    const urlLabelText: string = (() => {\n        if (currentlyProcessing) {\n            return \"Processing track...\";\n        }\n\n        switch (props.track.track_type) {\n            case \"split_2stems\": {\n                return \"Track URL to be split into 2 stems\";\n            }\n\n            case \"split_4stems\": {\n                return \"Track URL to be split into 4 stems\";\n            }\n\n            case \"split_5stems\": {\n                return \"Track URL to be split into 5 stems\";\n            }\n        }\n    })();\n\n    return (\n        <>\n            <RowContainer container alignItems=\"center\">\n                <Grid xs={5} item>\n                    <LabelField\n                        value={props.track.label}\n                        onChange={handleLabelChange}\n                    />\n                </Grid>\n                <Grid xs={5} item>\n                    <URLField\n                        labelText={urlLabelText}\n                        value={props.track.original_url}\n                        onChange={handleURLChange}\n                        disabled={currentlyProcessing}\n                    />\n                </Grid>\n                <Grid xs={2} item>\n                    <Button onClick={props.onRemove}>\n                        <DeleteIcon />\n                    </Button>\n                </Grid>\n            </RowContainer>\n\n            <Divider />\n        </>\n    );\n};\n\nexport default SplitStemTrackRow;\n","import DeleteIcon from \"@mui/icons-material/Delete\";\nimport { Button, Divider, Grid, styled } from \"@mui/material\";\nimport { StemTrack } from \"common/ChordModel/tracks/StemTrack\";\nimport { mapObject } from \"common/mapObject\";\nimport LabelField from \"components/track_player/dialog/LabelField\";\nimport URLField from \"components/track_player/dialog/URLField\";\nimport lodash from \"lodash\";\nimport React from \"react\";\n\nexport type URLFieldLabel<StemKey extends string> = {\n    key: StemKey;\n    label: string;\n};\n\ninterface StemTrackRowProps<\n    StemKey extends string,\n    T extends StemTrack<StemKey>\n> {\n    track: T;\n    urlFieldLabels: URLFieldLabel<StemKey>[];\n    onChange: (newTrack: T) => void;\n    onRemove: () => void;\n}\n\nconst RowContainer = styled(Grid)(({ theme }) => ({\n    margin: theme.spacing(2),\n}));\n\nconst StemTrackRow = <StemKey extends string, T extends StemTrack<StemKey>>(\n    props: StemTrackRowProps<StemKey, T>\n): JSX.Element => {\n    const handleLabelChange = (newLabel: string) => {\n        const updatedTrack = props.track.setLabel(newLabel);\n        props.onChange(updatedTrack);\n    };\n\n    const makeURLField = (\n        url: string,\n        stemKey: StemKey\n    ): React.ReactElement => {\n        const handleChange = (newURL: string) => {\n            const updatedTrack = lodash.clone(props.track);\n            updatedTrack.stem_urls[stemKey] = newURL;\n            props.onChange(updatedTrack);\n        };\n\n        const label = (() => {\n            const fieldLabel = props.urlFieldLabels.find(\n                (value: URLFieldLabel<StemKey>) => value.key === stemKey\n            );\n            if (fieldLabel === undefined) {\n                return \"File URL\";\n            }\n\n            return fieldLabel.label;\n        })();\n\n        return (\n            <URLField labelText={label} value={url} onChange={handleChange} />\n        );\n    };\n\n    const stemURLFields = mapObject(props.track.stem_urls, makeURLField);\n\n    const createFirstRow = (stemKey: StemKey) => {\n        return (\n            <RowContainer key={stemKey} container alignItems=\"center\">\n                <Grid xs={5} item>\n                    <LabelField\n                        value={props.track.label}\n                        onChange={handleLabelChange}\n                    />\n                </Grid>\n                <Grid xs={5} item>\n                    {stemURLFields[stemKey]}\n                </Grid>\n                <Grid xs={2} item>\n                    <Button onClick={props.onRemove}>\n                        <DeleteIcon />\n                    </Button>\n                </Grid>\n            </RowContainer>\n        );\n    };\n\n    const createSubsequentRows = (stemKey: StemKey) => {\n        return (\n            <RowContainer key={stemKey} container alignItems=\"center\">\n                <Grid xs={5} item></Grid>\n                <Grid xs={5} item>\n                    {stemURLFields[stemKey]}\n                </Grid>\n                <Grid xs={2} item></Grid>\n            </RowContainer>\n        );\n    };\n\n    const rows = props.urlFieldLabels.map(\n        (fieldLabel: URLFieldLabel<StemKey>, index: number) => {\n            if (index === 0) {\n                return createFirstRow(fieldLabel.key);\n            }\n\n            return createSubsequentRows(fieldLabel.key);\n        }\n    );\n\n    return (\n        <>\n            {rows}\n            <Divider />\n        </>\n    );\n};\n\nexport default StemTrackRow;\n","import AddIcon from \"@mui/icons-material/Add\";\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\nimport {\n    Box,\n    Box as UnstyledBox,\n    Button,\n    CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    Menu,\n    MenuItem,\n    styled,\n    Typography as UnstyledTypography\n} from \"@mui/material\";\nimport { SingleTrack } from \"common/ChordModel/tracks/SingleTrack\";\nimport {\n    SplitStemTrack,\n    SplitStemTypes\n} from \"common/ChordModel/tracks/SplitStemRequest\";\nimport {\n    FiveStemKeys,\n    FiveStemTrack,\n    FourStemKeys,\n    FourStemTrack,\n    TwoStemKeys,\n    TwoStemTrack\n} from \"common/ChordModel/tracks/StemTrack\";\nimport { Track } from \"common/ChordModel/tracks/Track\";\nimport { TrackList } from \"common/ChordModel/tracks/TrackList\";\nimport { PlainFn } from \"common/PlainFn\";\nimport SingleTrackRow from \"components/track_player/dialog/SingleTrackRow\";\nimport SplitStemTrackRow from \"components/track_player/dialog/SplitStemTrackRow\";\nimport StemTrackRow, { URLFieldLabel } from \"components/track_player/dialog/StemTrackRow\";\nimport { TrackListLoad } from \"components/track_player/providers/TrackListProvider\";\nimport lodash from \"lodash\";\nimport React, { useState } from \"react\";\n\ninterface TrackListEditDialogProps {\n    open: boolean;\n    onClose?: PlainFn;\n    trackListLoad: TrackListLoad;\n    onSubmit?: (trackList: TrackList) => void;\n    onRefresh?: PlainFn;\n}\n\nconst FlexBox = styled(Box)(({ theme }) => ({\n    display: \"flex\",\n    padding: theme.spacing(5),\n    alignItems: \"center\",\n    justifyItems: \"center\",\n}));\n\nconst InlineBlockBox = styled(UnstyledBox)({\n    display: \"inline-block\",\n});\n\nconst AddNewRowBox = styled(UnstyledBox)(({ theme }) => ({\n    cursor: \"pointer\",\n    display: \"flex\",\n    alignItems: \"center\",\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n}));\n\nconst Typography = styled(UnstyledTypography)(({ theme }) => ({\n    marginLeft: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n}));\n\nconst TrackListEditDialog: React.FC<TrackListEditDialogProps> = (\n    props: TrackListEditDialogProps\n): JSX.Element => {\n    const internalContent: JSX.Element = (() => {\n        if (props.trackListLoad.state === \"loading\") {\n            return (\n                <FlexBox>\n                    <CircularProgress size=\"15rem\" />\n                </FlexBox>\n            );\n        }\n\n        return (\n            <LoadedTrackListEditDialog\n                trackList={props.trackListLoad.tracklist}\n                onSubmit={props.onSubmit}\n                onClose={props.onClose}\n            />\n        );\n    })();\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose} maxWidth={false}>\n            <DialogTitle>\n                <Button onClick={props.onRefresh}>\n                    <RefreshIcon />\n                </Button>\n                Edit Track List\n            </DialogTitle>\n            {internalContent}\n        </Dialog>\n    );\n};\n\ninterface LoadedTrackListEditDialogProps {\n    trackList: TrackList;\n    onSubmit?: (trackList: TrackList) => void;\n    onClose?: PlainFn;\n}\n\nconst LoadedTrackListEditDialog: React.FC<LoadedTrackListEditDialogProps> = (\n    props: LoadedTrackListEditDialogProps\n): JSX.Element => {\n    const emptySingleTrack = (): Track => {\n        return new SingleTrack(\"\", \"\", \"\");\n    };\n\n    const initialTrackList: TrackList = (() => {\n        const clone = lodash.cloneDeep(props.trackList);\n        if (clone.tracks.length === 0) {\n            clone.tracks.push(emptySingleTrack());\n        }\n\n        return clone;\n    })();\n\n    const [trackList, setTrackList] = useState<TrackList>(initialTrackList);\n    const [version, setVersion] = useState(0);\n    const [addTrackMenuElement, setAddTrackMenuElement] =\n        useState<HTMLElement | null>(null);\n\n    const bumpVersion = () => setVersion(version + 1);\n    const cloneTrackList = () => lodash.cloneDeep(trackList);\n\n    const handleAddTrackMenu = (event: React.MouseEvent<HTMLElement>) => {\n        setAddTrackMenuElement(event.currentTarget);\n    };\n\n    const handleCloseAddTrackMenu = () => {\n        setAddTrackMenuElement(null);\n    };\n\n    const handleAddSingleTrack = () => {\n        handleAddTrack(new SingleTrack(\"\", \"\", \"\"));\n    };\n\n    const handleAddTwoStemTrack = () => {\n        handleAddTrack(\n            new TwoStemTrack(\"\", \"\", { vocals: \"\", accompaniment: \"\" })\n        );\n    };\n\n    const handleAddFourStemTrack = () => {\n        handleAddTrack(\n            new FourStemTrack(\"\", \"\", {\n                vocals: \"\",\n                other: \"\",\n                bass: \"\",\n                drums: \"\",\n            })\n        );\n    };\n\n    const handleAddFiveStemTrack = () => {\n        handleAddTrack(\n            new FiveStemTrack(\"\", \"\", {\n                vocals: \"\",\n                other: \"\",\n                piano: \"\",\n                bass: \"\",\n                drums: \"\",\n            })\n        );\n    };\n\n    const handleAddSplitStemTrack = (splitType: SplitStemTypes) => {\n        handleAddTrack(SplitStemTrack.newTrackRequest(splitType));\n    };\n\n    const handleAddTrack = (newTrack: Track) => {\n        appendTrack(newTrack);\n        handleCloseAddTrackMenu();\n    };\n\n    const appendTrack = (track: Track) => {\n        const clone = cloneTrackList();\n        clone.tracks.push(track);\n        bumpVersion();\n        setTrackList(clone);\n    };\n\n    const removeTrack = (index: number) => {\n        const clone = cloneTrackList();\n        clone.tracks.splice(index, 1);\n        bumpVersion();\n        setTrackList(clone);\n    };\n\n    const hasError: boolean = (() => {\n        for (let track of trackList.tracks) {\n            if (!track.validate()) {\n                return true;\n            }\n        }\n\n        return false;\n    })();\n\n    const updateTrack = (index: number, track: Track) => {\n        const clone = cloneTrackList();\n        clone.tracks.splice(index, 1, track);\n        setTrackList(clone);\n    };\n\n    const trackChangeHandler = (index: number) => {\n        return (newTrack: Track) => {\n            updateTrack(index, newTrack);\n        };\n    };\n\n    const trackListInputs = (() => {\n        const rows: React.ReactElement[] = trackList.tracks.map(\n            // linter is wrong here - switch at the bottom is exhaustive and the compiler can verify\n            // it thinks that it may possibly return undefined, but it can't\n            // eslint-disable-next-line array-callback-return\n            (track: Track, index: number): React.ReactElement => {\n                // about version-index:\n                // we don't want to rerender the textboxes every time because it interrupts the\n                // typing experience by blurring focus while the user types\n                //\n                // but also we want to rerender the boxes every time the list is updated\n                // i.e. tracks are added or removed\n                // because the mapping of the track indices to the boxes may have changed\n                //\n                // version helps with this mostly because the track indices stably identify a track\n                // for the same version\n                const rowKey = `${version}-${index}`;\n\n                switch (track.track_type) {\n                    case \"single\": {\n                        return (\n                            <SingleTrackRow\n                                key={rowKey}\n                                track={track}\n                                onChange={trackChangeHandler(index)}\n                                onRemove={() => removeTrack(index)}\n                            />\n                        );\n                    }\n\n                    case \"2stems\": {\n                        const urlFieldLabels: URLFieldLabel<TwoStemKeys>[] = [\n                            {\n                                key: \"vocals\",\n                                label: \"Vocals File URL\",\n                            },\n                            {\n                                key: \"accompaniment\",\n                                label: \"Accompaniment File URL\",\n                            },\n                        ];\n\n                        return (\n                            <StemTrackRow\n                                key={rowKey}\n                                track={track}\n                                urlFieldLabels={urlFieldLabels}\n                                onChange={trackChangeHandler(index)}\n                                onRemove={() => removeTrack(index)}\n                            />\n                        );\n                    }\n\n                    case \"4stems\": {\n                        const urlFieldLabels: URLFieldLabel<FourStemKeys>[] = [\n                            {\n                                key: \"vocals\",\n                                label: \"Vocals File URL\",\n                            },\n                            {\n                                key: \"other\",\n                                label: \"Other File URL\",\n                            },\n                            {\n                                key: \"bass\",\n                                label: \"Bass File URL\",\n                            },\n                            {\n                                key: \"drums\",\n                                label: \"Drums File URL\",\n                            },\n                        ];\n\n                        return (\n                            <StemTrackRow\n                                key={rowKey}\n                                track={track}\n                                urlFieldLabels={urlFieldLabels}\n                                onChange={trackChangeHandler(index)}\n                                onRemove={() => removeTrack(index)}\n                            />\n                        );\n                    }\n\n                    case \"5stems\": {\n                        const urlFieldLabels: URLFieldLabel<FiveStemKeys>[] = [\n                            {\n                                key: \"vocals\",\n                                label: \"Vocals File URL\",\n                            },\n                            {\n                                key: \"other\",\n                                label: \"Other File URL\",\n                            },\n                            {\n                                key: \"piano\",\n                                label: \"Piano File URL\",\n                            },\n                            {\n                                key: \"bass\",\n                                label: \"Bass File URL\",\n                            },\n                            {\n                                key: \"drums\",\n                                label: \"Drums File URL\",\n                            },\n                        ];\n\n                        return (\n                            <StemTrackRow\n                                key={rowKey}\n                                track={track}\n                                urlFieldLabels={urlFieldLabels}\n                                onChange={trackChangeHandler(index)}\n                                onRemove={() => removeTrack(index)}\n                            />\n                        );\n                    }\n\n                    case \"split_2stems\":\n                    case \"split_4stems\":\n                    case \"split_5stems\": {\n                        return (\n                            <SplitStemTrackRow\n                                key={rowKey}\n                                track={track}\n                                onChange={trackChangeHandler(index)}\n                                onRemove={() => removeTrack(index)}\n                            />\n                        );\n                    }\n                }\n            }\n        );\n\n        const showAddTrackMenu = addTrackMenuElement !== null;\n\n        rows.push(\n            <React.Fragment key=\"append\">\n                <InlineBlockBox>\n                    <AddNewRowBox\n                        key=\"append-action\"\n                        onClick={handleAddTrackMenu}\n                    >\n                        <AddIcon />\n                        <Typography>Add a new track</Typography>\n                    </AddNewRowBox>\n                </InlineBlockBox>\n                <Menu\n                    open={showAddTrackMenu}\n                    anchorEl={addTrackMenuElement}\n                    onClose={handleCloseAddTrackMenu}\n                >\n                    <MenuItem onClick={handleAddSingleTrack}>\n                        Single Track\n                    </MenuItem>\n                    <MenuItem\n                        onClick={() => handleAddSplitStemTrack(\"split_2stems\")}\n                    >\n                        Split Track into 2 Stems\n                    </MenuItem>\n                    <MenuItem\n                        onClick={() => handleAddSplitStemTrack(\"split_4stems\")}\n                    >\n                        Split Track into 4 Stems\n                    </MenuItem>\n                    <MenuItem\n                        onClick={() => handleAddSplitStemTrack(\"split_5stems\")}\n                    >\n                        Split Track into 5 Stems\n                    </MenuItem>\n                    <MenuItem onClick={handleAddTwoStemTrack}>\n                        2 Stem Track\n                    </MenuItem>\n                    <MenuItem onClick={handleAddFourStemTrack}>\n                        4 Stem Track\n                    </MenuItem>\n                    <MenuItem onClick={handleAddFiveStemTrack}>\n                        5 Stem Track\n                    </MenuItem>\n                </Menu>\n            </React.Fragment>\n        );\n\n        return rows;\n    })();\n\n    const handleSubmit = () => {\n        if (hasError) {\n            return;\n        }\n\n        props.onSubmit?.(trackList);\n    };\n\n    return (\n        <>\n            <DialogContent>\n                <Typography variant=\"body2\" variantMapping={{ body2: \"div\" }}>\n                    <Box>Add URLs for the audio track this song.</Box>\n                    <Box>\n                        This can be your own hosted files, or Youtube, etc.\n                    </Box>\n                </Typography>\n                <Typography variant=\"body2\" variantMapping={{ body2: \"div\" }}>\n                    <Box>\n                        This player works best if every track is a version of\n                        the same song,\n                    </Box>\n                    <Box>\n                        e.g. the original recording, just the accompaniment,\n                        only drums + bass.\n                    </Box>\n                </Typography>\n                <Divider />\n                {trackListInputs}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose}>Cancel</Button>\n                <Button disabled={hasError} onClick={handleSubmit}>\n                    OK\n                </Button>\n            </DialogActions>\n        </>\n    );\n};\n\nexport default TrackListEditDialog;\n","import { Either, left, right } from \"fp-ts/lib/Either\";\nimport { Record } from \"immutable\";\n\nexport type ABLoopMode = \"loop\" | \"rewind\" | \"disabled\";\n\ntype DefaultPointB = {\n    type: \"defaultLength\";\n    loopLength: 5;\n};\n\ntype CustomPointB = {\n    type: \"custom\";\n    time: number | null;\n};\n\ntype ABLoopRecordType = {\n    timeA: number | null;\n    timeB: DefaultPointB | CustomPointB;\n    mode: ABLoopMode;\n};\n\nconst DefaultRecord: ABLoopRecordType = {\n    timeA: null,\n    timeB: { type: \"custom\", time: null },\n    mode: \"disabled\",\n};\n\nconst RecordConstructor = Record(DefaultRecord);\ntype ABLoopRecord = ReturnType<typeof RecordConstructor>;\n\nexport class ABLoop {\n    readonly record: ABLoopRecord;\n\n    static empty(): ABLoop {\n        return new ABLoop(RecordConstructor(DefaultRecord));\n    }\n\n    constructor(record: ABLoopRecord) {\n        this.record = record;\n    }\n\n    get timeA(): number | null {\n        return this.record.timeA;\n    }\n\n    get timeB(): number | null {\n        if (this.record.timeB.type === \"custom\") {\n            return this.record.timeB.time;\n        }\n\n        const timeA = this.timeA;\n        if (timeA === null) {\n            return null;\n        }\n\n        return timeA + this.record.timeB.loopLength;\n    }\n\n    get mode(): ABLoopMode {\n        return this.record.mode;\n    }\n\n    private setAWithoutCheck(newTimeA: number | null): ABLoop {\n        const newRecord = this.record.set(\"timeA\", newTimeA);\n        return new ABLoop(newRecord);\n    }\n\n    setA(newTimeA: number | null): Either<Error, ABLoop> {\n        const newLoop = this.setAWithoutCheck(newTimeA);\n        if (newLoop.isInvalid()) {\n            return left(new Error(\"Point A must be before Point B\"));\n        }\n\n        return right(newLoop);\n    }\n\n    clearA(): ABLoop {\n        return this.setAWithoutCheck(null);\n    }\n\n    private setBWithoutCheck(newTimeB: number | null): ABLoop {\n        const newRecord = this.record.set(\"timeB\", {\n            type: \"custom\",\n            time: newTimeB,\n        });\n        return new ABLoop(newRecord);\n    }\n\n    setB(newTimeB: number | null): Either<Error, ABLoop> {\n        const newLoop = this.setBWithoutCheck(newTimeB);\n        if (newLoop.isInvalid()) {\n            return left(new Error(\"Point B must be after Point A\"));\n        }\n\n        return right(newLoop);\n    }\n\n    clearB(): ABLoop {\n        return this.setBWithoutCheck(null);\n    }\n\n    setDefaultLoop(): ABLoop {\n        const newRecord = this.record.set(\"timeB\", {\n            type: \"defaultLength\",\n            loopLength: 5,\n        });\n        return new ABLoop(newRecord);\n    }\n\n    isDefaultLoop(): boolean {\n        return this.record.timeB.type === \"defaultLength\";\n    }\n\n    setMode(newMode: ABLoopMode): ABLoop {\n        const newRecord = this.record.set(\"mode\", newMode);\n        return new ABLoop(newRecord);\n    }\n\n    isSet(): this is this & { timeA: number } & { timeB: number } {\n        return this.timeA !== null && this.timeB !== null;\n    }\n\n    isInvalid(): boolean {\n        if (!this.isSet()) {\n            return false;\n        }\n\n        return this.timeA >= this.timeB;\n    }\n\n    isPlayable(): boolean {\n        return this.isSet() && !this.isInvalid();\n    }\n\n    isOutsideLoop(timestamp: number): boolean {\n        if (!this.isSet()) {\n            return false;\n        }\n\n        return timestamp < this.timeA || timestamp >= this.timeB;\n    }\n}\n","import { TimestampedSection } from \"common/ChordModel/ChordLine\";\nimport { noopFn, PlainFn } from \"common/PlainFn\";\nimport { PlayerSectionContext } from \"components/PlayerSectionContext\";\nimport { PlayerTimeContext } from \"components/PlayerTimeContext\";\nimport { ABLoop } from \"components/track_player/internal_player/ABLoop\";\nimport { List } from \"immutable\";\nimport {\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo,\n    useRef,\n    useState\n} from \"react\";\nimport ReactPlayer from \"react-player\";\nimport FilePlayer from \"react-player/file\";\nimport YouTubePlayer from \"react-player/youtube\";\n\nexport interface ButtonActionAndState {\n    action: PlainFn;\n    enabled: boolean;\n}\n\nexport interface ABLoopControl {\n    abLoop: ABLoop;\n    onChange: (newABLoop: ABLoop) => void;\n}\n\nexport interface TempoControl {\n    percentage: number;\n    onChange: (val: number) => void;\n}\n\nexport interface TransportActions {\n    togglePlay: PlainFn;\n    jumpBack: PlainFn;\n    jumpForward: PlainFn;\n    goToBeginning: PlainFn;\n    skipBack: ButtonActionAndState;\n    skipForward: ButtonActionAndState;\n}\n\nexport interface PlayerControls {\n    playerRef: React.MutableRefObject<ReactPlayer | FilePlayer | undefined>;\n    playing: boolean;\n    transport: TransportActions;\n    getCurrentTime: () => number;\n    onProgress: (state: {\n        played: number;\n        playedSeconds: number;\n        loaded: number;\n        loadedSeconds: number;\n    }) => void;\n    onPlay: PlainFn;\n    onPause: PlainFn;\n    tempo: TempoControl;\n    abLoop: ABLoopControl;\n}\n\nclass NoopMutableRef {\n    _current: ReactPlayer | FilePlayer | undefined;\n\n    constructor() {\n        this._current = undefined;\n    }\n\n    public set current(newCurrent: ReactPlayer | FilePlayer | undefined) {}\n\n    public get current(): ReactPlayer | FilePlayer | undefined {\n        return undefined;\n    }\n}\n\nexport const unfocusedControls: PlayerControls = {\n    playerRef: new NoopMutableRef(),\n    playing: false,\n    transport: {\n        togglePlay: noopFn,\n        jumpBack: noopFn,\n        jumpForward: noopFn,\n        goToBeginning: noopFn,\n        skipBack: {\n            action: noopFn,\n            enabled: false,\n        },\n        skipForward: {\n            action: noopFn,\n            enabled: false,\n        },\n    },\n    getCurrentTime: () => 0,\n    onProgress: noopFn,\n    onPlay: noopFn,\n    onPause: noopFn,\n    tempo: {\n        percentage: 100,\n        onChange: noopFn,\n    },\n    abLoop: {\n        abLoop: ABLoop.empty(),\n        onChange: noopFn,\n    },\n};\n\nconst getSection = (\n    timestampedSections: List<TimestampedSection>,\n    index: number\n): TimestampedSection => {\n    const section = timestampedSections.get(index);\n    if (section === undefined) {\n        throw new Error(\"Section index is out of range, unexpected\");\n    }\n\n    return section;\n};\n\nexport const usePlayerControls = (\n    timestampedSections: List<TimestampedSection>\n): PlayerControls => {\n    const [playing, setPlaying] = useState(false);\n    const currentTimeRef = useRef<number>(0);\n    const [abLoop, setABLoop] = useState<ABLoop>(ABLoop.empty());\n    const playerRef = useRef<ReactPlayer | FilePlayer>();\n    const [tempoPercentage, setTempoPercentage] = useState(100);\n    const currentSectionItem = useContext(PlayerSectionContext);\n\n    const jumpInterval = 5; // seconds\n\n    const skipBackBuffer = 2; // seconds;\n    const skipForwardBuffer = 2; // seconds;\n\n    // the amount to skip to before the section - helps not drop the user right on the down beat\n    const skipLeadIn = 1; // seconds;\n\n    const getCurrentTime = useCallback(() => currentTimeRef.current, []);\n\n    {\n        const getPlayerTimeRef = useContext(PlayerTimeContext);\n\n        useEffect(() => {\n            getPlayerTimeRef.current = getCurrentTime;\n        }, [getPlayerTimeRef, getCurrentTime]);\n    }\n\n    const seekTo = useCallback((time: number) => {\n        if (time < 0) {\n            time = 0;\n        }\n\n        playerRef.current?.seekTo(time, \"seconds\");\n    }, []);\n\n    const handlePlayState = useCallback(() => {\n        setPlaying(true);\n    }, [setPlaying]);\n\n    const handlePauseState = useCallback(() => {\n        setPlaying(false);\n    }, [setPlaying]);\n\n    const outOfSyncWorkaround = useCallback(\n        (nextSeekTime?: number) => {\n            const currentURL = playerRef.current?.props.url;\n            const applyWorkaround =\n                typeof currentURL === \"string\" &&\n                YouTubePlayer.canPlay(currentURL);\n\n            if (applyWorkaround) {\n                // this is pretty unpleasant, but on certain videos, React Player can run into a race condition where\n                // it doesn't respond to playing=true/false, so the play and pause button doesn't actually affect the track\n                // this can be repro'd inconsistently by quickly toggling play/pause several times, or jump back, then pause in the compact player\n                //\n                // attempt at throttling didn't work, the wonkiness can occur even at 5 seconds of throttling depending on the course of events\n                // one observation is that this wonky state can be reset out of by performing a seek after it gets into this state\n                // however, it can't be too soon, hence the set timeout\n                // and also we would want to seek to the time of the most updated time, not the one during the current render, hence the use of ref\n                setTimeout(() => {\n                    const seekTime = nextSeekTime ?? currentTimeRef.current;\n                    seekTo(seekTime);\n                }, 200);\n            }\n        },\n        [seekTo]\n    );\n\n    const pauseAction = useCallback(\n        (nextSeekTime?: number) => {\n            setPlaying(false);\n            outOfSyncWorkaround(nextSeekTime);\n        },\n        [setPlaying, outOfSyncWorkaround]\n    );\n\n    const playAction = useCallback(() => {\n        setPlaying(true);\n    }, [setPlaying]);\n\n    const togglePlayAction = useCallback(() => {\n        if (playing) {\n            pauseAction();\n        } else {\n            playAction();\n        }\n    }, [playAction, pauseAction, playing]);\n\n    const jumpBackAction = useCallback(() => {\n        let newTime = currentTimeRef.current - jumpInterval;\n        if (newTime < 0) {\n            newTime = 0;\n        }\n\n        seekTo(newTime);\n    }, [seekTo]);\n\n    const jumpForwardAction = useCallback(() => {\n        const newTime = currentTimeRef.current + jumpInterval;\n        seekTo(newTime);\n    }, [seekTo]);\n\n    const goToBeginningAction = useCallback(() => {\n        seekTo(0);\n    }, [seekTo]);\n\n    const skipBackButtonAction = useCallback(() => {\n        if (currentSectionItem === null) {\n            return;\n        }\n\n        const previousSection: TimestampedSection | null = (() => {\n            if (currentSectionItem === null || currentSectionItem.index === 0) {\n                return null;\n            }\n\n            return getSection(\n                timestampedSections,\n                currentSectionItem.index - 1\n            );\n        })();\n\n        if (\n            previousSection !== null &&\n            currentTimeRef.current <=\n                currentSectionItem.timestampedSection.time + skipBackBuffer\n        ) {\n            seekTo(previousSection.time - skipLeadIn);\n            return;\n        }\n\n        seekTo(currentSectionItem.timestampedSection.time - skipLeadIn);\n    }, [currentSectionItem, seekTo, timestampedSections]);\n\n    const skipBackButton: ButtonActionAndState = useMemo(\n        () => ({\n            action: skipBackButtonAction,\n            enabled: currentSectionItem !== null,\n        }),\n        [skipBackButtonAction, currentSectionItem]\n    );\n\n    const skipForwardButton: ButtonActionAndState = useMemo(() => {\n        const findNextSectionIndex = (\n            sectionIndex: number | null\n        ): number | null => {\n            if (timestampedSections.size === 0) {\n                return null;\n            }\n\n            if (sectionIndex === null) {\n                return 0;\n            }\n\n            if (sectionIndex === timestampedSections.size - 1) {\n                return null;\n            }\n\n            return sectionIndex + 1;\n        };\n\n        const currentSectionIndex =\n            currentSectionItem !== null ? currentSectionItem.index : null;\n        const nextSectionIndex = findNextSectionIndex(currentSectionIndex);\n\n        // determine what the actual next section is - it could be the next one or next next one depending on the buffer\n        const nextSectionToSkipTo: TimestampedSection | null = (() => {\n            if (nextSectionIndex === null) {\n                return null;\n            }\n\n            const nextSection = getSection(\n                timestampedSections,\n                nextSectionIndex\n            );\n\n            // we could return section (n + 1) or section (n + 2)\n            // the idea is that, e.g. the user is at 1:05 but the next section is at 1:06, and next next section is 1:30\n            // then the user actually wants to go to 1:30 by skipping forward\n            if (currentTimeRef.current < nextSection.time - skipForwardBuffer) {\n                return nextSection;\n            }\n\n            const nextNextSectionIndex = findNextSectionIndex(nextSectionIndex);\n            if (nextNextSectionIndex === null) {\n                return null;\n            }\n\n            return getSection(timestampedSections, nextNextSectionIndex);\n        })();\n\n        return {\n            action: () => {\n                if (nextSectionToSkipTo !== null) {\n                    seekTo(nextSectionToSkipTo.time - skipLeadIn);\n                }\n            },\n            enabled: nextSectionToSkipTo !== null,\n        };\n    }, [currentSectionItem, seekTo, timestampedSections]);\n\n    const handleABLoop = useCallback(\n        (playedSeconds: number) => {\n            if (abLoop.mode === \"disabled\") {\n                return;\n            }\n\n            if (!abLoop.isSet()) {\n                return;\n            }\n\n            if (!abLoop.isPlayable()) {\n                return;\n            }\n\n            if (!abLoop.isOutsideLoop(playedSeconds)) {\n                return;\n            }\n\n            switch (abLoop.mode) {\n                case \"loop\": {\n                    seekTo(abLoop.timeA);\n                    return;\n                }\n\n                case \"rewind\": {\n                    seekTo(abLoop.timeA);\n                    pauseAction(abLoop.timeA);\n                    return;\n                }\n            }\n        },\n        [abLoop, pauseAction, seekTo]\n    );\n\n    const tempoControl = useMemo(\n        () => ({\n            percentage: tempoPercentage,\n            onChange: setTempoPercentage,\n        }),\n        [tempoPercentage, setTempoPercentage]\n    );\n\n    const abLoopControl = useMemo(\n        () => ({\n            abLoop: abLoop,\n            onChange: setABLoop,\n        }),\n        [abLoop, setABLoop]\n    );\n\n    const handleProgress = useCallback(\n        (state: {\n            played: number;\n            playedSeconds: number;\n            loaded: number;\n            loadedSeconds: number;\n        }) => {\n            currentTimeRef.current = state.playedSeconds;\n            handleABLoop(state.playedSeconds);\n        },\n        [handleABLoop]\n    );\n\n    const transportActions: TransportActions = useMemo(\n        () => ({\n            togglePlay: togglePlayAction,\n            skipBack: skipBackButton,\n            skipForward: skipForwardButton,\n            jumpBack: jumpBackAction,\n            jumpForward: jumpForwardAction,\n            goToBeginning: goToBeginningAction,\n        }),\n        [\n            togglePlayAction,\n            skipBackButton,\n            skipForwardButton,\n            jumpBackAction,\n            jumpForwardAction,\n            goToBeginningAction,\n        ]\n    );\n\n    const playerControls: PlayerControls = useMemo(\n        () => ({\n            playerRef: playerRef,\n            playing: playing,\n            getCurrentTime: getCurrentTime,\n            onProgress: handleProgress,\n            onPlay: handlePlayState,\n            onPause: handlePauseState,\n            transport: transportActions,\n            tempo: tempoControl,\n            abLoop: abLoopControl,\n        }),\n        [\n            playing,\n            getCurrentTime,\n            handleProgress,\n            handlePlayState,\n            handlePauseState,\n            transportActions,\n            tempoControl,\n            abLoopControl,\n        ]\n    );\n\n    return playerControls;\n};\n","import JumpForwardIcon from \"@mui/icons-material/FastForward\";\nimport JumpBackIcon from \"@mui/icons-material/FastRewind\";\nimport PauseIcon from \"@mui/icons-material/Pause\";\nimport PlayIcon from \"@mui/icons-material/PlayArrow\";\nimport RadioIcon from \"@mui/icons-material/Radio\";\nimport { Button, Slide, Theme, Tooltip } from \"@mui/material\";\nimport { SystemStyleObject } from \"@mui/system\";\nimport { PlainFn } from \"common/PlainFn\";\nimport { MUIStyledProps } from \"common/styledProps\";\nimport { useRegisterTopKeyListener } from \"components/GlobalKeyListener\";\nimport {\n    roundedTopCornersStyle,\n    withBottomRightBox,\n} from \"components/track_player/common\";\nimport React, { useEffect, useState } from \"react\";\n\ninterface MicroPlayerProps extends MUIStyledProps {\n    show: boolean;\n    playersLoaded: boolean;\n    disabled?: boolean;\n    tooltipMessage: string;\n    playing: boolean;\n    togglePlay: PlainFn;\n    jumpBack: PlainFn;\n    jumpForward: PlainFn;\n    onClick: () => void;\n    sx?: SystemStyleObject<Theme>;\n}\n\nconst MicroPlayer: React.FC<MicroPlayerProps> = (\n    props: MicroPlayerProps\n): JSX.Element => {\n    const [addTopKeyListener, removeKeyListener] = useRegisterTopKeyListener();\n    const [tempJumpIcon, setTempJumpIcon] = useState<\"back\" | \"forward\" | null>(\n        null\n    );\n\n    {\n        const { show, onClick, togglePlay, jumpBack, jumpForward } = props;\n\n        useEffect(() => {\n            if (!show) {\n                return;\n            }\n\n            const handleKey = (event: KeyboardEvent) => {\n                if (event.code === \"Slash\") {\n                    onClick();\n                    event.preventDefault();\n                }\n\n                // make this only happen when CTRL/CMD is pressed\n                // don't want to just fire sporadically without\n                // visual feedback\n                if (!event.ctrlKey && !event.metaKey) {\n                    return;\n                }\n\n                switch (event.code) {\n                    // because space doesn't work because FUCK MACOS\n                    case \"Enter\":\n                    case \"Space\": {\n                        togglePlay();\n                        event.preventDefault();\n                        break;\n                    }\n\n                    case \"ArrowLeft\": {\n                        jumpBack();\n                        setTempJumpIcon(\"back\");\n                        event.preventDefault();\n                        break;\n                    }\n\n                    case \"ArrowRight\": {\n                        jumpForward();\n                        setTempJumpIcon(\"forward\");\n                        event.preventDefault();\n                        break;\n                    }\n                }\n            };\n\n            addTopKeyListener(handleKey);\n            return () => removeKeyListener(handleKey);\n        }, [\n            addTopKeyListener,\n            removeKeyListener,\n            show,\n            onClick,\n            togglePlay,\n            jumpBack,\n            jumpForward,\n            setTempJumpIcon,\n        ]);\n    }\n\n    useEffect(() => {\n        if (tempJumpIcon === null) {\n            return;\n        }\n\n        setTimeout(() => setTempJumpIcon(null), 1000);\n    }, [tempJumpIcon, setTempJumpIcon]);\n\n    const icon: React.ReactElement = (() => {\n        if (!props.playersLoaded) {\n            return <RadioIcon />;\n        }\n\n        if (tempJumpIcon === \"back\") {\n            return <JumpBackIcon />;\n        }\n\n        if (tempJumpIcon === \"forward\") {\n            return <JumpForwardIcon />;\n        }\n\n        if (!props.playing) {\n            return <PauseIcon sx={{ color: \"secondary.main\" }} />;\n        }\n\n        return <PlayIcon sx={{ color: \"primary.main\" }} />;\n    })();\n\n    return (\n        <Slide in={props.show} direction=\"up\">\n            {withBottomRightBox(\n                // span inserted to workaround disabled elements with tooltip\n                // https://material-ui.com/components/tooltips/#disabled-elements\n                <Tooltip title={props.tooltipMessage}>\n                    <span>\n                        <Button\n                            className={props.className}\n                            onClick={props.onClick}\n                            disabled={props.disabled}\n                            sx={(theme: Theme) => ({\n                                ...roundedTopCornersStyle(theme),\n                                ...props.sx,\n                            })}\n                        >\n                            {icon}\n                        </Button>\n                    </span>\n                </Tooltip>\n            )}\n        </Slide>\n    );\n};\n\nexport default React.memo(MicroPlayer);\n","import { PlayerControls } from \"components/track_player/internal_player/usePlayerControls\";\nimport { ReactEventHandler } from \"react\";\nimport { ReactPlayerProps } from \"react-player\";\nimport { BaseReactPlayerProps } from \"react-player/base\";\nimport { FilePlayerProps } from \"react-player/file\";\n\nconst makeBasePlayerProps = (\n    playerControls: PlayerControls\n): BaseReactPlayerProps => {\n    return {\n        ref: playerControls.playerRef,\n        playing: playerControls.playing,\n        controls: true,\n        playbackRate: playerControls.tempo.percentage / 100,\n        onPlay: playerControls.onPlay,\n        onPause: playerControls.onPause,\n        onProgress: playerControls.onProgress,\n        progressInterval: 500,\n        height: \"auto\",\n        width: \"unset\",\n        onKeyUp: (event: KeyboardEvent) => event.preventDefault(),\n    };\n};\n\nconst filePlayerStyle = { width: \"100%\", height: \"revert\" };\n\nexport const makeFilePlayerProps = (\n    playerControls: PlayerControls,\n    masterVolumePercentage: number,\n    onVolumeChange?: ReactEventHandler<HTMLAudioElement>\n): FilePlayerProps => {\n    const attributes = {\n        onVolumeChange: onVolumeChange,\n        style: filePlayerStyle,\n    };\n\n    const basePlayerProps = makeBasePlayerProps(playerControls);\n\n    return {\n        ...basePlayerProps,\n        volume: masterVolumePercentage / 100,\n        config: {\n            forceAudio: true,\n            attributes: attributes,\n        },\n    };\n};\n\nexport const makeReactPlayerProps = (\n    playerControls: PlayerControls\n): ReactPlayerProps => {\n    const basePlayerProps = makeBasePlayerProps(playerControls);\n\n    return {\n        ...basePlayerProps,\n        config: {\n            file: {\n                forceAudio: true,\n                attributes: {\n                    style: filePlayerStyle,\n                },\n            },\n        },\n    };\n};\n","import { Box } from \"@mui/material\";\nimport { SingleTrack } from \"common/ChordModel/tracks/SingleTrack\";\nimport ControlPane from \"components/track_player/internal_player/ControlPane\";\nimport { ensureGoogleDriveCacheBusted } from \"components/track_player/internal_player/google_drive\";\nimport { makeReactPlayerProps } from \"components/track_player/internal_player/reactPlayerProps\";\nimport { PlayerControls } from \"components/track_player/internal_player/usePlayerControls\";\nimport React, { useEffect, useMemo } from \"react\";\nimport ReactPlayer, { ReactPlayerProps } from \"react-player\";\nimport shortid from \"shortid\";\n\ninterface SingleTrackPlayerProps {\n    focused: boolean;\n    isCurrentTrack: boolean;\n    playerControls: PlayerControls;\n    track: SingleTrack;\n}\n\nconst SingleTrackPlayer: React.FC<SingleTrackPlayerProps> = (\n    props: SingleTrackPlayerProps\n): JSX.Element => {\n    const trackURL: string = useMemo(\n        () => ensureGoogleDriveCacheBusted(props.track.url, shortid.generate()),\n        [props.track.url]\n    );\n\n    const reactPlayerProps: ReactPlayerProps = makeReactPlayerProps(\n        props.playerControls\n    );\n\n    useEffect(() => {\n        if (!props.isCurrentTrack && props.playerControls.playing) {\n            props.playerControls.onPause();\n        }\n    }, [props.isCurrentTrack, props.playerControls]);\n\n    return (\n        <Box>\n            <Box>\n                <ReactPlayer {...reactPlayerProps} url={trackURL} />\n            </Box>\n            <ControlPane\n                show={props.focused}\n                playing={props.playerControls.playing}\n                transport={props.playerControls.transport}\n                tempo={props.playerControls.tempo}\n                abLoop={props.playerControls.abLoop}\n            />\n        </Box>\n    );\n};\n\nexport default SingleTrackPlayer;\n","let audioCtx: AudioContext | null = null;\n\nexport const getAudioCtx = (): AudioContext => {\n    if (audioCtx === null) {\n        audioCtx = new window.AudioContext();\n    }\n\n    return audioCtx;\n};\n","import { Box } from \"@mui/material\";\nimport audioBufferToWav from \"audiobuffer-to-wav\";\nimport { PlainFn } from \"common/PlainFn\";\nimport ControlPane from \"components/track_player/internal_player/ControlPane\";\nimport { makeFilePlayerProps } from \"components/track_player/internal_player/reactPlayerProps\";\nimport { getAudioCtx } from \"components/track_player/internal_player/stem/audioCtx\";\nimport StemTrackControlPane, {\n    ControlPaneButtonColour,\n    StemControl,\n} from \"components/track_player/internal_player/stem/StemTrackControlPane\";\nimport { PlayerControls } from \"components/track_player/internal_player/usePlayerControls\";\nimport lodash from \"lodash\";\nimport { useSnackbar } from \"notistack\";\nimport React, {\n    ReactEventHandler,\n    SyntheticEvent,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from \"react\";\nimport FilePlayer from \"react-player/file\";\nimport * as Tone from \"tone\";\n\ninterface StemToneNodes<StemKey extends string> {\n    label: StemKey;\n    playerNode: Tone.GrainPlayer;\n    volumeNode: Tone.Volume;\n    endNode: Tone.Volume;\n}\n\ninterface StemState<StemKey extends string> {\n    key: StemKey;\n    muted: boolean;\n    volumePercentage: number;\n}\n\ntype ToneNodes<StemKey extends string> = StemToneNodes<StemKey>[];\n\ntype PlayerState<StemKey extends string> = {\n    masterVolumePercentage: number;\n    masterPitchShift: number;\n    stems: StemState<StemKey>[];\n};\n\nexport interface StemInput<StemKey extends string> {\n    label: StemKey;\n    buttonColour: ControlPaneButtonColour;\n    audioBuffer: AudioBuffer;\n}\n\ninterface LoadedStemTrackPlayerProps<StemKey extends string> {\n    focused: boolean;\n    currentTrack: boolean;\n    stems: StemInput<StemKey>[];\n    playerControls: PlayerControls;\n    refreshTrackFn: PlainFn;\n}\n\nconst createToneNodes = <StemKey extends string>(\n    stem: StemInput<StemKey>\n): StemToneNodes<StemKey> => {\n    const volumeNode = new Tone.Volume();\n\n    const playerNode = new Tone.GrainPlayer({\n        url: stem.audioBuffer,\n        grainSize: 0.1,\n        overlap: 0.1,\n    });\n\n    playerNode.chain(volumeNode);\n\n    return {\n        label: stem.label,\n        volumeNode: volumeNode,\n        playerNode: playerNode,\n        endNode: volumeNode,\n    };\n};\n\nconst createEmptySongURL = (time: number): string => {\n    const audioCtx = getAudioCtx();\n    const audioBuffer = audioCtx.createBuffer(\n        2,\n        audioCtx.sampleRate * time,\n        audioCtx.sampleRate\n    );\n\n    const arrayBuffer = audioBufferToWav(audioBuffer);\n    const blob = new window.Blob([arrayBuffer]);\n    const songURL = URL.createObjectURL(blob);\n    return songURL;\n};\n\nconst LoadedStemTrackPlayer = <StemKey extends string>(\n    props: LoadedStemTrackPlayerProps<StemKey>\n): JSX.Element => {\n    const { enqueueSnackbar } = useSnackbar();\n\n    const toneNodes: ToneNodes<StemKey> = useMemo(\n        () => props.stems.map(createToneNodes),\n        [props.stems]\n    );\n\n    const initialPlayerState: PlayerState<StemKey> = (() => {\n        const stemStates: StemState<StemKey>[] = props.stems.map(\n            (stem: StemInput<StemKey>) => {\n                return {\n                    key: stem.label,\n                    muted: false,\n                    volumePercentage: 100,\n                };\n            }\n        );\n\n        return {\n            masterVolumePercentage: 100,\n            masterPitchShift: 0,\n            stems: stemStates,\n        };\n    })();\n\n    const [playerState, setPlayerState] =\n        useState<PlayerState<StemKey>>(initialPlayerState);\n\n    const playerStateRef = useRef(playerState);\n    playerStateRef.current = playerState;\n\n    const silentURL: string = useMemo(() => {\n        if (props.stems.length === 0) {\n            return \"\";\n        }\n\n        return createEmptySongURL(props.stems[0].audioBuffer.duration);\n    }, [props.stems]);\n\n    const handleMasterVolumeChange: ReactEventHandler<HTMLAudioElement> = (\n        event: SyntheticEvent<HTMLAudioElement>\n    ) => {\n        // need to use ref, seems like changing this doesn't cause a rerender in react player\n        const newPlayerState = lodash.cloneDeep(playerStateRef.current);\n        newPlayerState.masterVolumePercentage =\n            event.currentTarget.volume * 100;\n        setPlayerState(newPlayerState);\n    };\n\n    const filePlayerProps = makeFilePlayerProps(\n        props.playerControls,\n        playerState.masterVolumePercentage,\n        handleMasterVolumeChange\n    );\n\n    const refreshTrackFn = props.refreshTrackFn;\n\n    // check the integrity of the loaded tracks - they should all be the same length\n    // otherwise there could be a loading error\n    useEffect(() => {\n        let minDuration: number | null = null;\n        let maxDuration: number | null = null;\n\n        for (const stem of props.stems) {\n            const buffer = stem.audioBuffer;\n            if (minDuration === null || buffer.duration < minDuration) {\n                minDuration = buffer.duration;\n            }\n\n            if (maxDuration === null || buffer.duration > maxDuration) {\n                maxDuration = buffer.duration;\n            }\n        }\n\n        if (maxDuration === null || minDuration === null) {\n            return;\n        }\n\n        if (maxDuration - minDuration > 1) {\n            refreshTrackFn();\n        }\n    }, [enqueueSnackbar, props.stems, refreshTrackFn]);\n\n    // synchronize the playing state\n    useEffect(() => {\n        if (\n            props.playerControls.playing &&\n            Tone.Transport.state !== \"started\"\n        ) {\n            Tone.Transport.start();\n        } else if (\n            !props.playerControls.playing &&\n            Tone.Transport.state !== \"paused\" &&\n            Tone.Transport.state !== \"stopped\"\n        ) {\n            Tone.Transport.pause();\n        }\n    }, [props.playerControls.playing]);\n\n    const { tempo, getCurrentTime } = props.playerControls;\n    // synchronize time\n    useEffect(() => {\n        const synchronizeTime = () => {\n            const tempoValue = tempo.percentage / 100;\n\n            // Tone transport doesn't observe slowed down time, only each individual node plays the sound back slower\n            // e.g. if a 10s clip is played at 50% speed, then Tone transport will finish playing it from 0s to 20s\n            // so to compare player time and Tone transport time, it needs to be scaled against the tempo\n            const adjustedToneTime = Tone.Transport.seconds * tempoValue;\n\n            const currentTime = getCurrentTime();\n\n            if (Math.abs(currentTime - adjustedToneTime) > 1) {\n                Tone.Transport.seconds = currentTime / tempoValue;\n            }\n        };\n\n        const intervalID = setInterval(synchronizeTime, 250);\n        return () => clearInterval(intervalID);\n    }, [getCurrentTime, tempo.percentage]);\n\n    // synchronize player state and track volumes/mutedness\n    useEffect(() => {\n        playerState.stems.forEach(\n            (stemState: StemState<StemKey>, stemIndex: number) => {\n                const node = toneNodes[stemIndex];\n\n                const stemVolume =\n                    (stemState.volumePercentage / 100) *\n                    (playerState.masterVolumePercentage / 100);\n\n                // don't set if fraction is 0, log of 0 is undefined\n                if (stemVolume > 0) {\n                    const stemVolumeDecibels = 20 * Math.log10(stemVolume);\n                    node.volumeNode.volume.value = stemVolumeDecibels;\n                }\n\n                // mute needs to be set last because it can be overrided by volume\n                node.endNode.mute = stemState.muted || stemVolume === 0;\n\n                node.playerNode.playbackRate =\n                    props.playerControls.tempo.percentage / 100;\n            }\n        );\n    }, [toneNodes, playerState, props.playerControls.tempo.percentage]);\n\n    // synchronize player state and pitch shift\n    useEffect(() => {\n        playerState.stems.forEach(\n            (_stemState: StemState<StemKey>, stemIndex: number) => {\n                const node = toneNodes[stemIndex];\n\n                // a hard coded hack - drums don't sound good pitch shifted\n                // and also don't need to be harmonically in step with all the\n                // other tracks\n                const pitchShift = node.label !== \"drums\";\n                if (pitchShift) {\n                    node.playerNode.detune = playerState.masterPitchShift * 100;\n                }\n            }\n        );\n    }, [toneNodes, playerState]);\n\n    // connect and disconnect nodes from the transport when not in focus\n    // so that other tracks can use the transport\n    useEffect(() => {\n        if (props.currentTrack) {\n            toneNodes.forEach((toneNode: StemToneNodes<StemKey>) => {\n                toneNode.playerNode.sync().start(0);\n                toneNode.endNode.toDestination();\n            });\n\n            return () => {\n                toneNodes.forEach((toneNode: StemToneNodes<StemKey>) => {\n                    toneNode.playerNode.unsync();\n                    toneNode.endNode.disconnect();\n                });\n            };\n        }\n    }, [props.currentTrack, toneNodes]);\n\n    // pause the track when user switches to a different track\n    useEffect(() => {\n        if (!props.currentTrack && props.playerControls.playing) {\n            props.playerControls.onPause();\n        }\n    }, [props.currentTrack, props.playerControls]);\n\n    // cleanup buffer resources when this component goes out of scope\n    useEffect(() => {\n        return () => {\n            toneNodes.forEach((toneNode: StemToneNodes<StemKey>) => {\n                toneNode.volumeNode.dispose();\n                toneNode.playerNode.dispose();\n            });\n        };\n    }, [toneNodes]);\n\n    const makeStemControl = useCallback((\n        stemState: StemState<StemKey>,\n        stemIndex: number\n    ): StemControl<StemKey> => {\n        const buttonColour: ControlPaneButtonColour = (() => {\n            const stemInput = props.stems.find(\n                (value: StemInput<StemKey>) => value.label === stemState.key\n            );\n            if (stemInput === undefined) {\n                return \"white\";\n            }\n\n            return stemInput.buttonColour;\n        })();\n\n        return {\n            label: stemState.key,\n            buttonColour: buttonColour,\n            enabled: !stemState.muted,\n            onEnabledChanged: (enabled: boolean) => {\n                const newPlayerState = lodash.cloneDeep(playerState);\n                newPlayerState.stems[stemIndex].muted = !enabled;\n                setPlayerState(newPlayerState);\n            },\n            volume: stemState.volumePercentage,\n            onVolumeChanged: (newVolume: number) => {\n                const newPlayerState = lodash.cloneDeep(playerState);\n                newPlayerState.stems[stemIndex].volumePercentage = newVolume;\n                setPlayerState(newPlayerState);\n            },\n        };\n    }, [playerState, props.stems]);\n\n    const stemControls = useMemo(\n        () => playerState.stems.map(makeStemControl),\n        [playerState.stems, makeStemControl]\n    );\n\n    const stemControlPane = (\n        <StemTrackControlPane stemControls={stemControls} />\n    );\n\n    const handlePitchShift = useCallback(\n        (newPitchShift: number) => {\n            setPlayerState({\n                ...playerState,\n                masterPitchShift: newPitchShift,\n            });\n        },\n        [playerState, setPlayerState]\n    );\n\n    const transposeControl = useMemo(\n        () => ({\n            level: playerState.masterPitchShift,\n            onChange: handlePitchShift,\n        }),\n        [playerState, handlePitchShift]\n    );\n\n    return (\n        <Box>\n            <Box>\n                <FilePlayer {...filePlayerProps} url={silentURL} />\n            </Box>\n            {stemControlPane}\n            <ControlPane\n                show={props.focused}\n                playing={props.playerControls.playing}\n                transport={props.playerControls.transport}\n                tempo={props.playerControls.tempo}\n                abLoop={props.playerControls.abLoop}\n                transpose={transposeControl}\n            />\n        </Box>\n    );\n};\n\nexport default React.memo(LoadedStemTrackPlayer);\n","import RefreshIcon from \"@mui/icons-material/Refresh\";\nimport {\n    Box,\n    BoxProps,\n    Button,\n    LinearProgress,\n    styled,\n    Typography,\n} from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { parseRequestError, RequestError } from \"common/backend/errors\";\nimport { StemTrack } from \"common/ChordModel/tracks/StemTrack\";\nimport { DetailedLoadingFetchState } from \"common/fetch\";\nimport { mapObject } from \"common/mapObject\";\nimport { PlainFn } from \"common/PlainFn\";\nimport { getAudioCtx } from \"components/track_player/internal_player/stem/audioCtx\";\nimport LoadedStemTrackPlayer, {\n    StemInput,\n} from \"components/track_player/internal_player/stem/LoadedStemTrackPlayer\";\nimport { ControlPaneButtonColour } from \"components/track_player/internal_player/stem/StemTrackControlPane\";\nimport { PlayerControls } from \"components/track_player/internal_player/usePlayerControls\";\nimport { left } from \"fp-ts/lib/Either\";\nimport ky, { DownloadProgress } from \"ky\";\nimport lodash from \"lodash\";\nimport prettyBytes from \"pretty-bytes\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nconst PaddedBox = styled(Box)<BoxProps>(({ theme }) => ({\n    padding: theme.spacing(2),\n    backgroundColor: grey[100],\n}));\n\nexport interface StemButtonSpec<StemKey extends string> {\n    label: StemKey;\n    buttonColour: ControlPaneButtonColour;\n}\n\ninterface StemTrackPlayerProps<StemKey extends string> {\n    focused: boolean;\n    isCurrentTrack: boolean;\n\n    track: StemTrack<StemKey>;\n    buttonSpecs: StemButtonSpec<StemKey>[];\n\n    playerControls: PlayerControls;\n    refreshTrackFn: PlainFn;\n}\n\ninterface SingleLoadingProgress {\n    loadedBytes: number;\n    totalBytes: number | \"initial\" | \"unknown\";\n}\n\ntype FetchResult<StemKey extends string> = StemInput<StemKey>[];\ntype LoadingProgress<StemKey extends string> = Record<\n    StemKey,\n    SingleLoadingProgress\n>;\n\nconst StemTrackPlayer = <StemKey extends string>(\n    props: StemTrackPlayerProps<StemKey>\n): JSX.Element => {\n    const [fetchState, setFetchState] = useState<\n        DetailedLoadingFetchState<\n            FetchResult<StemKey>,\n            RequestError,\n            LoadingProgress<StemKey>\n        >\n    >({\n        state: \"not-started\",\n    });\n\n    const fetchStateRef = useRef(fetchState);\n    fetchStateRef.current = fetchState;\n\n    const fetchAudioBuffer = async (\n        url: string,\n        handleProgress: (progress: DownloadProgress) => void\n    ): Promise<AudioBuffer> => {\n        const response = await ky\n            .get(url, {\n                timeout: false,\n                onDownloadProgress: handleProgress,\n            })\n            .arrayBuffer();\n\n        return await getAudioCtx().decodeAudioData(response);\n    };\n\n    useEffect(() => {\n        type BufferKeyPair = {\n            audioBuffer: AudioBuffer;\n            stemKey: StemKey;\n        };\n\n        const fetchAudioBufferWithProgress = (\n            url: string,\n            stemKey: StemKey\n        ) => {\n            const handleProgress = (progress: DownloadProgress) => {\n                const currentFetchState = fetchStateRef.current;\n                if (currentFetchState.state !== \"loading\") {\n                    return;\n                }\n\n                const newFetchState = lodash.clone(currentFetchState);\n                newFetchState.details[stemKey].loadedBytes =\n                    progress.transferredBytes;\n                newFetchState.details[stemKey].totalBytes =\n                    progress.totalBytes !== 0 ? progress.totalBytes : \"unknown\";\n\n                setFetchState(newFetchState);\n            };\n\n            const audioBufferPromise = fetchAudioBuffer(url, handleProgress);\n\n            return audioBufferPromise.then((audioBuffer: AudioBuffer) => ({\n                audioBuffer: audioBuffer,\n                stemKey: stemKey,\n            }));\n        };\n\n        const loadPlayers = async () => {\n            try {\n                const audioBufferPromises: Promise<BufferKeyPair>[] = [];\n\n                let stemKey: StemKey;\n                for (stemKey in props.track.stem_urls) {\n                    const bufferPromise = fetchAudioBufferWithProgress(\n                        props.track.stem_urls[stemKey],\n                        stemKey\n                    );\n                    audioBufferPromises.push(bufferPromise);\n                }\n\n                const resolvedKeyBuffers = await Promise.all(\n                    audioBufferPromises\n                );\n\n                let encounteredError = false;\n                const stemInputs: StemInput<StemKey>[] = props.buttonSpecs.map(\n                    (buttonSpec: StemButtonSpec<StemKey>) => {\n                        const audioBufferSearch = resolvedKeyBuffers.find(\n                            (value: BufferKeyPair) =>\n                                value.stemKey === buttonSpec.label\n                        );\n\n                        let audioBuffer: AudioBuffer;\n                        if (audioBufferSearch === undefined) {\n                            encounteredError = true;\n\n                            audioBuffer = new AudioBuffer({\n                                length: 0,\n                                sampleRate: 1,\n                            });\n                        } else {\n                            audioBuffer = audioBufferSearch.audioBuffer;\n                        }\n\n                        return {\n                            label: buttonSpec.label,\n                            audioBuffer: audioBuffer,\n                            buttonColour: buttonSpec.buttonColour,\n                        };\n                    }\n                );\n\n                if (encounteredError) {\n                    setFetchState({\n                        state: \"error\",\n                        error: left(\n                            \"Could not find stem key in audio buffer array to object mapping\"\n                        ),\n                    });\n                    return;\n                }\n\n                setFetchState({\n                    state: \"loaded\",\n                    item: stemInputs,\n                });\n            } catch (e) {\n                setFetchState({\n                    state: \"error\",\n                    error: await parseRequestError(e),\n                });\n                return;\n            }\n        };\n\n        if (fetchState.state === \"not-started\") {\n            loadPlayers();\n            setFetchState({\n                state: \"loading\",\n                details: mapObject(\n                    props.track.keyObject(),\n                    (): SingleLoadingProgress => ({\n                        loadedBytes: 0,\n                        totalBytes: \"initial\",\n                    })\n                ),\n            });\n        }\n    }, [fetchState, setFetchState, props.track, props.buttonSpecs]);\n\n    if (fetchState.state === \"not-started\") {\n        return (\n            <PaddedBox>\n                <Typography variant=\"body1\">\n                    Tracks have not started loading...\n                </Typography>\n            </PaddedBox>\n        );\n    }\n\n    if (fetchState.state === \"loading\") {\n        const totalBytes: number | \"unknown\" | \"initial\" = (() => {\n            let total = 0;\n            let stemKey: StemKey;\n            for (stemKey in fetchState.details) {\n                const stemTotal = fetchState.details[stemKey].totalBytes;\n\n                switch (stemTotal) {\n                    case \"unknown\": {\n                        return \"unknown\";\n                    }\n\n                    case \"initial\": {\n                        return \"initial\";\n                    }\n\n                    default: {\n                        total += stemTotal;\n                        break;\n                    }\n                }\n            }\n            return total;\n        })();\n\n        const loadedBytes: number = (() => {\n            let loaded = 0;\n            let stemKey: StemKey;\n            for (stemKey in fetchState.details) {\n                loaded += fetchState.details[stemKey].loadedBytes;\n            }\n            return loaded;\n        })();\n\n        let formattedProgress = prettyBytes(loadedBytes);\n        if (totalBytes !== \"unknown\" && totalBytes !== \"initial\") {\n            formattedProgress += \"/\" + prettyBytes(totalBytes);\n        }\n\n        const progressBar = (() => {\n            if (totalBytes === \"unknown\") {\n                return <LinearProgress />;\n            }\n\n            const percent: number = (() => {\n                if (totalBytes === \"initial\") {\n                    // we don't know everything yet, just conservatively pretend it's out of 100MB\n                    // so the bar won't go backwards\n                    const pretendTotalBytes = 100 * 1000 * 1000;\n                    return (loadedBytes / pretendTotalBytes) * 100;\n                }\n\n                return (loadedBytes / totalBytes) * 100;\n            })();\n\n            return <LinearProgress variant=\"determinate\" value={percent} />;\n        })();\n\n        const label = (() => {\n            if (loadedBytes === totalBytes) {\n                return \"Processing track...\";\n            }\n\n            return \"Loading track...\";\n        })();\n\n        return (\n            <PaddedBox>\n                <Typography variant=\"body1\">\n                    {label}({formattedProgress})\n                </Typography>\n                {progressBar}\n            </PaddedBox>\n        );\n    }\n\n    if (fetchState.state === \"error\") {\n        console.error(fetchState.error);\n        const refresh = () => {\n            setFetchState({ state: \"not-started\" });\n        };\n\n        return (\n            <PaddedBox display=\"flex\" alignItems=\"center\">\n                <Button onClick={refresh}>\n                    <RefreshIcon />\n                </Button>\n                <Typography variant=\"body1\">Failed to load tracks</Typography>\n            </PaddedBox>\n        );\n    }\n\n    return (\n        <LoadedStemTrackPlayer\n            focused={props.focused}\n            currentTrack={props.isCurrentTrack}\n            stems={fetchState.item}\n            playerControls={props.playerControls}\n            refreshTrackFn={props.refreshTrackFn}\n        />\n    );\n};\n\nexport default StemTrackPlayer;\n","import { Box, LinearProgress, styled, Typography } from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { SplitStemTrack } from \"common/ChordModel/tracks/SplitStemRequest\";\nimport { PlainFn } from \"common/PlainFn\";\nimport React, { useEffect } from \"react\";\n\nconst PaddedBox = styled(Box)(({ theme }) => ({\n    padding: theme.spacing(2),\n    backgroundColor: grey[100],\n}));\n\nconst refreshInterval = 10000;\n\ninterface LoadingSplitStemTrackViewProps {\n    track: SplitStemTrack;\n    refreshTrackFn: PlainFn;\n}\n\nconst LoadingSplitStemTrackView: React.FC<LoadingSplitStemTrackViewProps> = (\n    props: LoadingSplitStemTrackViewProps\n): JSX.Element => {\n    useEffect(() => {\n        if (props.track.job_status === \"error\") {\n            return;\n        }\n\n        setTimeout(props.refreshTrackFn, refreshInterval);\n    }, [props]);\n\n    if (props.track.job_status === \"error\") {\n        console.error(props.track.job_status_debug_log);\n\n        const message = `An Error Occurred: ${props.track.job_status_message}`;\n        return (\n            <PaddedBox>\n                <Typography variant=\"body1\">{message}</Typography>\n                <LinearProgress\n                    variant=\"determinate\"\n                    value={props.track.job_progress}\n                    color=\"secondary\"\n                />\n            </PaddedBox>\n        );\n    }\n\n    return (\n        <PaddedBox>\n            <Typography variant=\"body1\">\n                {props.track.job_status_message}\n            </Typography>\n            <LinearProgress\n                variant=\"determinate\"\n                value={props.track.job_progress}\n            />\n        </PaddedBox>\n    );\n};\n\nexport default LoadingSplitStemTrackView;\n","import { SingleTrack, SingleTrackValidator } from \"common/ChordModel/tracks/SingleTrack\";\nimport { SplitStemTrack, SplitStemTrackValidator } from \"common/ChordModel/tracks/SplitStemRequest\";\nimport {\n    FiveStemTrack,\n    FiveStemTrackValidator,\n    FourStemTrack,\n    FourStemTrackValidator,\n    TwoStemTrack,\n    TwoStemTrackValidator\n} from \"common/ChordModel/tracks/StemTrack\";\nimport * as iots from \"io-ts\";\n\nexport const TrackValidator = iots.union([\n    SingleTrackValidator,\n    TwoStemTrackValidator,\n    FourStemTrackValidator,\n    FiveStemTrackValidator,\n    SplitStemTrackValidator,\n]);\n\nexport type Track =\n    | SingleTrack\n    | TwoStemTrack\n    | FourStemTrack\n    | FiveStemTrack\n    | SplitStemTrack;\n","import { SingleTrack } from \"common/ChordModel/tracks/SingleTrack\";\nimport { SplitStemTrack } from \"common/ChordModel/tracks/SplitStemRequest\";\nimport { FiveStemTrack, FourStemTrack, TwoStemTrack } from \"common/ChordModel/tracks/StemTrack\";\nimport { Track, TrackValidator } from \"common/ChordModel/tracks/Track\";\nimport { Either, isLeft, left, right } from \"fp-ts/lib/Either\";\nimport * as iots from \"io-ts\";\n\nconst TrackListValidator = iots.type({\n    song_id: iots.string,\n    tracks: iots.array(TrackValidator),\n});\n\ntype TrackListValidatedFields = iots.TypeOf<typeof TrackListValidator>;\nexport class TrackList implements TrackListValidatedFields {\n    readonly song_id: string;\n    readonly tracks: Track[];\n\n    constructor(songID: string, tracks: Track[]) {\n        this.song_id = songID;\n        this.tracks = tracks;\n    }\n\n    static fromValidatedFields(\n        validatedFields: TrackListValidatedFields\n    ): TrackList {\n        const deserializeTrack = (\n            validatedFields: iots.TypeOf<typeof TrackValidator>\n        ): Track => {\n            switch (validatedFields.track_type) {\n                case \"single\": {\n                    return SingleTrack.fromValidatedFields(validatedFields);\n                }\n\n                case \"2stems\": {\n                    return TwoStemTrack.fromValidatedFields(validatedFields);\n                }\n\n                case \"4stems\": {\n                    return FourStemTrack.fromValidatedFields(validatedFields);\n                }\n\n                case \"5stems\": {\n                    return FiveStemTrack.fromValidatedFields(validatedFields);\n                }\n\n                case \"split_2stems\":\n                case \"split_4stems\":\n                case \"split_5stems\": {\n                    return SplitStemTrack.fromValidatedFields(validatedFields);\n                }\n            }\n        };\n\n        const tracks: Track[] = validatedFields.tracks.map(deserializeTrack);\n        return new TrackList(validatedFields.song_id, tracks);\n    }\n\n    static fromJSONObject(jsonObj: unknown): Either<Error, TrackList> {\n        const validationResult = TrackListValidator.decode(jsonObj);\n\n        if (isLeft(validationResult)) {\n            return left(new Error(\"Invalid Chord Song object\"));\n        }\n\n        return right(this.fromValidatedFields(validationResult.right));\n    }\n}\n","import { RequestError } from \"common/backend/errors\";\nimport {\n    BackendResult,\n    getTrackList,\n    updateTrackList,\n} from \"common/backend/requests\";\nimport { TrackList } from \"common/ChordModel/tracks/TrackList\";\nimport { FetchState } from \"common/fetch\";\nimport { PlainFn } from \"common/PlainFn\";\nimport { isLeft, left } from \"fp-ts/lib/Either\";\nimport { useState } from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\n\ninterface LoadingTrackListState {\n    state: \"loading\";\n}\n\ninterface ErrorTrackListState {\n    state: \"error\";\n    error: RequestError;\n}\n\ninterface LoadedTrackListState {\n    state: \"loaded\";\n    tracklist: TrackList;\n}\n\nexport type TrackListLoad =\n    | LoadedTrackListState\n    | LoadingTrackListState\n    | ErrorTrackListState;\n\nexport type TrackListUpdateFn = (\n    tracklist: TrackList,\n    userAuthToken: string | null\n) => Promise<void>;\n\nconst refreshDebounceThreshold = 500;\n\nexport const useTracklistFetch = (\n    tracklistID: string\n): [TrackListLoad, PlainFn, TrackListUpdateFn] => {\n    const [fetchState, setFetchState] = useState<\n        FetchState<TrackList, RequestError>\n    >({\n        state: \"not-started\",\n    });\n\n    const refresh = useDebouncedCallback(\n        () => setFetchState({ state: \"not-started\" }),\n        refreshDebounceThreshold\n    );\n\n    const handleFetchedTracklist = (fetchResult: BackendResult) => {\n        if (isLeft(fetchResult)) {\n            setFetchState({ state: \"error\", error: fetchResult.left });\n            return;\n        }\n\n        const result = TrackList.fromJSONObject(fetchResult.right);\n        if (isLeft(result)) {\n            setFetchState({\n                state: \"error\",\n                error: left(\"Failed to deserialize payload to tracklist\"),\n            });\n            return;\n        }\n\n        setFetchState({ state: \"loaded\", item: result.right });\n    };\n\n    const fetchTrackList = async () => {\n        let fetchResult = await getTrackList(tracklistID);\n        handleFetchedTracklist(fetchResult);\n    };\n\n    const updateTracklist = async (\n        tracklist: TrackList,\n        userAuthToken: string | null\n    ) => {\n        if (userAuthToken === null) {\n            setFetchState({ state: \"loaded\", item: tracklist });\n            return;\n        }\n\n        const updateResult = await updateTrackList(tracklist, userAuthToken);\n        handleFetchedTracklist(updateResult);\n    };\n\n    switch (fetchState.state) {\n        case \"not-started\": {\n            setFetchState({ state: \"loading\" });\n            fetchTrackList();\n            return [{ state: \"loading\" }, refresh, updateTracklist];\n        }\n\n        case \"error\": {\n            return [\n                { state: \"error\", error: fetchState.error },\n                refresh,\n                updateTracklist,\n            ];\n        }\n\n        case \"loading\": {\n            return [{ state: \"loading\" }, refresh, updateTracklist];\n        }\n\n        case \"loaded\": {\n            return [\n                { state: \"loaded\", tracklist: fetchState.item },\n                refresh,\n                updateTracklist,\n            ];\n        }\n    }\n};\n","import { Collapse } from \"@mui/material\";\nimport {\n    FiveStemKeys,\n    FourStemKeys,\n    TwoStemKeys\n} from \"common/ChordModel/tracks/StemTrack\";\nimport { Track } from \"common/ChordModel/tracks/Track\";\nimport { PlainFn } from \"common/PlainFn\";\nimport OneTimeErrorNotification from \"components/display/OneTimeErrorNotification\";\nimport LoadingSpinner from \"components/loading/LoadingSpinner\";\nimport SingleTrackPlayer from \"components/track_player/internal_player/single/SingleTrackPlayer\";\nimport StemTrackPlayer, {\n    StemButtonSpec\n} from \"components/track_player/internal_player/stem/StemTrackPlayer\";\nimport { PlayerControls } from \"components/track_player/internal_player/usePlayerControls\";\nimport LoadingSplitStemTrackView from \"components/track_player/LoadingSplitStemTrackView\";\nimport { useTrackFetch } from \"components/track_player/providers/useTrackFetch\";\nimport React from \"react\";\n\ninterface TrackPlayerProps {\n    focused: boolean;\n    isCurrentTrack: boolean;\n    tracklistID: string;\n    trackID: string;\n    playerControls: PlayerControls;\n}\n\nconst TrackPlayer: React.FC<TrackPlayerProps> = (\n    props: TrackPlayerProps\n): JSX.Element => {\n    const [trackLoad, refreshTrackFn] = useTrackFetch(\n        props.tracklistID,\n        props.trackID\n    );\n\n    switch (trackLoad.state) {\n        case \"loading\": {\n            return <LoadingSpinner />;\n        }\n\n        case \"error\": {\n            return (\n                <OneTimeErrorNotification\n                    componentDescription=\"Track Player\"\n                    error={trackLoad.error}\n                />\n            );\n        }\n\n        case \"loaded\": {\n            return (\n                <LoadedTrackPlayer\n                    track={trackLoad.track}\n                    focused={props.focused}\n                    isCurrentTrack={props.isCurrentTrack}\n                    playerControls={props.playerControls}\n                    refreshTrackFn={refreshTrackFn}\n                />\n            );\n        }\n    }\n};\n\ninterface LoadedTrackPlayerProps {\n    focused: boolean;\n    isCurrentTrack: boolean;\n    track: Track;\n    playerControls: PlayerControls;\n    refreshTrackFn: PlainFn;\n}\n\nconst LoadedTrackPlayer: React.FC<LoadedTrackPlayerProps> = (\n    props: LoadedTrackPlayerProps\n): JSX.Element => {\n    const innerPlayer: React.ReactElement = (() => {\n        switch (props.track.track_type) {\n            case \"single\": {\n                return (\n                    <SingleTrackPlayer\n                        focused={props.focused}\n                        isCurrentTrack={props.isCurrentTrack}\n                        track={props.track}\n                        playerControls={props.playerControls}\n                    />\n                );\n            }\n\n            case \"2stems\": {\n                const buttonSpecs: StemButtonSpec<TwoStemKeys>[] = [\n                    {\n                        label: \"vocals\",\n                        buttonColour: \"lightBlue\",\n                    },\n                    {\n                        label: \"accompaniment\",\n                        buttonColour: \"purple\",\n                    },\n                ];\n\n                return (\n                    <StemTrackPlayer\n                        focused={props.focused}\n                        isCurrentTrack={props.isCurrentTrack}\n                        track={props.track}\n                        buttonSpecs={buttonSpecs}\n                        playerControls={props.playerControls}\n                        refreshTrackFn={props.refreshTrackFn}\n                    />\n                );\n            }\n\n            case \"4stems\": {\n                const buttonSpecs: StemButtonSpec<FourStemKeys>[] = [\n                    {\n                        label: \"vocals\",\n                        buttonColour: \"lightBlue\",\n                    },\n                    {\n                        label: \"other\",\n                        buttonColour: \"purple\",\n                    },\n                    {\n                        label: \"bass\",\n                        buttonColour: \"pink\",\n                    },\n                    {\n                        label: \"drums\",\n                        buttonColour: \"yellow\",\n                    },\n                ];\n\n                return (\n                    <StemTrackPlayer\n                        focused={props.focused}\n                        isCurrentTrack={props.isCurrentTrack}\n                        track={props.track}\n                        buttonSpecs={buttonSpecs}\n                        playerControls={props.playerControls}\n                        refreshTrackFn={props.refreshTrackFn}\n                    />\n                );\n            }\n\n            case \"5stems\": {\n                const buttonSpecs: StemButtonSpec<FiveStemKeys>[] = [\n                    {\n                        label: \"vocals\",\n                        buttonColour: \"lightBlue\",\n                    },\n                    {\n                        label: \"other\",\n                        buttonColour: \"purple\",\n                    },\n                    {\n                        label: \"piano\",\n                        buttonColour: \"lightGreen\",\n                    },\n                    {\n                        label: \"bass\",\n                        buttonColour: \"pink\",\n                    },\n                    {\n                        label: \"drums\",\n                        buttonColour: \"yellow\",\n                    },\n                ];\n\n                return (\n                    <StemTrackPlayer\n                        focused={props.focused}\n                        isCurrentTrack={props.isCurrentTrack}\n                        track={props.track}\n                        buttonSpecs={buttonSpecs}\n                        playerControls={props.playerControls}\n                        refreshTrackFn={props.refreshTrackFn}\n                    />\n                );\n            }\n\n            case \"split_2stems\":\n            case \"split_4stems\":\n            case \"split_5stems\": {\n                return (\n                    <LoadingSplitStemTrackView\n                        track={props.track}\n                        refreshTrackFn={props.refreshTrackFn}\n                    />\n                );\n            }\n        }\n    })();\n\n    return <Collapse in={props.focused}>{innerPlayer}</Collapse>;\n};\n\nexport default React.memo(TrackPlayer);\n","import { RequestError } from \"common/backend/errors\";\nimport { Track } from \"common/ChordModel/tracks/Track\";\nimport { TrackList } from \"common/ChordModel/tracks/TrackList\";\nimport { PlainFn } from \"common/PlainFn\";\nimport { useTracklistFetch } from \"components/track_player/providers/useTracklistFetch\";\nimport { left } from \"fp-ts/lib/Either\";\n\ninterface LoadingTrackState {\n    state: \"loading\";\n}\n\ninterface ErrorTrackState {\n    state: \"error\";\n    error: RequestError;\n}\n\ninterface LoadedTrackState {\n    state: \"loaded\";\n    track: Track;\n}\n\nexport type TrackLoad = LoadedTrackState | LoadingTrackState | ErrorTrackState;\n\nexport const useTrackFetch = (\n    tracklistID: string,\n    trackID: string\n): [TrackLoad, PlainFn] => {\n    const [tracklistLoad, refresh] = useTracklistFetch(tracklistID);\n\n    const findTrack = (tracklist: TrackList): Track | undefined => {\n        const matchByID = (track: Track) => track.id === trackID;\n        return tracklist.tracks.find(matchByID);\n    };\n\n    switch (tracklistLoad.state) {\n        case \"error\": {\n            return [{ state: \"error\", error: tracklistLoad.error }, refresh];\n        }\n\n        case \"loading\": {\n            return [{ state: \"loading\" }, refresh];\n        }\n\n        case \"loaded\": {\n            const track = findTrack(tracklistLoad.tracklist);\n            if (track === undefined) {\n                return [\n                    { state: \"error\", error: left(\"Track is not found\") },\n                    refresh,\n                ];\n            }\n\n            return [{ state: \"loaded\", track: track }, refresh];\n        }\n    }\n};\n","import EditIcon from \"@mui/icons-material/Edit\";\nimport CollapseDownIcon from \"@mui/icons-material/ExpandMore\";\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\nimport {\n    Box,\n    Button,\n    Divider,\n    FormControl,\n    MenuItem,\n    Select as UnstyledSelect,\n    SelectChangeEvent,\n    Slide,\n    styled,\n    Theme\n} from \"@mui/material\";\nimport { SystemStyleObject } from \"@mui/system\";\nimport { Track } from \"common/ChordModel/tracks/Track\";\nimport { PlainFn } from \"common/PlainFn\";\nimport { useRegisterTopKeyListener } from \"components/GlobalKeyListener\";\nimport LoadingSpinner from \"components/loading/LoadingSpinner\";\nimport {\n    roundedCornersStyle,\n    roundedTopCornersStyle,\n    TitleBar,\n    withBottomRightBox\n} from \"components/track_player/common\";\nimport {\n    PlayerControls,\n    unfocusedControls\n} from \"components/track_player/internal_player/usePlayerControls\";\nimport { TrackListLoad } from \"components/track_player/providers/TrackListProvider\";\nimport TrackPlayer from \"components/track_player/TrackPlayer\";\nimport React, { useEffect } from \"react\";\n\nconst FlexBox = styled(Box)(({ theme }) => ({\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: theme.spacing(0.5),\n}));\n\nconst TitleBarButton = styled(Button)(({ theme }) => ({\n    minWidth: 0,\n    ...roundedCornersStyle(theme),\n}));\n\nconst paddingLeftStyle: SystemStyleObject<Theme> = {\n    [`& .{selectClasses.select}`]: {\n        paddingLeft: 2,\n    },\n};\n\nconst Select = styled(UnstyledSelect)(({ theme }) => ({\n    minWidth: theme.spacing(30),\n}));\n\nconst FullPlayerContainer = styled(Box)(({ theme }) => {\n    const transportControlsWidth = theme.spacing(36);\n\n    return {\n        backgroundColor: \"white\",\n        minWidth: \"50vw\",\n        maxWidth: transportControlsWidth,\n        ...roundedTopCornersStyle(theme),\n    };\n});\n\ninterface MultiTrackPlayerProps {\n    show: boolean;\n\n    tracklistLoad: TrackListLoad;\n    playerControls: PlayerControls;\n\n    currentTrackIndex: number;\n    onSelectCurrentTrack: (index: number) => void;\n\n    onOpenTrackEditDialog?: PlainFn;\n    onMinimize: PlainFn;\n    onRefresh: PlainFn;\n}\n\nconst MultiTrackPlayer: React.FC<MultiTrackPlayerProps> = (\n    props: MultiTrackPlayerProps\n): JSX.Element => {\n    const [addTopKeyListener, removeKeyListener] = useRegisterTopKeyListener();\n\n    {\n        const show = props.show;\n        const onMinimize = props.onMinimize;\n        useEffect(() => {\n            if (!show) {\n                return;\n            }\n\n            const handleKey = (event: KeyboardEvent) => {\n                if (event.code !== \"Slash\") {\n                    return;\n                }\n\n                onMinimize();\n                event.preventDefault();\n            };\n\n            addTopKeyListener(handleKey);\n            return () => removeKeyListener(handleKey);\n        }, [addTopKeyListener, removeKeyListener, onMinimize, show]);\n    }\n\n    const trackListEditButton = props.onOpenTrackEditDialog !== undefined && (\n        <TitleBarButton onClick={props.onOpenTrackEditDialog}>\n            <EditIcon />\n        </TitleBarButton>\n    );\n\n    const trackRefreshButton = (\n        <TitleBarButton onClick={props.onRefresh}>\n            <RefreshIcon />\n        </TitleBarButton>\n    );\n\n    const trackChangeHandler = (event: SelectChangeEvent<unknown>) => {\n        const value: unknown = event.target.value;\n        if (typeof value !== \"number\") {\n            console.error(\n                \"Unexpected! Selected value in full size player selector is not a number type\"\n            );\n            return;\n        }\n\n        props.onSelectCurrentTrack(value);\n    };\n\n    const trackListPicker = (() => {\n        const items = (() => {\n            if (props.tracklistLoad.state !== \"loaded\") {\n                return undefined;\n            }\n\n            return props.tracklistLoad.tracklist.tracks.map(\n                (track: Track, index: number) => (\n                    <MenuItem key={`${index}-${track.label}`} value={index}>\n                        {track.label}\n                    </MenuItem>\n                )\n            );\n        })();\n\n        return (\n            <FormControl size=\"small\">\n                <Select\n                    sx={paddingLeftStyle}\n                    value={props.currentTrackIndex}\n                    onChange={trackChangeHandler}\n                    MenuProps={{ disableScrollLock: true }}\n                >\n                    {items}\n                </Select>\n            </FormControl>\n        );\n    })();\n\n    const titleBar = (\n        <TitleBar>\n            <Box />\n            <FlexBox>\n                {trackRefreshButton}\n                {trackListEditButton}\n                {trackListPicker}\n            </FlexBox>\n            <Box>\n                <TitleBarButton onClick={props.onMinimize}>\n                    <CollapseDownIcon />\n                </TitleBarButton>\n            </Box>\n        </TitleBar>\n    );\n\n    const internalContent: React.ReactNode = (() => {\n        if (props.tracklistLoad.state === \"loading\") {\n            return <LoadingSpinner />;\n        }\n\n        const tracklistID = props.tracklistLoad.tracklist.song_id;\n\n        const makePlayer = (track: Track, index: number) => {\n            const isCurrentTrack = index === props.currentTrackIndex;\n            const focused = isCurrentTrack && props.show;\n            const playerControls = isCurrentTrack\n                ? props.playerControls\n                : unfocusedControls;\n\n            return (\n                <TrackPlayer\n                    key={`${index}-${track.id}`}\n                    focused={focused}\n                    isCurrentTrack={isCurrentTrack}\n                    tracklistID={tracklistID}\n                    trackID={track.id}\n                    playerControls={playerControls}\n                />\n            );\n        };\n\n        return props.tracklistLoad.tracklist.tracks.map(makePlayer);\n    })();\n\n    return (\n        <Slide in={props.show} direction=\"up\">\n            {withBottomRightBox(\n                <FullPlayerContainer>\n                    {titleBar}\n                    <Divider />\n                    {internalContent}\n                </FullPlayerContainer>\n            )}\n        </Slide>\n    );\n};\n\nexport default React.memo(MultiTrackPlayer);\n","import { Theme } from \"@mui/material\";\nimport { SystemStyleObject } from \"@mui/system\";\nimport { TimestampedSection } from \"common/ChordModel/ChordLine\";\nimport { TrackList } from \"common/ChordModel/tracks/TrackList\";\nimport { PlainFn } from \"common/PlainFn\";\nimport TrackListEditDialog from \"components/track_player/dialog/TrackListEditDialog\";\nimport { usePlayerControls } from \"components/track_player/internal_player/usePlayerControls\";\nimport MicroPlayer from \"components/track_player/MicroPlayer\";\nimport MultiTrackPlayer from \"components/track_player/MultiTrackPlayer\";\nimport { TrackListLoad } from \"components/track_player/providers/TrackListProvider\";\nimport { List } from \"immutable\";\nimport React, { useCallback, useState } from \"react\";\nimport shortid from \"shortid\";\n\ntype PlayerVisibilityState = \"minimized\" | \"full\";\n\ninterface JamStationProps {\n    tracklistLoad: TrackListLoad;\n    timestampedSections: List<TimestampedSection>;\n    onTrackListChanged: (trackList: TrackList) => void;\n    onRefresh: PlainFn;\n    collapsedButtonSx?: SystemStyleObject<Theme>;\n}\n\ninterface TrackEditDialogState {\n    open: boolean;\n    randomID: string;\n}\n\nconst JamStation: React.FC<JamStationProps> = (\n    props: JamStationProps\n): JSX.Element => {\n    const [playerVisibilityState, setPlayerVisibilityState] =\n        useState<PlayerVisibilityState>(\"minimized\");\n\n    const [trackEditDialogState, setTrackEditDialogState] =\n        useState<TrackEditDialogState>({ open: false, randomID: \"\" });\n\n    // lazy loading - if we just render everything it will also\n    // cause heavy network traffic, don't do it without prompt\n    const [loadPlayers, setLoadPlayers] = useState(false);\n\n    const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\n\n    const playerControls = usePlayerControls(props.timestampedSections);\n\n    const trackListIsEmpty =\n        props.tracklistLoad.state === \"loaded\" &&\n        props.tracklistLoad.tracklist.tracks.length === 0;\n\n    const collapsedButtonFn = (\n        disabled: boolean,\n        expandFn: () => void,\n        tooltipMessage: string\n    ) => (\n        <MicroPlayer\n            sx={props.collapsedButtonSx}\n            show={playerVisibilityState === \"minimized\"}\n            playersLoaded={loadPlayers}\n            playing={playerControls.playing}\n            togglePlay={playerControls.transport.togglePlay}\n            jumpBack={playerControls.transport.jumpBack}\n            jumpForward={playerControls.transport.jumpForward}\n            tooltipMessage={tooltipMessage}\n            disabled={disabled}\n            onClick={expandFn}\n        />\n    );\n\n    const handleTrackListChange = (tracklist: TrackList) => {\n        closeTrackEditDialog();\n        props.onTrackListChanged?.(tracklist);\n    };\n\n    const openTrackEditDialog = useCallback(() => {\n        setTrackEditDialogState({ open: true, randomID: shortid.generate() });\n    }, [setTrackEditDialogState]);\n\n    const closeTrackEditDialog = () => {\n        setTrackEditDialogState({ open: false, randomID: \"\" });\n    };\n\n    const trackEditDialog = trackEditDialogState.open && (\n        <TrackListEditDialog\n            key={trackEditDialogState.randomID}\n            open={trackEditDialogState.open}\n            trackListLoad={props.tracklistLoad}\n            onSubmit={handleTrackListChange}\n            onClose={closeTrackEditDialog}\n            onRefresh={props.onRefresh}\n        />\n    );\n\n    const showPlayer = useCallback(() => {\n        if (!loadPlayers) {\n            setLoadPlayers(true);\n        }\n\n        setPlayerVisibilityState(\"full\");\n    }, [loadPlayers, setLoadPlayers, setPlayerVisibilityState]);\n\n    const minimizePlayer = useCallback(() => {\n        setPlayerVisibilityState(\"minimized\");\n    }, [setPlayerVisibilityState]);\n\n    if (trackListIsEmpty) {\n        // prompt the user to add tracks if there is none\n        return (\n            <>\n                {collapsedButtonFn(false, openTrackEditDialog, \"Show Player\")}\n                {trackEditDialog}\n            </>\n        );\n    }\n\n    if (!loadPlayers) {\n        return collapsedButtonFn(false, showPlayer, \"Show Player\");\n    }\n\n    const fullPlayer: false | JSX.Element = loadPlayers && (\n        <MultiTrackPlayer\n            show={playerVisibilityState === \"full\"}\n            tracklistLoad={props.tracklistLoad}\n            playerControls={playerControls}\n            currentTrackIndex={currentTrackIndex}\n            onSelectCurrentTrack={setCurrentTrackIndex}\n            onMinimize={minimizePlayer}\n            onRefresh={props.onRefresh}\n            onOpenTrackEditDialog={openTrackEditDialog}\n        />\n    );\n\n    return (\n        <>\n            {collapsedButtonFn(false, showPlayer, \"Show Player\")}\n            {fullPlayer}\n            {trackEditDialog}\n        </>\n    );\n};\n\nexport default JamStation;\n","import { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { TrackList } from \"common/ChordModel/tracks/TrackList\";\nimport { PlainFn } from \"common/PlainFn\";\nimport OneTimeErrorNotification from \"components/display/OneTimeErrorNotification\";\nimport { useTracklistFetch } from \"components/track_player/providers/useTracklistFetch\";\nimport { User, UserContext } from \"components/user/userContext\";\nimport React from \"react\";\n\ninterface LoadingTrackListState {\n    state: \"loading\";\n}\n\ninterface LoadedTrackListState {\n    state: \"loaded\";\n    tracklist: TrackList;\n}\n\nexport type TrackListLoad = LoadedTrackListState | LoadingTrackListState;\nexport type TrackListChangeHandler = (tracklist: TrackList) => Promise<void>;\n\ninterface TrackListProviderProps {\n    song: ChordSong;\n    children: (\n        trackLoad: TrackListLoad,\n        onRefresh: PlainFn,\n        onTrackListChanged: TrackListChangeHandler\n    ) => JSX.Element;\n}\n\nconst TrackListProvider: React.FC<TrackListProviderProps> = (\n    props: TrackListProviderProps\n): JSX.Element => {\n    const [tracklistLoad, refresh, updateTrackList] = useTracklistFetch(\n        props.song.id\n    );\n\n    const user: User | null = React.useContext(UserContext);\n\n    const handleTrackListChanged = async (tracklist: TrackList) => {\n        if (user === null || !props.song.isOwner(user)) {\n            await updateTrackList(tracklist, null);\n            return;\n        }\n\n        await updateTrackList(tracklist, user.authToken);\n    };\n\n    switch (tracklistLoad.state) {\n        case \"error\": {\n            return (\n                <OneTimeErrorNotification\n                    componentDescription=\"Track List\"\n                    error={tracklistLoad.error}\n                />\n            );\n        }\n        case \"loading\": {\n            return props.children(\n                { state: \"loading\" },\n                refresh,\n                handleTrackListChanged\n            );\n        }\n        case \"loaded\": {\n            return props.children(\n                { state: \"loaded\", tracklist: tracklistLoad.tracklist },\n                refresh,\n                handleTrackListChanged\n            );\n        }\n    }\n};\n\nexport default TrackListProvider;\n","import { Paper, styled } from \"@mui/material\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { PlainFn } from \"common/PlainFn\";\nimport CenteredLayoutWithMenu from \"components/display/CenteredLayoutWithMenu\";\nimport ChordPaperBody from \"components/edit/ChordPaperBody\";\nimport Header from \"components/edit/Header\";\nimport ChordPaperMenu from \"components/edit/menu/ChordPaperMenu\";\nimport LoadingRender from \"components/loading/LoadingRender\";\nimport PlayerSectionProvider from \"components/PlayerSectionContext\";\nimport PlayerTimeProvider from \"components/PlayerTimeContext\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\nimport JamStation from \"components/track_player/JamStation\";\nimport TrackListProvider, {\n    TrackListChangeHandler,\n    TrackListLoad,\n} from \"components/track_player/providers/TrackListProvider\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\n\nconst RootPaper = styled(Paper)(({ theme }) => ({\n    position: \"relative\",\n    margin: theme.spacing(5),\n    minHeight: theme.spacing(92),\n    minWidth: theme.spacing(92),\n}));\n\ninterface ChordPaperProps {\n    song: ChordSong;\n    songDispatch: React.Dispatch<ChordSongAction>;\n    onPlay?: PlainFn;\n}\n\nconst ChordPaper: React.FC<ChordPaperProps> = (\n    props: ChordPaperProps\n): JSX.Element => {\n    const trackPlayer: React.ReactNode = (() => {\n        if (props.song.isUnsaved()) {\n            return null;\n        }\n\n        return (\n            <TrackListProvider song={props.song}>\n                {(\n                    tracklistLoad: TrackListLoad,\n                    onRefresh: PlainFn,\n                    changeHandler: TrackListChangeHandler\n                ) => (\n                    <JamStation\n                        collapsedButtonSx={{\n                            backgroundColor: \"white\",\n                        }}\n                        timestampedSections={props.song.timestampedSections}\n                        tracklistLoad={tracklistLoad}\n                        onTrackListChanged={changeHandler}\n                        onRefresh={onRefresh}\n                    />\n                )}\n            </TrackListProvider>\n        );\n    })();\n\n    return (\n        <PlayerTimeProvider>\n            <PlayerSectionProvider song={props.song}>\n                <Helmet>\n                    <title>\n                        {props.song.metadata.title !== \"\"\n                            ? props.song.metadata.title\n                            : \"New Song\"}\n                    </title>\n                </Helmet>\n                <RootPaper elevation={3} data-testid=\"ChordPaper\">\n                    <Header\n                        data-testid={\"Header\"}\n                        song={props.song}\n                        songDispatch={props.songDispatch}\n                    />\n                    <ChordPaperBody\n                        song={props.song}\n                        songDispatch={props.songDispatch}\n                    />\n                    <ChordPaperMenu\n                        song={props.song}\n                        songDispatch={props.songDispatch}\n                        onPlay={props.onPlay}\n                    />\n                    {trackPlayer}\n                </RootPaper>\n            </PlayerSectionProvider>\n        </PlayerTimeProvider>\n    );\n};\n\nconst ChordPaperScreen: React.FC<ChordPaperProps> = (\n    props: ChordPaperProps\n): JSX.Element => {\n    return (\n        <LoadingRender>\n            <CenteredLayoutWithMenu>\n                <ChordPaper {...props} />\n            </CenteredLayoutWithMenu>\n        </LoadingRender>\n    );\n};\n\nexport default ChordPaperScreen;\n","import { Grid } from \"@mui/material\";\nimport React from \"react\";\n\ninterface CenteredLayoutProps {\n    children: React.ReactNode | React.ReactNode[];\n}\n\nconst CenteredLayout: React.FC<CenteredLayoutProps> = (\n    props: CenteredLayoutProps\n): JSX.Element => {\n    return (\n        <Grid container>\n            <Grid item container justifyContent=\"center\">\n                {props.children}\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default CenteredLayout;\n","import { Box, Grid } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport ChordSymbol from \"components/display/ChordSymbol\";\nimport LyricTypography from \"components/display/Lyric\";\nimport React from \"react\";\n\ninterface PlayBlockProps {\n    block: ChordBlock;\n}\n\nconst PlayBlock: React.FC<PlayBlockProps> = (\n    props: PlayBlockProps\n): JSX.Element => {\n    return (\n        <Box display=\"inline-block\">\n            <Grid container direction=\"column\" component=\"span\">\n                <Grid item>\n                    <ChordSymbol>{props.block.chord}</ChordSymbol>\n                </Grid>\n                <Grid item>\n                    <LyricTypography data-testid=\"lyric\">\n                        {props.block.lyric}\n                    </LyricTypography>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default PlayBlock;\n","import { Box, styled, Typography } from \"@mui/material\";\nimport { ChordBlock } from \"common/ChordModel/ChordBlock\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport {\n    sectionLabelStyle,\n    sectionTypographyVariant\n} from \"components/display/SectionLabel\";\nimport PlayBlock from \"components/play/common/PlayBlock\";\nimport React from \"react\";\n\nconst LabelTypography = styled(Typography)({ ...sectionLabelStyle });\nconst TopMarginBox = styled(Box)(({ theme }) => ({\n    marginTop: theme.spacing(1),\n}));\n\ninterface PlayLineProps {\n    chordLine: ChordLine;\n}\n\nconst PlayLine: React.FC<PlayLineProps> = (\n    props: PlayLineProps\n): JSX.Element => {\n    let lineComponent: React.ReactElement = (\n        <Box>\n            {props.chordLine.chordBlocks.list.map((block: ChordBlock) => (\n                <PlayBlock block={block} key={block.id}></PlayBlock>\n            ))}\n        </Box>\n    );\n\n    const label = props.chordLine.section?.name;\n    if (label !== undefined && label !== \"\") {\n        const labelElement = (\n            <TopMarginBox>\n                <LabelTypography variant={sectionTypographyVariant}>\n                    {label}\n                </LabelTypography>\n            </TopMarginBox>\n        );\n\n        lineComponent = (\n            <Box>\n                {labelElement}\n                {lineComponent}\n            </Box>\n        );\n    }\n\n    return lineComponent;\n};\n\nexport default React.memo(PlayLine);\n","const isControlCommand = (event: KeyboardEvent): boolean => {\n    return event.ctrlKey || event.metaKey;\n};\n\nconst navigateBackwardsKeys: string[] = [\n    \"ArrowUp\",\n    \"ArrowLeft\",\n    \"Backspace\",\n    \"ShiftLeft\",\n    \"PageUp\",\n];\n\nexport const isNavigateBackwardsKey = (event: KeyboardEvent): boolean => {\n    if (isControlCommand(event)) {\n        return false;\n    }\n\n    for (let backwardsKey of navigateBackwardsKeys) {\n        if (backwardsKey === event.code) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nconst navigateForwardKeys: string[] = [\n    \"KeyA\",\n    \"KeyB\",\n    \"KeyC\",\n    \"KeyD\",\n    \"KeyE\",\n    \"KeyF\",\n    \"KeyG\",\n    \"KeyH\",\n    \"KeyI\",\n    \"KeyJ\",\n    \"KeyK\",\n    \"KeyL\",\n    \"KeyM\",\n    \"KeyN\",\n    \"KeyO\",\n    \"KeyP\",\n    \"KeyQ\",\n    \"KeyR\",\n    \"KeyS\",\n    \"KeyT\",\n    \"KeyU\",\n    \"KeyV\",\n    \"KeyW\",\n    \"KeyX\",\n    \"KeyY\",\n    \"KeyZ\",\n    \"Digit1\",\n    \"Digit2\",\n    \"Digit3\",\n    \"Digit4\",\n    \"Digit5\",\n    \"Digit6\",\n    \"Digit7\",\n    \"Digit8\",\n    \"Digit9\",\n    \"Digit0\",\n    \"Space\",\n    \"Enter\",\n    \"ArrowDown\",\n    \"ArrowRight\",\n    \"PageDown\",\n    \"Comma\",\n    \"Period\",\n    \"Slash\",\n    \"Backslash\",\n    \"Semicolon\",\n    \"Quote\",\n    \"Backquote\",\n    \"Tab\",\n    \"ShiftRight\",\n    \"Equal\",\n    \"BracketLeft\",\n    \"BracketRight\",\n];\n\nexport const isNavigateForwardsKey = (event: KeyboardEvent): boolean => {\n    if (isControlCommand(event)) {\n        return false;\n    }\n\n    for (let forwardsKey of navigateForwardKeys) {\n        if (forwardsKey === event.code) {\n            return true;\n        }\n    }\n\n    return false;\n};\n","import { useRegisterKeyListener } from \"components/GlobalKeyListener\";\nimport { isNavigateBackwardsKey, isNavigateForwardsKey } from \"components/play/common/keyMap\";\nimport { useEffect } from \"react\";\nimport { useThrottledCallback } from \"use-debounce/lib\";\n\ntype NavigateFn = () => boolean;\nconst throttleTimeInterval = 400;\n\nconst useThrottledNavigate = (navigateFn: NavigateFn) =>\n    useThrottledCallback(navigateFn, throttleTimeInterval, {\n        leading: true,\n        trailing: false,\n    });\n\nexport const useNavigationKeys = (\n    navigateForward: NavigateFn,\n    navigateBackward: NavigateFn\n): void => {\n    const [addKeyListener, removeKeyListener] = useRegisterKeyListener();\n\n    const throttledNavigateBackward = useThrottledNavigate(navigateBackward);\n    const throttledNavigateForward = useThrottledNavigate(navigateForward);\n\n    useEffect(() => {\n        const handleKey = (event: KeyboardEvent) => {\n            if (isNavigateBackwardsKey(event)) {\n                const handled = throttledNavigateBackward();\n                if (handled) {\n                    event.preventDefault();\n                }\n                return;\n            }\n\n            if (isNavigateForwardsKey(event)) {\n                const handled = throttledNavigateForward();\n                if (handled) {\n                    event.preventDefault();\n                }\n                return;\n            }\n        };\n\n        addKeyListener(handleKey);\n        return () => removeKeyListener(handleKey);\n    }, [\n        throttledNavigateBackward,\n        throttledNavigateForward,\n        addKeyListener,\n        removeKeyListener,\n    ]);\n};\n","import { Box, Paper, styled } from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { useWindowWidth } from \"@react-hook/window-size\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { makeSection } from \"components/display/SectionHighlight\";\nimport PlayLine from \"components/play/common/PlayLine\";\nimport { useNavigationKeys } from \"components/play/common/useNavigateKeys\";\nimport { List } from \"immutable\";\nimport React, { useEffect, useState } from \"react\";\nimport useScrollbarSize from \"react-scrollbar-size\";\n\nexport interface PageDisplaySettings {\n    numberOfColumnsPerPage: number;\n    fontSize: number;\n    columnMargin: number;\n    flipType: \"page\" | \"column\";\n}\n\ninterface PagePlayContentProps {\n    song: ChordSong;\n    displaySettings: PageDisplaySettings;\n}\n\nconst PagePlayContent: React.FC<PagePlayContentProps> = (\n    props: PagePlayContentProps\n): JSX.Element => {\n    const [numberOfEmptyColumns, setNumberOfEmptyColumns] = useState<number>(0);\n\n    const numberOfColumnsPerPage =\n        props.displaySettings.numberOfColumnsPerPage >= 1\n            ? props.displaySettings.numberOfColumnsPerPage\n            : 1;\n    const columnMargin =\n        props.displaySettings.columnMargin >= 0\n            ? props.displaySettings.columnMargin\n            : 0;\n\n    const windowWidth = useWindowWidth();\n    const columnWidth = windowWidth / numberOfColumnsPerPage;\n    const snapThreshold = columnWidth / 2;\n    const { height: scrollbarHeight } = useScrollbarSize();\n\n    const flipPage = (direction: \"forward\" | \"backward\"): boolean => {\n        const currentPos = window.scrollX;\n        const delta: number = (() => {\n            const scrollDelta =\n                props.displaySettings.flipType === \"column\"\n                    ? columnWidth\n                    : windowWidth;\n\n            if (direction === \"backward\") {\n                return -scrollDelta;\n            }\n            return scrollDelta;\n        })();\n\n        let nextPos = currentPos + delta;\n\n        const distanceFromLastColumn = nextPos % columnWidth;\n\n        if (distanceFromLastColumn < snapThreshold) {\n            nextPos -= distanceFromLastColumn;\n        } else {\n            const remainingDistance = columnWidth - distanceFromLastColumn;\n            nextPos += remainingDistance;\n        }\n\n        window.scrollTo({\n            left: nextPos,\n            top: 0,\n            behavior: \"smooth\",\n        });\n\n        return true;\n    };\n\n    const flipForward = () => flipPage(\"forward\");\n    const flipBackward = () => flipPage(\"backward\");\n\n    useNavigationKeys(flipForward, flipBackward);\n\n    const viewportHeightWithoutScrollbar = `calc(100vh - ${scrollbarHeight}px)`;\n\n    const ColumnedPaper = styled(Paper)({\n        columnGap: \"0px\",\n        columnRuleWidth: \"2px\",\n        columnRuleStyle: \"solid\",\n        columnRuleColor: grey[300],\n        columns: numberOfColumnsPerPage,\n        height: viewportHeightWithoutScrollbar,\n        width: \"100%\",\n    });\n\n    // using margins instead of column-gap, CSS columns force the rightmost column\n    // up against the edge of the viewport and doesn't strictly respect column width\n    //\n    // making 0 gap columns with margins makes the math a lot simpler for each column\n    const MarginBox = styled(Box)({\n        marginLeft: `${columnMargin}px`,\n        marginRight: `${columnMargin}px`,\n    });\n\n    const makeLineElement = (line: ChordLine) => (\n        <PlayLine chordLine={line} key={line.id} />\n    );\n\n    const lines = props.song.timeSectionedChordLines.flatMap(\n        (sectionLines: List<ChordLine>) => {\n            return makeSection(sectionLines, makeLineElement);\n        }\n    );\n\n    const FullHeightBox = styled(Box)({\n        height: viewportHeightWithoutScrollbar,\n        pageBreakInside: \"avoid\",\n    });\n\n    const emptyColumns: React.ReactElement[] = (() => {\n        if (numberOfEmptyColumns === null) {\n            return [];\n        }\n\n        const cols: React.ReactElement[] = [];\n\n        for (let i = 0; i < numberOfEmptyColumns; i++) {\n            cols.push(\n                <FullHeightBox key={`empty-column-${i}`}>\n                    <div />\n                </FullHeightBox>\n            );\n        }\n\n        return cols;\n    })();\n\n    useEffect(() => {\n        // add some empty columns to the end of the song\n        // so that each \"page flip\" navigation ends evenly\n        // e.g. if a 3 column page is divided as 5 columns: a | b | c | d | e\n        // then the user will see\n        // page 1: a | b | c\n        // page 2: c | d | e\n        // this will add a div to the end so that it will look like\n        // page 1: a | b | c\n        // page 2: d | e | [empty]\n\n        const numberOfRenderedColumns = Math.round(\n            document.body.scrollWidth / columnWidth\n        );\n\n        const numberOfColumnsInLastPage: number =\n            numberOfRenderedColumns % numberOfColumnsPerPage;\n\n        if (numberOfColumnsInLastPage !== 0) {\n            let nextNumberOfEmptyColumns =\n                numberOfColumnsPerPage -\n                numberOfColumnsInLastPage +\n                numberOfEmptyColumns;\n\n            nextNumberOfEmptyColumns =\n                nextNumberOfEmptyColumns % numberOfColumnsPerPage;\n\n            setNumberOfEmptyColumns(nextNumberOfEmptyColumns);\n        }\n    }, [\n        numberOfColumnsPerPage,\n        columnWidth,\n        numberOfEmptyColumns,\n        setNumberOfEmptyColumns,\n        props,\n    ]);\n\n    return (\n        <ColumnedPaper>\n            <MarginBox>{lines}</MarginBox>\n            {emptyColumns}\n        </ColumnedPaper>\n    );\n};\n\nexport default PagePlayContent;\n","import ExitToAppIcon from \"@mui/icons-material/ExitToApp\";\nimport UnstyledMoreVertIcon from \"@mui/icons-material/MoreVert\";\nimport {\n    SpeedDial as UnstyledSpeedDial,\n    SpeedDialAction,\n    styled\n} from \"@mui/material\";\nimport { grey } from \"@mui/material/colors\";\nimport { PlainFn } from \"common/PlainFn\";\nimport React, { useState } from \"react\";\n\ninterface BasePlayMenuProps {\n    children: React.ReactElement | React.ReactElement[];\n    onExit?: PlainFn;\n}\n\nconst MenuIcon = styled(UnstyledMoreVertIcon)({\n    backgroundColor: \"transparent\",\n});\n\nconst SpeedDial = styled(UnstyledSpeedDial)(({ theme }) => ({\n    position: \"fixed\",\n    top: theme.spacing(3),\n    right: theme.spacing(2),\n    \"& .MuiSpeedDial-fab\": {\n        backgroundColor: \"transparent\",\n        color: grey[500],\n    },\n}));\n\nconst BasePlayMenu: React.FC<BasePlayMenuProps> = (\n    props: BasePlayMenuProps\n): JSX.Element => {\n    const [open, setOpen] = useState(false);\n\n    const openMenu = () => {\n        setOpen(true);\n    };\n\n    const closeMenu = () => {\n        setOpen(false);\n    };\n\n    const handleExit = (\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n        props.onExit?.();\n        event.stopPropagation();\n    };\n\n    return (\n        <SpeedDial\n            icon={<MenuIcon />}\n            direction=\"down\"\n            open={open}\n            onOpen={openMenu}\n            onClose={closeMenu}\n            ariaLabel=\"SpeedDial\"\n            FabProps={{\n                color: \"inherit\",\n            }}\n        >\n            {props.children}\n            <SpeedDialAction\n                icon={<ExitToAppIcon />}\n                tooltipTitle=\"Exit Play Mode\"\n                onMouseDownCapture={handleExit}\n            />\n        </SpeedDial>\n    );\n};\n\nexport default BasePlayMenu;\n","import {\n    Box as UnstyledBox,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    FormControl,\n    FormControlLabel,\n    FormLabel as UnstyledFormLabel,\n    InputAdornment,\n    Radio,\n    RadioGroup,\n    styled,\n    TextField,\n    TextFieldProps as TextFieldPropsWithVariant,\n    Typography\n} from \"@mui/material\";\nimport { PlainFn } from \"common/PlainFn\";\nimport { isWhitespace } from \"common/Whitespace\";\nimport { PageDisplaySettings } from \"components/play/page/PagePlayContent\";\nimport { Either, isLeft, left, right } from \"fp-ts/lib/Either\";\nimport React, { ChangeEvent, useState } from \"react\";\n\nconst Box = styled(UnstyledBox)(({ theme }) => ({\n    margin: theme.spacing(1),\n}));\n\nconst FormLabel = styled(UnstyledFormLabel)(({ theme }) => ({\n    fontSize: \"0.75rem\",\n}));\n\nconst RadioLabelTypography = styled(Typography)(({ theme }) => ({\n    fontSize: \"0.75rem\",\n}));\n\ntype TextFieldProps = Omit<Partial<TextFieldPropsWithVariant>, \"variant\">;\n\ninterface DialogInput {\n    numberOfColumns: string;\n    fontSize: string;\n    columnMargin: string;\n    flipType: PageDisplaySettings[\"flipType\"];\n}\n\ntype TextInputFieldKeys = keyof Omit<DialogInput, \"flipType\">;\n\ninterface InputFieldSpecification {\n    label: string;\n    field: TextInputFieldKeys;\n    adornment: string | null;\n    validationErrorPropsFn: (strValue: string) => Either<Error, number>;\n}\n\ninterface DisplaySettingsDialogProps {\n    open: boolean;\n    onClose?: PlainFn;\n    defaultSettings: PageDisplaySettings;\n    onSubmit?: (displaySettings: PageDisplaySettings) => void;\n}\n\nconst DisplaySettingsDialog: React.FC<DisplaySettingsDialogProps> = (\n    props: DisplaySettingsDialogProps\n): JSX.Element => {\n    const [settings, setSettings] = useState<DialogInput>({\n        numberOfColumns:\n            props.defaultSettings.numberOfColumnsPerPage.toString(),\n        fontSize: props.defaultSettings.fontSize.toString(),\n        columnMargin: props.defaultSettings.columnMargin.toString(),\n        flipType: props.defaultSettings.flipType,\n    });\n\n    const validateNumber = (strValue: string): Either<Error, number> => {\n        if (strValue === \"\" || isWhitespace(strValue)) {\n            return left(new Error(\"A value is required\"));\n        }\n\n        const convertedNumber = Number(strValue);\n        if (isNaN(convertedNumber)) {\n            return left(new Error(\"Only numbers are allowed\"));\n        }\n\n        if (convertedNumber <= 0) {\n            return left(new Error(\"Only positive numbers are allowed\"));\n        }\n\n        return right(convertedNumber);\n    };\n\n    const validateInt = (strValue: string): Either<Error, number> => {\n        const result = validateNumber(strValue);\n\n        if (isLeft(result)) {\n            return result;\n        }\n\n        const convertedNumber = result.right;\n\n        const convertedInteger = Math.floor(convertedNumber);\n        if (convertedNumber !== convertedInteger) {\n            return left(new Error(\"Only integers are allowed\"));\n        }\n\n        return right(convertedInteger);\n    };\n\n    const validatedSettings = (): Either<Error, PageDisplaySettings> => {\n        const numberOfColumnsResults = validateInt(settings.numberOfColumns);\n        const fontSizeResults = validateNumber(settings.fontSize);\n        const columnMarginResults = validateNumber(settings.columnMargin);\n\n        if (isLeft(numberOfColumnsResults)) {\n            return numberOfColumnsResults;\n        }\n\n        if (isLeft(fontSizeResults)) {\n            return fontSizeResults;\n        }\n\n        if (isLeft(columnMarginResults)) {\n            return columnMarginResults;\n        }\n\n        const displaySettings: PageDisplaySettings = {\n            numberOfColumnsPerPage: numberOfColumnsResults.right,\n            fontSize: fontSizeResults.right,\n            columnMargin: columnMarginResults.right,\n            flipType: settings.flipType,\n        };\n\n        return right(displaySettings);\n    };\n\n    const hasValidationErrors = (): boolean => {\n        return isLeft(validatedSettings());\n    };\n\n    const handleSubmit = () => {\n        const settings = validatedSettings();\n\n        if (isLeft(settings)) {\n            return;\n        }\n\n        props.onSubmit?.({\n            numberOfColumnsPerPage: settings.right.numberOfColumnsPerPage,\n            fontSize: settings.right.fontSize,\n            columnMargin: settings.right.columnMargin,\n            flipType: settings.right.flipType,\n        });\n    };\n\n    const textSettingChangeHandler = (field: TextInputFieldKeys) => {\n        return (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n            const newValue = event.target.value;\n            const newSettings: DialogInput = { ...settings };\n            newSettings[field] = newValue;\n            setSettings(newSettings);\n        };\n    };\n\n    const validationErrorProps = (\n        result: Either<Error, number>\n    ): TextFieldProps => {\n        return {\n            error: isLeft(result) ? true : undefined,\n            helperText: isLeft(result) ? result.left.message : undefined,\n        };\n    };\n\n    const inputSpecs: InputFieldSpecification[] = [\n        {\n            label: \"number of columns\",\n            field: \"numberOfColumns\",\n            adornment: null,\n            validationErrorPropsFn: (val: string) => validateInt(val),\n        },\n        {\n            label: \"font size\",\n            field: \"fontSize\",\n            adornment: \"px\",\n            validationErrorPropsFn: (val: string) => validateNumber(val),\n        },\n        {\n            label: \"column margin\",\n            field: \"columnMargin\",\n            adornment: \"px\",\n            validationErrorPropsFn: (val: string) => validateNumber(val),\n        },\n    ];\n\n    const makeInput = (spec: InputFieldSpecification) => {\n        const textFieldProps: TextFieldProps = {\n            label: spec.label,\n            defaultValue: settings[spec.field],\n            onChange: textSettingChangeHandler(spec.field),\n            ...validationErrorProps(\n                spec.validationErrorPropsFn(settings[spec.field])\n            ),\n        };\n\n        if (spec.adornment !== null) {\n            textFieldProps.InputProps = {\n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        {spec.adornment}\n                    </InputAdornment>\n                ),\n            };\n        }\n\n        return (\n            <Box>\n                <TextField {...textFieldProps} />\n            </Box>\n        );\n    };\n\n    const flipTypeToggle = (() => {\n        const handleFlipTypeChange = (\n            _event: React.ChangeEvent<HTMLInputElement>,\n            value: string\n        ) => {\n            if (value !== \"page\" && value !== \"column\") {\n                console.error(\n                    \"Display dialog - flip type: Received an invalid radio value\"\n                );\n                return;\n            }\n\n            setSettings({\n                ...settings,\n                flipType: value,\n            });\n        };\n\n        return (\n            <Box>\n                <FormControl component=\"fieldset\">\n                    <FormLabel>flip type</FormLabel>\n                    <RadioGroup\n                        value={settings.flipType}\n                        onChange={handleFlipTypeChange}\n                    >\n                        <FormControlLabel\n                            value=\"column\"\n                            control={<Radio size=\"small\" />}\n                            label={\n                                <RadioLabelTypography>\n                                    flip column\n                                </RadioLabelTypography>\n                            }\n                        />\n                        <FormControlLabel\n                            value=\"page\"\n                            control={<Radio size=\"small\" />}\n                            label={\n                                <RadioLabelTypography>\n                                    flip page\n                                </RadioLabelTypography>\n                            }\n                        />\n                    </RadioGroup>\n                </FormControl>\n            </Box>\n        );\n    })();\n\n    return (\n        <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle>Display Settings</DialogTitle>\n            <DialogContent>\n                {flipTypeToggle}\n\n                {inputSpecs.map((spec: InputFieldSpecification) =>\n                    makeInput(spec)\n                )}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose}>Cancel</Button>\n                <Button disabled={hasValidationErrors()} onClick={handleSubmit}>\n                    OK\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default DisplaySettingsDialog;\n","import ReceiptIcon from \"@mui/icons-material/Receipt\";\nimport TuneIcon from \"@mui/icons-material/Tune\";\nimport { SpeedDialAction } from \"@mui/material\";\nimport { PlainFn } from \"common/PlainFn\";\nimport BasePlayMenu from \"components/play/common/BasePlayMenu\";\nimport DisplaySettingsDialog from \"components/play/page/DisplaySettingsDialog\";\nimport { PageDisplaySettings } from \"components/play/page/PagePlayContent\";\nimport React, { useState } from \"react\";\n\ninterface PagePlayMenuProps {\n    displaySettings: PageDisplaySettings;\n    onDisplaySettingsChange?: (displaySettings: PageDisplaySettings) => void;\n    onScrollView?: PlainFn;\n    onExit?: PlainFn;\n}\n\nconst PagePlayMenu: React.FC<PagePlayMenuProps> = (\n    props: PagePlayMenuProps\n): JSX.Element => {\n    const [displaySettingsOpen, setDisplaySettingsOpen] = useState(false);\n\n    // returning this instead of shoving it in the same fragment because\n    // returning speed dial in a fragment somehow causes some layout changes\n    if (displaySettingsOpen) {\n        const handleDisplaySettingsChange = (settings: PageDisplaySettings) => {\n            props.onDisplaySettingsChange?.(settings);\n            setDisplaySettingsOpen(false);\n        };\n\n        return (\n            <DisplaySettingsDialog\n                open\n                onClose={() => setDisplaySettingsOpen(false)}\n                defaultSettings={props.displaySettings}\n                onSubmit={handleDisplaySettingsChange}\n            />\n        );\n    }\n\n    return (\n        <BasePlayMenu onExit={props.onExit}>\n            <SpeedDialAction\n                icon={<ReceiptIcon />}\n                tooltipTitle=\"Scroll View\"\n                onMouseDownCapture={props.onScrollView}\n            />\n\n            <SpeedDialAction\n                icon={<TuneIcon />}\n                tooltipTitle=\"Display Settings\"\n                onMouseDownCapture={() => setDisplaySettingsOpen(true)}\n            />\n        </BasePlayMenu>\n    );\n};\n\nexport default PagePlayMenu;\n","import { createTheme, Theme, ThemeProvider } from \"@mui/material\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { PlainFn } from \"common/PlainFn\";\nimport PagePlayContent, { PageDisplaySettings } from \"components/play/page/PagePlayContent\";\nimport PagePlayMenu from \"components/play/page/PagePlayMenu\";\nimport React, { useState } from \"react\";\n\ninterface PagePlayViewProps {\n    song: ChordSong;\n    onScrollView?: PlainFn;\n    onEditMode?: PlainFn;\n}\n\nconst PagePlayView: React.FC<PagePlayViewProps> = (\n    props: PagePlayViewProps\n): JSX.Element => {\n    const [displaySettings, setDisplaySettings] = useState<PageDisplaySettings>(\n        {\n            numberOfColumnsPerPage: 2,\n            fontSize: 14,\n            columnMargin: 20,\n            flipType: \"column\",\n        }\n    );\n\n    const playTheme = (theme: Theme): Theme => {\n        return createTheme({\n            ...theme,\n            typography: {\n                fontFamily: theme.typography.fontFamily,\n                fontWeightRegular: theme.typography.fontWeightRegular,\n                fontSize: displaySettings.fontSize,\n            },\n        });\n    };\n\n    return (\n        <>\n            <PagePlayMenu\n                displaySettings={displaySettings}\n                onDisplaySettingsChange={setDisplaySettings}\n                onScrollView={props.onScrollView}\n                onExit={props.onEditMode}\n            />\n            <ThemeProvider theme={playTheme}>\n                <PagePlayContent\n                    song={props.song}\n                    displaySettings={displaySettings}\n                />\n            </ThemeProvider>\n        </>\n    );\n};\n\nexport default PagePlayView;\n","import { Theme } from \"@mui/material\";\nimport { noopFn, PlainFn } from \"common/PlainFn\";\nimport React, { useCallback, useMemo, useRef } from \"react\";\nimport { useDebouncedCallback } from \"use-debounce/lib\";\n\nexport type BorderFns = {\n    getBorderColour: () => BorderColour;\n    rotateBorderColour: PlainFn;\n};\nexport type BorderColour = \"blue\" | \"purple\" | \"red\";\n\n// adding a debounce interval - when scrolling multiple highlights could activate that\n// rotates the colours a lot. this debounce keeps some stability in the colour rotation\n// a more robust solution would be to time it against the time that the user recognizes\n// a new colour emerging, but that requires more understanding into how to factor in\n// the scroll time and the CSS transitions\nconst rotateColourDebounceTime = 300;\n\n// a pastel-ish colour in the orange/red zone\n// that still contrasts with blue and purple\nconst redColor = \"#ff9679\";\n\nexport const ColourBorderContext =\n    React.createContext<BorderFns>({\n        getBorderColour: () => \"red\",\n        rotateBorderColour: noopFn,\n    });\n\ninterface ColourBorderProviderProps {\n    children: React.ReactNode | React.ReactNode[];\n}\n\nconst colourStyleMap = {\n    blue: (theme: Theme) => ({ borderColor: theme.palette.primary.main }),\n    purple: (theme: Theme) => ({ borderColor: theme.palette.secondary.main }),\n    red: (theme: Theme) => ({ borderColor: redColor }),\n};\n\nexport const useColourBorders = () => {\n    const { getBorderColour: getColour } = React.useContext(ColourBorderContext);\n\n    const currentColour = getColour();\n    return colourStyleMap[currentColour];\n};\n\nexport const ColourBorderProvider: React.FC<ColourBorderProviderProps> = (\n    props: ColourBorderProviderProps\n): JSX.Element => {\n    const currentColourRef = useRef<BorderColour>(\"red\");\n\n    const rotateColour = useDebouncedCallback(\n        () => {\n            switch (currentColourRef.current) {\n                case \"blue\": {\n                    currentColourRef.current = \"purple\";\n                    break;\n                }\n\n                case \"purple\": {\n                    currentColourRef.current = \"red\";\n                    break;\n                }\n\n                case \"red\": {\n                    currentColourRef.current = \"blue\";\n                    break;\n                }\n            }\n        },\n        rotateColourDebounceTime,\n        { leading: false, trailing: true }\n    );\n\n    const getColour = useCallback((): BorderColour => {\n        return currentColourRef.current;\n    }, []);\n\n    const colourContext = useMemo(\n        (): BorderFns => ({\n            getBorderColour: getColour,\n            rotateBorderColour: rotateColour,\n        }),\n        [getColour, rotateColour]\n    );\n\n    return (\n        <ColourBorderContext.Provider value={colourContext}>\n            {props.children}\n        </ColourBorderContext.Provider>\n    );\n};\n","import { Box, Theme } from \"@mui/material\";\nimport { useColourBorders } from \"components/play/scroll/colourBorderContext\";\nimport React from \"react\";\n\nconst transitionFunction = \"cubic-bezier(.19,1,.22,1)\";\n\ninterface ColourBorderBoxProps {\n    highlight?: boolean;\n    children: React.ReactElement;\n}\n\nconst ColourBorderBox = React.forwardRef(\n    (\n        props: ColourBorderBoxProps,\n        ref: React.ForwardedRef<Element>\n    ): JSX.Element => {\n        const colourBorderStyle = useColourBorders();\n\n        const containerStyle = (() => {\n            if (props.highlight === true) {\n                return colourBorderStyle;\n            }\n\n            // do nothing, but make it a function so it's easier to spread\n            // in the SX expression below\n            return (theme: Theme) => undefined;\n        })();\n\n        return (\n            <Box\n                ref={ref}\n                sx={(theme: Theme) => ({\n                    borderColor: \"transparent\",\n                    borderStyle: \"dashed\",\n                    borderRadius: theme.spacing(1.5),\n                    borderWidth: theme.spacing(0.3),\n                    transition: `border-color ${transitionFunction} 2s`,\n                    ...containerStyle(theme),\n                })}\n            >\n                {props.children}\n            </Box>\n        );\n    }\n);\n\nexport default ColourBorderBox;\n","import { PlainFn } from \"common/PlainFn\";\nimport { useEffect, useRef } from \"react\";\nimport { useInView } from \"react-intersection-observer\";\n\ntype IsInViewFn = () => boolean;\n\ninterface useInPageViewProps {\n    topMarginPercentage: number;\n    bottomMarginPercentage: number;\n    isInViewFnCallback: (isInView: IsInViewFn) => void;\n    inViewChanged?: PlainFn;\n}\n\ntype InViewRef = (node: Element | null | undefined) => void;\n\nexport const useInPageView = (props: useInPageViewProps): InViewRef => {\n    const { ref: inViewRef, inView } = useInView({\n        threshold: 0.9,\n        rootMargin: `${props.topMarginPercentage}% 0px ${props.bottomMarginPercentage}% 0px`,\n    });\n\n    const inViewCache = useRef(false);\n    const inViewChanged = props.inViewChanged;\n\n    props.isInViewFnCallback(() => inViewCache.current);\n\n    useEffect(() => {\n        const oldValue = inViewCache.current;\n        if (oldValue !== inView) {\n            inViewCache.current = inView;\n            inViewChanged?.();\n        }\n    }, [inView, inViewChanged]);\n\n    return inViewRef;\n};\n","import { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { PlainFn } from \"common/PlainFn\";\nimport PlayLine from \"components/play/common/PlayLine\";\nimport ColourBorderBox from \"components/play/scroll/ColourBorderBox\";\nimport { useInPageView } from \"components/play/scroll/useInPageView\";\nimport { useScrollable } from \"components/play/scroll/useScrollable\";\nimport React, { useCallback } from \"react\";\n\n// these values determine the portion of the viewport that is used to consider\n// the next line that the user can scroll to\n// e.g. top: -25, bottom: -25 is equivalent to the area 25% vh to 75% vh from the top\n\n// the top margin prevents scrolls that end up only scrolling 1-2 lines because\n// the upcoming section is very near the top\nconst topCurrentViewportMarginPercent = -25;\n// the bottom margin prevents a super big jump, so the user has some lookahead\n// and isn't scrolled to an entirely new section without continuity\nconst bottomCurrentViewportMarginPercent = -25;\n\n// these percentages project one viewport height above the current viewport,\n// that is, the area if the user scrolled up 100vh\n// this is used to scroll backwards and it can be 100% since the user\n// cannot lookahead backwards (nor is that a meaningful usecase)\nconst topPreviousViewportMarginPercent = 100;\nconst bottomPreviousViewportMarginPercent = -100;\n\ninterface ScrollablePlayLineProps {\n    chordLine: ChordLine;\n    colourBorder: boolean;\n    isInCurrentViewFnCallback: (isInView: () => boolean) => void;\n    isInPreviousViewFnCallback: (isInView: () => boolean) => void;\n    scrollFnCallback: (scrollFn: PlainFn) => void;\n    inViewChanged: PlainFn;\n}\n\nconst ScrollablePlayLine = React.memo(\n    (props: ScrollablePlayLineProps): JSX.Element => {\n        const currentPageInViewRef = useInPageView({\n            topMarginPercentage: topCurrentViewportMarginPercent,\n            bottomMarginPercentage: bottomCurrentViewportMarginPercent,\n            isInViewFnCallback: props.isInCurrentViewFnCallback,\n            inViewChanged: props.inViewChanged,\n        });\n\n        const previousPageInViewRef = useInPageView({\n            topMarginPercentage: topPreviousViewportMarginPercent,\n            bottomMarginPercentage: bottomPreviousViewportMarginPercent,\n            isInViewFnCallback: props.isInPreviousViewFnCallback,\n        });\n\n        const scrollRef = useScrollable(props.scrollFnCallback);\n\n        const captureRef = useCallback(\n            (elem: Element | null) => {\n                if (elem !== null) {\n                    scrollRef.current = elem;\n                    currentPageInViewRef(elem);\n                    previousPageInViewRef(elem);\n                } else {\n                    scrollRef.current = undefined;\n                    currentPageInViewRef(null);\n                    previousPageInViewRef(null);\n                }\n            },\n            [currentPageInViewRef, previousPageInViewRef, scrollRef]\n        );\n\n        return (\n            <ColourBorderBox ref={captureRef} highlight={props.colourBorder}>\n                <PlayLine chordLine={props.chordLine} />\n            </ColourBorderBox>\n        );\n    }\n);\n\nexport default ScrollablePlayLine;\n","import { PlainFn } from \"common/PlainFn\";\nimport React, { useCallback, useRef } from \"react\";\n\nexport const useScrollable = (\n    scrollFnCallback: (scrollFn: PlainFn) => void\n): React.MutableRefObject<Element | undefined> => {\n    const scrollRef = useRef<Element>();\n\n    const scrollFn = useCallback(\n        () => scrollRef.current?.scrollIntoView({ behavior: \"smooth\" }),\n        []\n    );\n\n    scrollFnCallback(scrollFn);\n\n    return scrollRef;\n};\n","import { Box, styled } from \"@mui/material\";\nimport { ChordLine } from \"common/ChordModel/ChordLine\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { Collection } from \"common/ChordModel/Collection\";\nimport { noopFn, PlainFn } from \"common/PlainFn\";\nimport { makeSection } from \"components/display/SectionHighlight\";\nimport { useNavigationKeys } from \"components/play/common/useNavigateKeys\";\nimport {\n    ColourBorderContext,\n    ColourBorderProvider,\n} from \"components/play/scroll/colourBorderContext\";\nimport ScrollablePlayLine from \"components/play/scroll/ScrollablePlayLine\";\nimport { List } from \"immutable\";\nimport React, { useCallback, useRef, useState } from \"react\";\nimport { useDebouncedCallback } from \"use-debounce/lib\";\n\nconst FullHeightBox = styled(Box)({\n    height: \"100vh\",\n});\n\ninterface ViewportLine {\n    id: string;\n    type: \"ViewportLine\";\n    chordLine: ChordLine;\n    isInCurrentView: () => boolean;\n    setIsInCurrentView: (fn: () => boolean) => void;\n    isInPreviousView: () => boolean;\n    setIsInPreviousView: (fn: () => boolean) => void;\n    scrollInView: PlainFn;\n    setScrollInView: (fn: PlainFn) => void;\n}\n\ninterface ScrollPlayContentProps {\n    song: ChordSong;\n}\n\nconst ScrollPlayContentWithColourProvider: React.FC<ScrollPlayContentProps> =\n    (props: ScrollPlayContentProps): JSX.Element => {\n        return (\n            <ColourBorderProvider>\n                <ScrollPlayContent song={props.song} />\n            </ColourBorderProvider>\n        );\n    };\n\nconst ScrollPlayContent: React.FC<ScrollPlayContentProps> = (\n    props: ScrollPlayContentProps\n): JSX.Element => {\n    const lines = props.song.chordLines;\n\n    const makeViewportLine = (chordLine: ChordLine): ViewportLine => {\n        const viewportLine: ViewportLine = {\n            id: chordLine.id,\n            type: \"ViewportLine\",\n            chordLine: chordLine,\n            isInCurrentView: () => {\n                console.error(\n                    \"isInCurrentView method not initialized\",\n                    chordLine.id\n                );\n                return false;\n            },\n            isInPreviousView: () => {\n                console.error(\n                    \"isInPreviousView method not initialized\",\n                    chordLine.id\n                );\n                return false;\n            },\n            scrollInView: () =>\n                console.error(\n                    \"scrollInView method not initialized\",\n                    chordLine.id\n                ),\n            setIsInCurrentView: noopFn,\n            setIsInPreviousView: noopFn,\n            setScrollInView: noopFn,\n        };\n\n        viewportLine.setIsInCurrentView = (inViewFn: () => boolean) => {\n            viewportLine.isInCurrentView = inViewFn;\n        };\n\n        viewportLine.setIsInPreviousView = (inViewFn: () => boolean) => {\n            viewportLine.isInPreviousView = inViewFn;\n        };\n\n        viewportLine.setScrollInView = (scrollFn: PlainFn) => {\n            viewportLine.scrollInView = scrollFn;\n        };\n\n        return viewportLine;\n    };\n\n    const makeViewportLines = (\n        chordLines: List<ChordLine>\n    ): Collection<ViewportLine> => {\n        const viewportLines: List<ViewportLine> =\n            chordLines.map(makeViewportLine);\n        return new Collection(viewportLines);\n    };\n\n    const lineRefs = useRef<Collection<ViewportLine>>(\n        makeViewportLines(lines.list)\n    );\n\n    const [nextScrollLine, setNextScrollLine] = useState<ViewportLine | null>(\n        null\n    );\n\n    const { rotateBorderColour: rotateColour } = React.useContext(\n        ColourBorderContext\n    );\n\n    const [previousScrollLine, setPreviousScrollLine] =\n        useState<ViewportLine | null>(null);\n\n    const findNextScrollLine = useCallback((): ViewportLine | null => {\n        let latestInViewLine: ViewportLine | null = null;\n\n        for (let i = 0; i < lineRefs.current.length; i++) {\n            const lineRef = lineRefs.current.getAtIndex(i);\n\n            if (!lineRef.isInCurrentView()) {\n                continue;\n            }\n\n            if (lineRef.chordLine.hasSection()) {\n                return lineRef;\n            }\n\n            latestInViewLine = lineRef;\n        }\n\n        return latestInViewLine;\n    }, []);\n\n    const findPreviousScrollLine = useCallback((): ViewportLine | null => {\n        let latestInViewLine: ViewportLine | null = null;\n\n        for (let i = lineRefs.current.length - 1; i >= 0; i--) {\n            const lineRef = lineRefs.current.getAtIndex(i);\n\n            if (!lineRef.isInPreviousView()) {\n                continue;\n            }\n\n            if (lineRef.chordLine.hasSection()) {\n                return lineRef;\n            }\n\n            latestInViewLine = lineRef;\n        }\n\n        return latestInViewLine;\n    }, []);\n\n    const setCachedSections = useCallback(() => {\n        const maybeNextScrollLine = findNextScrollLine();\n        if (maybeNextScrollLine !== nextScrollLine) {\n            setNextScrollLine(maybeNextScrollLine);\n        }\n\n        const maybePreviousScrollLine = findPreviousScrollLine();\n        if (maybePreviousScrollLine !== previousScrollLine) {\n            setPreviousScrollLine(maybePreviousScrollLine);\n        }\n    }, [\n        findNextScrollLine,\n        findPreviousScrollLine,\n        nextScrollLine,\n        setNextScrollLine,\n        previousScrollLine,\n        setPreviousScrollLine,\n    ]);\n\n    const handleViewportChange = useDebouncedCallback(setCachedSections, 300, {\n        leading: false,\n        trailing: true,\n        maxWait: 300,\n    });\n\n    const makePlayLine = (chordLine: ChordLine): React.ReactElement => {\n        const lineRef = lineRefs.current.get({\n            id: chordLine.id,\n            type: \"ViewportLine\",\n        });\n\n        const colourBorder =\n            chordLine.id === nextScrollLine?.id ||\n            chordLine.id === previousScrollLine?.id;\n\n        return (\n            <ScrollablePlayLine\n                key={chordLine.id}\n                chordLine={chordLine}\n                colourBorder={colourBorder}\n                isInCurrentViewFnCallback={lineRef.setIsInCurrentView}\n                isInPreviousViewFnCallback={lineRef.setIsInPreviousView}\n                scrollFnCallback={lineRef.setScrollInView}\n                inViewChanged={handleViewportChange}\n            />\n        );\n    };\n\n    const sections = props.song.timeSectionedChordLines.map(\n        (sectionLines: List<ChordLine>) =>\n            makeSection(sectionLines, makePlayLine)\n    );\n\n    const scrollDown = (): boolean => {\n        if (nextScrollLine === null) {\n            return false;\n        }\n\n        rotateColour();\n        nextScrollLine.scrollInView();\n        return true;\n    };\n\n    const scrollUp = (): boolean => {\n        if (previousScrollLine === null) {\n            return false;\n        }\n\n        rotateColour();\n        previousScrollLine.scrollInView();\n        return true;\n    };\n\n    useNavigationKeys(scrollDown, scrollUp);\n\n    return (\n        <Box>\n            {sections}\n            <FullHeightBox />\n        </Box>\n    );\n};\n\nexport default ScrollPlayContentWithColourProvider;\n","import ChromeReaderModeIcon from \"@mui/icons-material/ChromeReaderMode\";\nimport { SpeedDialAction } from \"@mui/material\";\nimport { PlainFn } from \"common/PlainFn\";\nimport BasePlayMenu from \"components/play/common/BasePlayMenu\";\nimport React from \"react\";\n\ninterface ScrollPlayMenuProps {\n    onPageView?: PlainFn;\n    onExit?: PlainFn;\n}\n\nconst ScrollPlayMenu: React.FC<ScrollPlayMenuProps> = (\n    props: ScrollPlayMenuProps\n): JSX.Element => {\n    return (\n        <BasePlayMenu onExit={props.onExit}>\n            <SpeedDialAction\n                icon={<ChromeReaderModeIcon />}\n                tooltipTitle=\"Page View\"\n                onMouseDownCapture={props.onPageView}\n            />\n        </BasePlayMenu>\n    );\n};\n\nexport default ScrollPlayMenu;\n","import { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { PlainFn } from \"common/PlainFn\";\nimport ScrollPlayContent from \"components/play/scroll/ScrollPlayContent\";\nimport ScrollPlayMenu from \"components/play/scroll/ScrollPlayMenu\";\nimport React from \"react\";\n\ninterface ScrollPlayViewProps {\n    song: ChordSong;\n    onPageView?: PlainFn;\n    onEditMode?: PlainFn;\n}\n\nconst ScrollPlayView: React.FC<ScrollPlayViewProps> = (\n    props: ScrollPlayViewProps\n): JSX.Element => {\n    return (\n        <>\n            <ScrollPlayMenu\n                onPageView={props.onPageView}\n                onExit={props.onEditMode}\n            />\n\n            <ScrollPlayContent song={props.song} />\n        </>\n    );\n};\n\nexport default ScrollPlayView;\n","import { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { MultiFC, transformToFC } from \"common/FunctionalComponent\";\nimport { PlaySongPath } from \"common/paths\";\nimport { PlainFn } from \"common/PlainFn\";\nimport CenteredLayout from \"components/display/CenteredLayout\";\nimport LoadingRender from \"components/loading/LoadingRender\";\nimport PagePlayView from \"components/play/page/PagePlayView\";\nimport ScrollPlayView from \"components/play/scroll/ScrollPlayView\";\nimport PlayerSectionProvider from \"components/PlayerSectionContext\";\nimport PlayerTimeProvider from \"components/PlayerTimeContext\";\nimport JamStation from \"components/track_player/JamStation\";\nimport TrackListProvider, {\n    TrackListChangeHandler,\n    TrackListLoad,\n} from \"components/track_player/providers/TrackListProvider\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Redirect, Route, useHistory } from \"react-router-dom\";\n\ninterface PlayProps {\n    song: ChordSong;\n    onEditMode?: PlainFn;\n    path: PlaySongPath;\n}\n\ninterface PlayScreenProps {\n    children: React.ReactElement;\n    song: ChordSong;\n}\n\nconst PlayScreen: React.FC<PlayScreenProps> = (\n    props: PlayScreenProps\n): JSX.Element => {\n    const trackPlayer: React.ReactNode = (() => {\n        if (props.song.isUnsaved()) {\n            return null;\n        }\n\n        return (\n            <TrackListProvider song={props.song}>\n                {(\n                    tracklistLoad: TrackListLoad,\n                    onRefresh: PlainFn,\n                    onChange: TrackListChangeHandler\n                ) => (\n                    <JamStation\n                        collapsedButtonSx={{\n                            backgroundColor: \"transparent\",\n                        }}\n                        timestampedSections={props.song.timestampedSections}\n                        tracklistLoad={tracklistLoad}\n                        onTrackListChanged={onChange}\n                        onRefresh={onRefresh}\n                    />\n                )}\n            </TrackListProvider>\n        );\n    })();\n\n    return (\n        <LoadingRender>\n            <CenteredLayout>\n                <PlayerTimeProvider>\n                    <PlayerSectionProvider song={props.song}>\n                        <Helmet>\n                            <title>\n                                {props.song.metadata.title !== \"\"\n                                    ? props.song.metadata.title\n                                    : \"New Song\"}\n                            </title>\n                        </Helmet>\n                        {props.children}\n                        {trackPlayer}\n                    </PlayerSectionProvider>\n                </PlayerTimeProvider>\n            </CenteredLayout>\n        </LoadingRender>\n    );\n};\n\nconst PlayRoutes: MultiFC<PlayProps> = (props: PlayProps): JSX.Element[] => {\n    const history = useHistory();\n\n    const pageViewPath = props.path.withPageView();\n    const scrollViewPath = props.path.withScrollView();\n\n    const switchToPageView = () => history.push(pageViewPath.URL());\n    const switchToScrollView = () => history.push(scrollViewPath.URL());\n\n    return [\n        <Route key={props.path.URL()} path={props.path.URL()} exact>\n            <Redirect to={scrollViewPath.URL()} />,\n        </Route>,\n        <Route key={pageViewPath.URL()} path={pageViewPath.URL()}>\n            <PlayScreen song={props.song}>\n                <PagePlayView\n                    song={props.song}\n                    onScrollView={switchToScrollView}\n                    onEditMode={props.onEditMode}\n                />\n            </PlayScreen>\n        </Route>,\n        <Route key={scrollViewPath.URL()} path={scrollViewPath.URL()}>\n            <PlayScreen song={props.song}>\n                <ScrollPlayView\n                    song={props.song}\n                    onPageView={switchToPageView}\n                    onEditMode={props.onEditMode}\n                />\n            </PlayScreen>\n        </Route>,\n    ];\n};\n\nexport default transformToFC(PlayRoutes);\n","import { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { MultiFC, transformToFC } from \"common/FunctionalComponent\";\nimport { SongIDPath } from \"common/paths\";\nimport ChordPaperScreen from \"components/edit/ChordPaper\";\nimport PlayRoutes from \"components/play/Play\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\nimport React from \"react\";\nimport { Redirect, Route, useHistory } from \"react-router-dom\";\n\ninterface SongRouterProps {\n    path: SongIDPath;\n    song: ChordSong;\n    songDispatch: React.Dispatch<ChordSongAction>;\n}\n\nconst SongRouter: MultiFC<SongRouterProps> = (\n    props: SongRouterProps\n): JSX.Element[] => {\n    const history = useHistory();\n\n    const editPath = props.path.withEditMode();\n    const playPath = props.path.withPlayMode();\n\n    const switchToEdit = () => {\n        history.push(editPath.URL());\n    };\n\n    const switchToPlay = () => {\n        history.push(playPath.URL());\n    };\n\n    return [\n        <Route key={props.path.URL()} path={props.path.URL()} exact>\n            <Redirect to={editPath.URL()} />,\n        </Route>,\n        <Route key={editPath.URL()} path={editPath.URL()}>\n            <ChordPaperScreen\n                song={props.song}\n                songDispatch={props.songDispatch}\n                onPlay={switchToPlay}\n            />\n        </Route>,\n        <Route key={playPath.URL()} path={playPath.URL()}>\n            <PlayRoutes\n                song={props.song}\n                onEditMode={switchToEdit}\n                path={playPath}\n            />\n        </Route>,\n    ];\n};\n\nexport default transformToFC(SongRouter);\n","import { css, cx } from \"@emotion/css\";\nimport {\n    createTheme as createMuiTheme,\n    PaletteColorOptions,\n    Theme,\n    ThemeProvider\n} from \"@mui/material\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport {\n    AboutPath,\n    GuitarDemoPath,\n    RootPath,\n    SongPath,\n    TutorialPath\n} from \"common/paths\";\nimport AboutScreen from \"components/about/About\";\nimport OneTimeMobileNotification from \"components/display/OneTimeMobileNotification\";\nimport DragAndDrop from \"components/edit/DragAndDrop\";\nimport GlobalKeyListenerProvider from \"components/GlobalKeyListener\";\nimport GuitarDemo from \"components/guitar/GuitarDemo\";\nimport SongFetcher from \"components/SongFetcher\";\nimport SongRouter from \"components/SongRouter\";\nimport TutorialRoutes from \"components/Tutorial\";\nimport {\n    SetUserContext,\n    User,\n    UserContext\n} from \"components/user/userContext\";\nimport { withCloudSaveSongContext } from \"components/WithSongContext\";\nimport { SnackbarProvider } from \"notistack\";\nimport React, { useState } from \"react\";\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\nimport { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\n\nconst lightBlue: PaletteColorOptions = {\n    main: \"#4fc3f7\",\n    light: \"#8bf6ff\",\n    dark: \"#0093c4\",\n    contrastText: \"#000000\",\n};\n\nconst purple: PaletteColorOptions = {\n    main: \"#844ffc\",\n    light: \"#bb7eff\",\n    dark: \"#4a1fc8\",\n    contrastText: \"#ffffff\",\n};\n\nconst green: PaletteColorOptions = {\n    main: \"#00c853\",\n    light: \"#5efc82\",\n    dark: \"#009624\",\n    contrastText: \"#000000\",\n};\n\nconst createTheme = (): Theme => {\n    return createMuiTheme({\n        palette: {\n            primary: lightBlue,\n            secondary: purple,\n            success: green,\n        },\n        typography: {\n            fontFamily: \"Merriweather\",\n            fontWeightRegular: 300,\n        },\n        components: {\n            MuiButton: {\n                styleOverrides: {\n                    root: {\n                        // overriding button styles\n                        // to resemble MUI 4 aesthetics\n                        color: \"black\",\n                        \"&:hover\": {\n                            backgroundColor: \"rgba(0, 0, 0, 0.04)\"\n                        },\n                    },\n                },\n            },\n        },\n    });\n};\n\nconst theme: Theme = createTheme();\n\nconst snackbarSuccessClassName = cx(css({ backgroundColor: green.main }));\n\nconst MainSong = withCloudSaveSongContext(SongRouter);\n\nconst AppContent: React.FC<{}> = (): JSX.Element => {\n    const [user, setUser] = useState<User | null>(null);\n    const handleUserChanged = (newUser: User | null) => setUser(newUser);\n\n    const loadSongPath = SongPath.root.withID(\":id\");\n\n    const routes = (\n        <Switch>\n            <Redirect from={RootPath.rootURL()} to={SongPath.newURL()} exact />\n\n            <Route key={SongPath.newURL()} path={SongPath.newURL()}>\n                <MainSong\n                    song={new ChordSong({})}\n                    path={SongPath.root.withNew()}\n                />\n            </Route>\n\n            <Route key={loadSongPath.URL()} path={loadSongPath.URL()}>\n                <SongFetcher>\n                    {(song: ChordSong) => (\n                        <MainSong\n                            song={song}\n                            path={loadSongPath.parent().withID(song.id)}\n                        />\n                    )}\n                </SongFetcher>\n            </Route>\n\n            <Route key={TutorialPath.rootURL()} path={TutorialPath.rootURL()}>\n                <TutorialRoutes />\n            </Route>\n\n            <Route key={AboutPath.rootURL()} path={AboutPath.rootURL()} exact>\n                <AboutScreen />\n            </Route>\n\n            <Route\n                key={GuitarDemoPath.rootURL()}\n                path={GuitarDemoPath.rootURL()}\n                exact\n            >\n                <GuitarDemo />\n            </Route>\n\n            <Redirect to={RootPath.rootURL()} />\n        </Switch>\n    );\n\n    return (\n        <UserContext.Provider value={user}>\n            <SetUserContext.Provider value={handleUserChanged}>\n                {routes}\n            </SetUserContext.Provider>\n        </UserContext.Provider>\n    );\n};\n\nconst App: React.FC<{}> = (): JSX.Element => {\n    return (\n        <HelmetProvider>\n            <ThemeProvider theme={theme}>\n                <Helmet\n                    titleTemplate=\"%s - Chord Paper\"\n                    defaultTitle=\"Chord Paper\"\n                />\n                <SnackbarProvider\n                    classes={{ variantSuccess: snackbarSuccessClassName }}\n                >\n                    <HashRouter>\n                        <DragAndDrop>\n                            <GlobalKeyListenerProvider>\n                                <AppContent />\n                                <OneTimeMobileNotification />\n                            </GlobalKeyListenerProvider>\n                        </DragAndDrop>\n                    </HashRouter>\n                </SnackbarProvider>\n            </ThemeProvider>\n        </HelmetProvider>\n    );\n};\n\nexport default App;\n","import { RequestError, useErrorSnackbar } from \"common/backend/errors\";\nimport { updateSong } from \"common/backend/requests\";\nimport { ChordSong } from \"common/ChordModel/ChordSong\";\nimport { EditSongPath } from \"common/paths\";\nimport { ChordSongAction } from \"components/reducer/reducer\";\nimport { User, UserContext } from \"components/user/userContext\";\nimport { isLeft } from \"fp-ts/lib/Either\";\nimport isOnline from \"is-online\";\nimport { useSnackbar } from \"notistack\";\nimport React, { useCallback, useEffect, useRef } from \"react\";\nimport { Prompt, useHistory } from \"react-router\";\n\nconst saveInterval = 10000;\n\nexport const useCloud = (): [\n    (song: ChordSong, action: ChordSongAction) => void,\n    (\n        song: ChordSong,\n        songDispatch: React.Dispatch<ChordSongAction>\n    ) => JSX.Element\n] => {\n    const dirtyRef = useRef(false);\n\n    const handleSongChanged = useCallback(\n        (_song: ChordSong, action: ChordSongAction) => {\n            if (action.type === \"set-last-saved-at\") {\n                return;\n            }\n\n            dirtyRef.current = true;\n        },\n        []\n    );\n\n    const useSave = (\n        song: ChordSong,\n        songDispatch: React.Dispatch<ChordSongAction>\n    ): JSX.Element => {\n        const user: User | null = React.useContext(UserContext);\n        const showError = useErrorSnackbar();\n        const { enqueueSnackbar } = useSnackbar();\n        const history = useHistory();\n\n        const shouldSave = useCallback(\n            (newSong: ChordSong): boolean => {\n                return (\n                    dirtyRef.current &&\n                    !newSong.isUnsaved() &&\n                    newSong.isOwner(user)\n                );\n            },\n            [user]\n        );\n\n        useEffect(() => {\n            const handleError = async (error: RequestError | string) => {\n                if (typeof error === \"string\") {\n                    enqueueSnackbar(error, { variant: \"error\" });\n                } else {\n                    await showError(error);\n                }\n                // set dirty back to true to try again later\n                dirtyRef.current = true;\n            };\n\n            const save = async (user: User, newSong: ChordSong) => {\n                const result = await updateSong(newSong, user.authToken);\n                if (isLeft(result)) {\n                    await handleError(result.left);\n                    return;\n                }\n\n                dirtyRef.current = false;\n\n                const deserializeResult = ChordSong.fromJSONObject(\n                    result.right\n                );\n                if (isLeft(deserializeResult)) {\n                    await handleError(\n                        \"Song results from backend can't be deserialized\"\n                    );\n                    return;\n                }\n\n                songDispatch({\n                    type: \"set-last-saved-at\",\n                    lastSavedAt: deserializeResult.right.lastSavedAt,\n                });\n            };\n\n            const saveIfChanged = async (newSong: ChordSong) => {\n                if (user === null) {\n                    return;\n                }\n\n                if (!shouldSave(newSong)) {\n                    return;\n                }\n\n                if (!(await isOnline())) {\n                    return;\n                }\n\n                await save(user, newSong);\n            };\n\n            const interval = setInterval(\n                () => saveIfChanged(song),\n                saveInterval\n            );\n            return () => clearInterval(interval);\n        }, [song, songDispatch, user, enqueueSnackbar, showError, shouldSave]);\n\n        useEffect(() => {\n            const unloadMessageFn = (event: Event) => {\n                if (shouldSave(song)) {\n                    event.preventDefault();\n                    event.returnValue = true;\n                }\n            };\n\n            window.addEventListener(\"beforeunload\", unloadMessageFn);\n\n            return () =>\n                window.removeEventListener(\"beforeunload\", unloadMessageFn);\n        }, [song, shouldSave]);\n\n        const showLeavingPrompt = () => {\n            if (\n                shouldSave(song) &&\n                EditSongPath.isEditMode(history.location.pathname)\n            ) {\n                return \"This page is asking you to confirm that you want to leave - data you have entered may not be saved.\";\n            }\n\n            return true;\n        };\n\n        return <Prompt message={showLeavingPrompt} />;\n    };\n\n    return [handleSongChanged, useSave];\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import App from \"App\";\nimport \"index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}